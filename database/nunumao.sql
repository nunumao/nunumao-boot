/*
MySQL Backup
Database: nunumao
Backup Time: 2021-12-10 20:23:26
*/

SET FOREIGN_KEY_CHECKS=0;
DROP TABLE IF EXISTS `nunumao`.`cms_article`;
DROP TABLE IF EXISTS `nunumao`.`cms_article_data`;
DROP TABLE IF EXISTS `nunumao`.`cms_category`;
DROP TABLE IF EXISTS `nunumao`.`cms_model`;
DROP TABLE IF EXISTS `nunumao`.`cms_model_field`;
DROP TABLE IF EXISTS `nunumao`.`cms_news`;
DROP TABLE IF EXISTS `nunumao`.`cms_site`;
DROP TABLE IF EXISTS `nunumao`.`cms_top`;
DROP TABLE IF EXISTS `nunumao`.`crm_case`;
DROP TABLE IF EXISTS `nunumao`.`crm_chance`;
DROP TABLE IF EXISTS `nunumao`.`crm_chance_condition`;
DROP TABLE IF EXISTS `nunumao`.`crm_contact`;
DROP TABLE IF EXISTS `nunumao`.`crm_contact_link`;
DROP TABLE IF EXISTS `nunumao`.`crm_contract`;
DROP TABLE IF EXISTS `nunumao`.`crm_contract_order`;
DROP TABLE IF EXISTS `nunumao`.`crm_customer`;
DROP TABLE IF EXISTS `nunumao`.`crm_event`;
DROP TABLE IF EXISTS `nunumao`.`crm_lead`;
DROP TABLE IF EXISTS `nunumao`.`crm_product`;
DROP TABLE IF EXISTS `nunumao`.`crm_product_category`;
DROP TABLE IF EXISTS `nunumao`.`crm_receipt`;
DROP TABLE IF EXISTS `nunumao`.`file`;
DROP TABLE IF EXISTS `nunumao`.`folder`;
DROP TABLE IF EXISTS `nunumao`.`system_action_log`;
DROP TABLE IF EXISTS `nunumao`.`system_area`;
DROP TABLE IF EXISTS `nunumao`.`system_depart`;
DROP TABLE IF EXISTS `nunumao`.`system_depart_rule`;
DROP TABLE IF EXISTS `nunumao`.`system_depart_rule_data`;
DROP TABLE IF EXISTS `nunumao`.`system_depart_user`;
DROP TABLE IF EXISTS `nunumao`.`system_groups`;
DROP TABLE IF EXISTS `nunumao`.`system_groups_rule`;
DROP TABLE IF EXISTS `nunumao`.`system_groups_rule_data`;
DROP TABLE IF EXISTS `nunumao`.`system_groups_user`;
DROP TABLE IF EXISTS `nunumao`.`system_message`;
DROP TABLE IF EXISTS `nunumao`.`system_position`;
DROP TABLE IF EXISTS `nunumao`.`system_rule`;
DROP TABLE IF EXISTS `nunumao`.`system_rule_api`;
DROP TABLE IF EXISTS `nunumao`.`system_rule_data_permission`;
DROP TABLE IF EXISTS `nunumao`.`system_user`;
DROP PROCEDURE IF EXISTS `nunumao`.`sp_field`;
CREATE TABLE `cms_article` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `category_id` int(11) DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `thumb` varchar(500) DEFAULT NULL,
  `keywords` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `view_num` int(11) DEFAULT '0',
  `is_top` tinyint(1) DEFAULT '0',
  `create_time` datetime DEFAULT NULL,
  `status` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=145 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='内容:文章模型表';
CREATE TABLE `cms_article_data` (
  `data_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `article_id` int(11) DEFAULT NULL,
  `content` text,
  `origin` text,
  PRIMARY KEY (`data_id`)
) ENGINE=InnoDB AUTO_INCREMENT=145 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='内容:文章模型扩展表';
CREATE TABLE `cms_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `site_id` int(11) DEFAULT NULL,
  `parent_id` int(11) DEFAULT '0',
  `root_id` varchar(255) DEFAULT '0',
  `model_id` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `count` int(11) DEFAULT '0',
  `alias` varchar(255) CHARACTER SET utf8 DEFAULT '',
  `intro` text CHARACTER SET utf8,
  `template` varchar(50) CHARACTER SET utf8 DEFAULT '',
  `log_template` varchar(50) CHARACTER SET utf8 DEFAULT '',
  `meta` text CHARACTER SET utf8,
  `sort` int(11) DEFAULT '0',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `zbp_cate_Order` (`sort`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8mb4 COMMENT='栏目表';
CREATE TABLE `cms_model` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `name` varchar(255) DEFAULT NULL COMMENT '名称',
  `table_name` varchar(255) DEFAULT NULL COMMENT '表名称',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT='模型表';
CREATE TABLE `cms_model_field` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `model_id` varchar(255) DEFAULT NULL COMMENT '模型ID',
  `type` varchar(255) DEFAULT NULL COMMENT '字段类型',
  `name` varchar(255) DEFAULT NULL COMMENT '名称',
  `field` varchar(255) DEFAULT NULL COMMENT '列名称',
  `tips` varchar(255) DEFAULT NULL COMMENT '表单提示',
  `css` text COMMENT '样式',
  `min_length` int(5) DEFAULT '0' COMMENT '最小长度',
  `max_length` int(5) DEFAULT '0' COMMENT '最大长度',
  `pattern` text COMMENT '正则表达式',
  `error` varchar(255) DEFAULT NULL COMMENT '错误提示',
  `is_core` tinyint(1) DEFAULT '0' COMMENT '核心字段[ 0 核心字段  | 1 扩展字段 ]',
  `is_system` tinyint(1) DEFAULT '0' COMMENT '系统字段[0 否|1 是]',
  `is_unique` tinyint(1) DEFAULT '0' COMMENT '必填字段[0 否|1 是]',
  `is_hidden` tinyint(1) DEFAULT '0' COMMENT '是否隐藏[0 否| 1 是]',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COMMENT='模型字段表';
CREATE TABLE `cms_news` (
  `id` int(11) NOT NULL,
  `cate_id` smallint(6) DEFAULT '0',
  `author_id` int(11) DEFAULT '0',
  `tag` varchar(255) DEFAULT '',
  `type` tinyint(4) DEFAULT '0',
  `alias` varchar(255) DEFAULT '',
  `is_top` tinyint(1) DEFAULT '0',
  `is_lock` tinyint(1) DEFAULT '0',
  `title` varchar(255) DEFAULT '',
  `thumb` text,
  `intro` text,
  `content` longtext,
  `markdown` longtext,
  `comm_nums` int(11) DEFAULT '0',
  `view_nums` int(11) DEFAULT '0',
  `like_nums` int(11) DEFAULT '0' COMMENT '点赞/喜欢',
  `template` varchar(50) DEFAULT '',
  `meta` longtext,
  `create_time` datetime DEFAULT NULL,
  `status` tinyint(4) DEFAULT '0',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `zbp_log_TPISC` (`type`,`create_time`,`is_top`,`status`,`cate_id`) USING BTREE,
  KEY `zbp_log_VTSC` (`view_nums`,`type`,`status`,`cate_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE `cms_site` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `name` varchar(255) DEFAULT NULL COMMENT '站点名称',
  `identifier` varchar(255) DEFAULT NULL COMMENT '站点标识',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态[0 禁用 | 1 启用]',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT='站点表';
CREATE TABLE `cms_top` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `category_id` int(11) DEFAULT NULL COMMENT '栏目ID',
  `detail_id` int(11) DEFAULT NULL COMMENT '内容ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COMMENT='推荐表';
CREATE TABLE `crm_case` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `name` varchar(255) DEFAULT NULL COMMENT '方案名称',
  `content` text COMMENT '方案内容',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='方案表';
CREATE TABLE `crm_chance` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '所属用户ID',
  `assign_user_id` varchar(255) DEFAULT NULL COMMENT '分配者ID',
  `assign_time` datetime DEFAULT NULL COMMENT '分配时间',
  `creator_user_id` varchar(255) DEFAULT NULL COMMENT '创建者ID',
  `editor_user_id` varchar(255) DEFAULT NULL COMMENT '编辑者ID',
  `serial` varchar(255) DEFAULT NULL COMMENT '商机编号',
  `name` varchar(255) DEFAULT NULL COMMENT '商机名称',
  `customer_id` varchar(255) DEFAULT NULL COMMENT '关联客户',
  `contact_id` varchar(255) DEFAULT NULL COMMENT '关联联系人',
  `expect_income` decimal(10,2) DEFAULT NULL COMMENT '预期收入',
  `expect_date` date DEFAULT NULL COMMENT '预期时间',
  `probability` tinyint(3) DEFAULT NULL COMMENT '成交机率',
  `actual_income` decimal(10,2) DEFAULT NULL COMMENT '实际收入',
  `actual_time` datetime DEFAULT NULL COMMENT '实际收入时间',
  `progress` tinyint(1) DEFAULT NULL COMMENT '商机进度[]',
  `remark` text COMMENT '备注',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态[0 执行中 | 1 成交 | 2 失败]',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='商机表';
CREATE TABLE `crm_chance_condition` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `chance_id` varchar(255) DEFAULT NULL COMMENT '商机ID',
  `content` text COMMENT '条件',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态[0 未达成 | 1 已达成]',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='商机签单条件表';
CREATE TABLE `crm_contact` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '归属用户ID',
  `lead_id` varchar(255) DEFAULT NULL COMMENT '关联线索',
  `assign_user_id` varchar(255) DEFAULT NULL COMMENT '分配用户ID',
  `assign_time` datetime DEFAULT NULL COMMENT '分配时间',
  `creator_user_id` varchar(255) DEFAULT NULL COMMENT '创建用户ID',
  `editor_user_id` varchar(255) DEFAULT NULL COMMENT '编辑用户ID',
  `customer_id` varchar(255) DEFAULT NULL COMMENT '关联客户',
  `serial` varchar(255) DEFAULT NULL COMMENT '编号',
  `name` varchar(255) DEFAULT NULL COMMENT '联系人姓名',
  `initial` varchar(255) DEFAULT NULL COMMENT '联系人首字母',
  `avatar` varchar(500) DEFAULT NULL COMMENT '头像',
  `gender` tinyint(1) DEFAULT NULL COMMENT '性别[0 未知 | 1 男 | 2 女]',
  `company` varchar(255) DEFAULT NULL COMMENT '公司名称',
  `position` varchar(255) DEFAULT NULL COMMENT '岗位',
  `department` varchar(255) DEFAULT NULL COMMENT '部门',
  `role` tinyint(1) DEFAULT NULL COMMENT '角色关系[0 经办人 | 1 决策人 | 2 使用人 | 3 意见影响人 | 4 商务决策]',
  `relation` tinyint(1) DEFAULT NULL COMMENT '亲密关系[0 初相识 | 1 一般关系 | 2 朋友关系 | 3 好友关系]',
  `birthday` date DEFAULT NULL COMMENT '生日',
  `hobby` varchar(500) DEFAULT NULL COMMENT '爱好',
  `remark` varchar(500) DEFAULT NULL COMMENT '备注',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `last_time` datetime DEFAULT NULL COMMENT '最后接触时间',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='联系人表';
CREATE TABLE `crm_contact_link` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `contact_id` varchar(255) DEFAULT NULL COMMENT '联系人ID',
  `type` tinyint(1) DEFAULT NULL COMMENT '类型[0 手机 | 1微信 | 2 地址 | 3 电话 | 4 QQ | 5 邮箱]',
  `data_value` varchar(500) DEFAULT NULL COMMENT '数据值',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='联系人联系方式表';
CREATE TABLE `crm_contract` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '所属用户',
  `creator_user_id` varchar(255) DEFAULT NULL COMMENT '创建人',
  `editor_user_id` varchar(255) DEFAULT NULL COMMENT '编辑人',
  `serial` varchar(255) DEFAULT NULL COMMENT '合同编号',
  `name` varchar(255) DEFAULT NULL COMMENT '合同名称',
  `customer_id` varchar(255) DEFAULT NULL COMMENT '客户ID',
  `chance_id` varchar(255) DEFAULT NULL COMMENT '商机ID',
  `type` tinyint(1) DEFAULT NULL COMMENT '合同类型[0 产品合同 | 1 服务合同 | 2 实施合同 | 3 续费合同 | 4 代理合同]',
  `total_price` decimal(10,2) DEFAULT NULL COMMENT '总金额',
  `collect_price` decimal(10,2) DEFAULT NULL COMMENT '已收款',
  `surplus_price` decimal(10,2) DEFAULT NULL COMMENT '未收款',
  `rebate_price` decimal(10,2) DEFAULT NULL COMMENT '商务费用',
  `sign_date` date DEFAULT NULL COMMENT '签订日期',
  `expire_date` date DEFAULT NULL COMMENT '合同期限[留空为永久]',
  `remark` text COMMENT '备注',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态[0 未执行 | 1 执行中 | 2 结束 | 3 终止]',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='合同表';
CREATE TABLE `crm_contract_order` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `contract_id` varchar(255) DEFAULT NULL COMMENT '合同ID',
  `name` varchar(255) DEFAULT NULL COMMENT '项目名称',
  `origin_price` decimal(10,2) DEFAULT NULL COMMENT '原价',
  `price` decimal(10,2) DEFAULT NULL COMMENT '成交价',
  `quantity` int(11) DEFAULT NULL COMMENT '数量',
  `unit` varchar(255) DEFAULT NULL COMMENT '单位',
  `total_price` decimal(10,2) DEFAULT NULL COMMENT '总价',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='合同项目表';
CREATE TABLE `crm_customer` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '归属用户ID',
  `lead_id` varchar(255) DEFAULT NULL COMMENT '关联线索',
  `assign_user_id` varchar(255) DEFAULT NULL COMMENT '分配用户ID',
  `assign_time` datetime DEFAULT NULL COMMENT '分配时间',
  `creator_user_id` varchar(255) DEFAULT NULL COMMENT '创建用户ID',
  `editor_user_id` varchar(255) DEFAULT NULL COMMENT '编辑用户ID',
  `last_user_id` varchar(255) DEFAULT NULL COMMENT '最终归属用户ID',
  `sea_id` varchar(255) DEFAULT NULL COMMENT '公海ID',
  `serial` varchar(255) DEFAULT NULL COMMENT '编号',
  `level` tinyint(1) DEFAULT NULL COMMENT '客户等级[ 0 未分级 | 1 小型客户 | 2 中型客户 | 3 大型客户 | 4 VIP客户 ]',
  `full_name` varchar(255) DEFAULT NULL COMMENT '客户公司全称',
  `short_name` varchar(255) DEFAULT NULL COMMENT '客户公司简称',
  `intro` varchar(800) DEFAULT NULL COMMENT '公司简介',
  `website` varchar(255) DEFAULT NULL COMMENT '网站',
  `phone` varchar(255) DEFAULT NULL COMMENT '手机号码',
  `zipcode` varchar(255) DEFAULT NULL COMMENT '邮编',
  `address` varchar(500) DEFAULT NULL COMMENT '客户地址',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `move_time` datetime DEFAULT NULL COMMENT '移入公海时间',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态 [ 0 初步接触 | 1 确定意向 | 2 重点跟进 | 3 签约客户 | 4 停滞客户 | 5 丢单客户 ]',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='客户表';
CREATE TABLE `crm_event` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '所属用户',
  `editor_user_id` varchar(255) DEFAULT NULL COMMENT '编辑用户',
  `content` text COMMENT '事件内容',
  `customer_id` varchar(255) DEFAULT NULL COMMENT '所属客户ID',
  `contact_id` varchar(255) DEFAULT NULL COMMENT '所属联系人ID',
  `chance_id` varchar(255) DEFAULT NULL COMMENT '所属商机ID',
  `location` tinyint(1) DEFAULT NULL COMMENT '事件地点[0 电话联系 | 1 上门洽谈 | 2 线上沟通 | 3 公司会谈 | 4 商务接待 | 5 邮件沟通]',
  `result` tinyint(1) DEFAULT NULL COMMENT '事件结果[0 客户不满意 | 1 客户满意 | 2 客户无表示 | 3 未联系上客户]',
  `event_date` date DEFAULT NULL COMMENT '事件日期',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='跟进记录表';
CREATE TABLE `crm_lead` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '所属用户ID',
  `assign_user_id` varchar(255) DEFAULT NULL COMMENT '分配者ID',
  `assign_time` datetime DEFAULT NULL COMMENT '分配时间',
  `creator_user_id` varchar(255) DEFAULT NULL COMMENT '创建者ID',
  `editor_user_id` varchar(255) DEFAULT NULL COMMENT '编辑者ID',
  `customer` varchar(255) DEFAULT NULL COMMENT '客户',
  `telephone` varchar(255) DEFAULT NULL COMMENT '座机',
  `contact` varchar(255) DEFAULT NULL COMMENT '联系人',
  `phone` varchar(255) DEFAULT NULL COMMENT '手机',
  `email` varchar(255) DEFAULT NULL COMMENT '电子邮箱',
  `address` varchar(500) DEFAULT NULL COMMENT '地址',
  `remark` varchar(500) DEFAULT NULL COMMENT '备注',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态[0 待处理 | 1 跟进中 | 2 已关闭 | 3 已转化]',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='线索表';
CREATE TABLE `crm_product` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `category_id` varchar(255) DEFAULT NULL COMMENT '所属分类',
  `serial` varchar(255) DEFAULT NULL COMMENT '产品编号',
  `name` varchar(255) DEFAULT NULL COMMENT '产品名称',
  `cost_price` decimal(10,2) DEFAULT NULL COMMENT '成本价',
  `selling_price` decimal(10,2) DEFAULT NULL COMMENT '销售价',
  `unit` varchar(255) DEFAULT NULL COMMENT '单位',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `remark` text COMMENT '备注',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态[0 停售 | 1 在售]',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='产品表';
CREATE TABLE `crm_product_category` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `parent_id` varchar(255) DEFAULT NULL COMMENT '上级ID',
  `name` varchar(255) DEFAULT NULL COMMENT '名称',
  `sort` int(255) DEFAULT NULL COMMENT '排序',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='产品分类表';
CREATE TABLE `crm_receipt` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '用户ID',
  `creator_user_id` varchar(255) DEFAULT NULL COMMENT '创建者ID',
  `editor_user_id` varchar(255) DEFAULT NULL COMMENT '编辑者ID',
  `contract_id` varchar(255) DEFAULT NULL COMMENT '合同ID',
  `pay_type` tinyint(1) DEFAULT NULL COMMENT '收款方式[0 银行转账 | 1 微信支付 | 2 支付宝 | 3 网银转账 | 4 现金 | 5 其他]',
  `price` decimal(10,2) DEFAULT NULL COMMENT '本次到账',
  `price_date` date DEFAULT NULL COMMENT '收款时间',
  `plan_price` decimal(10,2) DEFAULT NULL COMMENT '计划到账',
  `plan_date` date DEFAULT NULL COMMENT '计划时间',
  `diff` decimal(10,2) DEFAULT NULL COMMENT '实收与计划差距',
  `bill_type` tinyint(1) DEFAULT NULL COMMENT '票据类型[0 发票 | 1 收据 | 2 其他]',
  `bill_serial` varchar(255) DEFAULT NULL COMMENT '票据编号',
  `remark` text COMMENT '备注',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='收款表';
CREATE TABLE `file` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `folder_id` varchar(255) DEFAULT NULL COMMENT '目录ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '所属用户',
  `store_id` varchar(255) DEFAULT NULL COMMENT '所属商家',
  `name` varchar(255) DEFAULT NULL COMMENT '名称',
  `path` text COMMENT '路径',
  `file_name` varchar(500) DEFAULT NULL COMMENT '文件名称',
  `file_ext` varchar(255) DEFAULT NULL COMMENT '扩展名称',
  `file_full_name` varchar(255) DEFAULT NULL COMMENT '文件全名[文件名称+扩展名称]',
  `file_size` int(11) DEFAULT NULL COMMENT '文件大小',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='文件表';
CREATE TABLE `folder` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `prarent_id` varchar(255) DEFAULT NULL COMMENT '上级目录',
  `user_id` varchar(255) DEFAULT NULL COMMENT '所属用户',
  `store_id` varchar(255) DEFAULT NULL COMMENT '所属商家',
  `name` varchar(255) DEFAULT NULL COMMENT '名称',
  `is_system` tinyint(1) DEFAULT NULL COMMENT '系统',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='目录表';
CREATE TABLE `system_action_log` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '用户ID',
  `content` text COMMENT '内容',
  `params` text COMMENT '参数',
  `action` varchar(255) DEFAULT NULL COMMENT '操作类型',
  `ip` varchar(255) DEFAULT NULL COMMENT 'IP地址',
  `url` varchar(500) DEFAULT NULL COMMENT 'URL',
  `exec_time` int(11) DEFAULT NULL COMMENT '执行时间',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='操作日志';
CREATE TABLE `system_area` (
  `id` varchar(255) DEFAULT NULL COMMENT 'ID',
  `level` tinyint(4) DEFAULT '0' COMMENT '层级',
  `zip_code` char(6) DEFAULT '' COMMENT '邮政编码',
  `telephone_code` char(4) DEFAULT '' COMMENT '区号',
  `region` varchar(4) DEFAULT NULL COMMENT '大区名称',
  `ad_code` varchar(20) DEFAULT '' COMMENT '行政代码',
  `name` varchar(50) DEFAULT '' COMMENT '简称',
  `full_name` varchar(50) DEFAULT '' COMMENT '名称',
  `merge_name` varchar(255) DEFAULT '' COMMENT '组合名',
  `initial` varchar(1) DEFAULT NULL COMMENT '首字母',
  `pinyin` varchar(100) DEFAULT '' COMMENT '拼音',
  `latitude` decimal(12,8) DEFAULT '0.00000000' COMMENT '维度',
  `longitude` decimal(12,8) DEFAULT '0.00000000' COMMENT '经度',
  UNIQUE KEY `ad_code` (`ad_code`) USING BTREE,
  KEY `name` (`full_name`) USING BTREE,
  KEY `level` (`level`) USING BTREE
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='中国行政地区表';
CREATE TABLE `system_depart` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `parent_id` varchar(255) DEFAULT NULL COMMENT '上级ID',
  `type` tinyint(1) DEFAULT NULL COMMENT '类型[ 0 公司 | 1 部门 | 2 岗位 ]',
  `name` varchar(255) DEFAULT NULL COMMENT '部门名称',
  `telephone` varchar(255) DEFAULT NULL COMMENT '办公电话',
  `province` varchar(255) DEFAULT NULL COMMENT '省',
  `province_code` varchar(255) DEFAULT NULL COMMENT '省代码',
  `city` varchar(255) DEFAULT NULL COMMENT '市',
  `city_code` varchar(255) DEFAULT NULL COMMENT '市代码',
  `region` varchar(255) DEFAULT NULL COMMENT '区/县',
  `region_code` varchar(255) DEFAULT NULL COMMENT '区/县代码',
  `address` varchar(500) DEFAULT NULL COMMENT '地址',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态 [ 0 禁用 | 1 启用 ]',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='部门表';
CREATE TABLE `system_depart_rule` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `depart_id` varchar(255) DEFAULT NULL COMMENT '部门ID',
  `rule_id` varchar(255) DEFAULT NULL COMMENT '规则ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='部门权限表';
CREATE TABLE `system_depart_rule_data` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `depart_id` varchar(255) DEFAULT NULL COMMENT '部门ID',
  `rule_data_id` varchar(255) DEFAULT NULL COMMENT '数据权限ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='部门数据权限表';
CREATE TABLE `system_depart_user` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '用户ID',
  `depart_id` varchar(255) DEFAULT NULL COMMENT '部门ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='部门用户表';
CREATE TABLE `system_groups` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `name` varchar(255) DEFAULT NULL COMMENT '名称',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态[0 禁用 | 1 启用]',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='分组表';
CREATE TABLE `system_groups_rule` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `groups_id` varchar(255) DEFAULT NULL COMMENT '分组ID',
  `rule_id` varchar(255) DEFAULT NULL COMMENT '节点ID',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='分组权限表';
CREATE TABLE `system_groups_rule_data` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `groups_id` varchar(255) DEFAULT NULL COMMENT '分组ID',
  `rule_data_id` varchar(255) DEFAULT NULL COMMENT '数据规则ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='分组数据权限表';
CREATE TABLE `system_groups_user` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `groups_id` varchar(255) DEFAULT NULL COMMENT '分组ID',
  `user_id` varchar(255) DEFAULT NULL COMMENT '用户ID',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='分组用户表';
CREATE TABLE `system_message` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `type` tinyint(1) DEFAULT NULL COMMENT '类型[0 通知 | 1 私信]',
  `user_id` varchar(255) DEFAULT NULL COMMENT '用户ID',
  `depart_id` text COMMENT '部门ID(多部门 , 分割)',
  `name` varchar(255) DEFAULT NULL COMMENT '消息标题',
  `intro` varchar(500) DEFAULT NULL COMMENT '消息简介',
  `content` text COMMENT '消息内容',
  `link` varchar(500) DEFAULT NULL COMMENT '跳转连接',
  `is_read` tinyint(1) DEFAULT NULL COMMENT '读取[0 未读 | 1 已读]',
  `sended` tinyint(1) DEFAULT NULL COMMENT '传达[0 未送达 | 1 已送达]',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `status` tinyint(1) DEFAULT NULL COMMENT '状态',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='消息表';
CREATE TABLE `system_position` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `code` varchar(255) DEFAULT NULL COMMENT '岗位编码',
  `name` varchar(255) DEFAULT NULL COMMENT '岗位名称',
  `post_rank` tinyint(2) DEFAULT NULL COMMENT '职级',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态 [0 禁用 | 1 启用]',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='职务表';
CREATE TABLE `system_rule` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `parent_id` varchar(255) DEFAULT '0' COMMENT '上级菜单ID',
  `type` tinyint(2) DEFAULT NULL COMMENT '类型 [ 0 分组 | 1 功能 | 2 操作 ]',
  `name` varchar(255) DEFAULT NULL COMMENT '名称',
  `page` tinyint(1) DEFAULT '0' COMMENT '菜单类型[0 页面 | 1 操作]',
  `menu` tinyint(1) DEFAULT NULL COMMENT '菜单',
  `icon` varchar(255) DEFAULT NULL COMMENT '菜单图标',
  `url` varchar(255) DEFAULT NULL COMMENT '菜单路径',
  `path` text COMMENT '页面路径',
  `sort` int(5) DEFAULT NULL COMMENT '排序',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='节点表';
CREATE TABLE `system_rule_api` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `rule_id` varchar(255) DEFAULT NULL COMMENT '节点ID',
  `type` tinyint(1) DEFAULT NULL COMMENT '类型',
  `url` text COMMENT '接口地址',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='节点API表';
CREATE TABLE `system_rule_data_permission` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `rule_id` varchar(255) DEFAULT NULL COMMENT '节点ID',
  `api_id` varchar(255) DEFAULT NULL COMMENT '接口ID',
  `name` varchar(255) DEFAULT NULL COMMENT '名称',
  `field` varchar(255) DEFAULT NULL COMMENT '字段',
  `type` tinyint(2) DEFAULT NULL COMMENT '类型[0 隐藏 | 1 等于 | 2 大于 | 3 大于等于 | 4 小于 | 5 小于等于 | 6 不等于 | 7 模糊匹配 | 8 区间 | 9 不在区间 | 10 在列表中 | 不在列表中]',
  `value` varchar(255) DEFAULT NULL COMMENT '值',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='节点数据规则表';
CREATE TABLE `system_user` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `account` varchar(255) DEFAULT NULL COMMENT '账号',
  `password` varchar(255) DEFAULT NULL COMMENT '密码',
  `name` varchar(255) DEFAULT NULL COMMENT '姓名',
  `role` tinyint(255) DEFAULT NULL COMMENT '安全角色',
  `phone` varchar(255) DEFAULT NULL COMMENT '手机',
  `gender` tinyint(1) DEFAULT '0' COMMENT '性别',
  `nick_name` varchar(255) DEFAULT NULL COMMENT '昵称',
  `avatar` text COMMENT '头像',
  `email` varchar(255) DEFAULT NULL COMMENT '邮箱',
  `id_card` varchar(255) DEFAULT NULL COMMENT '身份证号',
  `work_no` varchar(255) DEFAULT NULL COMMENT '工号',
  `position` varchar(255) DEFAULT NULL COMMENT '职务',
  `birthday` date DEFAULT NULL COMMENT '生日',
  `chief` tinyint(1) DEFAULT NULL COMMENT '部门负责人[ 0 否 | 1 是 ]',
  `login_count` int(10) unsigned DEFAULT '0' COMMENT '登录次数',
  `last_login_ip` varchar(255) DEFAULT NULL COMMENT '最后登录IP',
  `last_login_time` datetime DEFAULT NULL COMMENT '最后登录时间',
  `origin` varchar(255) DEFAULT NULL COMMENT '注册来源[使用ClientID标记来源]',
  `is_admin` tinyint(1) DEFAULT '0' COMMENT '是否管理员',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `status` tinyint(1) DEFAULT '0' COMMENT '状态 [ -1 禁用 | 0 审核 | 1 正常 ]',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `唯一` (`account`) USING BTREE COMMENT '唯一约束'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户表';
CREATE DEFINER=`root`@`%` PROCEDURE `sp_field`(
	IN p_table VARCHAR(255),
	IN p_prefix VARCHAR(255)
)
BEGIN
	SELECT GROUP_CONCAT(CONCAT(p_prefix,column_name) SEPARATOR ',') AS field FROM information_schema.`COLUMNS` WHERE TABLE_SCHEMA = 'nunumao'
	AND TABLE_NAME = p_table;
END;
BEGIN;
LOCK TABLES `nunumao`.`cms_article` WRITE;
DELETE FROM `nunumao`.`cms_article`;
INSERT INTO `nunumao`.`cms_article` (`id`,`category_id`,`title`,`thumb`,`keywords`,`description`,`view_num`,`is_top`,`create_time`,`status`) VALUES (1, 7, 'VirtualBox+Ubuntu18.04 安装图解', '201805181526587353746788.png', 'ubuntu', '安装图解', 763, 0, '2019-04-21 22:23:53', 1),(2, 7, '阿里云免费CA证书配置Nginx HTTPS', '201805201526824382136021.png', NULL, NULL, 1108, 0, '2019-04-21 22:23:53', 1),(3, 23, 'Ubuntu 18.04 开启root ssh远程登录', '201805201526827489460066.png', NULL, NULL, 2549, 0, '2019-04-21 22:23:53', 1),(4, 23, 'Ubuntu 18.04 搭建 GitLab 服务器', '201805231527008614100486.png', NULL, NULL, 2374, 0, '2019-04-21 22:23:53', 1),(5, 23, 'Ubuntu替换阿里云软件源', 'ab3ce8fc2bcb1a9c9f4f427439489b4a7874.png', NULL, NULL, 860, 0, '2019-04-21 22:23:53', 1),(6, 23, 'Ubuntu 18.04 server 配置静态IP', '201805231527009341115373.png', NULL, NULL, 1004, 0, '2019-04-21 22:23:53', 1),(7, 23, 'Ubuntu18.04 安装 docker-ce', NULL, NULL, NULL, 750, 0, '2019-04-21 22:23:53', 1),(8, 7, 'GitLab+Walle实现PHP项目持续集成', NULL, NULL, NULL, 1, 0, '2019-04-21 22:23:53', 1),(9, 7, '从零开始搭建Vue2.x项目', '201805261527315311522670.png', NULL, NULL, 943, 0, '2019-04-21 22:23:53', 1),(10, 24, 'MySQL 主从同步（单主单从）', '201806021527879920211198.png', NULL, NULL, 810, 0, '2019-04-21 22:23:53', 1),(11, 27, 'Docker 安装Ubuntu容器 及 一些常用命令', NULL, NULL, NULL, 0, 0, '2019-04-21 22:23:53', 1),(12, 7, 'Sinopia搭建私有的NPM服务', NULL, NULL, NULL, 1029, 0, '2019-04-21 22:23:53', 1),(13, 23, 'Ubuntu18.04实验Keepalived+Nginx高可用Web负载均衡（主备模式）', '31c7dc2c149b1ee4bcd1a0b29511145c4595.png', NULL, NULL, 2319, 0, '2019-04-21 22:23:53', 1),(14, 17, 'SpringCloud（一）| eureka 服务注册和发现', '201807021530544735649571.png', NULL, NULL, 937, 0, '2019-04-21 22:23:53', 1),(15, 17, 'SpringCloud（二）| rest+ribbon 服务消费者', 'http://upload-images.jianshu.io/upload_images/2279594-9f10b702188a129d.png', NULL, NULL, 865, 0, '2019-04-21 22:23:53', 1),(16, 17, 'SpringCloud（三）| Feign 服务消费者', NULL, NULL, NULL, 844, 0, '2019-04-21 22:23:53', 1),(17, 17, 'SpringCloud（四）| Hystrix 断路器', NULL, NULL, NULL, 799, 0, '2019-04-21 22:23:53', 1),(18, 17, 'SpringCloud（五）| Hystrix Dashboard 断路器Hystrix仪表盘', NULL, NULL, NULL, 950, 0, '2019-04-21 22:23:53', 1),(19, 17, 'SpringCloud（六）| zuul 路由网关', NULL, NULL, NULL, 841, 0, '2019-04-21 22:23:53', 1),(20, 17, 'SpringCloud（七）| Spring Cloud Config 分布式配置中心', NULL, NULL, NULL, 897, 0, '2019-04-21 22:23:53', 1),(21, 17, 'SpringCloud（八）| Spring Cloud Config 高可用的分布式配置中心', NULL, NULL, NULL, 1705, 0, '2019-04-21 22:23:53', 1),(22, 7, 'SoftEther VPN 搭建远程办公环境', NULL, NULL, NULL, 3627, 0, '2019-04-21 22:23:53', 1),(23, 25, 'redis (一) | 安装与配置', '10f18a876aef928234e3b93d64a1160f6031.png', NULL, NULL, 649, 0, '2019-04-21 22:23:53', 1),(24, 25, 'redis (二) | 键（KEY）', 'e14e60b8fbd6c15fbd6743b67dc2c3235440.png', NULL, NULL, 417, 0, '2019-09-03 00:52:08', 1),(25, 20, 'swift (一) | 基础语法', NULL, NULL, NULL, 652, 0, '2019-04-21 22:23:53', 1),(26, 8, '自然拼读（一）| 概述', NULL, NULL, NULL, 653, 0, '2019-04-21 22:23:53', 1),(27, 8, '自然拼读（二）| 辅音字母的基础发音（掐头法）', NULL, NULL, NULL, 734, 0, '2019-04-21 22:23:53', 1),(28, 8, '自然拼读（三）| 辅音字母的基础发音（去尾法）', '201811271543254708427852.png', NULL, NULL, 755, 0, '2019-04-21 22:23:53', 1),(29, 20, 'swift (二) | 可选型', NULL, NULL, NULL, 552, 0, '2019-04-21 22:23:53', 1),(30, 8, '自然拼读（四）| 辅音字母的基础发音（对比法）', '201812051543942407578180.png', NULL, NULL, 629, 0, '2019-04-21 22:23:53', 1),(31, 8, '自然拼读（五）| 辅音字母的基础发音（其它法）', '201812051543942474421337.png', NULL, NULL, 551, 0, '2019-04-21 22:23:53', 1),(32, 18, '设计模式（一）| UML类图', '201812111544461502828555.png', NULL, NULL, 812, 0, '2019-04-21 22:23:53', 1),(33, 18, '设计模式（二）| 工厂模式', NULL, NULL, NULL, 0, 0, '2019-04-21 22:23:53', 1),(34, 16, 'spring boot + mybatis + mybatis plus + druid', NULL, NULL, NULL, 911, 0, '2019-04-21 22:23:53', 1),(35, 14, 'SCSS (一) | 环境安装与IDE配置', NULL, NULL, NULL, 603, 0, '2019-04-21 22:23:53', 1),(36, 14, 'SCSS (二) | 嵌套规则与引用父选择器:&amp;', NULL, NULL, NULL, 623, 0, '2019-04-21 22:23:53', 1),(37, 14, 'SCSS (三) | 变量与数据类型', NULL, NULL, NULL, 592, 0, '2019-04-21 22:23:53', 1),(38, 7, '自制操作系统（一）|  环境搭建与HelloWorld', '201903190008084419766.png', NULL, NULL, 485, 0, '2019-04-21 22:23:53', 1),(39, 20, 'swift (三) | 字典', NULL, NULL, NULL, 558, 0, '2019-04-21 22:23:53', 1),(40, 7, '自制操作系统（二）| 用汇编写一个操作系统.img', NULL, NULL, NULL, 965, 0, '2019-04-21 22:23:53', 1),(41, 14, 'SCSS (四) | 运算', NULL, NULL, NULL, 0, 0, '2019-04-21 22:23:53', 1),(42, 7, '自制操作系统（三）| 又用汇编写操作系统.img（稍微能阅读的版本）', NULL, NULL, NULL, 769, 0, '2019-04-21 22:23:53', 1),(43, 7, '自制操作系统（四）| 双用汇编写操作系统（代码注释讲解）', NULL, NULL, NULL, 459, 0, '2019-04-21 22:23:53', 1),(44, 7, '自制操作系统（五）| 先制作启动区', NULL, NULL, NULL, 403, 0, '2019-04-21 22:23:53', 1),(45, 7, '自制操作系统（六）| 使用Makefile执行编译计划', NULL, NULL, NULL, 537, 0, '2019-04-21 22:23:53', 1),(46, 7, '自制操作系统（七）| 制作真正的IPL', NULL, NULL, NULL, 508, 0, '2019-04-21 22:23:53', 1),(47, 7, '自制操作系统（八）| 读取磁盘出错重试和读取更多内容', NULL, NULL, NULL, 459, 0, '2019-04-21 22:23:53', 1),(48, 7, '自制操作系统（九）| 从启动区执行操作系统', '201904030258262539131.png', NULL, NULL, 507, 0, '2019-04-21 22:23:53', 1),(49, 7, '自制操作系统（十）| 进入32位模式并导入C语言', '201904040204171080178.png', NULL, NULL, 646, 0, '2019-04-21 22:23:53', 1),(50, 18, '设计模式（三）| 代理模式', NULL, NULL, NULL, 513, 0, '2019-04-21 22:23:53', 1),(51, 7, '自制操作系统（十一）| 画面显示', NULL, NULL, NULL, 498, 0, '2019-04-21 22:23:53', 1),(52, 7, '自制操作系统（十二）| 色号设定与绘制桌面', '201904100004575789930.png', NULL, NULL, 583, 0, '2019-04-21 22:23:53', 1),(53, 7, '自制操作系统（十三）| 接收启动信息', NULL, NULL, NULL, 552, 0, '2019-04-21 22:23:53', 1),(54, 15, 'Java动态代理', '041271c50821480e9458037892f5866b.png', NULL, NULL, 56, 0, '2019-04-21 22:23:53', 1),(55, 7, '自制操作系统（十四）| 显示字符串', '201904120150387558902.png', NULL, NULL, 578, 0, '2019-04-21 22:23:53', 1),(56, 22, '零基础学运营 (一) | 运营概述 ', 'e25cb0800fe442edb42ba5be8a6020f4.png', NULL, NULL, 522, 0, '2019-04-28 11:37:06', 1),(57, 22, '零基础学运营 (二) | 核心任务--流量建设、用户运营', 'e541739545984bc4bd1b69c23aff6fdc.png', NULL, NULL, 426, 0, '2019-04-28 10:28:56', 1),(58, 22, '零基础学运营 (三) | 内容运营', '328cc92eb22d4dbfa712da5e2399c0ec.png', NULL, NULL, 457, 0, '2019-04-28 11:35:19', 1),(59, 22, '零基础学运营 (四) | 内容运营的初期事项', '61b262ab91ce4779b915eb5580db8085.png', NULL, NULL, 457, 0, '2019-04-29 11:29:30', 1),(60, 22, '零基础学运营 (五) | 建立内容规范与推送渠道选择', '45cb35b3e3974fc59a8630fb1a703c40.png', NULL, NULL, 527, 0, '2019-05-02 11:07:52', 1),(61, 22, '零基础学运营 (六) | 写一个好文案', 'b6f7f2705cff4700aa81241c77e50164.png', NULL, NULL, 463, 0, '2019-05-02 11:13:53', 1),(62, 22, '零基础学运营 (七) | 判断推送效果', 'c2e14e69989642e8b1fc640fe7269f1a.png', NULL, NULL, 811, 0, '2019-05-03 11:37:48', 1),(63, 22, '零基础学运营 (八) | 内容的推荐与整合、实现自运营', 'f044d1b390674c3487d9bcedaf7a1902.png', NULL, NULL, 423, 0, '2019-05-04 11:51:31', 1),(64, 22, '零基础学运营 (九) | 公共平台内容运营的步骤', '3f1c580070794dcca27dab58147fbb11.png', NULL, NULL, 523, 0, '2019-05-05 11:09:23', 1),(65, 22, '零基础学运营 (十) | 内容运营的核心', '501e15d6b913a0f769653c2c749b4f576651.png', NULL, NULL, 425, 0, '2019-05-10 02:13:44', 1),(66, 22, '零基础学运营 (十一) | 让内容健康的流转', 'd339b9f8632f1e3c67b532dc6cca86fd8890.png', NULL, NULL, 452, 0, '2019-05-12 23:32:37', 1),(67, 22, '零基础学运营 (十二) | 如何让社区用户动起来', '1613b04ec194b10bf7c481806061b5e89781.png', NULL, NULL, 477, 0, '2019-05-13 23:06:24', 1),(68, 22, '零基础学运营 (十三) | 活动运营的基本流程', 'f22841d341c19e59b5fbc2a92bf4e2536345.png', NULL, NULL, 466, 0, '2019-05-14 23:29:34', 1),(69, 22, '零基础学运营 (十四) | 活动设计与成本预算', '0d7719ff28ad002f627a87f7db22622e6389.png', NULL, NULL, 434, 0, '2019-05-15 23:55:28', 1),(70, 22, '零基础学运营 (十五) | 如何写活动策划', 'bd9cb437e557f299f085658ccb5c2a844395.png', NULL, NULL, 422, 0, '2019-05-16 23:42:09', 1),(71, 22, '零基础学运营 (十六) | 活动风险管控与应急预案', '440b8f3ad3e08f30a2b9029412ad60f28816.png', NULL, NULL, 630, 0, '2019-05-19 23:39:36', 1),(72, 22, '零基础学运营 (十七) | 活动数据监测与应对策略', '9a43f165cc603f6d77580f03d7ce71cd5456.png', NULL, NULL, 402, 0, '2019-05-20 23:43:50', 1),(73, 22, '零基础学运营 (十八) | 活动完成设计之后与活动总结', 'b081f563d5628c9165b5dc29501d3dbe7217.png', NULL, NULL, 491, 0, '2019-05-22 00:17:54', 1),(74, 22, '零基础学运营 (十九) | 以系统的观念对待活动策划', '375f790bef55a68b8ac92b9b27587b5f6125.png', NULL, NULL, 522, 0, '2019-05-23 00:11:52', 1),(75, 22, '零基础学运营 (二十) | 内部活动与联合活动', '0d572eb955158069c38408f18183b0d65173.png', NULL, NULL, 498, 0, '2019-05-24 23:57:44', 1),(76, 22, '零基础学运营 (二十一) | 用户运营的工作内容', '2410855d8ed31029e8866ded64aed1f16606.png', NULL, NULL, 524, 0, '2019-05-26 00:29:55', 1),(77, 22, '零基础学运营 (二十二) | 关于开源那点事', '437f5d90809f6ae6d47674dd881dffb59776.png', NULL, NULL, 492, 0, '2019-05-28 00:00:52', 1),(78, 22, '零基础学运营 (二十三) | 节流到底节什么流', 'e765f5d53bc0c3968ce6c8d0495c6f541054.png', NULL, NULL, 518, 0, '2019-05-28 23:38:44', 1),(79, 22, '零基础学运营 (二十四) | 当用户流失了，我们做什么', '6a9b771dde39bf0e6c8bf986c3be2bb55028.png', NULL, NULL, 495, 0, '2019-06-02 00:54:47', 1),(80, 22, '零基础学运营 (二十五) | 促进用户活跃是个基本功', '3ea0b530e05a5ca6f29497bf992965047454.png', NULL, NULL, 521, 0, '2019-06-03 00:26:28', 1),(81, 22, '零基础学运营 (二十六) | 花了钱的用户才是好用户', 'd850c75dddc3d002910c90b17773f8a15485.png', NULL, NULL, 522, 0, '2019-06-09 22:42:16', 1),(82, 20, 'swift (四) | 数组', '24f32753a3153725292452c7e5ec99e35160.png', NULL, NULL, 521, 0, '2019-06-09 22:52:01', 1),(83, 22, '零基础学运营 (二十七) | 市场拉用户，运营留用户', '44d7ba1491407bd16712b638765908477271.png', NULL, NULL, 507, 0, '2019-06-10 23:25:07', 1),(84, 20, 'swift (五) | 枚举', '', NULL, NULL, 0, 0, '2019-06-11 00:32:05', 1),(85, 10, '摄影入门 (一) | 什么样的照片才算好照片', '21deb535b09e1ec39fa4e05cc4f68d251983.png', NULL, NULL, 495, 0, '2019-06-18 00:32:04', 1),(86, 10, '摄影入门 (二) | 正确持机完成初次拍摄', '85edee9a1c7edab85428f484dea16d641725.png', NULL, NULL, 769, 0, '2019-06-18 21:59:25', 1),(87, 10, '摄影入门 (三) | 常用的场景拍摄模式', '4d52a00f43ce8eb0657e43f65e43404c6347.png', NULL, NULL, 576, 0, '2019-06-19 22:03:18', 1),(88, 10, '摄影入门 (四) | 了解曝光', '075876843d6b39102a9ca88abe7fe43a4984.png', NULL, NULL, 707, 0, '2019-06-21 17:04:41', 1),(89, 10, '摄影入门 (五) | 光圈', '8a1290f93c831f043b8f7fe6a9da0c663403.png', NULL, NULL, 881, 0, '2019-06-24 22:33:42', 1),(90, 10, '摄影入门 (六) | 快门', '4444cc25297a69e975e85f3d607a609c3079.png', NULL, NULL, 1016, 0, '2019-06-28 23:43:49', 1),(91, 10, '摄影入门 (七) | 感光度', 'aad6167a26b5a495264f8212d5577d209505.png', NULL, NULL, 1167, 0, '2019-06-30 22:52:46', 1),(92, 10, '摄影入门 (八) | 曝光模式选择', '674abeb0498a771f57b12341475a51a81106.png', NULL, NULL, 639, 0, '2019-07-06 23:07:48', 1),(93, 10, '摄影入门 (九) | 测光方式的选择', '743db17e22a76df5b1b068a5733243c24689.png', NULL, NULL, 737, 0, '2019-07-08 01:10:08', 1),(94, 10, '摄影入门 (十) | 曝光补偿和包围曝光', '3399ccdc8e379b6862fb2cf642662e9d6344.png', NULL, NULL, 599, 0, '2019-07-17 07:31:09', 1),(95, 10, '摄影入门 (十一) | 景深控制', '326f4448741d61892d9f5be04ec9b0632316.png', NULL, NULL, 607, 0, '2019-07-21 07:42:59', 1),(96, 10, '摄影入门 (十二) | 色温与白平衡', 'd807f2a5c11e0851908a0c9e8466a5f81366.png', NULL, NULL, 736, 0, '2019-07-23 06:54:01', 1),(97, 10, '摄影入门 (十三) | 拍摄位置与画面构成', '819767ed671cb0bf94ca8df8b00a04ef5833.png', NULL, NULL, 1222, 0, '2019-07-23 21:58:57', 1),(98, 10, '摄影入门 (十四) | 奇妙的点、线、面', '39cfb3235853cfc9aa90aee20ea2d7881157.png', NULL, NULL, 850, 0, '2019-08-25 21:20:03', 1),(99, 25, 'redis (三) | 字符串（String）', 'b832146c005b14c64273c1c4acd0b8688155.png', NULL, NULL, 477, 0, '2019-09-03 11:39:03', 1),(100, 25, 'redis (四) | 哈希(Hash)', 'ab62c59cc673a53a86766df3e811f2e31988.png', NULL, NULL, 474, 0, '2019-09-03 23:57:46', 1),(101, 25, 'redis (五) | 列表(List)', 'ef605b6df615f0d56a063a6d227c78257496.png', NULL, NULL, 453, 0, '2019-09-05 00:23:43', 1),(102, 25, 'redis (六) | 集合(Set)', '1b9103f9966bca5a520811ee523bf61a5449.png', NULL, NULL, 472, 0, '2019-09-06 00:10:48', 1),(103, 25, 'redis (七) | 有序集合(sorted set)', 'bc9f03a1a805d6c4c0c9cd6337b8f2f23774.png', NULL, NULL, 405, 0, '2019-09-16 00:17:27', 1),(104, 25, 'redis (八) | Redis HyperLogLog', '', NULL, NULL, 0, 0, '2019-09-16 22:51:56', 1),(105, 10, '摄影入门 (十五) | 常见的几种摄影构图方法', '062c0271519fbea7353a53039b7cd6bf8597.png', NULL, NULL, 871, 0, '2019-10-08 00:55:26', 1),(106, 20, 'IOS | 使用xib开发项目（不使用storyboard）', '2a91415eb3c35fc95abdee9be0cda65a9647.png', NULL, NULL, 813, 0, '2019-10-10 00:21:26', 1),(107, 15, 'Maven 教程（一） | Mac下安装Maven', '899fc6f5ba556f7a5d53fcfb6c9f6f951617.png', NULL, NULL, 648, 0, '2019-10-23 00:34:09', 1),(108, 15, 'nexus 3.x 安装教程', '88b4578330c24a2925358747c3e234a81974.png', NULL, NULL, 833, 0, '2019-10-28 00:16:57', 1),(109, 15, 'Maven 教程（二） | 构建JAVA项目', '1a65ebc7ffcb8d5b431b4780c63eee339567.png', NULL, NULL, 556, 0, '2019-10-28 00:52:24', 1),(110, 15, 'Maven工程与Nexus私服的基本使用实操', '54233279be2205c32eefe683dc17a1988651.png', NULL, NULL, 538, 0, '2019-11-13 01:09:07', 1),(111, 16, 'spring security 模块功能说明', '', NULL, NULL, 0, 0, '2019-12-04 21:05:44', 1),(112, 27, 'docker 分配宿主机网段 IP 及固定容器 IP', '30dd09c8a120b88323ea58db5d3255cb1404.png', NULL, NULL, 801, 0, '2020-01-07 22:50:48', 1),(113, 16, 'SpringBoot 操作 MongoDB GridFS', 'de56348ec726495b6f7ebbdbb23d1b444629.png', NULL, NULL, 1110, 0, '2020-01-09 00:34:09', 1),(114, 16, 'SpringBoot 按日期输出日志文件', '14b35b32a80bad83ad13f633421bc2ca6130.png', NULL, NULL, 1483, 0, '2020-01-09 22:55:45', 1),(115, 17, 'spring cloud alibaba (一) | Nacos 注册中心 ', '04bcad3ad06d5cc9bf56869f7a81adce2567.png', NULL, NULL, 376, 0, '2020-03-31 12:19:15', 1),(116, 24, 'MySQL 开启远程登录 ', 'fce511174ef2d8d47566ca0167b92cf83052.png', NULL, NULL, 374, 0, '2020-04-02 23:47:29', 1),(117, 26, 'Elasticsearch (一) | 安装 Elasticsearch', 'a381aeaa796e591624d0379a339f7acd9541.png', NULL, NULL, 470, 0, '2020-05-11 00:37:39', 1),(118, 17, 'spring cloud alibaba (二) | 分布式事务 seata', '', NULL, NULL, 0, 0, '2020-05-15 22:55:20', 1),(119, 26, 'Elasticsearch (二) | 安装 Kibana', 'a064a1101914881d1e3576d5a78510607075.png', NULL, NULL, 400, 0, '2020-05-16 00:02:29', 1),(120, 11, 'JavaScript 模块化规范 (一) | CommonJS', 'd5312a25964de26ba70475a6546ea82c7571.png', NULL, NULL, 353, 0, '2020-05-17 16:52:09', 1),(121, 11, 'JavaScript 模块化规范 (二) | ES6', 'b459888ab6b6ae1d916c57698fd443211488.png', NULL, NULL, 441, 0, '2020-05-17 17:35:35', 1),(122, 22, '零基础学运营 (二十八) | 用户激励', '6c3d8a46b8dc3a8633114f8899fbc8c46268.png', NULL, NULL, 336, 0, '2020-05-23 23:18:58', 1),(123, 22, '零基础学运营 (二十九) | 分级管理，用户运营的必备手段', '34006495326319b3dc38b3e5418248722510.png', NULL, NULL, 364, 0, '2020-06-01 23:10:15', 1),(124, 10, '摄影入门 (十六) | 认识光', '797fd8fe3ddad72c4a1020e79e1cd6d25752.png', NULL, NULL, 419, 0, '2020-06-01 23:47:53', 1),(125, 10, '摄影入门 (十六) | 摄影用光和造型', '', NULL, NULL, 0, 0, '2020-06-03 23:53:46', 1),(126, 16, 'spring boot 缓存 | 默认缓存', '59c6efe6122af52363837c25652ac0bc7189.png', NULL, NULL, 477, 0, '2020-06-07 16:10:33', 1),(127, 16, 'spring boot 缓存 | Redis 缓存', '01b101e00c8615f70ba227ef7370e9583916.png', NULL, NULL, 567, 0, '2020-06-08 21:55:47', 1),(128, 9, '游戏辅助 (一) | FPS游戏查找人物坐标', '7adb3b84d3e844bb3e01752aa3e044f04763.png', NULL, NULL, 910, 0, '2020-07-28 22:49:05', 1),(129, 9, '游戏辅助 (二) | FPS游戏查找敌人坐标', 'cba1e0587fa3e1e99028465ba215c3a51350.png', NULL, NULL, 1329, 0, '2020-07-29 18:59:23', 1),(130, 15, 'JVM 深入理解 (一) | JVM 的概述及 java 代码执行流程', 'd19665f2c5462cbffe5886b42ac9fc143065.png', NULL, NULL, 481, 0, '2020-08-04 12:41:49', 1),(131, 15, 'JVM 深入理解 (二) | JVM 指令集架构 及 JVM 生命周期', '44605305fe67a05e301fbcb5d41bca631303.png', NULL, NULL, 485, 0, '2020-08-05 23:11:06', 1),(132, 15, 'JVM 深入理解 (三) | 类加载器子系统', 'b1054de6bc5140dfcf038d105f5f7f8d4846.png', NULL, NULL, 537, 0, '2020-08-08 00:08:24', 1),(133, 15, 'JVM 深入理解 (四) | 类加载器', '7bc178090bef7937fd6e6fc7888ea8a55458.png', NULL, NULL, 453, 0, '2020-08-22 21:38:22', 1),(134, 7, '汇编语言 (一) | 基础知识', 'dc4f877f78e06f06bc740e95885e8f507987.png', NULL, NULL, 563, 0, '2020-08-22 23:51:19', 1),(135, 15, 'JVM 深入理解 (五) | 双亲委派机制 & 沙箱安全机制', 'b7fbd6152b4fc1f1ca6de20d557d3d322212.png', NULL, NULL, 794, 0, '2020-08-25 00:18:53', 1),(136, 22, '零基础学运营 (三十) | 如何获得种子用户', '05afcb6aa74a91e8c1636aa9e8a4d3967880.png', NULL, NULL, 416, 0, '2020-11-14 00:10:03', 1),(137, 15, 'JVM 深入理解 (六) | 类的主动使用与被动使用', '400947f6594c5e3ec4457d53d31e1c948601.png', NULL, NULL, 306, 0, '2021-01-26 23:53:28', 1),(138, 26, 'Elasticsearch (三) | 基本的增删改查操作', '', NULL, NULL, 0, 0, '2021-02-01 22:47:35', 1),(139, 15, 'JVM 深入理解 (七) | PC寄存器', '15d7ed256e9710f79de802f87b6fd60d1517.png', NULL, NULL, 227, 0, '2021-03-15 22:40:59', 1),(140, 25, 'redis (八) | spring boot 整合 Redis', 'deca3599525a49e9d744c711be7bbb0d9713.png', NULL, NULL, 172, 0, '2021-05-01 01:32:09', 1),(141, 24, 'MyCat | 读写分离', '7ba12f04550d6789f7cac700c7f1f3e19914.png', NULL, NULL, 174, 0, '2021-05-11 23:03:06', 1),(142, 17, 'Spring Cloud Alibaba | Sentinel 流量监控与防御', 'cc2073f3f3a87c4cee1c3aad7abae5299194.png', NULL, NULL, 146, 0, '2021-05-23 13:32:28', 1),(143, 10, '绝世美姿 | 规范脊椎姿势', '6c785ffae7539129f37559436754b0215912.png', NULL, NULL, 81, 0, '2021-07-04 00:13:18', 1),(144, 7, '易经 (一) |  八卦定乾坤', '9c11bb135d0c4e4ab433bf2bf71772a97013.png', NULL, NULL, 27, 0, '2021-07-26 23:32:35', 1);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`cms_article_data` WRITE;
DELETE FROM `nunumao`.`cms_article_data`;
INSERT INTO `nunumao`.`cms_article_data` (`data_id`,`article_id`,`content`,`origin`) VALUES (1, 1, '<!--more--><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587353746788.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587398250256.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587527620743.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587590846359.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587610346172.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587622739377.png\" alt=\"blob.png\"/>&nbsp;&nbsp;&nbsp;&nbsp;</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587697409883.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587772846724.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587834896557.png\" alt=\"blob.png\"/></p><p>下面进入Ubuntu18.04的安装</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587966313011.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588049331972.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588100816305.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588170796674.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588230551582.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588372194977.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588436423985.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588491298205.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588553587152.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588758135533.png\" alt=\"blob.png\"/></p><p><img src=\"/upload/image/2018/05/201805181526588817111157.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526589060731249.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526589108190672.png\" alt=\"blob.png\"/></p><p><br/></p><p><br/></p><p style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; left: -1000px; white-space: nowrap; top: 10473px;\"><img class=\"loadingclass\" id=\"loading_jhazjufz\" src=\"{#ZC_BLOG_HOST#}zb_users/plugin/UEditor/themes/default/images/spacer.gif\"/></p><p style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; left: -1000px; white-space: nowrap; top: 10473px;\"><br/></p>', NULL),(2, 2, '<p><br/></p><p><br/></p><p><br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824360553096.png\" title=\"1.png\" alt=\"1.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824373680568.png\" title=\"2.png\" alt=\"2.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824382136021.png\" title=\"3.png\" alt=\"3.png\"/></p><pre class=\"prism-highlight prism-language-c\">server&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;443;\r\n&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;localhost;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl&nbsp;on;\r\n&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_certificate&nbsp;&nbsp;&nbsp;证书.pem;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_certificate_key&nbsp;&nbsp;证书.key;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_session_timeout&nbsp;5m;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_ciphers&nbsp;ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_protocols&nbsp;TLSv1&nbsp;TLSv1.1&nbsp;TLSv1.2;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_prefer_server_ciphers&nbsp;on;\r\n&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824625339867.png\" alt=\"blob.png\"/></p><!--more--><p>OK 打开网站测试 正常。。。。<br/></p>', NULL),(3, 3, '<h1>一、检查是否开启ssh服务<br/></h1><pre class=\"prism-highlight prism-language-c\">ps&nbsp;-e&nbsp;|&nbsp;grep&nbsp;ssh</pre><p><img src=\"/upload/image/2018/05/201805201526827489460066.png\" alt=\"blob.png\"/></p><p>如果有sshd进程，则说明已经开启了服务</p><p><br/></p><h1>二、编辑ssh配置<br/></h1><pre class=\"prism-highlight prism-language-c\">vim&nbsp;/etc/ssh/sshd_config</pre><p>修改</p><p>PermitRootLogin yes （默认为#PermitRootLogin prohibit-password）</p><p><br/></p><h1>三、重启ssh服务<br/></h1><pre class=\"prism-highlight prism-language-c\">service&nbsp;ssh&nbsp;restart</pre><p><br/></p>', NULL),(4, 4, '<p>随着公司人员不断增加，原有的手动创建代码仓库和手动添加Git SSH Key的方式已经难以满足版本控制的需求，因此寻求一款方便快捷的Git管理工具是非常迫切的。</p><p>决定采用GitLab，优点如下：</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>和GitHub非常相似，使用起来学习成本低</p></li><li><p>安装方便（配置简单）</p></li><li><p>安装在自己的服务器上，可以自由建立多个私有仓库</p></li><li><p>仓库和人员管理都很容易</p></li><li><p>我只学习了这个东西，其它的不懂</p></li></ul><!--more--><p>这篇文章将分为三个部分，因为我有三个服务器要装，分别为Ubuntu18.04（台式电脑的虚拟机）在这上面尝试安装，Ubuntu16.04（我自己的服务器）装来自己用，Ubuntu14.04（公司内网服务器）给小伙伴们用。<br/></p><h1>一、Ubuntu18.04 安装 GitLab</h1><p><span style=\"color: #FF0000;\">*我是在VirtualBox虚拟机里安装的Ubuntu18.04，所有一下命令全部是在root用户下执行的，如果非root用户需要加上sudo。</span></p><p>首先将apt源更新到最新，然后安装所需要的依赖，apt参数 -y 的意思是所有询问 [Y/n]的地方全部默认自动选 Y，安装了3个依赖 curl和openssh的服务端还有ca证书。</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;update\r\napt-get&nbsp;install&nbsp;-y&nbsp;curl&nbsp;openssh-server&nbsp;ca-certificates</pre><p>安装postfix用来做邮件服务器（如有有需要）</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;install&nbsp;-y&nbsp;postfix</pre><p>添加GitLab的源到apt里<br/></p><pre class=\"prism-highlight prism-language-c\">curl&nbsp;https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh&nbsp;|&nbsp;sudo&nbsp;bash</pre><p>GitLab有两个版本，一个是社区版一个是企业版，企业版需要收费。我使用的是社区版，如果需要企业版则URL改成以下</p><pre class=\"prism-highlight prism-language-c\">curl&nbsp;https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh&nbsp;|&nbsp;sudo&nbsp;bash</pre><p>开始安装</p><pre class=\"prism-highlight prism-language-c\">EXTERNAL_URL=&quot;http://gitlab.local.com&quot;&nbsp;apt-get&nbsp;install&nbsp;gitlab-ce</pre><p>这里EXTERNAL_URL的地址将写入到&nbsp;/etc/gitlab/gitlab.rb 的配置中，也可以直接执行 apt-get install gitlab-ce 然后再去配置gitlab.rb</p><p>installing...</p><p>installing...</p><p>installing...</p><p>喝茶...洗澡...</p><p>installing...</p><p>installing...</p><p>installed...</p><p>安装完成之后，启动服务</p><pre class=\"prism-highlight prism-language-c\">gitlab-ctl&nbsp;start</pre><p>出现如下图<br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526922112263684.png\" alt=\"blob.png\"/></p><p>就是成功启动了。</p><p><br/></p><p>修改本地hosts文件，添加如下</p><pre class=\"prism-highlight prism-language-c\">192.168.1.104&nbsp;&nbsp;gitlab.local.com</pre><p>在浏览器输入地址 gitlab.local.com ,成功访问页面</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526922344795859.png\" alt=\"blob.png\" width=\"598\" height=\"314\" style=\"width: 598px; height: 314px;\"/></p><p><span style=\"color: #FF0000;\">*首次访问会要求输入管理员密码，很简单看页面提示</span></p><p><span style=\"color: #FF0000;\"><br/></span></p><p>点击Register注册一个新用户</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526922655503332.png\" alt=\"blob.png\" width=\"614\" height=\"416\" style=\"width: 614px; height: 416px;\"/></p><p>登录我们注册好的用户并进入个人设置（点击右上角头像图标-&gt;settings-&gt;左侧菜单 SSH Keys）,将我们自己的key添加到如下图地方</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526922970455105.png\" alt=\"blob.png\" width=\"606\" height=\"316\" style=\"width: 606px; height: 316px;\"/></p><p>创建一个新的空仓库<br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526923065116613.png\" alt=\"blob.png\" width=\"639\" height=\"416\" style=\"width: 639px; height: 416px;\"/></p><p>复制仓库地址在本地clone一下，成功！创建一个文件测试是否可以推送。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526923170102822.png\" alt=\"blob.png\"/></p><p>成功推送到服务器上，在GitLab里查看我们刚才添加的文件。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526923292144211.png\" alt=\"blob.png\" width=\"613\" height=\"457\" style=\"width: 613px; height: 457px;\"/></p><p>并且文件的内容也是我们改成创建时候写进去的，那么到这里就基本完成了。</p><p><br/></p><p><br/></p><p>更多配置与使用请参考官网网站：<a href=\"https://about.gitlab.com/\" _src=\"https://about.gitlab.com/\">https://about.gitlab.com/</a> </p><p><br/></p><h1>二、Ubuntu16.04 安装 GitLab<br/></h1><p>安装与18.04一致，安装过程中遇到两个问题</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>下载速度超慢</p></li><li><p>系统上原来安装有Nginx，与GitLab自带的Nginx冲突</p></li></ul><p>解决网络慢的问题，使用清华大学的源，首先信任 GitLab 的 GPG 公钥</p><pre class=\"prism-highlight prism-language-c\">curl&nbsp;https://packages.gitlab.com/gpg.key&nbsp;2&gt;&nbsp;/dev/null&nbsp;|&nbsp;sudo&nbsp;apt-key&nbsp;add&nbsp;-&nbsp;&amp;&gt;/dev/null</pre><p>修改源地址<br/></p><pre class=\"prism-highlight prism-language-c\">vim&nbsp;/etc/apt/sources.list.d/gitlab_gitlab-ce.list</pre><p>修改如下</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805231527007672309638.png\" alt=\"blob.png\"/></p><p>更新，然后安装</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;update\r\nEXTERNAL_URL=&quot;http://gitlab.local.com&quot;&nbsp;apt-get&nbsp;install&nbsp;gitlab-ce</pre><p>参考：<a href=\"https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/\" _src=\"https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/\">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</a> </p><p><br/></p><p>安装完毕，解决与系统安装的Nginx冲突问题，编辑GitLab配置文件</p><pre class=\"prism-highlight prism-language-c\">vim&nbsp;/etc/gitlab/gitlab.rb</pre><p>添加nginx默认端口配置<br/></p><pre class=\"prism-highlight prism-language-c\">nginx[&#39;listen_port&#39;]&nbsp;=&nbsp;82</pre><p>修改unicorn端口与地址</p><pre class=\"prism-highlight prism-language-c\">unicorn[&#39;listen&#39;]&nbsp;=&nbsp;&#39;127.0.0.1&#39;\r\nunicorn[&#39;port&#39;]&nbsp;=&nbsp;8082</pre><p>修改sidekiq端口</p><pre class=\"prism-highlight prism-language-c\">sidekiq[&#39;listen_port&#39;]&nbsp;=&nbsp;8083</pre><p>重新配置GitLab并且重启</p><pre class=\"prism-highlight prism-language-c\">gitlab-ctl&nbsp;reconfigure\r\ngitlab-ctl&nbsp;restart</pre><p><br/></p><p>使用原有的Nginx对GitLab的Nginx进行反向代理，配置如下</p><pre class=\"prism-highlight prism-language-c\">upstream&nbsp;gitlab{\r\n&nbsp;&nbsp;&nbsp;server&nbsp;127.0.0.1:82&nbsp;weight=1;\r\n}\r\n\r\nserver&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;80;\r\n&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;&nbsp;域名;\r\n&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{\r\n	proxy_pass&nbsp;http://gitlab;\r\n	client_max_body_size&nbsp;1024m;\r\n	proxy_redirect&nbsp;off;\r\n	proxy_set_header&nbsp;Host&nbsp;$host;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;REMOTE-HOST&nbsp;$remote_addr;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>是配置生效并重启Nginx<br/></p><pre class=\"prism-highlight prism-language-c\">nginx&nbsp;-s&nbsp;reload\r\nservice&nbsp;nginx&nbsp;restart</pre><p>测试访问，OK 正常</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805231527008614100486.png\" alt=\"blob.png\" width=\"581\" height=\"343\" style=\"width: 581px; height: 343px;\"/></p><p><br/></p><h1>三、Ubuntu14.04 安装 GitLab<br/></h1><p>与16.04安装一致，不再复述...<br/></p>', NULL),(5, 5, '<h2 id=\"h2-u5907u4EFDu539Fu6765u7684u6E90u6587u4EF6\"><a name=\"备份原来的源文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>备份原来的源文件</h2><pre><code class=\"lang-shell\">cd /etc/apt\r\ncp sources.list sources.list.bak\r\n</code></pre>\r\n<h2 id=\"h2-u4FEEu6539u6E90u6587u4EF6\"><a name=\"修改源文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>修改源文件</h2><pre><code class=\"lang-shell\">vim sources.list\r\n</code></pre>\r\n<p>修改为以下内容</p>\r\n<pre><code class=\"lang-shell\">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\r\n</code></pre>\r\n', '## 备份原来的源文件\r\n```shell\r\ncd /etc/apt\r\ncp sources.list sources.list.bak\r\n```\r\n## 修改源文件\r\n```shell\r\nvim sources.list\r\n```\r\n修改为以下内容\r\n```shell\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\r\n```\r\n'),(6, 6, '<p>查看当前网卡</p>\r\n<pre><code class=\"lang-shell\">ifconfig\r\n</code></pre>\r\n<p><img src=\"/upload/2018/05/201805231527009165982861.png\" alt=\"\"></p>\r\n<p>Ubuntu 16.04以后的版本网络配置文件存放在 /etc/netplan/ 里</p>\r\n<pre><code class=\"lang-shell\">ll /etc/netplan/\r\n</code></pre>\r\n<p><img src=\"/upload/2018/05/201805231527009341115373.png\" alt=\"\"></p>\r\n<p>编辑 50-cloud-init.yaml 文件，修改内容如下</p>\r\n<p><img src=\"/upload/2018/05/201805231527009857409260.png\" alt=\"\"></p>\r\n<p>执行命令使配置生效</p>\r\n<pre><code class=\"lang-shell\">netplan apply\r\n</code></pre>\r\n<p>这样静态IP就设置好了</p>\r\n', '查看当前网卡\r\n```shell\r\nifconfig\r\n```\r\n![](/upload/2018/05/201805231527009165982861.png)\r\n\r\nUbuntu 16.04以后的版本网络配置文件存放在 /etc/netplan/ 里\r\n\r\n```shell\r\nll /etc/netplan/\r\n```\r\n![](/upload/2018/05/201805231527009341115373.png)\r\n\r\n编辑 50-cloud-init.yaml 文件，修改内容如下\r\n\r\n![](/upload/2018/05/201805231527009857409260.png)\r\n\r\n执行命令使配置生效\r\n```shell\r\nnetplan apply\r\n```\r\n这样静态IP就设置好了'),(7, 7, '<p>移除旧版本docker</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;remove&nbsp;docker&nbsp;docker-engine&nbsp;docker.io</pre><p>安装软件包来允许apt通过HTTPS使用存储库&nbsp;</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;install&nbsp;apt-transport-https&nbsp;ca-certificates&nbsp;curl&nbsp;software-properties-common</pre><p>添加Docker的官方GPG密钥&nbsp;</p><pre class=\"prism-highlight prism-language-c\">curl&nbsp;-fsSL&nbsp;https://download.docker.com/linux/ubuntu/gpg&nbsp;|&nbsp;sudo&nbsp;apt-key&nbsp;add&nbsp;-</pre><p>添加docker的下载源，因为官方还没有ubuntu18的下载源，所以先用ubuntu17（zesty）的&nbsp;</p><p>ubuntu14.04把zesty换成trusty，ubuntu16.04换成xenial&nbsp;</p><pre class=\"prism-highlight prism-language-c\">add-apt-repository&nbsp;&quot;deb&nbsp;[arch=amd64]&nbsp;https://download.docker.com/linux/ubuntu&nbsp;zesty&nbsp;stable&quot;</pre><p>安装docker-ce</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;update&nbsp;\r\napt-get&nbsp;install&nbsp;docker-ce</pre><p><br/></p>', NULL),(8, 8, '<h1>一、CI框架对比<br/></h1><p><span style=\"font-size: 24px;\">jenkins</span></p><p>作为老牌的持续集成框架，在这么多年的发展中，积累很多优秀的plugin工具，对进行持续集成工作带来很大的便利。</p><p><br/></p><p id=\"gitlab-ci\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;\">gitlab-ci</span></p><p>gitlab-ci作为gitlab提供的一个持续集成的套件，完美和gitlab进行集成，gitlab-ci已经集成进gitlab服务器中，在使用的时候只需要安装配置gitlab-runner即可。&nbsp;<br/>gitlab-runner基本上提供了一个可以进行编译的环境，负责从gitlab中拉取代码，根据工程中配置的gitlab-ci.yml，执行相应的命令进行编译。</p><p><br/></p><p><span style=\"font-size: 24px;\">walle</span></p><p><span style=\"font-size: 14px;\">轻量级，容易上手，适合初创团队或者项目初期（今天写的是这个）。</span></p><p><span style=\"font-size: 14px;\"><br/></span></p><p><span style=\"font-size: 14px;\"></span></p><h1 style=\"white-space: normal;\">二、开始安装</h1><p><span style=\"font-size: 14px;\"></span>walle是一个Yii2写的应用，所以，应该先安装好lnmp/lamp环境，我安装的是lnamp，我的服务器上有很多其他应用，所以通过nginx反向代理不同的域名到不同的应用上。</p><p><br/></p>', NULL),(9, 9, '<h1>一、准备需要开发的软件</h1><p><strong>安装nodejs</strong></p><p>请自行百度nodejs官网，下载最新稳定版本，根据自己的系统环境下载对应版本，我下载的是window版本。</p><p>下载完成后，双击开始安装。<br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527309591162518.png\" alt=\"image.png\"/></p><p>请不要安装到C盘（后果严重）,选择其他路径安装。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527309673458793.png\" title=\"1.png\" alt=\"1.png\" width=\"407\" height=\"312\" style=\"width: 407px; height: 312px;\"/></p><p>剩下的一直Next直到安装完成。打开CMD，输入</p><pre class=\"prism-highlight prism-language-c\">node&nbsp;-v</pre><p>如果看到输入版本信息，则说明安装正确了。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527309766509712.png\" alt=\"image.png\"/></p><p><br/></p><p><strong>安装webpack和安装vue脚手架</strong></p><p>在安装之前建议先安装淘宝镜像，避免NPM的源比较慢。</p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;install&nbsp;-g&nbsp;cnpm&nbsp;--registry=https://registry.npm.taobao.org</pre><p><br/></p><p>安装完成后，开始安装webpack</p><pre class=\"prism-highlight prism-language-c\">cnpm&nbsp;install&nbsp;webpack&nbsp;-g</pre><p>-g参数表示全局安装<br/></p><p><br/></p><p>安装vue-cli</p><pre class=\"prism-highlight prism-language-c\">cnpm&nbsp;install&nbsp;vue-cli&nbsp;-g</pre><p>到这里需要安装的软件就完成了。</p><p><br/></p><h1>二、创建项目<br/></h1><p>我们新建一个项目来测试一下我们安装的开发环境是否可以正常使用了，在磁盘上任意目录新建一个文件夹VueProject，CD进入该目录。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527313457657371.png\" alt=\"image.png\"/></p><p>在该目录下根据VUE提供的项目模板创建一个项目。<br/></p><pre class=\"prism-highlight prism-language-c\">vue&nbsp;init&nbsp;webpack-simple&nbsp;hello</pre><p>这个命令的格式是&nbsp;vue init webpack-simple <span style=\"color: #FF0000;\">[项目名称]</span>&nbsp;。</p><p>等待模板下载完成后，vue-cli会询问我们一下几个设置:<br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527315473679864.png\" alt=\"image.png\"/></p><p>项目名称，直接回车保持默认。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527314619899669.png\" alt=\"image.png\"/></p><p>项目描述，直接回车保持默认。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527314671212367.png\" alt=\"image.png\"/></p><p>作者，直接回车保持默认。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527314828782606.png\" alt=\"image.png\"/></p><p>许可证，直接回车保持默认。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527314880546171.png\" alt=\"image.png\"/></p><p>是否使用SASS，根据项目情况选择，这里只是为了测试安装是否正常，所以不使用，输入N，回车。</p><p><span style=\"color: #FF0000;\">*如果在以上过程回车了但是卡住，假死，很有可能是node版本太高了导致，降级node版本即可解决。</span></p><p><br/></p><p>完成设置后，会输出如下</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527314996317303.png\" alt=\"image.png\"/></p><p>按照提示，先CD 进入 hello目录</p><pre class=\"prism-highlight prism-language-c\">cd&nbsp;hello</pre><p>安装项目依赖</p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;install</pre><p>如果下载速度慢的话，可以使用cnpm（已安装了淘宝镜像）<br/></p><pre class=\"prism-highlight prism-language-c\">cnpm&nbsp;install</pre><p>最后，运行项目<br/></p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;run&nbsp;dev</pre><p>成功运行项目时，会自动用默认浏览器打开 <a href=\"http://localhost:8080/\" _src=\"http://localhost:8080/\">http://localhost:8080/</a>&nbsp;，页面如下</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527315311522670.png\" alt=\"image.png\" width=\"372\" height=\"307\" style=\"width: 372px; height: 307px;\"/></p>', NULL),(10, 10, '<h2 id=\"h2-u73AFu5883u51C6u5907\"><a name=\"环境准备\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>环境准备</h2><p>准备两台设备，分别装上MySQL。<br>master网络地址：192.168.1.104，<br>slave网络地址：192.168.1.103。</p>\r\n<h2 id=\"h2-u914Du7F6Eu4E3Bu670Du52A1u5668\"><a name=\"配置主服务器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置主服务器</h2><p>1.修改MySQL的配置文件my.cnf</p>\r\n<pre><code class=\"lang-shell\">vim /etc/mysql/mysql.conf.d/mysqld.cnf\r\n</code></pre>\r\n<p>在 [mysqld] 项中添加 server-id 和 log-bin </p>\r\n<pre><code class=\"lang-shell\">[mysqld]\r\nserver-id = 1\r\nlog_bin = /var/log/mysql/mysql-bin.log\r\n</code></pre>\r\n<p>然后重启MySQL服务。</p>\r\n<p>2.创建用户，每一个从服务器都需要用到一个账户名和密码来连接主服务器，可以为每一个从服务器都创建一个账户，也可以让全部服务器使用同一个账户。下面就为同一个ip网段的所有从服务器创建一个只能进行主从同步的账户。</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; grant replication slave on *.* to ‘rep’@‘192.168.1.%’ identified by ‘123456’;\r\n</code></pre>\r\n<p>也可以通过可视化工具Navicat来创建，创建的时候勾选相应的权限。<br><img src=\"/upload/image/2018/06/201806021527877568621985.png\" alt=\"\"></p>\r\n<p>3.获取二进制日志并导出数据，先给数据库加锁，阻止对数据库进行任何的写操作</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; flush tables with read lock;\r\n</code></pre>\r\n<p>查看二进制日志</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; show master status;\r\n</code></pre>\r\n<p><img src=\"/upload/image/2018/06/201806021527878513314674.png\" alt=\"\"><br>这里需要记录一下file文件名称和position数值，稍后的从服务器配置有用。</p>\r\n<p>备份数据库（如果是数据库是空的可以不需要备份）</p>\r\n<pre><code class=\"lang-shell\"># mysqldump -uroot -p&#39;123456&#39; -S /data/3306/data/mysql.sock --all-databases &gt; /server/backup/mysql_bak.$(date +%F).sql\r\n</code></pre>\r\n<p>如果数据量很大，可以使用gzip压缩</p>\r\n<pre><code class=\"lang-shell\"># mysqldump -uroot -p&#39;123456&#39; -S /data/3306/data/mysql.sock --all-databases | gzip &gt; /server/backup/mysql_bak.$(date +%F).sql.gz\r\n</code></pre>\r\n<p>备份完成后，解锁数据库</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; unlock tables;\r\n</code></pre>\r\n<h2 id=\"h2-u914Du7F6Eu4ECEu670Du52A1u5668\"><a name=\"配置从服务器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置从服务器</h2><p>1.修改从服务器mysqld.cnf配置文件</p>\r\n<pre><code class=\"lang-shell\">[mysqld]\r\nserver-id=2\r\n</code></pre>\r\n<p>server-id的值可以是任意数字，但必须必主服务器的server-id的值大，修改完毕重启MySQL服务。</p>\r\n<p>如果有多个从服务器上，那么每个服务器上配置的server-id都必须不一致。从服务器上没必要配置log-bin，当然也可以配置log-bin选项，因为可以在从服务器上进行数据备份和灾难恢复，或者某一天让这个从服务器变成一个主服务器。</p>\r\n<p>如果在主服务器有备份数据，可以将备份导入，没有则跳过。</p>\r\n<p>2.登录MySQL，配置同步</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; change master to\r\n    -&gt; master_host=&#39;192.168.1.104&#39;,\r\n    -&gt; master_port=3306,\r\n    -&gt; master_user=&#39;rep&#39;,\r\n    -&gt; master_password=&#39;123456&#39;,\r\n    -&gt; master_log_file=&#39;mysql-bin.000001&#39;,\r\n    -&gt; master_log_pos=2042;\r\n</code></pre>\r\n<p><img src=\"/upload/image/2018/06/201806021527879920211198.png\" alt=\"\"></p>\r\n<p>启动主从同步进程</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; start slave;\r\n</code></pre>\r\n<p>检查状态</p>\r\n<pre><code class=\"lang-shell\">show slave status \\G\r\n</code></pre>\r\n<p><img src=\"/upload/image/2018/06/201806021527880118426859.png\" alt=\"\"></p>\r\n<p>如图所示则表示配置成功。如配置错误，可以使用 stop slave; 停止主从同步进程，重新配置，再 start slave;</p>\r\n<p>可以用 show slave status \\G 查看Last_Error同步过程中是否发生错误。</p>\r\n<h2 id=\"h2-u4E00u4E9Bu7ECFu9A8C\"><a name=\"一些经验\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>一些经验</h2><ul>\r\n<li>重启数据库不需要重新配置主从，主从关系依旧存在，但是日志文件名称发生了变化。</li></ul>\r\n', '## 环境准备\r\n准备两台设备，分别装上MySQL。\r\nmaster网络地址：192.168.1.104，\r\nslave网络地址：192.168.1.103。\r\n## 配置主服务器\r\n1.修改MySQL的配置文件my.cnf\r\n```shell\r\nvim /etc/mysql/mysql.conf.d/mysqld.cnf\r\n```\r\n在 [mysqld] 项中添加 server-id 和 log-bin \r\n```shell\r\n[mysqld]\r\nserver-id = 1\r\nlog_bin = /var/log/mysql/mysql-bin.log\r\n```\r\n然后重启MySQL服务。\r\n\r\n2.创建用户，每一个从服务器都需要用到一个账户名和密码来连接主服务器，可以为每一个从服务器都创建一个账户，也可以让全部服务器使用同一个账户。下面就为同一个ip网段的所有从服务器创建一个只能进行主从同步的账户。\r\n```shell\r\nmysql> grant replication slave on *.* to ‘rep’@‘192.168.1.%’ identified by ‘123456’;\r\n```\r\n也可以通过可视化工具Navicat来创建，创建的时候勾选相应的权限。\r\n![](/upload/image/2018/06/201806021527877568621985.png)\r\n\r\n3.获取二进制日志并导出数据，先给数据库加锁，阻止对数据库进行任何的写操作\r\n```shell\r\nmysql> flush tables with read lock;\r\n```\r\n查看二进制日志\r\n```shell\r\nmysql> show master status;\r\n```\r\n![](/upload/image/2018/06/201806021527878513314674.png)\r\n这里需要记录一下file文件名称和position数值，稍后的从服务器配置有用。\r\n\r\n备份数据库（如果是数据库是空的可以不需要备份）\r\n```shell\r\n# mysqldump -uroot -p\'123456\' -S /data/3306/data/mysql.sock --all-databases > /server/backup/mysql_bak.$(date +%F).sql\r\n```\r\n如果数据量很大，可以使用gzip压缩\r\n```shell\r\n# mysqldump -uroot -p\'123456\' -S /data/3306/data/mysql.sock --all-databases | gzip > /server/backup/mysql_bak.$(date +%F).sql.gz\r\n```\r\n备份完成后，解锁数据库\r\n```shell\r\nmysql> unlock tables;\r\n```\r\n\r\n## 配置从服务器\r\n1.修改从服务器mysqld.cnf配置文件\r\n```shell\r\n[mysqld]\r\nserver-id=2\r\n```\r\nserver-id的值可以是任意数字，但必须必主服务器的server-id的值大，修改完毕重启MySQL服务。\r\n\r\n如果有多个从服务器上，那么每个服务器上配置的server-id都必须不一致。从服务器上没必要配置log-bin，当然也可以配置log-bin选项，因为可以在从服务器上进行数据备份和灾难恢复，或者某一天让这个从服务器变成一个主服务器。\r\n\r\n如果在主服务器有备份数据，可以将备份导入，没有则跳过。\r\n\r\n2.登录MySQL，配置同步\r\n```shell\r\nmysql> change master to\r\n    -> master_host=\'192.168.1.104\',\r\n    -> master_port=3306,\r\n    -> master_user=\'rep\',\r\n    -> master_password=\'123456\',\r\n    -> master_log_file=\'mysql-bin.000001\',\r\n    -> master_log_pos=2042;\r\n```\r\n![](/upload/image/2018/06/201806021527879920211198.png)\r\n\r\n启动主从同步进程\r\n```shell\r\nmysql> start slave;\r\n```\r\n检查状态\r\n```shell\r\nshow slave status \\G\r\n```\r\n![](/upload/image/2018/06/201806021527880118426859.png)\r\n\r\n如图所示则表示配置成功。如配置错误，可以使用 stop slave; 停止主从同步进程，重新配置，再 start slave;\r\n\r\n可以用 show slave status \\G 查看Last_Error同步过程中是否发生错误。\r\n\r\n## 一些经验\r\n- 重启数据库不需要重新配置主从，主从关系依旧存在，但是日志文件名称发生了变化。'),(11, 11, '<p>docker port [name]</p>', NULL),(12, 12, '<p>Node.js开发本地项目，有时不同项目之间存在依赖，如果不想把项目发布到npm社区的仓库，则需要有自己本地的仓库</p><p><strong>环境准备</strong></p><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>Ubuntu18.04</p></li><li><p>安装NodeJS</p></li><li><p>安装NPM</p></li><li><p>安装CNPM</p></li></ol><p><br/></p><p><strong>服务器配置</strong></p><p>安装sinopia</p><pre class=\"prism-highlight prism-language-c\">cnpm&nbsp;install&nbsp;-g&nbsp;sinopia</pre><p>安装完毕后运行</p><pre class=\"prism-highlight prism-language-c\">sinopia</pre><p>运行会输出如下，显示出当前配置文件和连接地址<br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/06/201806071528305683760100.png\" alt=\"image.png\"/></p><p>修改配置文件</p><pre class=\"prism-highlight prism-language-c\">#\r\n#&nbsp;This&nbsp;is&nbsp;the&nbsp;default&nbsp;config&nbsp;file.&nbsp;It&nbsp;allows&nbsp;all&nbsp;users&nbsp;to&nbsp;do&nbsp;anything,\r\n#&nbsp;so&nbsp;don&#39;t&nbsp;use&nbsp;it&nbsp;on&nbsp;production&nbsp;systems.\r\n#\r\n#&nbsp;Look&nbsp;here&nbsp;for&nbsp;more&nbsp;config&nbsp;file&nbsp;examples:\r\n#&nbsp;https://github.com/rlidwka/sinopia/tree/master/conf\r\n#\r\n\r\n#&nbsp;path&nbsp;to&nbsp;a&nbsp;directory&nbsp;with&nbsp;all&nbsp;packages\r\nstorage:&nbsp;./storage&nbsp;&nbsp;#npm包存放的路径\r\n\r\nauth:\r\n&nbsp;&nbsp;htpasswd:\r\n&nbsp;&nbsp;&nbsp;&nbsp;file:&nbsp;./htpasswd&nbsp;&nbsp;&nbsp;#保存用户的账号密码等信息\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Maximum&nbsp;amount&nbsp;of&nbsp;users&nbsp;allowed&nbsp;to&nbsp;register,&nbsp;defaults&nbsp;to&nbsp;&quot;+inf&quot;.\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;You&nbsp;can&nbsp;set&nbsp;this&nbsp;to&nbsp;-1&nbsp;to&nbsp;disable&nbsp;registration.\r\n&nbsp;&nbsp;&nbsp;&nbsp;max_users:&nbsp;-1&nbsp;&nbsp;#默认为1000，改为-1，禁止注册\r\n\r\n#&nbsp;a&nbsp;list&nbsp;of&nbsp;other&nbsp;known&nbsp;repositories&nbsp;we&nbsp;can&nbsp;talk&nbsp;to\r\nuplinks:\r\n&nbsp;&nbsp;npmjs:\r\n&nbsp;&nbsp;&nbsp;&nbsp;url:&nbsp;http://registry.npm.taobao.org/&nbsp;&nbsp;#默认为npm的官网，由于国情，修改&nbsp;url&nbsp;让sinopia使用&nbsp;淘宝的npm镜像地址\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\npackages:&nbsp;&nbsp;#配置权限管理\r\n&nbsp;&nbsp;&#39;@*/*&#39;:\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;scoped&nbsp;packages\r\n&nbsp;&nbsp;&nbsp;&nbsp;access:&nbsp;$all&nbsp;&nbsp;#&nbsp;表示哪一类用户可以对匹配的项目进行安装&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;$all&nbsp;表示所有人都可以执行对应的操作，\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;$authenticated&nbsp;表示只有通过验证的人可以执行对应操作，\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;$anonymous&nbsp;表示只有匿名者可以进行对应操作（通常无用）\r\n&nbsp;&nbsp;&nbsp;&nbsp;publish:&nbsp;$authenticated&nbsp;&nbsp;#表示哪一类用户可以对匹配的项目进行发布\r\n\r\n&nbsp;&nbsp;&#39;*&#39;:\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;allow&nbsp;all&nbsp;users&nbsp;(including&nbsp;non-authenticated&nbsp;users)&nbsp;to&nbsp;read&nbsp;and\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;publish&nbsp;all&nbsp;packages\r\n&nbsp;&nbsp;&nbsp;&nbsp;#\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;you&nbsp;can&nbsp;specify&nbsp;usernames/groupnames&nbsp;(depending&nbsp;on&nbsp;your&nbsp;auth&nbsp;plugin)\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;and&nbsp;three&nbsp;keywords:&nbsp;&quot;$all&quot;,&nbsp;&quot;$anonymous&quot;,&nbsp;&quot;$authenticated&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;access:&nbsp;$all&nbsp;&nbsp;#表示哪一类用户可以对匹配的项目进行安装\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;allow&nbsp;all&nbsp;known&nbsp;users&nbsp;to&nbsp;publish&nbsp;packages\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;(anyone&nbsp;can&nbsp;register&nbsp;by&nbsp;default,&nbsp;remember?)\r\n&nbsp;&nbsp;&nbsp;&nbsp;publish:&nbsp;$authenticated&nbsp;&nbsp;#表示哪一类用户可以对匹配的项目进行发布\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;if&nbsp;package&nbsp;is&nbsp;not&nbsp;available&nbsp;locally,&nbsp;proxy&nbsp;requests&nbsp;to&nbsp;&#39;npmjs&#39;&nbsp;registry\r\n&nbsp;&nbsp;&nbsp;&nbsp;proxy:&nbsp;npmjs&nbsp;&nbsp;#如其名，这里的值是对应于&nbsp;uplinks\r\n\r\n#&nbsp;log&nbsp;settings\r\nlogs:\r\n&nbsp;&nbsp;-&nbsp;{type:&nbsp;stdout,&nbsp;format:&nbsp;pretty,&nbsp;level:&nbsp;http}\r\n&nbsp;&nbsp;#-&nbsp;{type:&nbsp;file,&nbsp;path:&nbsp;sinopia.log,&nbsp;level:&nbsp;info}\r\n\r\n#&nbsp;you&nbsp;can&nbsp;specify&nbsp;listen&nbsp;address&nbsp;(or&nbsp;simply&nbsp;a&nbsp;port)&nbsp;\r\nlisten:&nbsp;0.0.0.0:4873&nbsp;&nbsp;#默认没有，只能在本机访问，添加后可以通过外网访问</pre><p>使用pm2运行sinopia （守护进程）</p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;install&nbsp;-g&nbsp;pm2&nbsp;\r\nnpm&nbsp;install&nbsp;-g&nbsp;sinopia-pm2-starter</pre><p>开启服务<br/></p><pre class=\"prism-highlight prism-language-c\">sinopia-pm2-starter&nbsp;--help&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;查看帮助命令\r\nsinopia-pm2-starter&nbsp;config:host&nbsp;&#39;0.0.0.0&#39;&nbsp;&nbsp;&nbsp;#&nbsp;设置允许远程连接\r\nsinopia-pm2-starter&nbsp;config:post&nbsp;${port}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;不设置则默认4873\r\nsinopia-pm2-starter&nbsp;start&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;启动服务</pre><p><br/></p><p><strong>客户端配置</strong></p><p><span style=\"background-color: #FFFFFF; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 16px;\">使用nrm管理源（nrm是NPM的源切换利器）</span></p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;install&nbsp;-g&nbsp;nrm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;安装nrm\r\nnrm&nbsp;add&nbsp;[name]&nbsp;http://XXXXXX:4873&nbsp;&nbsp;#&nbsp;添加本地的npm镜像地址\r\nnrm&nbsp;use&nbsp;[name]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;使用本址的镜像地址&nbsp;&nbsp;name为你要增加的地址</pre><p><span style=\"background-color: #FFFFFF; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 16px;\"></span>添加用户</p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;adduser\r\nUsername:&nbsp;test\r\nPassword:&nbsp;test\r\nEmail:&nbsp;(this&nbsp;IS&nbsp;public)&nbsp;xxx@xxxx</pre><p>发布项目<br/></p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;publish</pre><p><br/></p><p><br/></p><p>---------------后记---------------</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/06/201806071528307894146289.png\" alt=\"image.png\" width=\"413\" height=\"175\" style=\"width: 413px; height: 175px;\"/></p><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>如果不需要某个发布包了，可以进入服务器的NPM包存放目录直接删除即可。</p></li><li><p>暂时木有。<br/></p></li></ol>', NULL),(13, 13, '<p>Keepalived 是一种高性能的服务器高可用或热备解决方案,Keepalived 可以用来防止服务器单点故障的发生,通过配合 Nginx 可以实现 web 前端服务的高可用。</p>\r\n<p>Keepalived 以 VRRP 协议为实现基础,用 VRRP 协议来实现高可用性(HA)。VRRP(Virtual RouterRedundancy Protocol)协议是用于实现路由器冗余的协议,</p>\r\n<p>VRRP 协议将两台或多台路由器设备虚拟成一个 设备,对外提供虚拟路由器 IP(一个或多个),而在路由器组内部,如果实际拥有这个对外 IP 的路由器如果工作正常的话就是 MASTER,</p>\r\n<p>或者是通过算法选举产生,MASTER 实现针对虚拟路由器 IP 的各种网络功能, 如 ARP 请求,ICMP,以及数据的转发等;其他设备不拥有该虚拟 IP,状态是 BACKUP,</p>\r\n<p>除了接收 MASTER 的 VRRP 状态通告信息外,不执行对外的网络功能。当主机失效时,BACKUP 将接管原先 MASTER 的网络功能。</p>\r\n<p>VRRP 协议使用多播数据来传输 VRRP 数据,VRRP 数据使用特殊的虚拟源 MAC 地址发送数据而不是自身 网卡的 MAC 地址,VRRP 运行时只有 MASTER 路由器定时发送 VRRP 通告信息,</p>\r\n<p>表示 MASTER 工作正常以及虚 拟路由器 IP(组),BACKUP 只接收 VRRP 数据,不发送数据,如果一定时间内没有接收到 MASTER 的通告信 息,各 BACKUP 将宣告自己成为 MASTER,</p>\r\n<p>发送通告信息,重新进行 MASTER 选举状态。</p>\r\n<h2 id=\"h2-u73AFu5883u51C6u5907\"><a name=\"环境准备\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>环境准备</h2><p>虚拟机安装两台Ubuntu18.04</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>服务器名称</th>\r\n<th>IP地址</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>ubuntu01</td>\r\n<td>192.168.1.104</td>\r\n<td>master</td>\r\n</tr>\r\n<tr>\r\n<td>ubuntu02</td>\r\n<td>192.168.1.105</td>\r\n<td>backup</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"h2-u5B89u88C5u8F6Fu4EF6\"><a name=\"安装软件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装软件</h2><p>两台设备分别安装Nginx和Keepalived</p>\r\n<h3 id=\"h3--nginx\"><a name=\"安装Nginx\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装Nginx</h3><pre><code>apt install nginx\r\n</code></pre><p><img src=\"/upload/image/1aa331c217097263221ebe26922038bb6388.png\" alt=\"\"></p>\r\n<p><img src=\"/upload/image/5ab08afe2e227f210f7c405076ad8be39230.png\" alt=\"\"></p>\r\n<h3 id=\"h3--keepalived\"><a name=\"安装Keepalived\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装Keepalived</h3><pre><code>apt install keepalived\r\n</code></pre><h2 id=\"h2--keepalived\"><a name=\"配置Keepalived\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置Keepalived</h2><table>\r\n<thead>\r\n<tr>\r\n<th>虚拟IP</th>\r\n<th>真实IP</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>192.168.1.200</td>\r\n<td>192.168.1.104</td>\r\n<td>master</td>\r\n</tr>\r\n<tr>\r\n<td>192.168.1.200</td>\r\n<td>192.168.1.105</td>\r\n<td>backup</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>在安装完成软件后，并没有生成默认的配置文件，需要自己手动创建</p>\r\n<pre><code>touch /etc/keepalived/keepalived.conf\r\n</code></pre><h3 id=\"h3-master-\"><a name=\"master设备的配置文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>master设备的配置文件</h3><pre><code># 检测nginx的脚本\r\n# keepalived会定时执行脚本并对脚本执行的结果进行分析,动态调整vrrp_instance的优先级。\r\n# 如果脚本执行结果为0,并且weight配置的值大于0,则优先级相应的增加。如果脚本执行结果非0,\r\n# 并且weight配置的值小于 0,则优先级相应的减少。其他情况,维持原本配置的优先级,即配置文件中priority对应的值\r\nvrrp_script chk_nginx {\r\n  script &quot;/etc/keepalived/check_nginx.sh&quot;\r\n  interval 2 # 每2秒检测一次nginx的运行状态\r\n  weight -5  # 失败一次，将自己的优先级减5\r\n}\r\n\r\nglobal_defs {\r\n    router_id ubuntu01 #标识本节点的名称，通常为hostname\r\n}\r\n\r\nvrrp_instance VI_1 {\r\n    state MASTER                # 状态，主节点为MASTER，备份节点为BACKUP\r\n    interface enp0s3            # 绑定VIP的网络接口，通过ifconfig查看自己的网络接口\r\n    virtual_router_id 200    # 虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址\r\n    mcast_src_ip 192.168.1.104    # 本机IP地址\r\n    priority 100        # 节点优先级，值范围0～254，MASTER要比BACKUP高\r\n    advert_int 1        # 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒\r\n    nopreempt            # 表示不争抢vip\r\n\r\n    # 设置验证信息，两个节点必须一致\r\n    authentication {\r\n        auth_type PASS\r\n        auth_pass 123456\r\n    }\r\n\r\n    # nginx存活状态检测脚本\r\n    track_script {\r\n        chk_nginx\r\n    }\r\n\r\n    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个\r\n    virtual_ipaddress {\r\n        192.168.1.200/24\r\n    }\r\n}\r\n</code></pre><h3 id=\"h3-backup-\"><a name=\"backup设备配置文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>backup设备配置文件</h3><pre><code># 检测nginx的脚本\r\n# keepalived会定时执行脚本并对脚本执行的结果进行分析,动态调整vrrp_instance的优先级。\r\n# 如果脚本执行结果为0,并且weight配置的值大于0,则优先级相应的增加。如果脚本执行结果非0,\r\n# 并且weight配置的值小于 0,则优先级相应的减少。其他情况,维持原本配置的优先级,即配置文件中priority对应的值\r\nvrrp_script chk_nginx {\r\n  script &quot;/etc/keepalived/check_nginx.sh&quot;\r\n  interval 2 # 每2秒检测一次nginx的运行状态\r\n  weight -5  # 失败一次，将自己的优先级减5\r\n}\r\n\r\nglobal_defs {\r\n    router_id ubuntu01 #标识本节点的名称，通常为hostname\r\n}\r\n\r\nvrrp_instance VI_1 {\r\n    state MASTER                # 状态，主节点为MASTER，备份节点为BACKUP\r\n    interface enp0s3            # 绑定VIP的网络接口，通过ifconfig查看自己的网络接口\r\n    virtual_router_id 200    # 虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址\r\n    mcast_src_ip 192.168.1.104    # 本机IP地址\r\n    priority 100        # 节点优先级，值范围0～254，MASTER要比BACKUP高\r\n    advert_int 1        # 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒\r\n    nopreempt            # 表示不争抢vip\r\n\r\n    # 设置验证信息，两个节点必须一致\r\n    authentication {\r\n        auth_type PASS\r\n        auth_pass 123456\r\n    }\r\n\r\n    # nginx存活状态检测脚本\r\n    track_script {\r\n        chk_nginx\r\n    }\r\n\r\n    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个\r\n    virtual_ipaddress {\r\n        192.168.1.200/24\r\n    }\r\n}\r\n</code></pre><p>分别创建检查nginx是否存活的脚本，并给予执行权限</p>\r\n<pre><code>touch /etc/keepalived/check_nginx.sh\r\nchmod +x /etc/keepalived/check_nginx.sh\r\n</code></pre><p>脚本代码</p>\r\n<pre><code>#!/bin/bash\r\nA=`ps -C nginx --no-header |wc -l`\r\nif [ $A -eq 0 ];then\r\n    /usr/local/nginx/sbin/nginx   #尝试重启nginx\r\n    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then    #nginx重启失败，则停掉keepalived服务\r\n        killall keepalived\r\n    fi\r\nfi\r\n</code></pre><p>配置完成后，分别启动keepalived</p>\r\n<pre><code>service keepalived start\r\n</code></pre><p>启动成功，查看两台服务器的网络状况</p>\r\n<pre><code>ip a\r\n</code></pre><p>master机器的网络<br><img src=\"/upload/image/7542c355c21cb8e81cd4bdad84e652a66106.png\" alt=\"\"><br>backup机器的网络<br><img src=\"/upload/image/2fc974df4ae382bb97f3f03c32d184769666.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>打开浏览器，访问192.168.1.200<br><img src=\"/upload/image/48f3dd02e0b44ade3ff8772906896a965736.png\" alt=\"\"><br>输出nginx01，说明master上的nginx正常运行，然后，停止master机器上的nginx模拟发生故障，刷新页面<br><img src=\"/upload/image/df2ad6eb2b41a3f7b58f076dbf043cb33057.png\" alt=\"\"><br>输出nginx02，backup机器上的nginx开始接管请求，查看backup机器上的网络状态<br><img src=\"/upload/image/260d47d412cb270215d47c7c0fe24f618926.png\" alt=\"\"><br>虚拟IP飘到了backup机器上了</p>\r\n<h2 id=\"h2-u603Bu7ED3\"><a name=\"总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总结</h2><p>主从模式会造成backup机器的浪费，可以使用主主模式充分利用硬件资源。</p>\r\n', 'Keepalived 是一种高性能的服务器高可用或热备解决方案,Keepalived 可以用来防止服务器单点故障的发生,通过配合 Nginx 可以实现 web 前端服务的高可用。\r\n\r\nKeepalived 以 VRRP 协议为实现基础,用 VRRP 协议来实现高可用性(HA)。VRRP(Virtual RouterRedundancy Protocol)协议是用于实现路由器冗余的协议,\r\n\r\nVRRP 协议将两台或多台路由器设备虚拟成一个 设备,对外提供虚拟路由器 IP(一个或多个),而在路由器组内部,如果实际拥有这个对外 IP 的路由器如果工作正常的话就是 MASTER,\r\n\r\n或者是通过算法选举产生,MASTER 实现针对虚拟路由器 IP 的各种网络功能, 如 ARP 请求,ICMP,以及数据的转发等;其他设备不拥有该虚拟 IP,状态是 BACKUP,\r\n\r\n除了接收 MASTER 的 VRRP 状态通告信息外,不执行对外的网络功能。当主机失效时,BACKUP 将接管原先 MASTER 的网络功能。\r\n\r\nVRRP 协议使用多播数据来传输 VRRP 数据,VRRP 数据使用特殊的虚拟源 MAC 地址发送数据而不是自身 网卡的 MAC 地址,VRRP 运行时只有 MASTER 路由器定时发送 VRRP 通告信息,\r\n\r\n表示 MASTER 工作正常以及虚 拟路由器 IP(组),BACKUP 只接收 VRRP 数据,不发送数据,如果一定时间内没有接收到 MASTER 的通告信 息,各 BACKUP 将宣告自己成为 MASTER,\r\n\r\n发送通告信息,重新进行 MASTER 选举状态。\r\n## 环境准备\r\n虚拟机安装两台Ubuntu18.04\r\n\r\n| 服务器名称 | IP地址 | 说明 |\r\n| ------------ | ------------ | ------------ |\r\n| ubuntu01  | 192.168.1.104  |  master |\r\n| ubuntu02  | 192.168.1.105  |  backup |\r\n\r\n## 安装软件\r\n两台设备分别安装Nginx和Keepalived\r\n### 安装Nginx\r\n```\r\napt install nginx\r\n```\r\n![](/upload/image/1aa331c217097263221ebe26922038bb6388.png)\r\n\r\n![](/upload/image/5ab08afe2e227f210f7c405076ad8be39230.png)\r\n### 安装Keepalived\r\n```\r\napt install keepalived\r\n```\r\n## 配置Keepalived\r\n\r\n| 虚拟IP  |  真实IP | 说明 |\r\n| ------------ | ------------ | ------------ |\r\n| 192.168.1.200 | 192.168.1.104 | master |\r\n| 192.168.1.200 | 192.168.1.105 | backup |\r\n\r\n在安装完成软件后，并没有生成默认的配置文件，需要自己手动创建\r\n```\r\ntouch /etc/keepalived/keepalived.conf\r\n```\r\n### master设备的配置文件\r\n```\r\n# 检测nginx的脚本\r\n# keepalived会定时执行脚本并对脚本执行的结果进行分析,动态调整vrrp_instance的优先级。\r\n# 如果脚本执行结果为0,并且weight配置的值大于0,则优先级相应的增加。如果脚本执行结果非0,\r\n# 并且weight配置的值小于 0,则优先级相应的减少。其他情况,维持原本配置的优先级,即配置文件中priority对应的值\r\nvrrp_script chk_nginx {\r\n  script \"/etc/keepalived/check_nginx.sh\"\r\n  interval 2 # 每2秒检测一次nginx的运行状态\r\n  weight -5  # 失败一次，将自己的优先级减5\r\n}\r\n \r\nglobal_defs {\r\n    router_id ubuntu01 #标识本节点的名称，通常为hostname\r\n}\r\n \r\nvrrp_instance VI_1 {\r\n    state MASTER                # 状态，主节点为MASTER，备份节点为BACKUP\r\n    interface enp0s3	        # 绑定VIP的网络接口，通过ifconfig查看自己的网络接口\r\n    virtual_router_id 200	# 虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址\r\n    mcast_src_ip 192.168.1.104	# 本机IP地址\r\n    priority 100		# 节点优先级，值范围0～254，MASTER要比BACKUP高\r\n    advert_int 1		# 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒\r\n    nopreempt			# 表示不争抢vip\r\n    \r\n    # 设置验证信息，两个节点必须一致\r\n    authentication {\r\n        auth_type PASS\r\n        auth_pass 123456\r\n    }\r\n    \r\n    # nginx存活状态检测脚本\r\n    track_script {\r\n        chk_nginx\r\n    }\r\n    \r\n    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个\r\n    virtual_ipaddress {\r\n        192.168.1.200/24\r\n    }\r\n}\r\n```\r\n### backup设备配置文件\r\n```\r\n# 检测nginx的脚本\r\n# keepalived会定时执行脚本并对脚本执行的结果进行分析,动态调整vrrp_instance的优先级。\r\n# 如果脚本执行结果为0,并且weight配置的值大于0,则优先级相应的增加。如果脚本执行结果非0,\r\n# 并且weight配置的值小于 0,则优先级相应的减少。其他情况,维持原本配置的优先级,即配置文件中priority对应的值\r\nvrrp_script chk_nginx {\r\n  script \"/etc/keepalived/check_nginx.sh\"\r\n  interval 2 # 每2秒检测一次nginx的运行状态\r\n  weight -5  # 失败一次，将自己的优先级减5\r\n}\r\n \r\nglobal_defs {\r\n    router_id ubuntu01 #标识本节点的名称，通常为hostname\r\n}\r\n \r\nvrrp_instance VI_1 {\r\n    state MASTER                # 状态，主节点为MASTER，备份节点为BACKUP\r\n    interface enp0s3	        # 绑定VIP的网络接口，通过ifconfig查看自己的网络接口\r\n    virtual_router_id 200	# 虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址\r\n    mcast_src_ip 192.168.1.104	# 本机IP地址\r\n    priority 100		# 节点优先级，值范围0～254，MASTER要比BACKUP高\r\n    advert_int 1		# 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒\r\n    nopreempt			# 表示不争抢vip\r\n    \r\n    # 设置验证信息，两个节点必须一致\r\n    authentication {\r\n        auth_type PASS\r\n        auth_pass 123456\r\n    }\r\n    \r\n    # nginx存活状态检测脚本\r\n    track_script {\r\n        chk_nginx\r\n    }\r\n    \r\n    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个\r\n    virtual_ipaddress {\r\n        192.168.1.200/24\r\n    }\r\n}\r\n```\r\n分别创建检查nginx是否存活的脚本，并给予执行权限\r\n```\r\ntouch /etc/keepalived/check_nginx.sh\r\nchmod +x /etc/keepalived/check_nginx.sh\r\n```\r\n脚本代码\r\n```\r\n#!/bin/bash\r\nA=`ps -C nginx --no-header |wc -l`\r\nif [ $A -eq 0 ];then\r\n    /usr/local/nginx/sbin/nginx   #尝试重启nginx\r\n    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then    #nginx重启失败，则停掉keepalived服务\r\n        killall keepalived\r\n    fi\r\nfi\r\n```\r\n配置完成后，分别启动keepalived\r\n```\r\nservice keepalived start\r\n```\r\n启动成功，查看两台服务器的网络状况\r\n```\r\nip a\r\n```\r\nmaster机器的网络\r\n![](/upload/image/7542c355c21cb8e81cd4bdad84e652a66106.png)\r\nbackup机器的网络\r\n![](/upload/image/2fc974df4ae382bb97f3f03c32d184769666.png)\r\n## 测试\r\n打开浏览器，访问192.168.1.200\r\n![](/upload/image/48f3dd02e0b44ade3ff8772906896a965736.png)\r\n输出nginx01，说明master上的nginx正常运行，然后，停止master机器上的nginx模拟发生故障，刷新页面\r\n![](/upload/image/df2ad6eb2b41a3f7b58f076dbf043cb33057.png)\r\n输出nginx02，backup机器上的nginx开始接管请求，查看backup机器上的网络状态\r\n![](/upload/image/260d47d412cb270215d47c7c0fe24f618926.png)\r\n虚拟IP飘到了backup机器上了\r\n## 总结\r\n主从模式会造成backup机器的浪费，可以使用主主模式充分利用硬件资源。'),(14, 14, '<h1>一、创建Maven主项目</h1><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>在磁盘任意位置新建文件夹 cloud 用做项目目录。</p></li><li><p>打开IDEA，点击File --&gt; new --&gt; Project 新建一个maven主项目。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530469518865535.png\" alt=\"image.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530469769488575.png\" alt=\"image.png\"/></p></li><li><p>创建完毕后，删除自动生成的src目录。<br/></p></li></ol><h1>二、创建并启动Eureka服务项目</h1><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>选中主maven项目，点击File --&gt; new --&gt; Module。</p></li><li><p>通过向导新建 eureka-server 项目</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530470428111000.png\" alt=\"image.png\"/><br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530470554273951.png\" alt=\"image.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530470675134964.png\" alt=\"image.png\"/><br/></p></li><li><p>配置server，编辑eureka-server项目application.properties文件。</p></li><li><pre class=\"prism-highlight prism-language-c\">server.port=8761\r\neureka.instance.hostname=localhost\r\neureka.client.register-with-eureka=false\r\neureka.client.fetch-registry=false\r\neureka.client.service-url.defaultZone=&nbsp;http://${eureka.instance.hostname}:${server.port}/eureka</pre><p>通过eureka.client.registerWithEureka：false和fetchRegistry：false来表明自己是一个eureka server。</p></li><li><p>编辑启动application类，只需要加上注解@EnableEurekaServer既可。</p></li><li><pre class=\"prism-highlight prism-language-c\">@SpringBootApplication\r\n@EnableEurekaServer\r\npublic&nbsp;class&nbsp;EurekaServerApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(EurekaServerApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre></li><li><p>启动项目，eureka-server自带界面，通过浏览器访问 <a href=\"http://localhost:8761\" _src=\"http://localhost:8761\">http://localhost:8761</a>&nbsp;可以查看 eureka 服务页面。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530471548247436.png\" alt=\"image.png\"/><br/></p><p><br/></p></li></ol><h1>三、创建eureka服务提供者</h1><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>选择maven主项目，新建module，命名为eureka-client。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530543819703699.png\" alt=\"image.png\"/><br/></p></li><li><p>编辑eureka-client项目的application.properties文件。</p></li><li><pre class=\"prism-highlight prism-language-java\">server.port=8762\r\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/\r\nspring.application.name=service-hi</pre><p><span style=\"font-family:monospace\"><span style=\"white-space: pre;\"></span></span></p></li><li><p>编辑项目的EurekaClientApplication启动类。</p></li><li><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableEurekaClient\r\n@RestController\r\npublic&nbsp;class&nbsp;EurekaClientApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(EurekaClientApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${server.port}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;port;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(&quot;/hi&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;home(@RequestParam&nbsp;String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;hi&nbsp;&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;&quot;&nbsp;+&nbsp;port;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre></li><li><p>启动两个Client项目，端口分别为8762,8763，编辑启动Configurations。</p><p><img src=\"/upload/image/2018/07/201807021530544735649571.png\" alt=\"image.png\"/><br/></p></li><li><p>使用Run Dashboard 查看项目运行。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530544989848108.png\" alt=\"image.png\"/><br/></p></li></ol><p><br/></p><h1>四、测试</h1><p>浏览器访问<a href=\"http://localhost:8761。\" _src=\"http://localhost:8761。\">http://localhost:8761。</a> </p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530545140241717.png\" alt=\"image.png\"/></p><div id=\"baidu_pastebin\" style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; left: -1000px; white-space: nowrap; top: 8462px;\"><img class=\"loadingclass\" id=\"loading_jj4e4woz\" src=\"{#ZC_BLOG_HOST#}zb_users/plugin/UEditor/themes/default/images/spacer.gif\"/></div>', NULL),(15, 15, '<p>选中maven主项目，新建module，命名为service-ribbon。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807031530547927500601.png\" alt=\"image.png\"/></p><p>编辑项目配置文件application.properties。</p><pre class=\"prism-highlight prism-language-java\">server.port=8764\r\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/\r\nspring.application.name=service-ribbon</pre><p>编辑项目启动类ServiceRibbonApplication。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableDiscoveryClient\r\npublic&nbsp;class&nbsp;ServiceRibbonApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ServiceRibbonApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;@LoadBalanced\r\n&nbsp;&nbsp;&nbsp;&nbsp;RestTemplate&nbsp;restTemplate(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;RestTemplate();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>通过@EnableDiscoveryClient向服务中心注册；并且向程序的ioc注入一个bean: restTemplate;并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。</p><p><br/></p><p>新建一个类HelloService，编写代码</p><pre class=\"prism-highlight prism-language-java\">@Service\r\npublic&nbsp;class&nbsp;HelloService&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\r\n&nbsp;&nbsp;&nbsp;&nbsp;RestTemplate&nbsp;restTemplate;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hiService(String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;restTemplate.getForObject(&quot;http://SERVICE-HI/hi?name=&quot;&nbsp;+&nbsp;name,&nbsp;String.class);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>通过之前注入ioc容器的restTemplate来消费service-hi服务的“/hi”接口，在这里我们直接用的程序名替代了具体的url地址，在ribbon中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的url替换掉服务名。</p><p><br/></p><p>新建一个类HelloControler，编写代码</p><pre class=\"prism-highlight prism-language-java\">@RestController\r\npublic&nbsp;class&nbsp;HelloControler&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\r\n&nbsp;&nbsp;&nbsp;&nbsp;HelloService&nbsp;helloService;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hi(@RequestParam&nbsp;String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;helloService.hiService(name);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><br/></p><p><br/></p><p>启动项目，查看eureka页面，此时ribbon项目已经注册进来了。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807031530549152352160.png\" alt=\"image.png\"/></p><p>打开浏览器，多次访问&nbsp;<a href=\"http://localhost:8764/hi?name=365d1\" _src=\"http://localhost:8764/hi?name=365d1\">http://localhost:8764/hi?name=365d1</a>&nbsp;测试</p><p>浏览器交替输出</p><pre class=\"prism-highlight prism-language-markup\">hi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8762\r\nhi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8763</pre><p>这说明Ribbon自带了负载均衡。</p><p><br/></p><p>此时的架构图</p><p><br/><img src=\"http://upload-images.jianshu.io/upload_images/2279594-9f10b702188a129d.png\"/></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>一个服务注册中心，eureka server,端口为8761</p></li><li><p>service-hi工程跑了两个实例，端口分别为8762,8763，分别向服务注册中心注册</p></li><li><p>sercvice-ribbon端口为8764,向服务注册中心注册</p></li><li><p>当sercvice-ribbon通过restTemplate调用service-hi的hi接口时，因为用ribbon进行了负载均衡，会轮流的调用service-hi：8762和8763 两个端口的hi接口<br/></p></li></ul><p><br/></p>', NULL),(16, 16, '<p>Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。</p><p><br/></p><p>选中maven主项目，添加一个module，命名为service-feign&nbsp;<img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807031530630294414363.png\" alt=\"image.png\"/></p><p>编辑项目application.properties文件</p><pre class=\"prism-highlight prism-language-java\">server.port=8765\r\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/\r\nspring.application.name=service-feign</pre><p>编辑项目启动类ServiceFeignApplication ，加上@EnableFeignClients注解开启Feign的功能。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableDiscoveryClient\r\n@EnableFeignClients\r\npublic&nbsp;class&nbsp;ServiceFeignApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ServiceFeignApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>新建service层，新建接口SchedualServiceHi，通过@ FeignClient（“服务名”），来指定调用哪个服务。</p><pre class=\"prism-highlight prism-language-java\">@FeignClient(value&nbsp;=&nbsp;&quot;service-hi&quot;)\r\npublic&nbsp;interface&nbsp;SchedualServiceHi&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;,method&nbsp;=&nbsp;RequestMethod.GET)\r\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;sayHiFromClientOne(@RequestParam(value&nbsp;=&nbsp;&quot;name&quot;)&nbsp;String&nbsp;name);\r\n\r\n}</pre><p>新建web层，新建HiContorller，对外暴露一个”/hi”的API接口，通过上面定义的Feign客户端SchedualServiceHi 来消费服务。</p><pre class=\"prism-highlight prism-language-java\">@RestController\r\npublic&nbsp;class&nbsp;HiController&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\r\n&nbsp;&nbsp;&nbsp;&nbsp;SchedualServiceHi&nbsp;schedualServiceHi;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;,method&nbsp;=&nbsp;RequestMethod.GET)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;sayHi(@RequestParam&nbsp;String&nbsp;name){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;schedualServiceHi.sayHiFromClientOne(name);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>注意，这里@Autowired可能会报could not autowire错误，原因是IDEA的问题，可以如下设置解决该问题，降低Autowired检测的级别，将Severity的级别由之前的error改成warning或其它可以忽略的级别。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807041530635977643831.png\" title=\"721070-201.png\" alt=\"721070-201.png\"/></p><p>运行项目测试，浏览器多次访问 <a href=\"http://localhost:8765/hi?name=365d1\" _src=\"http://localhost:8765/hi?name=365d1\">http://localhost:8765/hi?name=365d1</a>&nbsp;，依次输出</p><pre class=\"prism-highlight prism-language-java\">hi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8762\r\nhi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8763</pre><p><br/></p>', NULL),(17, 17, '<p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。</p><p>为了解决这个问题，业界提出了断路器模型。<br/></p><p>Netflix开源了Hystrix组件，实现了断路器模式，SpringCloud对这一组件进行了整合。 在微服务架构中，一个请求需要调用多个服务是非常常见的，如下图：</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807041530719260642786.png\" title=\"1.png\" alt=\"1.png\"/></p><p>较底层的服务如果出现故障，会导致连锁故障。当对特定的服务的调用的不可用达到一个阀值（Hystric 是5秒20次） 断路器将会被打开。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807041530719394665533.png\" title=\"2.png\" alt=\"2.png\"/></p><p>断路打开后，可用避免连锁故障，fallback方法可以直接返回一个固定值。</p><p><br/></p><p><strong>改造service-ribbon项目</strong><br/></p><p>修改项目的pom.xml，加入spring-cloud-starter-netflix-hystrix依赖。</p><pre class=\"prism-highlight prism-language-markup\">&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</pre><p>在程序的启动类ServiceRibbonApplication 加@EnableHystrix注解开启Hystrix。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableDiscoveryClient\r\n@EnableHystrix\r\npublic&nbsp;class&nbsp;ServiceRibbonApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ServiceRibbonApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;@LoadBalanced\r\n&nbsp;&nbsp;&nbsp;&nbsp;RestTemplate&nbsp;restTemplate(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;RestTemplate();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>改造HelloService类，在hiService方法上加上@HystrixCommand注解。该注解对该方法创建了熔断器的功能，并指定了fallbackMethod熔断方法，熔断方法直接返回了一个字符串，字符串为”hi,”+name+”,sorry,error!”。</p><pre class=\"prism-highlight prism-language-java\">@Service\r\npublic&nbsp;class&nbsp;HelloService&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\r\n&nbsp;&nbsp;&nbsp;&nbsp;RestTemplate&nbsp;restTemplate;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@HystrixCommand(fallbackMethod&nbsp;=&nbsp;&quot;hiError&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hiService(String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;restTemplate.getForObject(&quot;http://SERVICE-HI/hi?name=&quot;&nbsp;+&nbsp;name,&nbsp;String.class);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hiError(String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;hi,&quot;+name+&quot;,sorry,error!&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>启动：service-ribbon 工程，当我们访问<a href=\"http://localhost:8764/hi?name=forezp,浏览器显示。\" _src=\"http://localhost:8764/hi?name=forezp,浏览器显示。\">http://localhost:8764/hi?name=</a>365D1&nbsp;浏览器显示。</p><pre class=\"prism-highlight prism-language-java\">hi&nbsp;365D1,i&nbsp;am&nbsp;from&nbsp;port:8762</pre><p>此时关闭 service-hi 工程，当我们再访问<a href=\"http://localhost:8764/hi?name=365D1\" _src=\"http://localhost:8764/hi?name=365D1\">http://localhost:8764/hi?name=365D1</a>&nbsp; 浏览器会显示。</p><pre class=\"prism-highlight prism-language-java\">hi,365D1,sorry,error!</pre><p><br/></p><p><strong>改造service-feign工程</strong></p><p>Feign是自带断路器的，在Spring Cloud中，它没有默认打开。需要在配置文件中配置打开它，在配置文件加以下代码：</p><pre class=\"prism-highlight prism-language-java\">feign.hystrix.enabled=true</pre><p>基于service-feign工程进行改造，只需要在FeignClient的SchedualServiceHi接口的注解中加上fallback的指定类就行了</p><pre class=\"prism-highlight prism-language-java\">@FeignClient(value&nbsp;=&nbsp;&quot;service-hi&quot;,fallback&nbsp;=&nbsp;SchedualServiceHiHystric.class)\r\npublic&nbsp;interface&nbsp;SchedualServiceHi&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;,method&nbsp;=&nbsp;RequestMethod.GET)\r\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;sayHiFromClientOne(@RequestParam(value&nbsp;=&nbsp;&quot;name&quot;)&nbsp;String&nbsp;name);\r\n\r\n}</pre><p>SchedualServiceHiHystric需要实现SchedualServiceHi 接口，并注入到Ioc容器中</p><pre class=\"prism-highlight prism-language-java\">@Component\r\npublic&nbsp;class&nbsp;SchedualServiceHiHystric&nbsp;implements&nbsp;SchedualServiceHi&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;sayHiFromClientOne(String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;sorry&nbsp;&quot;&nbsp;+&nbsp;name;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>启动四servcie-feign工程，浏览器打开<a href=\"http://localhost:8765/hi?name=365D1,注意此时service-hi工程没有启动，网页显示\" _src=\"http://localhost:8765/hi?name=365D1,注意此时service-hi工程没有启动，网页显示\">http://localhost:8765/hi?name=365D1</a>&nbsp;注意此时service-hi工程没有启动</p><pre class=\"prism-highlight prism-language-java\">sorry&nbsp;365D1</pre><p>打开service-hi工程，再次访问，浏览器显示</p><pre class=\"prism-highlight prism-language-java\">hi&nbsp;365D1,i&nbsp;am&nbsp;from&nbsp;port:8762</pre>这证明断路器起到作用了', NULL),(18, 18, '<p>ribbon项目和feign项目方式一致，以feign项目为例，编辑service-ribbon和service-feign项目的pom.xml，加入依赖</p><pre class=\"prism-highlight prism-language-markup\">&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</pre><p>在主程序启动类中加入@EnableHystrixDashboard注解，开启hystrixDashboard，加入getServlet方法</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableDiscoveryClient\r\n@EnableFeignClients\r\n@EnableHystrixDashboard\r\npublic&nbsp;class&nbsp;ServiceFeignApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ServiceFeignApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ServletRegistrationBean&nbsp;getServlet()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HystrixMetricsStreamServlet&nbsp;streamServlet&nbsp;=&nbsp;new&nbsp;HystrixMetricsStreamServlet();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServletRegistrationBean&nbsp;registrationBean&nbsp;=&nbsp;new&nbsp;ServletRegistrationBean(streamServlet);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.setLoadOnStartup(1);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.addUrlMappings(&quot;/hystrix.stream&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.setName(&quot;HystrixMetricsStreamServlet&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;registrationBean;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>浏览器访问&nbsp;<a href=\"http://localhost:8765/hystrix\" _src=\"http://localhost:8765/hystrix\">http://localhost:8765/hystrix</a>&nbsp;</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807061530814464242664.png\" alt=\"image.png\"/></p><p>浏览器访问&nbsp;<a href=\"http://localhost:8765/hi?name=365D2\" _src=\"http://localhost:8765/hi?name=365D2\">http://localhost:8765/hi?name=365D2</a> </p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807061530814554344675.png\" alt=\"image.png\"/></p>', NULL),(19, 19, '<h1>Zuul简介</h1><p>Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如／api/user转发到到user服务，/api/shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能。</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>Authentication</p></li><li><p>Insights</p></li><li><p>Stress Testing</p></li><li><p>Canary Testing</p></li><li><p>Dynamic Routing</p></li><li><p>Service Migration</p></li><li><p>Load Shedding</p></li><li><p>Security</p></li><li><p>Static Response handling</p></li><li><p>Active/Active traffic management</p></li></ul><h1>动手实践</h1><p>选中maven主项目，新建service-zuul模块。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807111531319057707109.png\" alt=\"image.png\"/></p><p>编辑项目ServiceZuulApplication启动类，加上注解@EnableZuulProxy，开启zuul的功能</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableEurekaClient\r\n@EnableZuulProxy\r\npublic&nbsp;class&nbsp;ServiceZuulApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ServiceZuulApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><br/></p><p>编辑项目application.properties文件</p><pre class=\"prism-highlight prism-language-java\">server.port=8769\r\neureka.client.service-url.defualtZone=http://localhost:8761/eureka/\r\nspring.application.name=service-zuul\r\nzuul.routes.api-a.path=/api-a/**\r\nzuul.routes.api-a.service-id=service-ribbon\r\nzuul.routes.api-b.path=/api-b/**\r\nzuul.routes.api-b.service-id=service-feign</pre><p>首先指定服务注册中心的地址为http://localhost:8761/eureka/，服务的端口为8769，服务名为service-zuul；以/api-a/ 开头的请求都转发给service-ribbon服务；以/api-b/开头的请求都转发给service-feign服务。</p><p>打开浏览器访问：http://localhost:8769/api-a/hi?name=365D1 浏览器显示</p><pre class=\"prism-highlight prism-language-java\">hi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8763</pre><p>打开浏览器访问：http://localhost:8769/api-b/hi?name=365D1 浏览器显示</p><pre class=\"prism-highlight prism-language-java\">hi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8763</pre><p>这说明zuul起到了路由的作用。</p>', NULL),(20, 20, '<p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。在spring cloud config 组件中，分两个角色，一是config server，二是config client。</p><p><strong>构建服务端</strong><br/></p><p>选中maven主工程，添加module，命名为 config-server。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807191531932216148950.png\" alt=\"image.png\"/></p><p>在程序的入口Application类加上@EnableConfigServer注解开启配置服务器的功能。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableConfigServer\r\npublic&nbsp;class&nbsp;ConfigServerApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ConfigServerApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>需要在程序的配置文件application.properties文件配置以下。</p><pre class=\"prism-highlight prism-language-java\">server.port=8888\r\nspring.application.name=config-server\r\n\r\nspring.cloud.config.server.git.uri=https://github.com/365D1/SpringcloudConfig.git\r\nspring.cloud.config.server.git.search-paths=respo\r\nspring.cloud.config.label=master\r\nspring.cloud.config.server.git.username=\r\nspring.cloud.config.server.git.password=</pre><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>spring.cloud.config.server.git.uri：配置git仓库地址</p></li><li><p>spring.cloud.config.server.git.searchPaths：配置仓库路径</p></li><li><p>spring.cloud.config.label：配置仓库的分支</p></li><li><p>spring.cloud.config.server.git.username：访问git仓库的用户名</p></li><li><p>spring.cloud.config.server.git.password：访问git仓库的用户密码</p></li></ul><p>如果Git仓库为公开仓库，可以不填写用户名和密码，如果是私有仓库需要填写，本例子是公开仓库，放心使用。</p><p>远程仓库中有个文件config-client-dev.properties文件中有一个属性</p><pre class=\"prism-highlight prism-language-java\">foo&nbsp;=&nbsp;foo&nbsp;version&nbsp;3</pre><p>启动程序：访问<a href=\"http://localhost:8888/foo/dev\" _src=\"http://localhost:8888/foo/dev\">http://localhost:8888/foo/dev</a></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807191531932701281210.png\" title=\"微信截图_20180719005123.png\" alt=\"微信截图_20180719005123.png\"/></p><p>证明配置服务中心可以从远程程序获取配置信息。</p><p><br/></p><p>http请求地址和资源文件映射如下:</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>/{application}/{profile}[/{label}]</p></li><li><p>/{application}-{profile}.yml</p></li><li><p>/{label}/{application}-{profile}.yml</p></li><li><p>/{application}-{profile}.properties</p></li><li><p>/{label}/{application}-{profile}.properties</p></li></ul><p><br/></p><p><strong>构建客户端</strong></p><p>选中maven，新建module，命名为&nbsp;config-client 。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807191531932964546340.png\" alt=\"image.png\"/></p><p>其配置文件application.properties。</p><pre class=\"prism-highlight prism-language-java\">server.port=8881\r\nspring.application.name=config-client\r\nspring.cloud.config.label=master\r\nspring.cloud.config.profile=dev\r\nspring.cloud.config.uri=&nbsp;http://localhost:8888/</pre><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>spring.cloud.config.label 指明远程仓库的分支</p></li><li><p>spring.cloud.config.profile</p></li><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><p>dev开发环境配置文件</p></li><li><p>test测试环境</p></li><li><p>pro正式环境</p></li></ul><li><p>spring.cloud.config.uri= http://localhost:8888/ 指明配置服务中心的网址。</p></li></ul><p>程序的入口类，写一个API接口“／hi”，返回从配置中心读取的foo变量的值。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@RestController\r\npublic&nbsp;class&nbsp;ConfigClientApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ConfigClientApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${foo}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;foo;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hi(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;foo;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>打开网址访问：<a href=\"http://localhost:8881/hi，网页显示。\" _src=\"http://localhost:8881/hi，网页显示。\">http://localhost:8881/hi，网页显示。</a> </p><pre class=\"prism-highlight prism-language-java\">foo&nbsp;version&nbsp;3</pre><p>这就说明，config-client从config-server获取了foo的属性，而config-server是从git仓库读取的,如图：</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807191531933384820277.png\" title=\"2279594-40ecbed6d38573d9.png\" alt=\"2279594-40ecbed6d38573d9.png\"/></p>', NULL),(21, 21, '<p>一个服务如何从配置中心读取文件，配置中心如何从远程git读取配置文件，当服务实例很多时，都从配置中心读取文件，这时可以考虑将配置中心做成一个微服务，将其集群化，从而达到高可用，架构图如下</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532534407903085.png\" title=\"2279594-babe706075d72c58.png\" alt=\"2279594-babe706075d72c58.png\"/></p><p>选中maven主项目，添加module，命名为eureka-server-config。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532534849640780.png\" alt=\"image.png\"/></p><p>配置项目application.properties。</p><pre class=\"prism-highlight prism-language-java\">server.port=8889\r\neureka.instance.hostname=localhost\r\neureka.server.renewal-percent-threshold=0.49\r\neureka.client.fetch-registry=false\r\neureka.client.register-with-eureka=false\r\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/</pre><p>编辑项目启动类EurekaServerConfigApplication。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableEurekaServer\r\npublic&nbsp;class&nbsp;EurekaServerConfigApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(EurekaServerConfigApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>运行项目，浏览器访问<a href=\"http://localhost:8889/\" _src=\"http://localhost:8889/\">http://localhost:8889/</a> </p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532535119724983.png\" alt=\"image.png\" width=\"1055\" height=\"654\" style=\"width: 1055px; height: 654px;\"/></p><p>修改原来的config-server工程，加入EurekaClient依赖。</p><pre class=\"prism-highlight prism-language-java\">&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</pre><p>修改配置文件application.properties，指定服务注册地址为http://localhost:8889/eureka/。</p><pre class=\"prism-highlight prism-language-java\">server.port=8888\r\nspring.application.name=config-server\r\n\r\nspring.cloud.config.server.git.uri=https://github.com/365D1/SpringcloudConfig.git\r\nspring.cloud.config.server.git.search-paths=respo\r\nspring.cloud.config.label=master\r\nspring.cloud.config.server.git.username=\r\nspring.cloud.config.server.git.password=\r\n\r\neureka.client.serviceUrl.defaultZone=http://localhost:8889/eureka/</pre><p>修改启动类文件ConfigServerApplication，加入@EnableEurekaClient。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableConfigServer\r\n@EnableEurekaClient\r\npublic&nbsp;class&nbsp;ConfigServerApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ConfigServerApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>运行项目。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532536321574064.png\" alt=\"image.png\" width=\"1\" height=\"1\" style=\"width: 1px; height: 1px;\"/><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532536344913450.png\" alt=\"image.png\" width=\"1069\" height=\"542\" style=\"width: 1069px; height: 542px;\"/></p><p><br/></p><p>修改工程config-client，添加EurekaClient依赖。<br/></p><pre class=\"prism-highlight prism-language-java\">&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</pre><p>修改配置文件application.properties。</p><pre class=\"prism-highlight prism-language-java\">server.port=8881\r\nspring.application.name=config-client\r\nspring.cloud.config.label=master\r\nspring.cloud.config.profile=dev\r\n#spring.cloud.config.uri=&nbsp;http://localhost:8888/\r\n\r\neureka.client.serviceUrl.defaultZone=http://localhost:8889/eureka/\r\nspring.cloud.config.discovery.enabled=true\r\nspring.cloud.config.discovery.service-id=config-server</pre><p>修改启动类文件ConfigClientApplication，加入@EnableEurekaClient。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@RestController\r\n@EnableEurekaClient\r\npublic&nbsp;class&nbsp;ConfigClientApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ConfigClientApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${foo}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;foo;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hi(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;foo;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>spring.cloud.config.discovery.enabled 是从配置中心读取文件。</p></li><li><p>spring.cloud.config.discovery.serviceId 配置中心的servieId，即服务名。</p></li></ul><p>这时发现，在读取配置文件不再写ip地址，而是服务名，这时如果配置服务部署多份，通过负载均衡，从而高可用。</p><p>运行工程。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532537153827123.png\" alt=\"image.png\" width=\"1052\" height=\"536\" style=\"width: 1052px; height: 536px;\"/></p><p>访问<a href=\"http://localhost:8881/hi，浏览器显示：\" _src=\"http://localhost:8881/hi，浏览器显示：\">http://localhost:8881/h</a>i 显示</p><pre class=\"prism-highlight prism-language-java\">foo&nbsp;version&nbsp;3</pre><p><br/></p>', NULL),(22, 22, '<p>VPN作用</p><p><img src=\"/upload/image/2018/08/201808151534266755267261.png\" title=\"20171124154935725.png\" alt=\"20171124154935725.png\" width=\"594\" height=\"331\" style=\"width: 594px; height: 331px;\"/></p><p>SoftEther VPN的官网下载被墙。。。</p><p>所有需要用的软件已传百度网盘</p><p>链接: https://pan.baidu.com/s/171ibsu4a-bZa2pXmXjq90Q 密码: 3nsm</p><p>从网盘中下载&nbsp;softether-vpnserver-v4.27-9668-beta-2018.05.29-linux-x64-64bit.tar.gz 并上传到作为VPN SERVER的服务器（内网服务器）。</p><p>在服务器上解压文件。</p><pre class=\"prism-highlight prism-language-java\">tar&nbsp;-xzvf&nbsp;softether-vpnserver-v4.27-9668-beta-2018.05.29-linux-x64-64bit.tar.gz</pre><p><img src=\"/upload/image/2018/08/201808151534263660848778.png\" alt=\"image.png\"/></p><p>进入vpnserver目录，结构如下</p><p><img src=\"/upload/image/2018/08/201808151534263718485236.png\" alt=\"image.png\"/></p><p><strong>开始安装</strong></p><pre class=\"prism-highlight prism-language-java\">make</pre><p>出现3次询问，都输入1并回车即可。<br/></p><p><img src=\"/upload/image/2018/08/201808151534264063297484.png\" alt=\"image.png\"/></p><p><img src=\"/upload/image/2018/08/201808151534264090746116.png\" alt=\"image.png\" width=\"831\" height=\"378\" style=\"width: 831px; height: 378px;\"/></p><p><img src=\"/upload/image/2018/08/201808151534264113430438.png\" alt=\"image.png\"/></p><p>然后等待软件安装一下。<br/></p><p><img src=\"/upload/image/2018/08/201808151534264287291307.png\" alt=\"image.png\" width=\"836\" height=\"442\" style=\"width: 836px; height: 442px;\"/></p><p>安装完成后，可以设置一下显示的语言，在这里毫不犹豫的设置为英文。</p><p>然后就可以启动vpnserver了。</p><pre class=\"prism-highlight prism-language-java\">./vpnserver&nbsp;start</pre><p>然后还需要设置一波。。。</p><pre class=\"prism-highlight prism-language-java\">./vpncmd</pre><p><img src=\"/upload/image/2018/08/201808151534264917692281.png\" alt=\"image.png\"/></p><p>输入1，设置VPN Server</p><p><img src=\"/upload/image/2018/08/201808151534264961468533.png\" alt=\"image.png\"/></p><p>这里直接回车使用当前的机器的IP和443端口。</p><p><img src=\"/upload/image/2018/08/201808151534265009351947.png\" alt=\"image.png\"/></p><p>这里需要建立一个HUB，可以输入任意英文，例如365d1，然后会提示输入管理密码，例如设置一个国际密码。</p><p>然后就设置完成了。<br/></p><p><strong>管理VPN Server</strong></p><p>下载&nbsp;softether-vpnserver_vpnbridge-v4.27-9668-beta-2018.05.29-windows-x86_x64-intel.exe 安装。</p><p><img src=\"/upload/image/2018/08/201808151534265459513351.png\" alt=\"image.png\"/></p><p>只安装管理工具即可。</p><p><img src=\"/upload/image/2018/08/201808151534265528856991.png\" alt=\"image.png\"/></p><p>新建一个HUB连接。</p><p><img src=\"/upload/image/2018/08/201808151534265650758987.png\" alt=\"image.png\"/></p><p>双击HUB进行设置，添加一个用户。</p><p><img src=\"/upload/image/2018/08/201808151534265787295915.png\" alt=\"image.png\"/></p><p><br/></p><p>设置mac/iphone/android支持</p><p><img src=\"/upload/image/2018/08/201808151534265878522676.png\" alt=\"image.png\"/></p><p>如下配置</p><p><img src=\"/upload/image/2018/08/201808151534266130535057.png\" alt=\"image.png\"/></p><p>然后，回到HUB设置。<br/></p><p><img src=\"/upload/image/2018/08/201808151534266175385791.png\" alt=\"image.png\"/></p><p>开启虚拟SecureNAT<br/></p><p><img src=\"/upload/image/2018/08/201808151534266229333622.png\" alt=\"image.png\"/></p><p>SecureNAT设置。</p><p><img src=\"/upload/image/2018/08/201808151534266278612532.png\" alt=\"image.png\"/></p><p>配置完成。</p><p>注意:</p><p>如需内网穿透，需要映射到VPN Server的443端口。</p><p>开启L2TP/IPsec（mac使用这个连接）需要映射 UDP 500 和 4500 端口。</p>', NULL),(23, 23, '<h2 id=\"h2--redis\"><a name=\"安装 Redis\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装 Redis</h2><p>在Ubuntu下可以使用apt安装，比较简单</p>\r\n<pre><code>apt update\r\napt install redis-server\r\n</code></pre><h2 id=\"h2--redis\"><a name=\"启动 Redis\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动 Redis</h2><pre><code>redis-server &amp;\r\n</code></pre><p>使用&amp;将redis以守护进程方式启动</p>\r\n<h2 id=\"h2--redis-\"><a name=\"查看 Redis 是否启动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看 Redis 是否启动</h2><pre><code>redis-cli\r\n127.0.0.1:6379&gt; ping\r\nPONG\r\n</code></pre><h2 id=\"h2-redis-\"><a name=\"Redis 配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 配置</h2><p>配置文件位于安装目录，Ubuntu Apt安装位置/etc/redis中的redis.conf文件。</p>\r\n<h3 id=\"h3-u67E5u770Bu6307u5B9Au914Du7F6E\"><a name=\"查看指定配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看指定配置</h3><pre><code>127.0.0.1:6379&gt; CONFIG GET loglevel\r\n1) &quot;loglevel&quot;\r\n2) &quot;notice&quot;\r\n</code></pre><p>也可以使用 <code>CONFIG GET *</code> 获取全部配置</p>\r\n<h3 id=\"h3-u7F16u8F91u6307u5B9Au914Du7F6E\"><a name=\"编辑指定配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>编辑指定配置</h3><p>可以通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置。</p>\r\n<pre><code>redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; CONFIG GET loglevel\r\n\r\n1) &quot;loglevel&quot;\r\n2) &quot;notice&quot;\r\n</code></pre><h3 id=\"h3-u53C2u6570u8BF4u660E\"><a name=\"参数说明\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>参数说明</h3><p>redis.conf 配置项说明如下：</p>\r\n<blockquote>\r\n<p>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</p>\r\n<p><code>daemonize no</code></p>\r\n<p>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</p>\r\n<p><code>pidfile /var/run/redis.pid</code></p>\r\n<p>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</p>\r\n<p><code>port 6379</code></p>\r\n<p>绑定的主机地址</p>\r\n<p><code>bind 127.0.0.1</code></p>\r\n<p>当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</p>\r\n<p><code>timeout 300</code></p>\r\n<p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</p>\r\n<p><code>loglevel verbose</code></p>\r\n<p>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</p>\r\n<p><code>logfile stdout</code></p>\r\n<p>设置数据库的数量，默认数据库为0，可以使用<code>SELECT &lt;dbid&gt;</code>命令在连接上指定数据库id&gt;命令在连接上指定数据库id</p>\r\n<p><code>databases 16</code></p>\r\n<p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p>\r\n<p><code>save &lt;seconds&gt; &lt;changes&gt;</code></p>\r\n<p>Redis默认配置文件中提供了三个条件：</p>\r\n<p><code>save 900 1</code></p>\r\n<p><code>save 300 10</code></p>\r\n<p><code>save 60 10000</code></p>\r\n<p>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p>\r\n<p>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</p>\r\n<p><code>rdbcompression yes</code></p>\r\n<p>指定本地数据库文件名，默认值为dump.rdb</p>\r\n<p><code>dbfilename dump.rdb</code></p>\r\n<p>指定本地数据库存放目录</p>\r\n<p><code>dir ./</code></p>\r\n<p>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</p>\r\n<p><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></p>\r\n<p>当master服务设置了密码保护时，slav服务连接master的密码</p>\r\n<p><code>masterauth &lt;master-password&gt;</code></p>\r\n<p>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过<code>AUTH &lt;password&gt;</code>命令提供密码，默认关闭</p>\r\n<p><code>requirepass foobared</code></p>\r\n<p>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p>\r\n<p><code>maxclients 128</code></p>\r\n<p>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</p>\r\n<p><code>maxmemory &lt;bytes&gt;</code></p>\r\n<p>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</p>\r\n<p><code>appendonly no</code></p>\r\n<p>指定更新日志文件名，默认为appendonly.aof</p>\r\n<p><code>appendfilename appendonly.aof</code></p>\r\n<p>指定更新日志条件，共有3个可选值： </p>\r\n<p><code>no：表示等操作系统进行数据缓存同步到磁盘（快）</code></p>\r\n<p><code>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</code></p>\r\n<p><code>everysec：表示每秒同步一次（折衷，默认值）</code></p>\r\n<p><code>appendfsync everysec</code></p>\r\n<p>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</p>\r\n<p><code>vm-enabled no</code></p>\r\n<p>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</p>\r\n<p><code>vm-swap-file /tmp/redis.swap</code></p>\r\n<p>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</p>\r\n<p><code>vm-max-memory 0</code></p>\r\n<p>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</p>\r\n<p><code>vm-page-size 32</code></p>\r\n<p>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</p>\r\n<p><code>vm-pages 134217728</code></p>\r\n<p>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</p>\r\n<p><code>vm-max-threads 4</code></p>\r\n<p>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</p>\r\n<p><code>glueoutputbuf yes</code></p>\r\n<p>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</p>\r\n<p><code>hash-max-zipmap-entries 64</code></p>\r\n<p><code>hash-max-zipmap-value 512</code></p>\r\n<p>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</p>\r\n<p><code>activerehashing yes</code></p>\r\n<p>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</p>\r\n<p><code>include /path/to/local.conf</code></p>\r\n</blockquote>\r\n', '## 安装 Redis\r\n在Ubuntu下可以使用apt安装，比较简单\r\n```\r\napt update\r\napt install redis-server\r\n```\r\n## 启动 Redis\r\n```\r\nredis-server &\r\n```\r\n使用&将redis以守护进程方式启动\r\n## 查看 Redis 是否启动\r\n```\r\nredis-cli\r\n127.0.0.1:6379> ping\r\nPONG\r\n```\r\n## Redis 配置\r\n配置文件位于安装目录，Ubuntu Apt安装位置/etc/redis中的redis.conf文件。\r\n### 查看指定配置\r\n```\r\n127.0.0.1:6379> CONFIG GET loglevel\r\n1) \"loglevel\"\r\n2) \"notice\"\r\n```\r\n也可以使用 `CONFIG GET * ` 获取全部配置\r\n### 编辑指定配置\r\n可以通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置。\r\n```\r\nredis 127.0.0.1:6379> CONFIG SET loglevel \"notice\"\r\nOK\r\nredis 127.0.0.1:6379> CONFIG GET loglevel\r\n \r\n1) \"loglevel\"\r\n2) \"notice\"\r\n```\r\n### 参数说明\r\nredis.conf 配置项说明如下：\r\n> Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程\r\n> \r\n> `daemonize no`\r\n> \r\n> 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\r\n> \r\n> `pidfile /var/run/redis.pid`\r\n> \r\n> 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字\r\n> \r\n> `port 6379`\r\n> \r\n> 绑定的主机地址\r\n> \r\n> `bind 127.0.0.1`\r\n> \r\n> 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\r\n> \r\n> `timeout 300`\r\n> \r\n> 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose\r\n> \r\n> `loglevel verbose`\r\n> \r\n> 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null\r\n> \r\n> `logfile stdout`\r\n> \r\n> 设置数据库的数量，默认数据库为0，可以使用`SELECT <dbid>`命令在连接上指定数据库id>命令在连接上指定数据库id\r\n> \r\n> `databases 16`\r\n> \r\n> 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\r\n> \r\n> `save <seconds> <changes>`\r\n> \r\n> Redis默认配置文件中提供了三个条件：\r\n> \r\n> `save 900 1`\r\n> \r\n> `save 300 10`\r\n> \r\n> `save 60 10000`\r\n> \r\n> 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。\r\n> \r\n> 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大\r\n> \r\n> `rdbcompression yes`\r\n> \r\n> 指定本地数据库文件名，默认值为dump.rdb\r\n> \r\n> `dbfilename dump.rdb`\r\n> \r\n> 指定本地数据库存放目录\r\n> \r\n> `dir ./`\r\n> \r\n> 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步\r\n> \r\n> `slaveof <masterip> <masterport>`\r\n> \r\n> 当master服务设置了密码保护时，slav服务连接master的密码\r\n> \r\n> `masterauth <master-password>`\r\n> \r\n> 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过`AUTH <password>`命令提供密码，默认关闭\r\n> \r\n> `requirepass foobared`\r\n> \r\n> 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息\r\n> \r\n> `maxclients 128`\r\n> \r\n> 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区\r\n> \r\n> `maxmemory <bytes>`\r\n> \r\n> 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no\r\n> \r\n> `appendonly no`\r\n> \r\n> 指定更新日志文件名，默认为appendonly.aof\r\n> \r\n> `appendfilename appendonly.aof`\r\n> \r\n> 指定更新日志条件，共有3个可选值： \r\n> \r\n> `no：表示等操作系统进行数据缓存同步到磁盘（快） `\r\n> \r\n> `always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） `\r\n> \r\n> `everysec：表示每秒同步一次（折衷，默认值）`\r\n> \r\n> `appendfsync everysec`\r\n> \r\n> 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）\r\n> \r\n> `vm-enabled no`\r\n> \r\n> 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享\r\n> \r\n> `vm-swap-file /tmp/redis.swap`\r\n> \r\n> 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0\r\n> \r\n> `vm-max-memory 0`\r\n> \r\n> Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值\r\n> \r\n> `vm-page-size 32`\r\n> \r\n> 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。\r\n> \r\n> `vm-pages 134217728`\r\n> \r\n> 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4\r\n> \r\n> `vm-max-threads 4`\r\n> \r\n> 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启\r\n> \r\n> `glueoutputbuf yes`\r\n> \r\n> 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法\r\n> \r\n> `hash-max-zipmap-entries 64`\r\n> \r\n> `hash-max-zipmap-value 512`\r\n> \r\n> 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）\r\n> \r\n> `activerehashing yes`\r\n> \r\n> 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件\r\n> \r\n> `include /path/to/local.conf`'),(24, 24, '<p>Redis 键命令用于管理 redis 的键。</p>\r\n<h2 id=\"h2-u8BEDu6CD5\"><a name=\"语法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>语法</h2><pre><code>redis 127.0.0.1:6379&gt; COMMAND KEY_NAME\r\n</code></pre><h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><p>设置一个键 hello 其值为 redis</p>\r\n<pre><code>127.0.0.1:6379 &gt; SET hello redis\r\nOK\r\n</code></pre><p>删除键 hello</p>\r\n<pre><code>127.0.0.1:6379 &gt; DEL hello\r\n(integer) 1\r\n</code></pre><h2 id=\"h2-redis-keys-\"><a name=\"Redis keys 命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis keys 命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>DEL key</td>\r\n<td>该命令用于在 key 存在时删除 key。</td>\r\n</tr>\r\n<tr>\r\n<td>DUMP key</td>\r\n<td>序列化给定 key ，并返回被序列化的值。</td>\r\n</tr>\r\n<tr>\r\n<td>EXISTS key</td>\r\n<td>检查给定 key 是否存在。</td>\r\n</tr>\r\n<tr>\r\n<td>EXPIRE key seconds</td>\r\n<td>为给定 key 设置过期时间，以秒计。</td>\r\n</tr>\r\n<tr>\r\n<td>EXPIREAT key timestamp</td>\r\n<td>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td>\r\n</tr>\r\n<tr>\r\n<td>PEXPIRE key milliseconds</td>\r\n<td>设置 key 的过期时间以毫秒计。</td>\r\n</tr>\r\n<tr>\r\n<td>PEXPIREAT key milliseconds-timestamp</td>\r\n<td>设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td>\r\n</tr>\r\n<tr>\r\n<td>KEYS pattern</td>\r\n<td>查找所有符合给定模式( pattern)的 key 。</td>\r\n</tr>\r\n<tr>\r\n<td>MOVE key db</td>\r\n<td>将当前数据库的 key 移动到给定的数据库 db 当中。</td>\r\n</tr>\r\n<tr>\r\n<td>PERSIST key</td>\r\n<td>移除 key 的过期时间，key 将持久保持。</td>\r\n</tr>\r\n<tr>\r\n<td>PTTL key</td>\r\n<td>以毫秒为单位返回 key 的剩余的过期时间。</td>\r\n</tr>\r\n<tr>\r\n<td>TTL key</td>\r\n<td>以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td>\r\n</tr>\r\n<tr>\r\n<td>RANDOMKEY</td>\r\n<td>从当前数据库中随机返回一个 key 。</td>\r\n</tr>\r\n<tr>\r\n<td>RENAME key newkey</td>\r\n<td>修改 key 的名称</td>\r\n</tr>\r\n<tr>\r\n<td>RENAMENX key newkey</td>\r\n<td>仅当 newkey 不存在时，将 key 改名为 newkey 。</td>\r\n</tr>\r\n<tr>\r\n<td>TYPE key</td>\r\n<td>返回 key 所储存的值的类型。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis 键命令用于管理 redis 的键。\r\n## 语法\r\n```\r\nredis 127.0.0.1:6379> COMMAND KEY_NAME\r\n```\r\n## 实例\r\n设置一个键 hello 其值为 redis\r\n```\r\n127.0.0.1:6379 > SET hello redis\r\nOK\r\n```\r\n删除键 hello\r\n```\r\n127.0.0.1:6379 > DEL hello\r\n(integer) 1\r\n```\r\n## Redis keys 命令\r\n|  命令 |  描述 |\r\n| ------------ | ------------ |\r\n| DEL key  | 该命令用于在 key 存在时删除 key。  |\r\n| DUMP key  | 序列化给定 key ，并返回被序列化的值。 |\r\n| EXISTS key  | 检查给定 key 是否存在。 |\r\n| EXPIRE key seconds | 为给定 key 设置过期时间，以秒计。 |\r\n| EXPIREAT key timestamp  | EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。 |\r\n| PEXPIRE key milliseconds  | 设置 key 的过期时间以毫秒计。 |\r\n| PEXPIREAT key milliseconds-timestamp  | 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计 |\r\n| KEYS pattern  | 查找所有符合给定模式( pattern)的 key 。 |\r\n| MOVE key db  | 将当前数据库的 key 移动到给定的数据库 db 当中。 |\r\n| PERSIST key  | 移除 key 的过期时间，key 将持久保持。 |\r\n| PTTL key  | 以毫秒为单位返回 key 的剩余的过期时间。 |\r\n| TTL key  | 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。 |\r\n| RANDOMKEY  | 从当前数据库中随机返回一个 key 。 |\r\n| RENAME key newkey  | 修改 key 的名称 |\r\n| RENAMENX key newkey  | 仅当 newkey 不存在时，将 key 改名为 newkey 。 |\r\n| TYPE key  | 返回 key 所储存的值的类型。 |'),(25, 25, '<pre class=\"prism-highlight prism-language-swift\">//&nbsp;swift&nbsp;中使用import来引入相应的库\r\nimport&nbsp;UIKit\r\n\r\n//&nbsp;swift&nbsp;不需用使用&nbsp;；&nbsp;来结尾&nbsp;但是加上&nbsp;;&nbsp;也可以&nbsp;比如有java等其他语言习惯的话\r\n\r\n//&nbsp;----------&nbsp;1.1&nbsp;变量&nbsp;----------\r\n//&nbsp;变量需用使用&nbsp;var&nbsp;来声明\r\nvar&nbsp;variable&nbsp;=&nbsp;&quot;变量值&quot;\r\nprint(variable)\r\n\r\n//&nbsp;----------&nbsp;1.2&nbsp;常量&nbsp;----------\r\n//&nbsp;变量需用使用&nbsp;var&nbsp;来声明\r\nlet&nbsp;constant&nbsp;=&nbsp;&quot;常量值&quot;\r\nprint(constant)\r\n\r\n//&nbsp;----------&nbsp;1.3&nbsp;可选型&nbsp;----------\r\nvar&nbsp;optional:String?&nbsp;=&nbsp;&quot;666&quot;\r\nprint(optional!)\r\n\r\n//&nbsp;----------&nbsp;1.4&nbsp;运算符&nbsp;----------\r\n\r\n\r\n//&nbsp;----------&nbsp;1.4.1&nbsp;区间运算符&nbsp;----------\r\n\r\n//&nbsp;闭区间运算符\r\nfor&nbsp;i&nbsp;in&nbsp;1...5&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;print(i)\r\n}\r\n\r\n//&nbsp;半开区间运算符\r\nfor&nbsp;j&nbsp;in&nbsp;1..&lt;5&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;print(j)\r\n}</pre><p><br/></p>', NULL),(26, 26, '<p><strong>什么是自然拼读？</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;英语国家的孩子，记单词不是靠“背”，而是靠“拼读”，这就是所谓的“自然拼读”法。自然拼读法，又称“英语自然拼读法”，自然拼读法是目前国际主流的英语教学法，它不仅是以英语为母语国家的孩子学习英语读音与拼字，增进阅读能力与理解力的教学法，更是以英语为第二语言的英语初学者学习发音规则与拼读技巧的教学方法。这种教学法简单高效，符合小朋友学习语言的规律，且让他们在玩中学习，在学习中玩，这样不仅改变了学习英语时的枯燥氛围，还大大提高了学习效率，总之是一种效果显著的英语教学法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于大多数英语初学者，自然拼读法是一门实用的工具与方法，如能掌握，不需要借助音标，就都能够读出80%的英语单词，把枯燥无味的背单词变成一件简单的事，从而达到事半功倍的效果。</p><p><br/></p><p><strong>自然拼读的目的？</strong></p><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>见词能读，见词敢读</p></li><li><p>听到读音，就能拼写</p></li></ol><p><br/></p><p><strong>自然拼读学什么？</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;<img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/11/201811271543253275581230.jpg\" title=\"3ac79f3df8dcd10013d6d95f748b4710b9122f01.jpg\" alt=\"3ac79f3df8dcd10013d6d95f748b4710b9122f01.jpg\" width=\"300\" height=\"200\" border=\"0\" vspace=\"0\" style=\"width: 300px; height: 200px;\"/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一只 [羊] 羊是它的名称，而它发出的声音并不是[yang]，而是[咩]<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类比，[H]是一个英文字母，它的名字是/<span style=\"color: #222222; font-family: Menlo, monospace; font-size: 11px; white-space: pre-wrap; background-color: #FFFFFF;\">eɪ</span><span style=\"color: #222222; font-family: Menlo, monospace; font-size: 11px; white-space: pre-wrap; background-color: #FFFFFF;\">tʃ</span>/，而它在单词中的发音则是/<span style=\"color: #222222; font-family: Menlo, monospace; font-size: 11px; white-space: pre-wrap; background-color: #FFFFFF;\">h</span>/<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以，自然拼读是学习英文字母在单词中发音的规律</p><p><br/></p><p><strong>学习音标的几个方法</strong><br/></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/11/201811271543253965370543.png\" title=\"WX20181127-013818@2x.png\" alt=\"WX20181127-013818@2x.png\" width=\"700\" height=\"350\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 350px;\"/></strong></p>', NULL),(27, 27, '<p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/11/201811271543254216869088.png\" title=\"WX20181127-014216@2x.png\" alt=\"WX20181127-014216@2x.png\" width=\"700\" height=\"200\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 200px;\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/11/201811271543254341382739.png\" title=\"WX20181127-014520@2x.png\" alt=\"WX20181127-014520@2x.png\" width=\"700\" height=\"200\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 200px;\"/></p><p>所谓掐头法就是将发音中的/e/去掉只留下结尾的发音</p>', NULL),(28, 28, '<p><br/><img src=\"/upload/image/2018/11/201811271543254708427852.png\" title=\"WX20181127-015052@2x.png\" alt=\"WX20181127-015052@2x.png\" width=\"700\" height=\"200\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 200px;\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/11/201811271543254851760838.png\" title=\"WX20181127-015345@2x.png\" alt=\"WX20181127-015345@2x.png\" width=\"700\" height=\"200\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 200px;\"/></p><p>去尾法就是将结尾的发音去掉，只留前面的发音</p>', NULL),(29, 29, '<p><strong>可选型</strong></p><p>Swift 的可选（Optional）类型，用于处理值缺失的情况。可选表示&quot;那儿有一个值，并且它等于 x &quot;或者&quot;那儿没有值&quot;。</p><p><span style=\"color: #FF0000;\">简单理解：就是一个变量，它的值可能是具体某个值或者为nil&nbsp;</span></p><p><span style=\"color: #000000;\">可选型的声明</span></p><pre class=\"prism-highlight prism-language-swift\">var&nbsp;optionalInteger:Int?\r\nvar&nbsp;optionalString:Optional&lt;String&gt;</pre><p><span style=\"color: #000000;\"></span>以上两种方式都是可以声明可选型的</p><p>声明一个可选变量或者可选属性的时候没有提供初始值，它的值会默认为 nil。</p><p><br/></p><p><strong>强制解析</strong><br/></p><p>当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（!）来获取值。这个感叹号表示&quot;我知道这个可选有值，请使用它。&quot;这被称为可选值的强制解析（forced unwrapping）。</p><pre class=\"prism-highlight prism-language-swift\">//&nbsp;声明变量没有赋值，此时变量为nil\r\nvar&nbsp;a:String?\r\n//&nbsp;强制解析可选型会报错\r\nprint(a!)</pre><p><span style=\"color: #FF0000;\"></span><span style=\"color: #FF0000;\">使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。</span></p><p><span style=\"color: #FF0000;\"><br/></span></p><p><strong>自动解析</strong></p><p>你可以在声明可选变量时使用感叹号（!）替换问号（?）。这样可选变量在使用时就不需要再加一个感叹号（!）来获取值，它会自动解析。</p><pre class=\"prism-highlight prism-language-swift\">var&nbsp;a:String!&nbsp;=&nbsp;&quot;abc&quot;\r\nprint(a)</pre><p>输出</p><p>Optional(&quot;abc&quot;)</p><p><span style=\"color: #FF0000;\">实测并没有自动解析，不懂原因。。。</span></p><p><span style=\"color: #FF0000;\"><br/></span></p><p><strong><span style=\"color: #000000;\">可选绑定</span></strong><span style=\"color: #000000;\"><br/></span></p><p><span style=\"color: #000000;\">使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。</span></p><pre class=\"prism-highlight prism-language-swift\">var&nbsp;a:String!&nbsp;=&nbsp;&quot;abc&quot;\r\nif&nbsp;let&nbsp;b&nbsp;=&nbsp;a&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;print(b)\r\n}</pre><p>输出</p><p>abc</p>', NULL),(30, 30, '<p><img src=\"/upload/image/2018/12/201812051543942407578180.png\" title=\"QQ浏览器截图20181205004908.png\" alt=\"QQ浏览器截图20181205004908.png\" width=\"700\" height=\"350\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 350px;\"/></p><p>对比法就是将英语发音与汉语拼音进行对比，使用其类似于汉语拼音发音来加深记忆。</p>', NULL),(31, 31, '<p><img src=\"/upload/image/2018/12/201812051543942474421337.png\" alt=\"image.png\" width=\"700\" height=\"350\" border=\"0\" vspace=\"0\" title=\"image.png\" style=\"width: 700px; height: 350px;\"/></p><p>其它法则是没有什么好的规律与方法记忆，所以采取强制记忆的方式将其记忆。</p>', NULL),(32, 32, '<p><img src=\"/upload/image/2018/12/201812111544461502828555.png\" title=\"WX20181211-010437@2x.png\" alt=\"WX20181211-010437@2x.png\" width=\"700\" height=\"605\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 605px;\"/></p>', NULL),(33, 33, '<p>11<br/></p>', NULL),(34, 34, '<h3>一、什么是数据库连接池</h3><p style=\"text-indent: 2em;\">数据库连接是一种关键的、有限的、昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正是针对这个问题提出来的。</p><p style=\"text-indent: 2em;\">数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。</p><p style=\"text-indent: 2em;\">数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数制约。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。数据库连接池的最小连接数和最大连接数的设置要考虑到下列几个因素：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp;1. 最小连接数</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是连接池一直保持的数据库连接，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp;2. 最大连接数</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是连接池能申请的最大连接数，如果数据库连接请求超过此数，后面的数据库连接请求将被加入到等待队列中，这会影响之后的数据库操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>3. 最小连接数与最大连接数差距</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最小连接数与最大连接数相差太大，那么最先的连接请求将会获利，之后超过最小连接数量的连接请求等价于建立一个新的数据库连接。不过，这些大于最小连接数的数据库连接在使用完不会马上被释放，它将被放到连接池中等待重复使用或是空闲超时后被释放。</p><p><br/></p><h3>二、动手干</h3><p>添加依赖 pom.xml</p><pre class=\"prism-highlight prism-language-markup\">&lt;!--&nbsp;数据库驱动&nbsp;--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;mysql&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;scope&gt;runtime&lt;/scope&gt;\r\n&lt;/dependency&gt;\r\n&lt;!--&nbsp;数据库连接池&nbsp;--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;1.1.10&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;!--&nbsp;mybatis&nbsp;--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;1.3.2&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;!--&nbsp;mybatis&nbsp;plus&nbsp;扩展&nbsp;--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;3.0.6&lt;/version&gt;\r\n&lt;/dependency&gt;</pre><p>编写数据库连接配置 application-mysql.yml</p><pre class=\"prism-highlight prism-language-java\">spring:\r\n&nbsp;&nbsp;datasource:\r\n&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;com.alibaba.druid.pool.DruidDataSource\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;这里不能使用druid的驱动&nbsp;否则mybatis&nbsp;plus报错\r\n&nbsp;&nbsp;&nbsp;&nbsp;driver-class-name:&nbsp;com.mysql.cj.jdbc.Driver\r\n&nbsp;&nbsp;&nbsp;&nbsp;url:&nbsp;jdbc:mysql://localhost:3306/database?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false\r\n&nbsp;&nbsp;&nbsp;&nbsp;username:&nbsp;root\r\n&nbsp;&nbsp;&nbsp;&nbsp;password:&nbsp;123456</pre><p>编写druid配置 application.yml</p><pre class=\"prism-highlight prism-language-java\">#-----------------------------\r\n#|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;druid配置&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\r\n#-----------------------------\r\ndruid:\r\n&nbsp;&nbsp;#&nbsp;&nbsp;初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\r\n&nbsp;&nbsp;initial-size:&nbsp;1\r\n&nbsp;&nbsp;#&nbsp;&nbsp;最小连接池数量\r\n&nbsp;&nbsp;min-idle:&nbsp;1\r\n&nbsp;&nbsp;#&nbsp;&nbsp;最大连接池数量\r\n&nbsp;&nbsp;max-active:&nbsp;10\r\n&nbsp;&nbsp;#&nbsp;&nbsp;配置获取连接等待超时的时间\r\n&nbsp;&nbsp;max-wait:&nbsp;10000\r\n&nbsp;&nbsp;#&nbsp;&nbsp;配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n&nbsp;&nbsp;time-between-eviction-runs-millis:&nbsp;60000\r\n&nbsp;&nbsp;#&nbsp;&nbsp;配置一个连接在池中最小生存的时间，单位是毫秒\r\n&nbsp;&nbsp;min-evictable-idle-time-millis:&nbsp;300000\r\n&nbsp;&nbsp;#&nbsp;&nbsp;验证连接有效与否的SQL，不同的数据配置不同\r\n&nbsp;&nbsp;validation-query:&nbsp;select&nbsp;1\r\n&nbsp;&nbsp;#&nbsp;&nbsp;建议配置为true，不影响性能，并且保证安全性。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;申请连接的时候检测，如果空闲时间大于\r\n&nbsp;&nbsp;#&nbsp;&nbsp;timeBetweenEvictionRunsMillis，\r\n&nbsp;&nbsp;#&nbsp;&nbsp;执行validationQuery检测连接是否有效。\r\n&nbsp;&nbsp;test-while-idle:&nbsp;true\r\n&nbsp;&nbsp;#&nbsp;&nbsp;申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;这里建议配置为TRUE，防止取到的连接不可用\r\n&nbsp;&nbsp;test-on-borrow:&nbsp;true\r\n&nbsp;&nbsp;#&nbsp;&nbsp;归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能\r\n&nbsp;&nbsp;test-on-return:&nbsp;false\r\n&nbsp;&nbsp;#&nbsp;&nbsp;是否缓存preparedStatement，也就是PSCache。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;PSCache对支持游标的数据库性能提升巨大，比如说oracle。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;作者在5.5版本中使用PSCache，通过监控界面发现PSCache有缓存命中率记录，\r\n&nbsp;&nbsp;#&nbsp;&nbsp;该应该是支持PSCache。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;打开PSCache，并且指定每个连接上PSCache的大小\r\n&nbsp;&nbsp;pool-prepared-statements:&nbsp;true\r\n&nbsp;&nbsp;max-pool-prepared-statement-per-connection-size:&nbsp;20\r\n&nbsp;&nbsp;#&nbsp;&nbsp;属性类型是字符串，通过别名的方式配置扩展插件，\r\n&nbsp;&nbsp;#&nbsp;&nbsp;常用的插件有：\r\n&nbsp;&nbsp;#&nbsp;&nbsp;监控统计用的filter:stat\r\n&nbsp;&nbsp;#&nbsp;&nbsp;日志用的filter:log4j\r\n&nbsp;&nbsp;#&nbsp;&nbsp;防御sql注入的filter:wall\r\n&nbsp;&nbsp;filters:&nbsp;stat\r\n&nbsp;&nbsp;#&nbsp;&nbsp;登录用户名称\r\n&nbsp;&nbsp;username:&nbsp;root\r\n&nbsp;&nbsp;#&nbsp;&nbsp;登录密码\r\n&nbsp;&nbsp;password:&nbsp;123456</pre><p>编写数据源配置 config/druid/DruidDataSourceConfiguration.java</p><pre class=\"prism-highlight prism-language-java\">@Configuration\r\npublic&nbsp;class&nbsp;DruidDataSourceConfiguration&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${spring.datasource.driver-class-name}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;jdbcDriver;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${spring.datasource.url}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;jdbcUrl;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${spring.datasource.username}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;jdbcUsername;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${spring.datasource.password}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;jdbcPassword;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.initial-size}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;initialSize;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.min-idle}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;minIdle;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.max-active}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;maxActive;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.max-wait}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;maxWait;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.time-between-eviction-runs-millis}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;timeBetweenEvictionRunsMillis;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.min-evictable-idle-time-millis}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;minEvictableIdleTimeMillis;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.validation-query}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;validationQuery;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.test-while-idle}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Boolean&nbsp;testWhileIdle;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.test-on-borrow}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Boolean&nbsp;testOnBorrow;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.test-on-return}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Boolean&nbsp;testOnReturn;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.pool-prepared-statements}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Boolean&nbsp;poolPreparedStatements;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.max-pool-prepared-statement-per-connection-size}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;maxPoolPreparedStatementPerConnectionSize;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.filters}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;filters;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Primary\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name&nbsp;=&nbsp;&quot;druidDataSource&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;DruidDataSource&nbsp;createDataSource()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DruidDataSource&nbsp;dataSource&nbsp;=&nbsp;new&nbsp;DruidDataSource();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setDriverClassName(jdbcDriver);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setUrl(jdbcUrl);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setUsername(jdbcUsername);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setPassword(jdbcPassword);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setInitialSize(initialSize);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setMinIdle(minIdle);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setMaxActive(maxActive);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setMaxWait(maxWait);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setValidationQuery(validationQuery);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setTestWhileIdle(testWhileIdle);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setTestOnBorrow(testOnBorrow);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setTestOnReturn(testOnReturn);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setPoolPreparedStatements(poolPreparedStatements);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setFilters(filters);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(SQLException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;dataSource;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>编写Druid配置config/druid/DruidConfiguration.java</p><pre class=\"prism-highlight prism-language-java\">@Configuration\r\npublic&nbsp;class&nbsp;DruidConfiguration&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.username}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;username;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.password}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;password;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Druid&nbsp;Web&nbsp;配置&nbsp;添加用于登录监控的用户\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;ServletRegistrationBean\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ServletRegistrationBean&nbsp;servletRegistrationBean()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServletRegistrationBean&nbsp;registrationBean&nbsp;=&nbsp;new&nbsp;ServletRegistrationBean(new&nbsp;StatViewServlet(),&nbsp;&quot;/druid/*&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.addInitParameter(&quot;loginUsername&quot;,&nbsp;username);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.addInitParameter(&quot;loginPassword&quot;,&nbsp;password);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;registrationBean;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Druid&nbsp;过滤器\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;FilterRegistrationBean\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;FilterRegistrationBean&nbsp;filterRegistrationBean()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilterRegistrationBean&nbsp;registrationBean&nbsp;=&nbsp;new&nbsp;FilterRegistrationBean();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.setFilter(new&nbsp;WebStatFilter());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.addUrlPatterns(&quot;/*&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.addInitParameter(&quot;exclusions&quot;,&nbsp;&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;registrationBean;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>编写MyBatis配置resources/mybatis-config.xml</p><pre class=\"prism-highlight prism-language-markup\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;utf-8&quot;&nbsp;?&gt;\r\n&lt;!DOCTYPE&nbsp;configuration&nbsp;PUBLIC&nbsp;&quot;-//mybatis.org//DTD&nbsp;Config&nbsp;3.0//EN&quot;&nbsp;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\r\n&lt;configuration&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;全局配置属性&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;settings&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;使用jdbc的useGeneratedKeys获取数据库自增主键值&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;setting&nbsp;name=&quot;useGeneratedKeys&quot;&nbsp;value=&quot;true&quot;/&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;使用列标签替换列别名&nbsp;默认:true&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;setting&nbsp;name=&quot;useColumnLabel&quot;&nbsp;value=&quot;true&quot;/&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;开启驼峰命名转换:Table{create_time}&nbsp;-&gt;&nbsp;Entity{createTime}&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;setting&nbsp;name=&quot;mapUnderscoreToCamelCase&quot;&nbsp;value=&quot;true&quot;/&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;SQL语句控制台打印&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;setting&nbsp;name=&quot;logImpl&quot;&nbsp;value=&quot;STDOUT_LOGGING&quot;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/settings&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugins&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--mybatis&nbsp;plus&nbsp;分页插件--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugin&nbsp;interceptor=&quot;com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor&quot;&gt;&lt;/plugin&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugins&gt;\r\n&lt;/configuration&gt;</pre><p>编写MyBatis Plus配置config/mybatis/MyBatisPlusConfiguration.java</p><pre class=\"prism-highlight prism-language-java\">@Configuration\r\npublic&nbsp;class&nbsp;MyBatisPlusConfiguration&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;mybatis-config.xml配置文件的路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;String&nbsp;mybatisConfigFile;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${mybatis-plus.mybatis-config-file}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setMybatisConfigFile(String&nbsp;mybatisConfigFile)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyBatisPlusConfiguration.mybatisConfigFile&nbsp;=&nbsp;mybatisConfigFile;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;mybatis&nbsp;mapper文件所在路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;String&nbsp;mapperPath;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${mybatis-plus.mapper-path}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setMapperPath(String&nbsp;mapperPath)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyBatisPlusConfiguration.mapperPath&nbsp;=&nbsp;mapperPath;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;实体类所在的package\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${mybatis-plus.type-aliasa-package}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;typeAliasPackage;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Qualifier(value&nbsp;=&nbsp;&quot;druidDataSource&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;DataSource&nbsp;dataSource;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name&nbsp;=&nbsp;&quot;sqlSessionFactory&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;MybatisSqlSessionFactoryBean&nbsp;createSqlSessionFactoryBean()&nbsp;throws&nbsp;IOException&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MybatisSqlSessionFactoryBean&nbsp;bean&nbsp;=&nbsp;new&nbsp;MybatisSqlSessionFactoryBean();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置mybatis&nbsp;configuration&nbsp;扫描路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bean.setConfigLocation(new&nbsp;ClassPathResource(mybatisConfigFile));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;添加mapper&nbsp;扫描路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PathMatchingResourcePatternResolver&nbsp;resolver&nbsp;=&nbsp;new&nbsp;PathMatchingResourcePatternResolver();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;packageSearchPath&nbsp;=&nbsp;ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX&nbsp;+&nbsp;mapperPath;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bean.setMapperLocations(resolver.getResources(packageSearchPath));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置dataSource\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bean.setDataSource(dataSource);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置typeAlias&nbsp;包扫描路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bean.setTypeAliasesPackage(typeAliasPackage);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;bean;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>三、测试</p><p>运行项目，浏览器输入localhost:8081/druid 输入账号密码，进入SQL监控，访问相应数据库操作功能，查看SQL监控。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/01/201901021546442778642141.png\" alt=\"image.png\" width=\"700\" height=\"152\" border=\"0\" vspace=\"0\" title=\"image.png\" style=\"width: 700px; height: 152px;\"/></p><p><br/></p>', NULL),(35, 35, '<h1 id=\"h1-sass-\"><a name=\"Sass简介\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Sass简介</h1><p>Sass 是一个 CSS 的扩展，它在 CSS 语法的基础上，允许您使用变量 (variables), 嵌套规则 (nested rules), 混合 (mixins), 导入 (inline imports) 等功能，令 CSS 更加强大与优雅。使用 Sass 以及 Compass 样式库 有助于更好地组织管理样式文件，以及更高效地开发项目。</p>\r\n<h1 id=\"h1-node-sass-\"><a name=\"node-sass 安装\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>node-sass 安装</h1><p>首先安装NodeJS，然后使用NPM安装node-sass</p>\r\n<pre><code>npm install -g node-sass</code></pre><p>测试编译，新建style.scss文件，进入CMD</p>\r\n<pre><code>node-sass style.scss style.css</code></pre><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903120010548470551.png\" alt=\"\"></p>\r\n<h2 id=\"h2-node-sass-\"><a name=\"node-sass 常用命令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>node-sass 常用命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody><tr>\r\n<td>--output-style</td>\r\n<td>输出风格 (nested | expanded | compact | compressed) 使用compressed压缩输出的css代码</td>\r\n</tr>\r\n<tr>\r\n<td>-o, --output</td>\r\n<td>输出目录</td>\r\n</tr>\r\n</tbody></table>\r\n<h1 id=\"h1-atom-ide-\"><a name=\"Atom IDE插件安装\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Atom IDE插件安装</h1><p>打开 Atom-&gt;File-&gt;Settings-&gt;install<br>搜索 sass-autocompile 并安装<br>设置如下<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903120031209593977.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u6D4Bu8BD5u63D2u4EF6u7F16u8BD1\"><a name=\"测试插件编译\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>测试插件编译</h2><p>在项目目录下新建 scss 目录和 css 目录<br>在scss目录下新建文件 style.scss 并写入代码</p>\r\n<pre><code>body{\r\n  margin: 0;\r\n  padding: 0;\r\n}</code></pre><p>保存文件，激活插件自动编译，在css目录中自动生成编译后文件 style.min.css，查看该文件</p>\r\n<pre><code>body{margin:0;padding:0}</code></pre><p>scss代码成功编译，并压缩为一行</p>\r\n', NULL),(36, 36, '<h1 id=\"h1-u5D4Cu5957u89C4u5219\"><a name=\"嵌套规则\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>嵌套规则</h1><p>CSS中有一些属性遵循相同的“命名空间”，在CSS中，如果你想在同一个命名空间中设置一串属性，你必须每次都输出来。Sass为此提供了一个快捷方式：只需要输入一次命名空间，然后在其内部嵌套子属性。</p>\r\n<pre><code>#main p {\r\n  color: #00ff00;\r\n  width: 97%;\r\n\r\n  .redbox {\r\n    background-color: #ff0000;\r\n    color: #000000;\r\n  }\r\n}</code></pre><p>编译为</p>\r\n<pre><code>#main p {color: #00ff00;width: 97%;}\r\n#main p .redbox {background-color: #ff0000;color: #000000;}</code></pre><p>这有助于避免父选择器重复，相对于复杂的CSS布局中多层嵌套的选择器 要简单得多。</p>\r\n<h1 id=\"h1--amp-\"><a name=\"引用父选择器:&amp;\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>引用父选择器:&amp;</h1><p>有些时候需要直接使用嵌套外层的父选择器，可以 &amp; 字符来明确地表示插入指定父选择器。</p>\r\n<pre><code>a {\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n  &amp;:hover { text-decoration: underline; }\r\n  body.firefox &amp; { font-weight: normal; }\r\n}</code></pre><p>编译为</p>\r\n<pre><code>a {font-weight: bold;text-decoration: none;}\r\na:hover {text-decoration: underline;}\r\nbody.firefox a {font-weight: normal;}</code></pre><p>&amp;将替换为呈现在CSS文件中的父选择器</p>\r\n<p>使用&amp;作为选择器前缀<br>&amp; 必须出现在的选择器的开头位置，但可以跟随后缀，将被添加到父选择的后面。</p>\r\n<pre><code>#main {\r\n  color: black;\r\n  &amp;-sidebar { border: 1px solid; }\r\n}</code></pre><p>编译为</p>\r\n<pre><code>#main {color: black;}\r\n#main-sidebar {border: 1px solid;}</code></pre>', NULL),(37, 37, '<h1 id=\"h1-u53D8u91CF\"><a name=\"变量\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>变量</h1><p>使用SassScript最直截了当的方法是使用变量。变量以美元符号开始，赋值像设置CSS属性那样</p>\r\n<pre><code>$width:5em;\r\n#main {\r\n  width: $width;\r\n}</code></pre><p>编译为</p>\r\n<pre><code>#main {\r\n  width: 5em;\r\n}</code></pre><p>作用域:不在任何嵌套选择器内定义的变量则在可任何地方使用，相当于全局变量，使用!global可以使一个变量成为全局变量</p>\r\n<pre><code>$width:5em !global;</code></pre><p>嵌套在{}里的变量，仅在它定义的选择器嵌套层级的范围内可用。</p>\r\n<pre><code>#main {\r\n    $width:5em;\r\n    #box {\r\n        width:$width;\r\n    }\r\n}</code></pre><p>编译为</p>\r\n<pre><code>#main #box {\r\n    width:5em;\r\n}</code></pre><p>由于历史原因，变量名（以及其他所有Sass标识符）可以互换连字符 - 和下划线_ 。例如，如果你定义了一个名为 $main-width，您可以使用 $main_width访问它，反之亦然。</p>\r\n<h1 id=\"h1-u6570u636Eu7C7Bu578B\"><a name=\"数据类型\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>数据类型</h1><p>SassScript 支持 7 种主要的数据类型：</p>\r\n<ul>\r\n<li>数字 (例如： 1.2, 13, 10px)</li><li>文本字符串，带引号字符串和不带引号字符串(例如：”foo”, ‘bar’, baz)</li><li>颜色 (例如：blue, #04a3f9, rgba(255, 0, 0, 0.5))</li><li>布尔值 (例如： true, false)</li><li>空值 (例如： null)</li><li>值列表 (list)，用空格或逗号分隔 (例如： 1.5em 1em 0 2em, Helvetica, Arial, sans-serif)</li><li>maps ，从一个值映射到另一个 (例如： (key1: value1, key2: value2))<h2 id=\"h2--strings-\"><a name=\"字符串（Strings）\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>字符串（Strings）</h2>CSS指定两种字符串类型：带引号的字符串,包括双引号和单引号<h2 id=\"h2--lists-\"><a name=\"列表（Lists）\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>列表（Lists）</h2>列表(lists) 是指 Sass 如何表示在CSS声明的，类似margin: 10px 15px 0 0 或  font-face: Helvetica, Arial, sans-serif这样的值，列表只是一串其他值，无论是用空格还是用逗号隔开。事实上，独立的值也被视为列表：只包含一个值的列表。<br>列表本身没有太多的功能，但是 SassScript list functions 使它们非常有用。nth 函数可以直接访问列表中的某一项；join 函数可以将多个列表拼接在一起；append 函数可以将某项添加到列表中；<a href=\"https://github.com/each\" title=\"&#64;each\" class=\"at-link\">@each</a> 指令可以将添加样式到列表中的每一项。<h2 id=\"h2-maps\"><a name=\"Maps\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Maps</h2>Maps代表一个键和值对集合，其中键用于查找值。他们可以很容易地将值收集到命名组中，并且可以动态地访问这些组。和列表（Lists）不同，Maps必须始终使用括号括起来，并且必须用逗号分隔。Maps中的键和值可以是任意的SassScript对象。一个Maps可能只有一个值与给定的键关联（尽管该值可以是一个列表）。一个给定的值可能与许多键关联。<h2 id=\"h2--colors-\"><a name=\"颜色（Colors）\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>颜色（Colors）</h2>任何CSS颜色表达式返回SassScript颜色值。</li></ul>\r\n', NULL),(38, 38, '<h1 id=\"h1-u73AFu5883u51C6u5907\"><a name=\"环境准备\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>环境准备</h1><p>安装 nodepad++<br>安装 nodepad++ 二进制编辑插件<br>安装 virtualbox</p>\r\n<h1 id=\"h1-u5F00u53D1u6B65u9AA4\"><a name=\"开发步骤\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>开发步骤</h1><p>在Windows（或其他系统）上编写源代码 –&gt; 用C语言编译器编译源代码，生成机器语言文件 –&gt; 对机器语言文件进行加工，生成磁盘映像文件 –&gt; 将映像文件写入磁盘，做成含操作系统的启动盘</p>\r\n<h1 id=\"h1-hello-world\"><a name=\"Hello World\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Hello World</h1><p>使用nodepad++新建一个文件，命名为os.img，选择工具栏上的View in HEX，使用十六进制方式编辑文件<br><img src=\"/upload/image/2019/03/201903190008084419766.png\" alt=\"\"><br>从地址00000000开始键入如下值<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190010591535566.png\" alt=\"\"><br>注意在000001f0和00000200处不全是0x00<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190012119810387.png\" alt=\"\"><br>剩下的全部填充0x00<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190014006768618.png\" alt=\"\"><br>编写完保存文件，使用virtualbox运行刚才编写的磁盘映像文件(os.img)<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190016492043572.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190018202873188.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190019001228698.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190021242219992.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190022236807115.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190023306415272.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190025082315379.png\" alt=\"\"><br>源码地址 <a href=\"https://github.com/365D1/30OS.git\">https://github.com/365D1/30OS.git</a></p>\r\n', NULL),(39, 39, '<h1 id=\"h1-swfit-\"><a name=\"swfit字典\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>swfit字典</h1><p>Swift 字典用来存储无序的相同类型数据的集合，Swift 数组会强制检测元素的类型，如果类型不同则会报错。</p>\r\n<p>Swift 字典每个值（value）都关联唯一的键（key），键作为字典中的这个值数据的标识符。</p>\r\n<p>和数组中的数据项不同，字典中的数据项并没有具体顺序。我们在需要通过标识符（键）访问数据的时候使用字典，这种方法很大程度上和我们在现实世界中使用字典查字义的方法一样。</p>\r\n<p>Swift 字典的key没有类型限制可以是整型或字符串，但必须是唯一的。</p>\r\n<p>如果创建一个字典，并赋值给一个变量，则创建的字典就是可以修改的。这意味着在创建字典后，可以通过添加、删除、修改的方式改变字典里的项目。如果将一个字典赋值给常量，字典就不可修改，并且字典的大小和内容都不可以修改。</p>\r\n<h1 id=\"h1-u521Bu5EFAu5B57u5178\"><a name=\"创建字典\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>创建字典</h1><p>可以使用如下格式创建字典</p>\r\n<pre><code>var someDict =  [KeyType: ValueType]()\r\nvar someDict:[Int:String] = [0:&quot;New York&quot;,1:&quot;Washington&quot;,2:&quot;Philadelphia&quot;]</code></pre><p>判断是否为字典是否为空</p>\r\n<pre><code>var emptyDict = [Int:String]()\r\nprint(emptyDict)\r\nvar isEmpty = emptyDict.isEmpty\r\nif isEmpty {\r\n    print(&quot;The dictionary is empty&quot;)\r\n}else{\r\n    print(&quot;The dictionary is not empty&quot;)\r\n}</code></pre><h1 id=\"h1-u8BBFu95EEu5B57u5178\"><a name=\"访问字典\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>访问字典</h1><p>指定字典key可以获取字典key对应的值</p>\r\n<pre><code>var someVar = someDict[0]!\r\nprint(&quot;key = 0 value is \\(someVar)&quot;)</code></pre><h1 id=\"h1-u4FEEu6539u5B57u5178\"><a name=\"修改字典\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>修改字典</h1><p>我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 <strong>key 不存在，则添加值</strong>，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值。</p>\r\n<pre><code>var oldVar = someDict.updateValue(&quot;San Francisco&quot;, forKey: 0)!\r\nvar newVar = someDict[0]!\r\nprint(&quot;key = 0 old value is \\(oldVar)&quot;)\r\nprint(&quot;key = 0 new value is \\(newVar)&quot;)</code></pre><p>也可以直接指定key索引来修改，相比updateValue，如果key不存在则会抛异常</p>\r\n<pre><code>var oldVar = someDict[0]!\r\nprint(&quot;key = 0 old value is \\(oldVar)&quot;)\r\nsomeDict[0] = &quot;San Francisco&quot;\r\nvar newVar = someDict[0]!\r\nprint(&quot;key = 0 new value is \\(newVar)&quot;)</code></pre><h1 id=\"h1--key-value-\"><a name=\"移除 Key-Value 对\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>移除 Key-Value 对</h1><p>我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil 。也可以通过指定key索引设置value为nil。</p>\r\n<pre><code>someDict.removeValue(forKey: 2)\r\nprint(someDict)\r\n\r\nsomeDict[1] = nil\r\nprint(someDict)\r\n</code></pre><h1 id=\"h1-u904Du5386u5B57u5178\"><a name=\"遍历字典\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>遍历字典</h1><pre><code>for (key,value) in someDict {\r\n    print(&quot;key is \\(key),value is \\(value)&quot;)\r\n}</code></pre>', NULL),(40, 40, '<h1 id=\"h1--nasm\"><a name=\"什么是NASM\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>什么是NASM</h1><p>NASM全称The Netwide Assembler，是一款基于80x86和x86-64平台的汇编语言编译程序，其设计初衷是为了实现编译器程序跨平台和模块化的特性。NASM支持大量的文件格式，包括Linux，*BSD，a.out，ELF，COFF，Mach−O，Microsoft 16−bit OBJ，Win32以及Win64，同时也支持简单的二进制文件生成。它的语法被设计的简单易懂，相较Intel的语法更为简单，支持目前已知的所有x86架构之上的扩展语法，同时也拥有对宏命令的良好支持。<br>也就是稍后我们的汇编代码要用这个编译器编译。</p>\r\n<h1 id=\"h1--db-resb\"><a name=\"学两个简单的汇编指令 DB 和 RESB\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>学两个简单的汇编指令 DB 和 RESB</h1><p>DB指令是”data byte”的缩写，也就是直接往文件里写入1个字节的指令。<br>简单练习一下，新建文件 demo.nas 写入代码</p>\r\n<pre><code>DB 0xff, 0x00, 0xf0</code></pre><p>使用编译器在CMD编译文件</p>\r\n<pre><code>..\\..\\tools\\nask.exe demo.nas demo</code></pre><p>其中....\\tools\\nask.exe是编译器存放的位置 demo.nas 是源文件 demo 是生成的文件，以上命令将在源文件所在目录生成一个编译后的文件，使用二进制查看生成的文件<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202255192680500.png\" alt=\"\"></p>\r\n<p>RESB指令是”reserve byte”的缩写，如果想要从现在的地址开始空出10个字节来，可以写成 RESB 10 (这里的10是十进制)</p>\r\n<pre><code>DB 0xff, 0x00, 0xf0\r\nRESB 10</code></pre><p>这里使用的NASM汇编器是《30天自制操作系统》书里提供的改版，所以RESB指定会不仅会空出字节，还会自动填充0x00数据<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202305279752467.png\" alt=\"\"></p>\r\n<h1 id=\"h1--img\"><a name=\"开始用汇编写操作系统.img\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>开始用汇编写操作系统.img</h1><p>新建 os.nas 文件，写入代码</p>\r\n<pre><code>; 这里和用二进制写的时候是一样的，都是往文件里面写入数据，从00000000开始\r\n    DB    0xeb, 0x4e, 0x90, 0x48, 0x45, 0x4c, 0x4c, 0x4f\r\n    DB    0x49, 0x50, 0x4c, 0x00, 0x02, 0x01, 0x01, 0x00\r\n    DB    0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00\r\n    DB    0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    DB    0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x29, 0xff\r\n    DB    0xff, 0xff, 0xff, 0x48, 0x45, 0x4c, 0x4c, 0x4f\r\n    DB    0x2d, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x46, 0x41\r\n    DB    0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x00, 0x00\r\n; 填充16个字节的0x00\r\n    RESB    16\r\n    DB    0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c\r\n    DB    0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a\r\n    DB    0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09\r\n    DB    0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb\r\n    DB    0xee, 0xf4, 0xeb, 0xfd, 0x0a, 0x0a, 0x68, 0x65\r\n    DB    0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72\r\n    DB    0x6c, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00\r\n; 填充368个字节的0x00\r\n    RESB    368\r\n    DB    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa\r\n    DB    0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n; 填充4600个字节的0x00\r\n    RESB    4600\r\n    DB    0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n; 填充1469432个字节的0x00\r\n    RESB    1469432</code></pre><p>和直接编译二进制文件一样，都是往指定的地址写入指定的数据，使用以上代码可以便捷的使用RESB指令填充0x00，编译源文件</p>\r\n<pre><code>..\\..\\tools\\nask.exe os.nas os.img</code></pre><p>查看编译生成的os.img文件<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202314336398719.png\" alt=\"\"><br>和用直接编辑二进制文件的数据是一样的，使用虚拟机测试运行编译生成的img文件。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202316322912822.png\" alt=\"\"><br>运行效果是一样。<br>源码地址 <a href=\"https://github.com/365D1/30OS.git\">https://github.com/365D1/30OS.git</a></p>\r\n', NULL),(41, 41, '<p>#111</p>\r\n', NULL),(42, 42, '<h1 id=\"h1-u6539u5199u4E0Au6B21u7684u4EE3u7801\"><a name=\"改写上次的代码\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>改写上次的代码</h1><p>上次的代码几乎和用二进制的方式写IMG文件差不多，今天将把代码改写得稍微能阅读一点，先测试几个指令</p>\r\n<h2 id=\"h2-db-\"><a name=\"DB指令写入字符串测试\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>DB指令写入字符串测试</h2><pre><code>DB &quot;HELLOIPL&quot;</code></pre><p>DB指令将字符串一个一个按字节写入文件，字符串8个字节，通过二进制查看48，45，4c…<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222207122282692.png\" alt=\"\"><br>扩展一下，试着写一个中文字符串”你好，世界”</p>\r\n<pre><code>DB &quot;你好&quot;</code></pre><p>一个中文文字占2个字节(ASCII码)，二进制查看，没毛病<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222215329728224.png\" alt=\"\"><br>一个中文文字占3个字节(UTF-8编码)，二进制查看，没毛病<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222218012641737.png\" alt=\"\"><br>一个中文文字占3个字节(Unicode编码)，不试了，notepad++没有Unicode编码，没毛病</p>\r\n<h2 id=\"h2-db-\"><a name=\"DB指令写入十进制数\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>DB指令写入十进制数</h2><pre><code>DB 1</code></pre><p>成功写入<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222254254712157.png\" alt=\"\"><br>尝试写入更大一点十进制数</p>\r\n<pre><code>DB 512</code></pre><p>!成功写入<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222255338169564.png\" alt=\"\"><br>DB是写入一个字节的，一个字节占8位，即使所有位都是1，11111111也就是十进制的255而已，如果有负数，范围就是十进制的-128~127，所以DB指令不能写入十进制的512，于是得使用另外的指令。</p>\r\n<h2 id=\"h2-dw-dd-\"><a name=\"DW指令和DD指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>DW指令和DD指令</h2><p><strong>DW指令是”data word”的缩写，word本意是”单词”，在汇编里word是2个字节，也就是16位的意思，DD指令是”data double-word”的缩写，”double-word”是32位的意思，也就是4个字节。</strong><br>使用DW指令写入十进制数512</p>\r\n<pre><code>DW 512</code></pre><p>成功写入<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222308276627394.png\" alt=\"\"><br>使用DD指令写入2880</p>\r\n<pre><code>DD 2880</code></pre><p>成功写入<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222310193459296.png\" alt=\"\"></p>\r\n<h2 id=\"h2--\"><a name=\"$ 符号\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>$ 符号</h2><p>最后，还有一个东西要尝试，<strong>符号 $ ，它是一个变量，它的值是当前的字节数</strong>，比如前面DD 2880，在文件写入了两个字节，这个时候$应该是2，测试一下</p>\r\n<pre><code>DD 2880\r\nRESB 16-$</code></pre><p>第一行指令DD 2880已经写入了两个字节，16-$，相当于16减去2，而RESB 14将空出14个字节，并自动填充0x00。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222320402232156.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u53EFu4EE5u5199u4EE3u7801u4E86\"><a name=\"可以写代码了\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>可以写代码了</h2><pre><code>; hello-os\r\n; TAB=4\r\n\r\n; 以下这段是标准FAT12格式软件专用的代码\r\n\r\n        DB        0xeb, 0x4e, 0x90\r\n        DB        &quot;HELLOIPL&quot;        ; 启动扇区的名称可以是任意的字符串（8字节）\r\n        DW        512                ; 每个扇区（sector）的大小（必须为512字节）\r\n        DB        1                ; 簇（cluster）的大小（必须为1个扇区）\r\n        DW        1                ; FAT的起始位置（一般从第一个扇区开始）\r\n        DB        2                ; FAT的个数（必须为2）\r\n        DW        224                ; 根目录的大小（一般设成224项）\r\n        DW        2880            ; 读磁盘的大小（必须是2880扇区）\r\n        DB        0xf0            ; 磁盘的种类（必须是0xf0）\r\n        DW        9                ; FAT的长度（必须是9扇区）\r\n        DW        18                ; 1个磁道（track）有几个扇区（必须是18）\r\n        DW        2                ; 磁头数（必须是2）\r\n        DD        0                ; 不使用分区，必须为\r\n        DD        2880            ; 重写一次磁盘大小\r\n        DB        0,0,0x29        ; 意义不明，固定\r\n        DD        0xffffffff        ; （可能是）卷标号码\r\n        DB        &quot;HELLO-OS   &quot;    ; 磁盘的名称（11字节）\r\n        DB        &quot;FAT12   &quot;        ; 磁盘格式名称（8字节）\r\n        RESB    18                ; 先空出18字节\r\n\r\n; 程序主体\r\n\r\n        DB        0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c\r\n        DB        0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a\r\n        DB        0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09\r\n        DB        0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb\r\n        DB        0xee, 0xf4, 0xeb, 0xfd\r\n\r\n; 信息显示部分\r\n\r\n        DB        0x0a, 0x0a        ; 2个换行\r\n        DB        &quot;hello, 365D1 OS&quot;\r\n        DB        0x0a            ; 换行\r\n        DB        0\r\n\r\n        RESB    0x1fe-$            ; 填写0x00,直到 0x001fe\r\n        DB        0x55, 0xaa\r\n\r\n; 以下是启动区以外部分的输出\r\n\r\n        DB        0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n        RESB    4600\r\n        DB        0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n        RESB    1469432</code></pre><p>这个编辑器显示有点乱，事实上是这样的<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222326437523081.png\" alt=\"\"><br><strong>启动区（boot sector）</strong><br>磁盘的第一个扇区成为启动区，计算机读写磁盘的时候，并不是一字节一字节的读写的，而是以512字节为一个单位进行读写的。因此，磁盘的512字节就是称为一个扇区。一张软盘的空间共有1440KB，也就是1474560字节，除以512得2880，这也就是说一张软盘共有2880个扇区。如何确定第一个扇区为启动区？计算机首先读入一个扇区的字节（512字节），然后去检查这个扇区<strong>最后2个字节</strong>的内容，如果最后两个字节不是 <strong>55 AA</strong>，则计算机会认为这张盘上没有启动程序，就会报不能启动的错误。如果最后两个字节正好是 55 AA，那么它就认为这个扇区的开头是启动程序，并开始执行这个程序。<br><strong>IPL</strong><br>initial program loader的缩写。启动程序加载器。启动区只有512字节，操作系统不会那么小，也不会装在启动区里，所以几乎所有的操作系统，都把<strong>加载操作系统本身的程序</strong>放在启动区里。有鉴于此，有时也将启动区称为IPL。启动区的名称一定要是<strong>8个字节</strong>。</p>\r\n', NULL),(43, 43, '<h1 id=\"h1-u5148u5199u4EE3u7801\"><a name=\"先写代码\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>先写代码</h1><pre><code>; hello-os\r\n; TAB=4\r\n\r\n        ORG     0x7c00            ; 指明程序的装载地址\r\n\r\n; 以下这段是标准FAT12格式软件专用的代码    \r\n\r\n        JMP        entry\r\n        DB        0x90\r\n        DB        &quot;HELLOIPL&quot;        ; 启动扇区的名称可以是任意的字符串（8字节）\r\n        DW        512                ; 每个扇区（sector）的大小（必须为512字节）\r\n        DB        1                ; 簇（cluster）的大小（必须为1个扇区）\r\n        DW        1                ; FAT的起始位置（一般从第一个扇区开始）\r\n        DB        2                ; FAT的个数（必须为2）\r\n        DW        224                ; 根目录的大小（一般设成224项）\r\n        DW        2880            ; 读磁盘的大小（必须是2880扇区）\r\n        DB        0xf0            ; 磁盘的种类（必须是0xf0）\r\n        DW        9                ; FAT的长度（必须是9扇区）\r\n        DW        18                ; 1个磁道（track）有几个扇区（必须是18）\r\n        DW        2                ; 磁头数（必须是2）\r\n        DD        0                ; 不使用分区，必须为\r\n        DD        2880            ; 重写一次磁盘大小\r\n        DB        0,0,0x29        ; 意义不明，固定\r\n        DD        0xffffffff        ; （可能是）卷标号码\r\n        DB        &quot;HELLO-OS   &quot;    ; 磁盘的名称（11字节）\r\n        DB        &quot;FAT12   &quot;        ; 磁盘格式名称（8字节）\r\n        RESB    18                ; 先空出18字节\r\n\r\n; 程序核心\r\n\r\nentry:\r\n        MOV        AX,0            ; 初始化寄存器\r\n        MOV        SS,AX\r\n        MOV        SP,0x7c00\r\n        MOV        DS,AX\r\n        MOV        ES,AX\r\n        MOV        SI,msg\r\nputloop:\r\n        MOV        AL,[SI]\r\n        ADD        SI,1            ; 给SI加1\r\n        CMP        AL,0\r\n        JE        fin\r\n        MOV        AH,0x0e            ; 显示一个文字\r\n        MOV        BX,15            ; 指定字符颜色\r\n        INT        0X10            ; 调用显卡BIOS\r\n        JMP        putloop\r\nfin:\r\n        HLT                        ; 让CPU停止，等待指令\r\n        JMP        fin                ; 无限循环\r\nmsg:\r\n        DB        0x0a,0x0a        ; 换行两次\r\n        DB        &quot;hello,world&quot;\r\n        DB        0x0a            ; 换行\r\n        DB        0\r\n        RESB    0x7dfe-$\r\n        DB        0x55,0xaa\r\n\r\n; 以下是启动区以外部分的输出\r\n\r\n        DB        0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n        RESB    4600\r\n        DB        0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n        RESB    1469432</code></pre><p>国际惯例，编译并运行</p>\r\n<pre><code>..\\..\\tools\\nask.exe os.nas os.img\r\ncopy os.img ..\\..\\tools\\qemu\\fdimage0.bin\r\n..\\..\\tools\\make.exe -C ../../tools/qemu</code></pre><p>成功输出<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903262309186724587.png\" alt=\"\"></p>\r\n<h1 id=\"h1-u77E5u8BC6u70B9u8BB2u89E3\"><a name=\"知识点讲解\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>知识点讲解</h1><h2 id=\"h2-org-\"><a name=\"ORG指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>ORG指令</h2><p>汇编语言源程序中若没有ORG伪指令，则程序执行时，指令代码被放到自由内存空间的CS:0处；若有ORG伪指令，编译器则把其后的指令代码放到ORG伪指令指定的偏移地址。两个ORG伪指令之间，除了指令代码，若有自由空间，则用0填充。</p>\r\n<h2 id=\"h2-jmp-\"><a name=\"JMP指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JMP指令</h2><p>相当于C语言的goto语句。</p>\r\n<h2 id=\"h2-u6807u7B7Eu58F0u660E\"><a name=\"标签声明\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>标签声明</h2><p>用于JMP指令跳转的目的地等。</p>\r\n<h2 id=\"h2-mov-\"><a name=\"MOV指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>MOV指令</h2><p>相当于C语言里的赋值，例如 MOV AX,0 相当于寄存器AX赋值0；MOV BX，AX 将AX寄存器的值赋值给BX寄存器，但是AX的值还是存在的依旧是0，不会因为MOV就没有了；MOV AL,[SI] MOV指令的数据传送源和传送目的不仅可以是常数或寄存器，也可以是内存地址，内存地址用[]括起来；MOV BYTE [678],123 例如我们指定了数据大小BYTE，那么使用的存储单元就是地址所指定的字节，如果我们使用WORD，则相邻的一个字节也会成为这个指令的操作对象。MOV指令有一个规则，就是源数据和目的数据必须位数相同，也就是说，能向AL里带入的就只有BYTE,可以省略不写BYTE，例如 MOV AL,[SI]。</p>\r\n<h2 id=\"h2-u4EC0u4E48u662Fu5BC4u5B58u5668\"><a name=\"什么是寄存器\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>什么是寄存器</h2><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903262310107647379.png\" alt=\"\"><br>寄存器是一种存储电路，是CPU计算的重要部件。寄存器的名称：</p>\r\n<ul>\r\n<li>AX accumulator，累加寄存器</li><li>CX counter，计数寄存器</li><li>DX data，数据寄存器</li><li>BX base，基址寄存器</li><li>SP stack pointer，栈指针寄存器</li><li>BP base pointer，基址指针寄存器</li><li>SI source index，源变址寄存器</li><li>DI destination index，目的变址寄存器</li></ul>\r\n<p>这些寄存器都是<strong>16位</strong>的，因此可以存储16位的二进制数。其中AX，CX，DX，BX有可以分为两个8位寄存器组成，称为高8位和低8位。</p>\r\n<ul>\r\n<li>AL 累加寄存器低位</li><li>CL 计数寄存器低位</li><li>DL 数据寄存器低位</li><li>BL 基址寄存器低位</li><li>AH 累加寄存器高位</li><li>CH 计数寄存器高位</li><li>DH 数据寄存器高位</li><li>BH 基址寄存器高位</li></ul>\r\n<h2 id=\"h2-add-\"><a name=\"ADD指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>ADD指令</h2><p>加法指令。ADD SI,1 类似C语言的 SI = SI + 1 。</p>\r\n<h2 id=\"h2-cmp-\"><a name=\"CMP指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>CMP指令</h2><p>CMP是对比指令，CMP AL,0 意思是用AL中的值和0比较。</p>\r\n<h2 id=\"h2-je-\"><a name=\"JE指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JE指令</h2><p>JE指令是条件跳转指令之一。所谓条件跳转指令，就是根据比较的结果决定跳转或不跳转。如不跳转就继续执行下一条指令。</p>\r\n<pre><code>CMP AL,0\r\nJE fin</code></pre><p>相当于</p>\r\n<pre><code>if(AL == 0){\r\n    goto fin;\r\n}</code></pre><h2 id=\"h2-bios-\"><a name=\"BIOS程序\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>BIOS程序</h2><p>出厂时候就组装在电脑主板上的ROM单元里。在BIOS中预先写入了一些指令，提供程序猿调用，调用的使用使用INT指令调用，例如INT 0x10。</p>\r\n<h2 id=\"h2-u663Eu793Au4E00u4E2Au5B57u7B26\"><a name=\"显示一个字符\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>显示一个字符</h2><p>AH=0x0e<br>AL=character code<br>BH=0<br>BL=color code<br>需要显示一个字符的时候，先将以上寄存器存入相应的值，在调用INT 0x10，就可以在屏幕上显示出一个字符来了。</p>\r\n<h2 id=\"h2-hlt-\"><a name=\"HLT指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>HLT指令</h2><p>HLT是让CPU停止动作的指令，进入待机状态，只要外部发送变化，例如移动鼠标，键盘输入等，CPU就会醒过来，继续执行指令，如果没有HLT指令，CPU就会不停的全力执行JMP指令，这会使得CPU的负荷达到100%，浪费资源。</p>\r\n', NULL),(44, 44, '<p>首先我们把代码后半部分删掉，因为启动区只需要512字节，代码如下</p>\r\n<pre><code>; hello-os\r\n; TAB=4\r\n\r\n        ORG     0x7c00            ; 指明程序的装载地址\r\n\r\n; 以下这段是标准FAT12格式软件专用的代码    \r\n\r\n        JMP        entry\r\n        DB        0x90\r\n        DB        &quot;HELLOIPL&quot;        ; 启动扇区的名称可以是任意的字符串（8字节）\r\n        DW        512                ; 每个扇区（sector）的大小（必须为512字节）\r\n        DB        1                ; 簇（cluster）的大小（必须为1个扇区）\r\n        DW        1                ; FAT的起始位置（一般从第一个扇区开始）\r\n        DB        2                ; FAT的个数（必须为2）\r\n        DW        224                ; 根目录的大小（一般设成224项）\r\n        DW        2880            ; 读磁盘的大小（必须是2880扇区）\r\n        DB        0xf0            ; 磁盘的种类（必须是0xf0）\r\n        DW        9                ; FAT的长度（必须是9扇区）\r\n        DW        18                ; 1个磁道（track）有几个扇区（必须是18）\r\n        DW        2                ; 磁头数（必须是2）\r\n        DD        0                ; 不使用分区，必须为\r\n        DD        2880            ; 重写一次磁盘大小\r\n        DB        0,0,0x29        ; 意义不明，固定\r\n        DD        0xffffffff        ; （可能是）卷标号码\r\n        DB        &quot;HELLO-OS   &quot;    ; 磁盘的名称（11字节）\r\n        DB        &quot;FAT12   &quot;        ; 磁盘格式名称（8字节）\r\n        RESB    18                ; 先空出18字节\r\n\r\n; 程序核心\r\n\r\nentry:\r\n        MOV        AX,0            ; 初始化寄存器\r\n        MOV        SS,AX\r\n        MOV        SP,0x7c00\r\n        MOV        DS,AX\r\n        MOV        ES,AX\r\n        MOV        SI,msg\r\nputloop:\r\n        MOV        AL,[SI]\r\n        ADD        SI,1            ; 给SI加1\r\n        CMP        AL,0\r\n        JE        fin\r\n        MOV        AH,0x0e            ; 显示一个文字\r\n        MOV        BX,15            ; 指定字符颜色\r\n        INT        0X10            ; 调用显卡BIOS\r\n        JMP        putloop\r\nfin:\r\n        HLT                        ; 让CPU停止，等待指令\r\n        JMP        fin                ; 无限循环\r\nmsg:\r\n        DB        0x0a,0x0a        ; 换行两次\r\n        DB        &quot;hello,world&quot;\r\n        DB        0x0a            ; 换行\r\n        DB        0\r\n        RESB    0x7dfe-$\r\n        DB        0x55,0xaa</code></pre><p>在编译过程中直接编译成磁盘映像文件，之前过程中没有输出任何文件，现在将输出.lst（列表文件）和.bin文件（二进制），修改编译的（asm.bat）批处理命令为</p>\r\n<pre><code>..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst</code></pre><p>增加输出ipl.bin和ipl.lst，测试编译<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311942549224815.png\" alt=\"\"><br>关于ipl.lst的内容，lst列表文件可以用来简单的确认每个指令是怎样翻译成机器语言的。使用文本编辑器打开查看它的内容<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311946425878014.png\" alt=\"\"><br>关于ipl.bin的内容，bin二进制文件就是编译后的二进制文件了。可以使用二进制编辑器查看他的内容<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311948168818411.png\" alt=\"\"></p>\r\n', NULL),(45, 45, '<h1 id=\"h1-makefile-\"><a name=\"Makefile基本入门\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Makefile基本入门</h1><p>要新建Makefile很简单，直接新建一个不带任何后缀的文件，命名为Makefile即可，写入如下代码</p>\r\n<pre><code>ipl.bin : ipl.nas Makefile\r\n    ..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst</code></pre><p>第一行代码的意思是，如果想要制作ipl.bin文件，就检查ipl.nas和Makefile文件是否存在，因为ipl.bin文件是基于这两个文件生成的，如果两个文件都准备好了，Make工具就会执行下一行代码。</p>\r\n<h2 id=\"h2-makefile-\"><a name=\"Makefile默认规则\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Makefile默认规则</h2><pre><code>default :\r\n    ..\\..\\tools\\make.exe -r ipl.bin\r\nipl.bin : ipl.nas Makefile\r\n    ..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst</code></pre><p>配置默认指令，在使用控制台中不必要输入指定的规则，直接执行make即可。</p>\r\n<h2 id=\"h2--makefile-\"><a name=\"完整的Makefile文件\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>完整的Makefile文件</h2><pre><code>default :\r\n    ../../tools/make.exe run\r\n\r\n# 生成二进制文件和列表文件\r\nipl.bin : ipl.nas Makefile\r\n    ../../tools/nask.exe ipl.nas ipl.bin ipl.lst\r\n\r\n# 生成磁盘映像文件\r\nos.img : ipl.bin Makefile\r\n    ../../tools/edimg.exe imgin:../../tools/fdimg0at.tek \\\r\n    wbinimg src:ipl.bin len:512 from:0 to:0 imgout:os.img\r\n\r\n# 命令\r\n\r\nasm : \r\n    ../../tools/make.exe -r ipl.bin\r\n\r\nimg :\r\n    ../../tools/make.exe -r os.img\r\n\r\nrun :\r\n    ../../tools/make.exe img\r\n    copy os.img ..\\..\\tools\\qemu\\fdimage0.bin\r\n    ../../tools/make.exe -C ../../tools/qemu\r\n\r\ninstall :\r\n    ../../tools/make.exe img\r\n    ../../tools/imgtol.com w a: os.img\r\n\r\nclean :\r\n    -del ipl.bin\r\n    -del ipl.lst</code></pre><h2 id=\"h2--makefile\"><a name=\"测试Makefile\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>测试Makefile</h2><p>写一个make.bat文件，Makefile中一共写了9个指令，这里需要写9个%X对应相应的指令</p>\r\n<pre><code>..\\..\\tools\\make.exe %1 %2 %3 %4 %5 %6 %7 %8 %9</code></pre><p>在打开CMD控制台，执行批处理文件。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903312119447404022.png\" alt=\"\"></p>\r\n', NULL),(46, 46, '<p>到目前为止，计算机读取了磁盘的第一个扇区（引导扇区），但是，我们的操作系统不可能小到可以存在在启动扇区里，于是我们则需要让计算机从磁盘上多读取一些数据（扇区）到内存中。</p>\r\n<h1 id=\"h1-u5C1Du8BD5u591Au8BFBu53D6u4E00u4E2Au6247u533A\"><a name=\"尝试多读取一个扇区\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>尝试多读取一个扇区</h1><p>修改上次的代码，加入如图代码，这些代码主要为了调用BIOS函数读盘。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020208219939216.png\" alt=\"\"><br>调用BIOS INT 0x13函数读取磁盘的1个区（第二个扇区），如果读取错误，则跳转到error。<br>含有IPL的启动区，位于C0-H0-S1（柱面0，磁头0，扇区1的缩写），下一个扇区是C0-H0-S2，这个是我们这次要装载的扇区。</p>\r\n<h2 id=\"h2-jc-\"><a name=\"JC指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JC指令</h2><p>是jump if carry的缩写，意思是如果进位标志（carry flag）是1的话，就跳转。</p>\r\n<h2 id=\"h2-u8FDBu4F4Du6807u5FD7\"><a name=\"进位标志\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>进位标志</h2><p>是一个只能存储1位二进制数的寄存器。它位于EFLAGS寄存器的第0位。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020214294622212.png\" alt=\"\"></p>\r\n<h2 id=\"h2-bios-13-int-0x13\"><a name=\"BIOS第13号函数 INT 0x13\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>BIOS第13号函数 INT 0x13</h2><p>磁盘读、写，扇区效验（verify），以及寻道（seek）</p>\r\n<ul>\r\n<li>AH=0x02; (读盘)</li><li>AH=0x03;（写盘）</li><li>AH=0x04;（效验）</li><li>AH=0x0c;（寻道）</li><li>AL=处理对象的扇区数;（只能同时处理连续的扇区）</li><li>CH=柱面号 &0xff;</li><li>CL=扇区号（0-5位）|（柱面号&amp;0x300）&gt;&gt; 2</li><li>DH=磁头号;</li><li>DL=驱动器号;</li><li>ES:BX=缓存区地址;（效验及寻道不使用）</li><li>返回值</li><li>FLAGS.CF=0;没有错误，AH=0</li><li>FLAGS.CF=1;有错误，错误号码存入AH内（与重置’rest’功能一样）</li></ul>\r\n<h2 id=\"h2-u7F13u51B2u533Au5730u5740\"><a name=\"缓冲区地址\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>缓冲区地址</h2><p>这是一个内存地址，表示我们从磁盘上读取的数据装载到内存的哪一个位置。在指定内存地址的时候，可以使用段寄存器，我们使用段寄存器时，以ES:BX这种方式表示地址，写成MOV AL,[ES:BX]，它代表ES<em>16+BX的内存地址。我们可以把它理解成先用ES寄存器指定一个大概的位置，然后再用BX来指定其中一个具体的位置。但实际上不管我们*</em>指定什么地址<strong>，都</strong>必须同时指定段寄存器**，这是规定。<br>例如，MOV AL,[SI]其实是MOV AL,[DS:SI]，DS:可以省略，省略的话就是使用DS段寄存器。</p>\r\n', NULL),(47, 47, '<h1 id=\"h1-u8BFBu53D6u51FAu9519u91CDu8BD5\"><a name=\"读取出错重试\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>读取出错重试</h1><p>磁盘读取的有时候会出错，而程序应该尝试多重试几次，例如重试5次，如果5次都失败，则认为是真的读取错误了。加入重试读取代码</p>\r\n<pre><code>        MOV        SI,0            ; 记录失败次数的寄存器\r\nretry:        \r\n        MOV        AH,0X02            ; AH=0x02 : 读盘\r\n        MOV        AL,1            ; 1个扇区\r\n        MOV        BX,0            \r\n        MOV        DL,0x00            ; A驱动器\r\n        INT        0X13            ; 调用磁盘BIOS\r\n        JNC        fin                ; 没出错的话跳转到fin\r\n        ADD        SI,1            ; 往SI加1\r\n        CMP        SI,5            ; 毕竟SI与5\r\n        JAE        error            ; SI &gt;= 5时候，跳转到error\r\n        MOV        AH,0x00            \r\n        MOV        DL,0x00            ; A驱动器\r\n        INT        0X13            ; 重置驱动器\r\n        JMP        retry</code></pre><h2 id=\"h2-jnc-\"><a name=\"JNC指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JNC指令</h2><p>是jump if not carry的意思，如果进位标志为0的时候就跳转。</p>\r\n<h2 id=\"h2-jae-\"><a name=\"JAE指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JAE指令</h2><p>是jump if above or equal的意思，意思是大于或等于时跳转。</p>\r\n<h1 id=\"h1--18-\"><a name=\"读到18扇区\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>读到18扇区</h1><p>要读取更多的扇区，思路是写一个循环，并且使用一个计数器，记录读取进入的扇区，如果计数器小于等于18的时候继续重复读取，而每次读取的时候，都将读取的数据载入内存指定的位置，指定的位置随着每次读取向后移动0x200位，0x200正好是512个字节，而扇区的大小就是512字节，也就是每读取一个扇区512字节，载入到内存地址，然后再从这个内存地址512字节后的内存地址继续读取载入。</p>\r\n<pre><code>readloop:\r\n        MOV        SI,0            ; 记录失败次数的寄存器\r\nretry:        \r\n        MOV        AH,0X02            ; AH=0x02 : 读盘\r\n        MOV        AL,1            ; 1个扇区\r\n        MOV        BX,0            \r\n        MOV        DL,0x00            ; A驱动器\r\n        INT        0X13            ; 调用磁盘BIOS\r\n        JNC        fin                ; 没出错的话跳转到fin\r\n        ADD        SI,1            ; 往SI加1\r\n        CMP        SI,5            ; 毕竟SI与5\r\n        JAE        error            ; SI &gt;= 5时候，跳转到error\r\n        MOV        AH,0x00            \r\n        MOV        DL,0x00            ; A驱动器\r\n        INT        0X13            ; 重置驱动器\r\n        JMP        retry\r\nnext:\r\n        MOV        AX,ES            ; 把内存地址后移0X200\r\n        ADD        AX,0x200\r\n        MOV        ES,AX            ; 因为没有ADD ES,0x200指令，所以这里稍微绕了个湾\r\n        ADD        CL,1            ; 往CL里加1\r\n        CMP        CL,18            ; 比较CL与18\r\n        JBE        readloop        ; 如果CL &lt;= 18 跳转至readloop</code></pre><h1 id=\"h1--10-\"><a name=\"读取10个柱面\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>读取10个柱面</h1><p>C0-H0-S18扇区的下一个扇区，是磁盘反面的C0-H1-S1，如果循环读取扇区到了18个扇区的时候，则改变读取的磁头、柱面、扇区，继续读取下一个扇区。</p>\r\n<pre><code>next:\r\n        MOV        AX,ES            ; 把内存地址后移0X200\r\n        ADD        AX,0x0020\r\n        MOV        ES,AX            ; 因为没有ADD ES,0x200指令，所以这里稍微绕了个湾\r\n        ADD        CL,1            ; 往CL里加1\r\n        CMP        CL,18            ; 比较CL与18\r\n        JBE        readloop        ; 如果CL &lt;= 18 跳转至readloop\r\n        MOV        CL,1            ; 扇区号置为1?\r\n        ADD        DH,1            ; 磁头1？\r\n        CMP        DH,2            \r\n        JB        readloop        ; 如果DH &lt; 2，则跳转到readloop\r\n        MOV        DH,0\r\n        ADD        CH,1\r\n        CMP        CH,CYLS\r\n        JB        readloop        ; 如果CH &lt; CYLS，则跳转到readloop</code></pre><h2 id=\"h2-jb-\"><a name=\"JB指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JB指令</h2><p>是jump if below的意思，如果小于就跳转。</p>\r\n<h2 id=\"h2-equ-\"><a name=\"EQU指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>EQU指令</h2><p>相当于C语言中的#define命令，用来声明常数。</p>\r\n', NULL),(48, 48, '<h1 id=\"h1-u4E00u4E2Au6700u7B80u5355u7684u64CDu4F5Cu7CFBu7EDF\"><a name=\"一个最简单的操作系统\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>一个最简单的操作系统</h1><pre><code>fin:\r\n    HLT\r\n    JMP        fin</code></pre><p>将代码保存为os.nas，并使用nask编译，输出成os.sys文件。<br>现在有了操作系统了，就像我们安装其他系统一样，将操作系统文件写入到磁盘里，例如，安装window系统，它会将寄己的启动MBR写入磁盘，同时也将操作系统文件写入磁盘，而我们现在的思路是拿到一个磁盘映像文件，写入启动引导，然后再将我们的os.sys里存入这个磁盘映像里，然后再拿这个磁盘映像来测试运行或者装到其它机器的磁盘上（等于安装操作系统）。</p>\r\n<p>修改Makefie文件</p>\r\n<pre><code>TOOLPATH = ../../tools/\r\nEDIMG    = $(TOOLPATH)edimg.exe\r\n# 生成磁盘映像文件\r\nos.img : ipl.bin os.sys Makefile\r\n    $(EDIMG) imgin:../../tools/fdimg0at.tek \\\r\n    wbinimg src:ipl.bin len:512 from:0 to:0 \\\r\n    copy from:os.sys to:@: \\\r\n    imgout:os.img</code></pre><p>使用edimg工具把os.sys文件存入磁盘映像中去。使用二进制查看生成的.img磁盘映像。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030232483660195.png\" alt=\"\"><br>向磁盘里保存的文件，文件名会写在0x002600以后的地方。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030234291229298.png\" alt=\"\"><br>文件内容会写在0x004200以后的地方，而这里的内容正好是“最简单操作系统”的内容。</p>\r\n<h1 id=\"h1-u4ECEu542Fu52A8u533Au6267u884Cu64CDu4F5Cu7CFBu7EDF\"><a name=\"从启动区执行操作系统\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>从启动区执行操作系统</h1><p>要怎样执行磁盘上0x004200号地址的程序呢？程序从启动区开始，把磁盘上的内容装载到了内存0x8000号地址，所以，磁盘0x4200处的内容就应该位于内存0x8000+0x4200=0xc200号地址。我们就往os.nas里加上ORG 0xc200，然后在ipl.nas处理的最后加上JMP 0xc200这个指令。</p>\r\n<pre><code>next:\r\n        MOV        AX,ES            ; 把内存地址后移0X200\r\n        ADD        AX,0x0020\r\n        MOV        ES,AX            ; 因为没有ADD ES,0x200指令，所以这里稍微绕了个湾\r\n        ADD        CL,1            ; 往CL里加1\r\n        CMP        CL,18            ; 比较CL与18\r\n        JBE        readloop        ; 如果CL &lt;= 18 跳转至readloop\r\n        MOV        CL,1            ; 扇区号置为1?\r\n        ADD        DH,1            ; 磁头1？\r\n        CMP        DH,2            \r\n        JB        readloop        ; 如果DH &lt; 2，则跳转到readloop\r\n        MOV        DH,0\r\n        ADD        CH,1\r\n        CMP        CH,CYLS\r\n        JB        readloop        ; 如果CH &lt; CYLS，则跳转到readloop\r\n\r\n; 读取完毕跳转到0xc200执行os.sys的程序\r\n\r\n        JMP        0xc200</code></pre><p>往os.nas里加上ORG 0xc200</p>\r\n<pre><code>; hello-os\r\n; TAB=4\r\n\r\n        ORG        0xc200\r\nfin:\r\n        HLT\r\n        JMP        fin</code></pre><h1 id=\"h1-u4F7Fu7528u753Bu9762u6A21u5F0Fu786Eu8BA4u64CDu4F5Cu7CFBu7EDFu6267u884Cu60C5u51B5\"><a name=\"使用画面模式确认操作系统执行情况\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>使用画面模式确认操作系统执行情况</h1><p>为了确认操作系统执行情况，我们调用显卡显示来确认，如果屏幕一片黑色，则成功调用显卡输出了，也可以确认程序os.sys确实执行了</p>\r\n<pre><code>; hello-os\r\n; TAB=4\r\n\r\n        ORG        0xc200        ; 指定程序装载的内存地址\r\n\r\n        MOV        AL,0x13        ; VGA显卡，320*200*8位彩色\r\n        MOV        AH,0x00\r\n        INT        0x10\r\n\r\nfin:\r\n        HLT\r\n        JMP        fin</code></pre><h2 id=\"h2--int-0x10\"><a name=\"设置显卡模式 INT 0x10\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>设置显卡模式 INT 0x10</h2><ul>\r\n<li>AH=0x00</li><li>AL=模式<br>0x03: 16色字符模式，80<em>25<br>0x12: VGA图形模式，640</em>480<em>4位彩色模式，独特的4面存储模式<br>0x13: VGA图形模式，320</em>200<em>8位彩色模式，调色板模式<br>0x6a: 扩展VGA图形模式，800</em>600*4彩色模式，独特的4面存储模式（部分显卡不支持）</li><li>返回值：无</li></ul>\r\n<p>运行测试<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030258262539131.png\" alt=\"\"></p>\r\n', NULL),(49, 49, '<h1 id=\"h1-u524Du671Fu51C6u5907\"><a name=\"前期准备\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>前期准备</h1><p>16位模式启动的话，用AX和CX等16位寄存器会非常方便，但反过来，像EAX和ECX等32位的寄存器，使用起来就很麻烦。另外，16位和32位模式中，机器语言中的命令代码不一样。同样的机器语言，解释的方法也不一样，所以16位模式的机器语言在32位模式下不能运行，反之亦然。<br>在32位模式下，CPU的自我保护功能（识别出可疑的机器语言并进行屏蔽，以免破坏系统）在16位模式下不能使用，但32位能用。<br>32位模式不能调用BIOS功能了（也有从32位返回16位的方法），因为BIOS是16位机器语言写的。</p>\r\n<pre><code>; hello-os\r\n; TAB=4\r\n\r\n; 有关BOOT_INFO\r\n\r\nCYLS    EQU        0x0ff0        ; 设定启动区\r\nLEDS    EQU        0x0ff1        \r\nVMODE    EQU        0x0ff2        ; 关于颜色数目信息，颜色的位数\r\nSCRNX    EQU        0x0ff4        ; 分辨率的X（screen x）\r\nSCRNY    EQU        0x0ff6        ; 分辨率的Y（screen y）\r\nVRAM    EQU        0x0ff8        ; 图像缓冲区的开始地址\r\n\r\n        ORG        0xc200        ; 指定程序装载的内存地址\r\n\r\n        MOV        AL,0x13        ; VGA显卡，320*200*8位彩色\r\n        MOV        AH,0x00\r\n        INT        0x10\r\n\r\n        MOV        BYTE [VMODE],8\r\n        MOV        WORD [SCRNX],320\r\n        MOV        WORD [SCRNY],200\r\n        MOV        DWORD [VRAM],0x000a0000\r\n\r\n; 用BIOS取得键盘上各种LED指示灯的状态\r\n\r\n        MOV        AH,0x02\r\n        INT        0x16        ; keyboard BIOS\r\n        MOV        [LEDS],AL\r\n\r\nfin:\r\n        HLT\r\n        JMP        fin</code></pre><p>设置画面模式之后，还吧画面模式信息保存在了内存里，这是因为，我们以后可能还有支持各种不同的画面模式，这就需要把现在的设置信息保存起来以后备用。VRAM指的是显卡内存（video RAM），也就是用来显示画面的内存，它可以像一般内存一样存储数据，但VRAM的功能不仅局限于此，它的各个地址都对应着画面上的像素，可以利用这一机制在画面上绘制出五彩缤纷的图案。<br>VRAM分布在内存分布图上好几个不同的地方。这是因为不同的画面模式的像素也不一样。这次VRAM的值是0xa0000，是因为BIOS支持网页上规定了，这种画面模式下VRAM是0xa0000~0xaffff的64KB。</p>\r\n<h1 id=\"h1--c-\"><a name=\"导入C语言\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>导入C语言</h1><p>要开始进入C语言的代码编写，asmhead.nas里面写了一大堆我也不懂是什么的代码，然后调用C语言写一个简单的操作系统</p>\r\n<pre><code>void HariMain(void){\r\n\r\nfin:\r\n    goto fin;\r\n\r\n}</code></pre><p>那么.c文件要编译成机器语言，要经历如下过程</p>\r\n<ul>\r\n<li>使用cc1.exe从bootpack.c生成bootpack.gas文件</li><li>使用gas2nask.exe从bootpack.gas生成bootpack.nas</li><li>使用nask.exe从bootpack.nas生成bootpack.obj</li><li>使用obj2bin.exe从bootpack.obj生成bootpack.bim</li><li>使用bim2hrb.exe从bootpack.bim生成bootpack.hrb</li><li>使用copy指令将asmhead.bin与bootpack.hrb单纯的结合起来，生成haribote.sys</li></ul>\r\n<p>这一系列的编译过程可以写在Makefile文件里，执行make的时候就可以按步骤执行编译了</p>\r\n<h1 id=\"h1--hlt\"><a name=\"实现HLT\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>实现HLT</h1><p>在C语言中，不能使用HLT，所以就用汇编写一个实现HLT的函数，然后给C语言里调用</p>\r\n<pre><code>; naskfunc\r\n; TAB=4\r\n\r\n[FORMAT &quot;WCOFF&quot;]                ; 制作目标文件的模式\r\n[BITS 32]                        ; 制作32位模式用的机器语言\r\n\r\n; 制作目标文件的信息\r\n\r\n[FILE &quot;naskfunc.nas&quot;]            ; 源文件名信息\r\n        GLOBAL    _io_hlt            ; 程序中包含的函数名\r\n\r\n; 以下是实际的函数\r\n\r\n[SECTION .text]                    ; 目标文件中写了这些之后再写程序\r\n\r\n_io_hlt:                        ; void io_hlt(void);\r\n        HLT\r\n        RET</code></pre><p>输出格式设定为WCOFF，同时设定为32位机器语言模式。函数名称要在前面加\"_\"，需要链接的函数名称都要用GLOBAL指令声明。RET指令，相当于C语言的return。</p>\r\n<pre><code>void io_hlt(void);\r\n\r\nvoid HariMain(void){\r\n\r\nfin:\r\n    io_hlt();\r\n    goto fin;\r\n\r\n}</code></pre><p>在C语言中调用，运行测试，依旧漆黑一片<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904040204171080178.png\" alt=\"\"></p>\r\n', NULL),(50, 50, '<h1 id=\"h1-uml\"><a name=\"UML\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>UML</h1><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904082316298801076.png\" alt=\"\"><br>代理模式（Proxy）:为其他对象提供一种代理以控制对这个对象的访问。</p>\r\n<h1 id=\"h1-u4EE3u7406u6A21u5F0Fu7684u5E94u7528\"><a name=\"代理模式的应用\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>代理模式的应用</h1><p>远程代理：也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。<br>虚拟代理：是跟进需要创建开销很大的对象。通过它来存放实例化需要很长时间真实对象。<br>安全代理：用来控制真实对象访问时的权限。<br>智能引导：是指当调用真实的对象时，代理处理另外一些事。</p>\r\n<h1 id=\"h1-u4EE3u7801u5B9Eu4F8B\"><a name=\"代码实例\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>代码实例</h1><p>Subject接口类</p>\r\n<pre><code class=\"language-java\">public interface Subject {\r\n\r\n    void request();\r\n\r\n}</code></pre>\r\n<p>RealSubject类</p>\r\n<pre><code class=\"language-java\">public class RealSubject implements Subject {\r\n\r\n    @Override\r\n    public void request() {\r\n\r\n        System.out.println(&quot;真实的请求...&quot;);\r\n\r\n    }\r\n\r\n}</code></pre>\r\n<p>Proxy类</p>\r\n<pre><code class=\"language-java\">public class Proxy implements Subject {\r\n\r\n    private RealSubject real;\r\n\r\n    @Override\r\n    public void request() {\r\n        if (this.real == null){\r\n            this.real = new RealSubject();\r\n        }\r\n        this.real.request();\r\n    }\r\n\r\n}</code></pre>\r\n<p>client调用</p>\r\n<pre><code class=\"language-java\">public static void main(String[] args) {\r\n        Proxy proxy = new Proxy();\r\n        proxy.request();\r\n    }</code></pre>\r\n<p>输出结果<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904082320357444428.png\" alt=\"\"></p>\r\n', NULL),(51, 51, '<h1 id=\"h1-u601Du8DEFu5206u6790\"><a name=\"思路分析\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>思路分析</h1><p>我们想要让屏幕显示点什么，其实就是往VRAM里写入想显示的值，回顾一下，VRAM指的是显卡内存（video RAM），也就是用来显示画面的内存，我们当前使用的画面模式下VRAM是0xa0000~0xaffff的64KB。那么，我们就往这些内存地址写入数据，就可以显示想要的东西了。</p>\r\n<h1 id=\"h1-u5B9Eu64CDu4E0Au4EE3u7801\"><a name=\"实操上代码\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>实操上代码</h1><pre><code class=\"language-c\">//---------------------\r\n//|      函数声明     |\r\n//---------------------\r\nvoid io_hlt(void);\r\n\r\n//---------------------\r\n//|       主方法      |\r\n//---------------------\r\nvoid HariMain(void) {\r\n    int i;\r\n    char *p;\r\n\r\n    for (i = 0xa0000; i &lt;= 0xaffff; i++) {        \r\n        p[i] = i &amp; 0x0f;\r\n    }\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>声明char类型的指针p，因为内存地址的单元每个大小是一个BYTE 8位，char正好是BYTE，所以等下写入数据的时候才不会报错</p>\r\n<p>声明变量i，从0xa0000开始，这个就是我们VRAM的开始地址，一直循环到0xaffff，正好是VRAM的结束地址，那么这些地址，我们将一个一个的写入代表颜色的值</p>\r\n<p>通过“与运算”将地址的值与0x0f，低4位原封保留，而高4位全部都变成0，结果类似如下：00 01 02 … 0e 0f 00 01 02 … 每隔16个像素，色号就反复一次。</p>\r\n<h1 id=\"h1-u6267u884Cu7ED3u679C\"><a name=\"执行结果\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>执行结果</h1><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904090042491449468.png\" alt=\"\"></p>\r\n', NULL),(52, 52, '<h1 id=\"h1-u8272u53F7u8BBEu5B9A\"><a name=\"色号设定\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>色号设定</h1><p>色号使用8位二进制数，也就是只能使用0~255的数。一般说起指定颜色，都是用#ffffff一类的数，这就是RGB（红绿蓝）方式，用6位十六进制数，也就是24位二进制数来指定颜色。<br>我们使用的VGA图形模式，320*200*8位彩色模式，调色板模式色号使用的是8位，是不够显示#ffffff的，所以可以指定0~255的数字所对应的颜色，然后设定调色板。</p>\r\n<pre><code class=\"language-c\">// 初始化调色板\r\nvoid init_palette(void) {\r\n    static unsigned char table_rgb[16 * 3] = {\r\n        0x00, 0x00, 0x00,  // 0:黑色\r\n        0xff, 0x00, 0x00,  // 1:亮红\r\n        0x00, 0xff, 0x00,  // 2:亮绿\r\n        0xff, 0xff, 0x00,  // 亮黄\r\n        0x00, 0x00, 0xff,  // 亮蓝\r\n        0xff, 0x00, 0xff,  // 亮紫\r\n        0x00, 0xff, 0xff,  // 浅蓝\r\n        0xff, 0xff, 0xff,  // 白色\r\n        0xc6, 0xc6, 0xc6,  // 亮灰\r\n        0x84, 0x00, 0x00,  // 暗红\r\n        0x00, 0x84, 0x00,  // 暗绿\r\n        0x84, 0x84, 0x00,  // 暗黄\r\n        0x00, 0x00, 0x84,  // 暗蓝\r\n        0x84, 0x00, 0x84,  // 暗紫\r\n        0x00, 0x84, 0x84,  // 浅暗蓝\r\n        0x84, 0x84, 0x84   // 暗灰\r\n    };\r\n    set_palette(0, 15, table_rgb);\r\n    return;\r\n}</code></pre>\r\n<p>定义一个无符号char（BYTE 0~255）数组，数组长度是16*3=48个，用来保存定义的颜色。</p>\r\n<pre><code class=\"language-C\">// 设置调色板\r\nvoid set_palette(int start, int end, unsigned char *rgb) {\r\n    int i, eflags;\r\n    // 记录中断许可标志的值\r\n    eflags = io_load_eflags();\r\n    // 将中断许可标志设为0，禁止中断\r\n    io_cli();\r\n    io_out8(0x03c8, start);\r\n    for (i = 0; i &lt; end; i++) {\r\n        io_out8(0x03c9, rgb[0] / 4);\r\n        io_out8(0x03c9, rgb[1] / 4);\r\n        io_out8(0x03c9, rgb[2] / 4);\r\n        rgb += 3;\r\n    }\r\n    // 还原中断许可\r\n    io_store_eflags(eflags);\r\n    return;\r\n}</code></pre>\r\n<p>CPU向设备发送电信号的指令是OUT，从设备取得信号的指令是IN，在OUT和IN指令中，为了区别不同的设备，也要使用设备号码，设备号码在英文中是port（端口）。</p>\r\n<h2 id=\"h2-u8C03u8272u677Fu7684u8BBFu95EEu6B65u9AA4\"><a name=\"调色板的访问步骤\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>调色板的访问步骤</h2><ul>\r\n<li>首先在一连串的访问中屏蔽中断（比如CLI）</li><li>将要设定的调色板号码写入0x03c8，紧接着按R，G，B的顺序写入0x03c9，如果还想继续设定下一个调色板，则省略调色板号码，再按RGB的顺序写入0x03c9就行了</li><li>如果想要读出当前调色板的状态，首先要将色号的号码写入0x03c7，再从0x03c9读取3次，读出的顺序就是R，G，B。如果想要继续读出下一个调色板，同样也是省略调色板号码的设定，按RGB的顺序读出</li><li>如果最初执行了CLI，那么最后要执行STI</li></ul>\r\n<p>在C语言中，没有与IN或OUT相当的语句，所以得用汇编来做。</p>\r\n<pre><code class=\"language-c\">_io_in8:    ; int io_in8(int port);\r\n        MOV        EDX,[ESP+4]        ; port\r\n        MOV        EAX,0\r\n        IN        AL,DX\r\n        RET</code></pre>\r\n<p>同时，C语言中也没有直接屏蔽中断的语句，也使用汇编来做。CLI是将中断标志（interrupt flag）置为0的指令（clear interrupt flag）。</p>\r\n<pre><code class=\"language-c\">_io_cli:    ; void io_cli(void);\r\n        CLI\r\n        RET</code></pre>\r\n<p>屏蔽中断也要有恢复中断的方法，也用汇编来做。STI是要将这个中断标志置为1的指令（set interrupt flag）。</p>\r\n<pre><code class=\"language-c\">_io_sti:    ; void io_sti(void);\r\n        STI\r\n        RET</code></pre>\r\n<p>关于EFLAGS寄存器<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020214294622212.png\" alt=\"\"></p>\r\n<h1 id=\"h1-u7ED8u5236u77E9u5F62\"><a name=\"绘制矩形\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>绘制矩形</h1><p>在当前画面模式中，画面上有320*200（=64000）个像素，假设左上角的坐标是（0，0），右下角的坐标是（320，200），那么像素坐标（x，y）对应的VRAM地址应该按下公式计算：<br>0xa0000 + x + y * 320<br>其它模式也基本相同，只是0xa0000这个起始地址和y的系数320有些不同。<br>绘制矩形函数</p>\r\n<pre><code class=\"language-c\">// 画矩形方法\r\nvoid boxfill8(unsigned char *vram, int xsize, unsigned char c, int x0, int y0,\r\n              int x1, int y1) {\r\n    int x, y;\r\n    for (y = y0; y &lt;= y1; y++) {\r\n        for (x = x0; x &lt;= x1; x++) {\r\n            vram[y * xsize + x] = c;\r\n        }\r\n    }\r\n    return;\r\n}</code></pre>\r\n<p>测试一下，画三个矩形</p>\r\n<pre><code class=\"language-c\">void HariMain(void) {\r\n    char *p;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    p = (char *)0xa0000;\r\n\r\n    // 绘制3个矩形\r\n    boxfill8(p, 320, COL8_FF0000, 20, 20, 120, 120);\r\n    boxfill8(p, 320, COL8_00FF00, 70, 50, 170, 150);\r\n    boxfill8(p, 320, COL8_0000FF, 120, 80, 220, 180);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>运行结果<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904100003004178090.png\" alt=\"\"></p>\r\n<h1 id=\"h1-u7ED8u5236u64CDu4F5Cu7CFBu7EDF\"><a name=\"绘制操作系统\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>绘制操作系统</h1><pre><code class=\"language-c\">void HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n    vram = (char *)0xa0000;\r\n\r\n    xsize = 320;\r\n    ysize = 200;\r\n\r\n    boxfill8(vram, xsize, COL8_008484, 0, 0, xsize - 1, ysize - 29);\r\n    boxfill8(vram, xsize, COL8_C6C6C6, 0, ysize - 28, xsize - 1, ysize - 28);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, 0, ysize - 27, xsize - 1, ysize - 27);\r\n    boxfill8(vram, xsize, COL8_C6C6C6, 0, ysize - 26, xsize - 1, ysize - 1);\r\n\r\n    boxfill8(vram, xsize, COL8_FFFFFF, 3, ysize - 24, 59, ysize - 24);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, 2, ysize - 24, 2, ysize - 4);\r\n    boxfill8(vram, xsize, COL8_848484, 3, ysize - 4, 59, ysize - 4);\r\n    boxfill8(vram, xsize, COL8_848484, 59, ysize - 23, 59, ysize - 5);\r\n    boxfill8(vram, xsize, COL8_000000, 2, ysize - 3, 59, ysize - 3);\r\n    boxfill8(vram, xsize, COL8_000000, 60, ysize - 24, 60, ysize - 3);\r\n\r\n    boxfill8(vram, xsize, COL8_848484, xsize - 47, ysize - 24, xsize - 4,\r\n             ysize - 24);\r\n    boxfill8(vram, xsize, COL8_848484, xsize - 47, ysize - 23, xsize - 47,\r\n             ysize - 4);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, xsize - 47, ysize - 3, xsize - 4,\r\n             ysize - 3);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, xsize - 3, ysize - 24, xsize - 3,\r\n             ysize - 3);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>测试运行<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904100004575789930.png\" alt=\"\"></p>\r\n', NULL),(53, 53, '<p>在bootpack.c里的都是将0xa0000，320，200等数字直接写入程序。而本来这些值应该从asmhead.nas先前保存下来的值中取。如果不这样的话，当画面模式改变时，系统就不能正确运行。</p>\r\n<h1 id=\"h1-u8BFBu53D6u5185u5B58u5730u5740u503C\"><a name=\"读取内存地址值\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>读取内存地址值</h1><pre><code class=\"language-c\">void HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    short *binfo_scrnx, *binfo_scrny;\r\n    int *binfo_vram;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo_scrnx = (short *)0x0ff4;\r\n    binfo_scrny = (short *)0x0ff6;\r\n    binfo_vram = (char *)0x0ff8;\r\n    xsize = *binfo_scrnx;\r\n    ysize = *binfo_scrny;\r\n    vram = (char *)*binfo_vram;\r\n\r\n    init_screen(vram, xsize, ysize);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>在asmhead.nas中，将启动的画面模式信息存在了0x0ff4、0x0ff6、0x0ff8内存地址中，所以，这里使用C语言指针，从这些内存地址里读取出值赋给变量。</p>\r\n<h1 id=\"h1-u4F7Fu7528u7ED3u6784u4F53\"><a name=\"使用结构体\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>使用结构体</h1><pre><code class=\"language-c\">struct BOOTINFO {\r\n    char cyls, leds, vmode, reserve;\r\n    short scrnx, scrny;\r\n    char *vram;\r\n};\r\nvoid HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n    xsize = (*binfo).scrnx;\r\n    ysize = (*binfo).scrny;\r\n    vram = (*binfo).vram;\r\n\r\n    init_screen(vram, xsize, ysize);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>将启动信息都归纳到一个结构体内。在32位编译器下，一个char占1个字节，一个char*(指针变量)占4个字节，一个short占2个字节，所以这个结构体占12个字节，binfo是一个指针变量（4个字节），首先要给binfo赋值，0x0ff0正好是asmhead.nas中设置启动区的内存地址，通过使用结构体中的不同类型的变量，正好获取到asmhead.nas中保存在对应内存地址的数据。</p>\r\n<h1 id=\"h1-u7BADu5934u8BB0u53F7\"><a name=\"箭头记号\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>箭头记号</h1><p>在C语言中，常常会用到类似（*binfo).scrnx的表现手法，因此出现了一种不使用括号的方式，即binfo-&gt;scrnx，我们称为箭头标记方式。</p>\r\n<pre><code class=\"language-c\">void HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n\r\n    init_screen(binfo-&gt;vram, binfo-&gt;scrnx, binfo-&gt;scrny);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>箭头标记方式！！让我想起了世界上最好的编程语言！<br>PHP是世界上最好的编程语言，没有之一。</p>\r\n', NULL),(54, 54, '<h2 id=\"h2-java-\"><a name=\"Java动态代理的作用及好处\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Java动态代理的作用及好处</h2><p>Java动态代理的优势是实现无侵入式的代码扩展，也就是方法的增强；让你可以在不用修改源码的情况下，增强一些方法；在方法的前后你可以做你任何想做的事情。</p>\r\n', '## Java动态代理的作用及好处\r\nJava动态代理的优势是实现无侵入式的代码扩展，也就是方法的增强；让你可以在不用修改源码的情况下，增强一些方法；在方法的前后你可以做你任何想做的事情。'),(55, 55, '<h1 id=\"h1-u663Eu793Au5B57u7B26\"><a name=\"显示字符\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>显示字符</h1><p>要显示字符，原理就是在屏幕上按点去着色，字符可以用8*16的长方形像素点阵来表示。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120056554885456.png\" alt=\"\"><br>像这种描画文字形状的数据称为字体（font）数据。可以在C中定义如下数据来表示这个字体A</p>\r\n<pre><code class=\"language-c\">static char font_A[16] = {\r\n                            0x00, // 00000000\r\n                            0x18, // 00011000\r\n                            0x18, // 00011000\r\n                            0x18, // 00011000\r\n                            0x18, // 00011000\r\n                            0x24, // ‭00100100‬\r\n                            0x24, // ‭00100100‬\r\n                            0x24, // ‭00100100‬\r\n                            0x24, // ‭00100100‬\r\n                            0x7e, // ‭01111110‬\r\n                            0x42, // ‭01000010‬\r\n                            0x42, // ‭01000010‬\r\n                            0x42, // ‭01000010‬\r\n                            0xe7, // ‭11100111‬\r\n                            0x00, // 00000000\r\n                            0x00  // 00000000\r\n                        };</code></pre>\r\n<p>因为C无法使用二进制数记录数据，只能写成十六进制或八进制。编写一个用户绘制文字的函数。</p>\r\n<pre><code class=\"language-c\">void putfont8(char *vram, int xsize, int x, int y, char c, char *font) {\r\n    int i;\r\n    char *p, d;\r\n    for (i = 0; i &lt; 16; i++) {\r\n        // 公式 0xa0000 + x + y * 320\r\n        // 根据这个公式，可以计算出（x,y）坐标点对应的内存地址\r\n        p = vram + x + (y + i) * xsize ;\r\n        d = font[i];\r\n        // 0x80  1000000\r\n        if ((d &amp; 0x80) != 0) { p[0] = c; }\r\n        if ((d &amp; 0x40) != 0) { p[1] = c; }\r\n        if ((d &amp; 0x20) != 0) { p[2] = c; }\r\n        if ((d &amp; 0x10) != 0) { p[3] = c; }\r\n        if ((d &amp; 0x08) != 0) { p[4] = c; }\r\n        if ((d &amp; 0x04) != 0) { p[5] = c; }\r\n        if ((d &amp; 0x02) != 0) { p[6] = c; }\r\n        if ((d &amp; 0x01) != 0) { p[7] = c; }\r\n    }\r\n    return;\r\n}</code></pre>\r\n<p>&amp;是逻辑’与’运算，0x80的二进制是10000000，它与d进行’与’运算的结果如果是0，就说明d的最左边一位是0，反之，如果结果不是0，则d的最左边一位就是1。</p>\r\n<pre><code class=\"language-c\">void HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n    static char font_A[16] = {0x00, 0x18, 0x18, 0x18, 0x18, 0x24,0x24, 0x24,0x24,0x7e, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00};\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n\r\n    init_screen(binfo-&gt;vram, binfo-&gt;scrnx, binfo-&gt;scrny);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 10, 10, COL8_FFFFFF, font_A);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>使用函数绘制文字数据A，运行结果<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120127094076182.png\" alt=\"\"></p>\r\n<h1 id=\"h1-u589Eu52A0u5B57u4F53\"><a name=\"增加字体\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>增加字体</h1><p>使用书籍配套的字体文件hankaku.txt，在Makefile中将文件编译成obj文件，并链接到bin里。</p>\r\n<pre><code class=\"language-c\">extern char hankaku[4096];</code></pre>\r\n<p>源程序以外的数据，需要使用extern属性，编译器才知道它是外部数据，编译时候做出相应调整。hankaku是ASCII字符编码，含有256个字符。A的字符编码是0x41，所以A的字体数据，放在自”hankaku+0x41*16”开始的16字节里。C语言中A的字符编码可以用’A’表示，正好用它来代替0x41，所以也可以写成”hankaku+’A’*16”</p>\r\n<pre><code class=\"language-c\">void HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n    extern char hankaku[4096];\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n\r\n    init_screen(binfo-&gt;vram, binfo-&gt;scrnx, binfo-&gt;scrny);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx,  8, 8, COL8_FFFFFF, hankaku + &#39;A&#39; * 16);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 16, 8, COL8_FFFFFF, hankaku + &#39;B&#39; * 16);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 24, 8, COL8_FFFFFF, hankaku + &#39;C&#39; * 16);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 40, 8, COL8_FFFFFF, hankaku + &#39;1&#39; * 16);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 48, 8, COL8_FFFFFF, hankaku + &#39;2&#39; * 16);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 56, 8, COL8_FFFFFF, hankaku + &#39;3&#39; * 16);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>输出多个字符，运行结果<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120136125176381.png\" alt=\"\"></p>\r\n<h1 id=\"h1-u663Eu793Au5B57u7B26u4E32\"><a name=\"显示字符串\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>显示字符串</h1><p>一个一个输出字符，显然是毕竟低效的，编写一个显示字符串的函数</p>\r\n<pre><code class=\"language-c\">void putfonts8_asc(char *vram, int xsize, int x, int y, char c,\r\n                   unsigned char *s) {\r\n    extern char hankaku[4096];\r\n    for (; *s != 0x00; s++) {\r\n        putfont8(vram, xsize, x, y, c, hankaku + *s * 16);\r\n        x += 8;\r\n    }\r\n    return;\r\n}</code></pre>\r\n<p>在main函数里测试一下</p>\r\n<pre><code class=\"language-c\">void HariMain(void) {\r\n\r\n    struct BOOTINFO *binfo = (struct BOOTINFO *) 0x0ff0;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    init_screen(binfo-&gt;vram, binfo-&gt;scrnx, binfo-&gt;scrny);\r\n    putfonts8_asc(binfo-&gt;vram, binfo-&gt;scrnx, 8, 8, COL8_FFFFFF,\r\n                  &quot;PHP is the best programming language&quot;);\r\n    putfonts8_asc(binfo-&gt;vram, binfo-&gt;scrnx, 8, 30, COL8_FFFFFF,\r\n                  &quot;in the world!&quot;);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>运行结果<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120150387558902.png\" alt=\"\"></p>\r\n', NULL),(56, 56, '<h2 id=\"h2-u8FD0u8425u7684u5B9Au4E49\"><a name=\"运营的定义\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运营的定义</h2><p>一切能够进行产品推广、促进用户使用、提高用户认知的手段都是运营。</p>\r\n<h2 id=\"h2-u8FD0u8425u7684u6838u5FC3u76EEu7684\"><a name=\"运营的核心目的\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运营的核心目的</h2><p>让产品活得更好更久。</p>\r\n<h2 id=\"h2-u4EA7u54C1u7684u751Fu547Du5468u671F\"><a name=\"产品的生命周期\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>产品的生命周期</h2><blockquote>\r\n<p>孕育 &gt; 初创 &gt; 成长 &gt; 成熟 &gt; 衰退 &gt; 消亡</p>\r\n</blockquote>\r\n<ul>\r\n<li><p>孕育期<br>  进行产品设计的过程；<br>  运营人员应当介入产品设计，预留好运营接口，做好对应的运营准备；</p>\r\n</li><li><p>初创期<br>  达到上线状态，与用户见面；<br>  运营人员应当通过各种手段获取初始用户，培养种子用户；</p>\r\n</li><li><p>成长期<br>  获取用户，持续运营；<br>  运营人员应当借助各种资源进行市场推广、开展各项活动，加速用户与收入的增长速度；</p>\r\n</li><li><p>成熟期<br>  用户稳定，收入持续；<br>  运营人员应当通过各种运营手段，保持用户稳定，保障收入稳定；</p>\r\n</li><li><p>衰退期<br>  用户衰减，收入减少；<br>  运营人员应当更多的关怀用户，并试图将已有的用户导入新的产品；</p>\r\n</li><li><p>消亡期<br>  完成历史使命，产品终结；<br>  运营人员应该做好后续工作，对用户有交代；</p>\r\n</li></ul>\r\n<h2 id=\"h2-u79CDu5B50u7528u6237\"><a name=\"种子用户\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>种子用户</h2><p>初期产品运营的概念；它指的是与产品对应的目标用户中的核心群体，这个群体是产品的重度使用者，并积极主动、乐于分享，其参与度远远高于其他使用者。种子用的作用是提出对产品的意见与建议，积极主动的参与到分享与推广产品的过程中去。</p>\r\n', '## 运营的定义\r\n一切能够进行产品推广、促进用户使用、提高用户认知的手段都是运营。\r\n\r\n## 运营的核心目的\r\n让产品活得更好更久。\r\n\r\n## 产品的生命周期\r\n> 孕育 > 初创 > 成长 > 成熟 > 衰退 > 消亡\r\n\r\n- 孕育期\r\n	进行产品设计的过程；\r\n	运营人员应当介入产品设计，预留好运营接口，做好对应的运营准备；\r\n	\r\n- 初创期\r\n	达到上线状态，与用户见面；\r\n	运营人员应当通过各种手段获取初始用户，培养种子用户；\r\n	\r\n- 成长期\r\n	获取用户，持续运营；\r\n	运营人员应当借助各种资源进行市场推广、开展各项活动，加速用户与收入的增长速度；\r\n	\r\n- 成熟期\r\n	用户稳定，收入持续；\r\n	运营人员应当通过各种运营手段，保持用户稳定，保障收入稳定；\r\n	\r\n- 衰退期\r\n	用户衰减，收入减少；\r\n	运营人员应当更多的关怀用户，并试图将已有的用户导入新的产品；\r\n	\r\n- 消亡期\r\n	完成历史使命，产品终结；\r\n	运营人员应该做好后续工作，对用户有交代；\r\n	\r\n## 种子用户\r\n初期产品运营的概念；它指的是与产品对应的目标用户中的核心群体，这个群体是产品的重度使用者，并积极主动、乐于分享，其参与度远远高于其他使用者。种子用的作用是提出对产品的意见与建议，积极主动的参与到分享与推广产品的过程中去。\r\n'),(57, 57, '<h2 id=\"h2-u6D41u91CFu5EFAu8BBE\"><a name=\"流量建设\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>流量建设</h2><p>流量建设是要通过各种推广、扩散、营销、活动，提升网站的流量指标，我们通常所说的PV、UV、转化率、SEO都在这个环节。<br><img src=\"/upload/image/e67e7b3649ce4bbe94e4966bf688d68b.png\" alt=\"\"></p>\r\n<ul>\r\n<li><p>流量：在一定时间内进入网站/产品的访问量。</p>\r\n</li><li><p>PV：Page View的英文缩写，意为页面浏览量，是评价网站流量的常用指标之一。</p>\r\n</li><li><p>UV：Unique Visitor的缩写，指不同的、通过互联网访问、浏览这个网页的自然人。</p>\r\n</li><li><p>转化率：Take Rates（Conversions Rates），转化率=进行了相应的动作的访问量/总访问量，用以衡量网站内容对访问者的吸引程度以及网站的宣传效果。</p>\r\n</li><li><p>SEO：Search Engine Optimiztion的英文缩写，意为“搜索引擎优化”。SEO指从自然搜索结果获得网站流量的技术和过程。</p>\r\n</li></ul>\r\n<h2 id=\"h2-u7528u6237u7EF4u7CFB\"><a name=\"用户维系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>用户维系</h2><p>有了用户和流量之后，运营的大部分工作在于如何持续有效的推动用户的活跃与留存，并从中发现有价值甚至高价值的用户。<br>经过多年的发展，用户的定义已经发展成为“USER”（使用者）与“Member”（会员）两种基础定义。</p>\r\n', '## 流量建设\r\n流量建设是要通过各种推广、扩散、营销、活动，提升网站的流量指标，我们通常所说的PV、UV、转化率、SEO都在这个环节。\r\n![](/upload/image/e67e7b3649ce4bbe94e4966bf688d68b.png)\r\n\r\n- 流量：在一定时间内进入网站/产品的访问量。\r\n\r\n- PV：Page View的英文缩写，意为页面浏览量，是评价网站流量的常用指标之一。\r\n\r\n- UV：Unique Visitor的缩写，指不同的、通过互联网访问、浏览这个网页的自然人。\r\n\r\n- 转化率：Take Rates（Conversions Rates），转化率=进行了相应的动作的访问量/总访问量，用以衡量网站内容对访问者的吸引程度以及网站的宣传效果。\r\n\r\n- SEO：Search Engine Optimiztion的英文缩写，意为“搜索引擎优化”。SEO指从自然搜索结果获得网站流量的技术和过程。\r\n\r\n## 用户维系\r\n有了用户和流量之后，运营的大部分工作在于如何持续有效的推动用户的活跃与留存，并从中发现有价值甚至高价值的用户。\r\n经过多年的发展，用户的定义已经发展成为“USER”（使用者）与“Member”（会员）两种基础定义。'),(58, 58, '<h2 id=\"h2-u4EC0u4E48u662Fu5185u5BB9\"><a name=\"什么是内容\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是内容</h2><p>网站（产品）中可提供用户消费并且延长用户停留时间、促进用户转化的展示均可称之为“内容”。表现形式有文字、图片、音频、视频或者动作等。</p>\r\n<blockquote>\r\n<p>举N栗子</p>\r\n<p>电商网站中琳琅满目的商品，这些商品有图片、名称、价格、打折信息、用户评价、打分、晒单、问答等。</p>\r\n<p>门户网站中的各类新闻，有文字、图片、视频、音频，有各种形式的专题，博客、微博等。</p>\r\n<p>政府网站中关于政府的新闻，各项法规、政策、政府职能描述等。</p>\r\n<p>搜索引擎中各种词条，词条中还有被标红的关键词、链接地址、图标（icon）等。</p>\r\n<p>社区论坛中的各种话题、问答、帖子、回复等。</p>\r\n</blockquote>\r\n<p>所有互联网产品都有内容，区别在于内容的形式不同，内容的展现方式不同，带给受众的感知不同，参与和互动的方式也不同。</p>\r\n<h2 id=\"h2-u4EC0u4E48u662Fu5185u5BB9u8FD0u8425\"><a name=\"什么是内容运营\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是内容运营</h2><p>内容运营是指通过创造、编辑、组织、呈现网站或产品的内容，从而提高互联网产品的内容价值，制造出对用户的黏着、活跃产生一定促进作用的动作。</p>\r\n<p><img src=\"/upload/image/5f26f841bcdf405da8ae60486b0b5c8b.png\" alt=\"\"></p>\r\n<p>内容运营的工作至少包括五个部分：</p>\r\n<blockquote>\r\n<p>创作内容（采集或者原创，包括各种内容类型）<br>编辑审核<br>推荐和专题制作<br>找到需要这些内容的人，并且想办法呈现给他们<br>根据数据和用户反馈，进行内容调整与优化</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5185u5BB9u8FD0u8425u7684u6838u5FC3\"><a name=\"内容运营的核心\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容运营的核心</h2><blockquote>\r\n<p>持续制作、编辑及推荐对用户有价值的内容，保证用户可以在产品中获取这些信息<br>根据KPI的设计，降低或者提高用户获取内容的成本<br>协助网站（产品）获利</p>\r\n</blockquote>\r\n<p>内容运营非常倚重文案能力，它对任职人员的思维灵活度、创意水平、逻辑能力都有要求。你既需要想出有趣的新鲜点子来规划和展示你的内容，又不能过分浮夸以至于用户不知所云为何物。<br>同时，内容运营人员也需要了解用户互动的逻辑，找出有效的方法和手段，刺激用户间产生正向互动，从而获得更多优质内容。</p>\r\n', '## 什么是内容\r\n网站（产品）中可提供用户消费并且延长用户停留时间、促进用户转化的展示均可称之为“内容”。表现形式有文字、图片、音频、视频或者动作等。\r\n> 举N栗子\r\n\r\n> 电商网站中琳琅满目的商品，这些商品有图片、名称、价格、打折信息、用户评价、打分、晒单、问答等。\r\n\r\n> 门户网站中的各类新闻，有文字、图片、视频、音频，有各种形式的专题，博客、微博等。\r\n\r\n> 政府网站中关于政府的新闻，各项法规、政策、政府职能描述等。\r\n\r\n> 搜索引擎中各种词条，词条中还有被标红的关键词、链接地址、图标（icon）等。\r\n\r\n> 社区论坛中的各种话题、问答、帖子、回复等。\r\n\r\n所有互联网产品都有内容，区别在于内容的形式不同，内容的展现方式不同，带给受众的感知不同，参与和互动的方式也不同。\r\n\r\n## 什么是内容运营\r\n内容运营是指通过创造、编辑、组织、呈现网站或产品的内容，从而提高互联网产品的内容价值，制造出对用户的黏着、活跃产生一定促进作用的动作。\r\n\r\n![](/upload/image/5f26f841bcdf405da8ae60486b0b5c8b.png)\r\n\r\n内容运营的工作至少包括五个部分：\r\n> 创作内容（采集或者原创，包括各种内容类型）\r\n> 编辑审核\r\n> 推荐和专题制作\r\n> 找到需要这些内容的人，并且想办法呈现给他们\r\n> 根据数据和用户反馈，进行内容调整与优化\r\n\r\n## 内容运营的核心\r\n> 持续制作、编辑及推荐对用户有价值的内容，保证用户可以在产品中获取这些信息\r\n> 根据KPI的设计，降低或者提高用户获取内容的成本\r\n> 协助网站（产品）获利\r\n\r\n内容运营非常倚重文案能力，它对任职人员的思维灵活度、创意水平、逻辑能力都有要求。你既需要想出有趣的新鲜点子来规划和展示你的内容，又不能过分浮夸以至于用户不知所云为何物。\r\n同时，内容运营人员也需要了解用户互动的逻辑，找出有效的方法和手段，刺激用户间产生正向互动，从而获得更多优质内容。'),(59, 59, '<blockquote>\r\n<p>内容的采集与创造<br>内容的呈现与管理<br>内容的扩散与传导<br>内容的效果与评估</p>\r\n</blockquote>\r\n<h2 id=\"h2--\"><a name=\"内容供应链——将内容视为你的商品\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容供应链——将内容视为你的商品</h2><p>供应链传统的意思是：产品生产和流通过程中所涉及的原料供应商、生厂商、分销商、零售商以及最终消费者等成员通过与上游、下游成员的连接组成的网络。<br><img src=\"/upload/image/c7a5bc11d65e4512ba0c9b010ebf141f.png\" alt=\"\"></p>\r\n<p>借助传统的供应链图示，可以将内容供应链类比如下图</p>\r\n<p><img src=\"/upload/image/6833211f6d8e4a2baabbc2a107db43ac.png\" alt=\"\"></p>\r\n<blockquote>\r\n<p>网站（产品）上有哪些内容（定位）<br>这些内容从哪里来，游谁提供（来源）<br>这些内容给谁看，要达到什么样的目标（受众）<br>这些内容要如何组织与呈现（展现机制）<br>这些内容如何做筛选，什么是好的内容（内容标准化）</p>\r\n</blockquote>\r\n<p>过去我们在面对内容运营时，很容易犯的一个错误是，<strong>把内容运营简化为将内容组织呈现出来并推送给希望推送的对象</strong>，而忽略了整体过程应该遵循内容供应链的思路。</p>\r\n<p>在内容运营的初期，对运营工作的排序应该是：</p>\r\n<ul>\r\n<li>内容消费者定位（网站定位+受众定位+运营目标）</li><li>内容来源确认（采集或者寻找内容生产者）</li><li>内容标准的确立（有哪些内容、如何展现内容、评判内容质量的标准）。</li></ul>\r\n<p>将你的内容视为你的商品，从初始阶段就定义这个商品的销售对象、选品和展示方式，进而确保上线后的后台内容流转与前台展示效果。</p>\r\n<h2 id=\"h2--\"><a name=\"内容初始化——构建网站与产品的价值观\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容初始化——构建网站与产品的价值观</h2><p>内容初始化就是在已构建的内容框架下，在用户进入之前填充一些内容，这些内容是内容运营初期网站或产品的核心部分，<strong>代表了网站或产品的价值观</strong>。</p>\r\n<p>内容初始化之前要解决的</p>\r\n<ul>\r\n<li>第一，确立好内容供应链的架构，解决内容从哪里来、到哪里去的流程问题。</li><li>第二，确立好内容面对的初始用户群（种子用户）。</li><li>第三，明确第一阶段用内容解决的问题，并进行内容准备。</li><li>第四，关键路径的梳理与初始内容的准备。</li></ul>\r\n', '> 内容的采集与创造\r\n> 内容的呈现与管理\r\n> 内容的扩散与传导\r\n> 内容的效果与评估\r\n\r\n## 内容供应链——将内容视为你的商品\r\n供应链传统的意思是：产品生产和流通过程中所涉及的原料供应商、生厂商、分销商、零售商以及最终消费者等成员通过与上游、下游成员的连接组成的网络。\r\n![](/upload/image/c7a5bc11d65e4512ba0c9b010ebf141f.png)\r\n\r\n借助传统的供应链图示，可以将内容供应链类比如下图\r\n\r\n![](/upload/image/6833211f6d8e4a2baabbc2a107db43ac.png)\r\n\r\n> 网站（产品）上有哪些内容（定位）\r\n> 这些内容从哪里来，游谁提供（来源）\r\n> 这些内容给谁看，要达到什么样的目标（受众）\r\n> 这些内容要如何组织与呈现（展现机制）\r\n> 这些内容如何做筛选，什么是好的内容（内容标准化）\r\n\r\n过去我们在面对内容运营时，很容易犯的一个错误是，**把内容运营简化为将内容组织呈现出来并推送给希望推送的对象**，而忽略了整体过程应该遵循内容供应链的思路。\r\n\r\n在内容运营的初期，对运营工作的排序应该是：\r\n- 内容消费者定位（网站定位+受众定位+运营目标）\r\n- 内容来源确认（采集或者寻找内容生产者）\r\n- 内容标准的确立（有哪些内容、如何展现内容、评判内容质量的标准）。\r\n\r\n将你的内容视为你的商品，从初始阶段就定义这个商品的销售对象、选品和展示方式，进而确保上线后的后台内容流转与前台展示效果。\r\n\r\n## 内容初始化——构建网站与产品的价值观\r\n内容初始化就是在已构建的内容框架下，在用户进入之前填充一些内容，这些内容是内容运营初期网站或产品的核心部分，**代表了网站或产品的价值观**。\r\n\r\n内容初始化之前要解决的\r\n- 第一，确立好内容供应链的架构，解决内容从哪里来、到哪里去的流程问题。\r\n- 第二，确立好内容面对的初始用户群（种子用户）。\r\n- 第三，明确第一阶段用内容解决的问题，并进行内容准备。\r\n- 第四，关键路径的梳理与初始内容的准备。\r\n'),(60, 60, '<p>当一个网站或产品进入正式运营阶段，就需要建立一些标准。</p>\r\n<blockquote>\r\n<p>内容质量的甄别。<br>好内容的露出与呈现方式。<br>持续的推送与推荐机制的建立。<br>实现“自运营”的路径与机制选择。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5185u5BB9u8D28u91CFu7684u7504u522B\"><a name=\"内容质量的甄别\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容质量的甄别</h2><p>从<strong>产品设计</strong>层面，可以设计“赞同”、“反对”等，让用户协助网站筛选信息以及网站协助用户筛选信息的工具。<br>建立<strong>内容规范</strong>，确立了创建内容的标准后，网站就以及可以初步对垃圾内容的产生进行约束，创建内容标准的确立对甄别内容质量的帮助，是初步减少不良内容的出现概率。及规避对不良内容的清洗带来的用户投诉和用户意见的反弹。<br>即便有了系统和规则的约束，内容质量的甄别也依然会有部分内容依赖人工，而且内容质量的甄别，本身就是所有有内容的网站和产品始终都在寻找解决方案的重要事项。</p>\r\n<h2 id=\"h2-u628Au597Du7684u5185u5BB9u5448u73B0u7ED9u7528u6237\"><a name=\"把好的内容呈现给用户\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>把好的内容呈现给用户</h2><p>呈现的方式，无非是用户主动发现，以及运营人员对用户主动推送与引导两种方式。<br>推送渠道（也称为消息、通知），是很多运营人员都会用的手段。<br><img src=\"/upload/image/d75b831e3b3f42d38cb13ad9c330dd62.png\" alt=\"\"><br>既然有渠道，就有渠道选择问题，渠道选择原则自不待言，就是要使用用户最常接触、且最易使用的那部分渠道。在推送渠道的选择上</p>\r\n<blockquote>\r\n<p>第一，优先考虑渠道是否覆盖推送对象。<br>第二，推送内容的时效性。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u63A8u9001u6E20u9053u9009u62E9u7684u4F9Du636E\"><a name=\"推送渠道选择的依据\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>推送渠道选择的依据</h2><p><strong>历史推送数据</strong>。使用过什么渠道，各个渠道的到达率和转化率如何。<br><strong>竞品选择的渠道</strong>。如果没有历史数据，就需要预估，此时比较具有参开价值的，是竞品的渠道选择。<br><strong>用户兴趣点所涉及的渠道</strong>。没有历史数据，也没有掌握竞品的渠道，或者干脆连没有竞品；那么可能就需要跟进用户行为去猜测用户可能会在哪些渠道上接受信息，比如搜索引擎，导购平台等。</p>\r\n', '当一个网站或产品进入正式运营阶段，就需要建立一些标准。\r\n> 内容质量的甄别。\r\n> 好内容的露出与呈现方式。\r\n> 持续的推送与推荐机制的建立。\r\n> 实现“自运营”的路径与机制选择。\r\n\r\n## 内容质量的甄别\r\n从**产品设计**层面，可以设计“赞同”、“反对”等，让用户协助网站筛选信息以及网站协助用户筛选信息的工具。\r\n建立**内容规范**，确立了创建内容的标准后，网站就以及可以初步对垃圾内容的产生进行约束，创建内容标准的确立对甄别内容质量的帮助，是初步减少不良内容的出现概率。及规避对不良内容的清洗带来的用户投诉和用户意见的反弹。\r\n即便有了系统和规则的约束，内容质量的甄别也依然会有部分内容依赖人工，而且内容质量的甄别，本身就是所有有内容的网站和产品始终都在寻找解决方案的重要事项。\r\n\r\n## 把好的内容呈现给用户\r\n呈现的方式，无非是用户主动发现，以及运营人员对用户主动推送与引导两种方式。\r\n推送渠道（也称为消息、通知），是很多运营人员都会用的手段。\r\n![](/upload/image/d75b831e3b3f42d38cb13ad9c330dd62.png)\r\n既然有渠道，就有渠道选择问题，渠道选择原则自不待言，就是要使用用户最常接触、且最易使用的那部分渠道。在推送渠道的选择上\r\n> 第一，优先考虑渠道是否覆盖推送对象。\r\n> 第二，推送内容的时效性。\r\n\r\n## 推送渠道选择的依据\r\n**历史推送数据**。使用过什么渠道，各个渠道的到达率和转化率如何。\r\n**竞品选择的渠道**。如果没有历史数据，就需要预估，此时比较具有参开价值的，是竞品的渠道选择。\r\n**用户兴趣点所涉及的渠道**。没有历史数据，也没有掌握竞品的渠道，或者干脆连没有竞品；那么可能就需要跟进用户行为去猜测用户可能会在哪些渠道上接受信息，比如搜索引擎，导购平台等。'),(61, 61, '<p>大部分用户只会看标题或者前面一段小字，以确定要不要展开它，或者直接忽略。所以推送内容务必直接了当，当然，这种直接了当是根据用户习惯来确定具体内容的。如果你的用户喜欢小清新，就需要不落俗套的包装成小清新文字；如果你的用户是贪图便宜的，那么“全场1折起”这种标题就比先说一个小故事更容易吸引用户。</p>\r\n<h2 id=\"h2-u8D34u8FD1u53D7u4F17u7684u5FC3u7406\"><a name=\"贴近受众的心理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>贴近受众的心理</h2><p>你的文案需要考虑受众的心理感受，要么迎合良性感受，要么打击不良感受，要么二者兼顾。所以你需要弄清楚<strong>你的受众是谁</strong>？推送内容之后，如果希望用户点击、查看、参与，就需要文案贴近推送对象的心理诉求，好的内容应当是紧贴受众的，否则效果肯定会打折扣。</p>\r\n<h2 id=\"h2-u9009u4E00u4E2Au597Du4F4Du7F6E\"><a name=\"选一个好位置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>选一个好位置</h2><p>文案的核心内容一定要在第一眼就能看到的地方，醒目、直接，受众不会被其他部分干扰。</p>\r\n<h2 id=\"h2--\"><a name=\"简单有趣，朗朗上口\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>简单有趣，朗朗上口</h2><p>简单有趣代表容易理解，在信息爆炸的社会，一小段文字的力量比一大段文字的力量要大，当然前提是你用一小段文字清晰解释了一大段文字所代表的意思。朗朗上口代表着易于传播，当社交平台的力量被放大的时候，用朗朗上口的文案，更容易帮我们带来内容的传播，从而带来更多用户。</p>\r\n<h2 id=\"h2-u7B26u5408u573Au666F\"><a name=\"符合场景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>符合场景</h2><p>知乎用户徐慧琳曾经总结过好的文案的特征：<strong>称呼亲切、内容简单、落款严肃、充满诱惑</strong>。</p>\r\n<h2 id=\"h2--\"><a name=\"怎样才能在日常运营中写出好文案？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>怎样才能在日常运营中写出好文案？</h2><blockquote>\r\n<p>第一，了解受众。<br>第二，了解产品和活动。<br>第三，准确表达。<br>第四，突出产品特点或优势。<br>第五，勤加练习。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u6848u4F8B\"><a name=\"案例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>案例</h2><p><img src=\"/upload/image/45ea51ba0faa42429ea4a3c2d386e6c6.png\" alt=\"\"></p>\r\n', '大部分用户只会看标题或者前面一段小字，以确定要不要展开它，或者直接忽略。所以推送内容务必直接了当，当然，这种直接了当是根据用户习惯来确定具体内容的。如果你的用户喜欢小清新，就需要不落俗套的包装成小清新文字；如果你的用户是贪图便宜的，那么“全场1折起”这种标题就比先说一个小故事更容易吸引用户。\r\n## 贴近受众的心理\r\n你的文案需要考虑受众的心理感受，要么迎合良性感受，要么打击不良感受，要么二者兼顾。所以你需要弄清楚**你的受众是谁**？推送内容之后，如果希望用户点击、查看、参与，就需要文案贴近推送对象的心理诉求，好的内容应当是紧贴受众的，否则效果肯定会打折扣。\r\n## 选一个好位置\r\n文案的核心内容一定要在第一眼就能看到的地方，醒目、直接，受众不会被其他部分干扰。\r\n## 简单有趣，朗朗上口\r\n简单有趣代表容易理解，在信息爆炸的社会，一小段文字的力量比一大段文字的力量要大，当然前提是你用一小段文字清晰解释了一大段文字所代表的意思。朗朗上口代表着易于传播，当社交平台的力量被放大的时候，用朗朗上口的文案，更容易帮我们带来内容的传播，从而带来更多用户。\r\n## 符合场景\r\n知乎用户徐慧琳曾经总结过好的文案的特征：**称呼亲切、内容简单、落款严肃、充满诱惑**。\r\n## 怎样才能在日常运营中写出好文案？\r\n> 第一，了解受众。\r\n> 第二，了解产品和活动。\r\n> 第三，准确表达。\r\n> 第四，突出产品特点或优势。\r\n> 第五，勤加练习。\r\n\r\n## 案例\r\n![](/upload/image/45ea51ba0faa42429ea4a3c2d386e6c6.png)'),(62, 62, '<p>对推送后的用户行为的监控和用户行为数据的分析非常重要，通过数据分析，我们可以知道用户对哪些渠道是信任的、有兴趣的，对哪些渠道是不感兴趣的、触达不到的；也能够明白用户对哪些消息是乐于了解的，对哪些消息是不敢兴趣的；还可以知道什么样的文案和内容可以促进用户进一步的动作的，那么，在日后的运营中就可以有意识的调整和提高，以达到更好的效果。<br><img src=\"/upload/image/8044d7e01ffe4d3891a38cfee3b9e809.png\" alt=\"\"><br>上图描述了用户从收到推送到完成转化的路径，在各个环节中都应该有统计数据，各级数据中，都有对应的转化率。<br><img src=\"/upload/image/da40c233f57f47fe8aa6d8eebc78a9a9.png\" alt=\"\"><br>需要了解的是，漏斗的每个环节的转化率分别是多少，要比照渠道、内容、用户选型去分析。分析的结论主要包括：</p>\r\n<blockquote>\r\n<p>渠道的质量分析，比如哪个/哪些渠道效果好，哪些渠道效果不佳。<br>通过各渠道发出的推送成功到达用户的数量。<br>用户对待推送的态度如何，有多少用户打开、阅读了推送的内容。<br>在接收、查看推送的用户中，有多少人进入网站（产品）中对应的Landing Page（着陆页）。<br>最后，有多少用户完成了我们期望的转化。<br>对待这些数据，我们有哪些经验和教训，以后应当如何保持、改进、提高，这些应落实到具体的措施中，下一次再进行尝试。</p>\r\n</blockquote>\r\n<p>整个推送过程中，一定要注意：<strong>避免用户打扰</strong>。要让推送的质量有所保证，就需要学习如何让用户愉快的接受推送而不觉得是一种打扰。这一点和内容的质量有关，和内容的精细化运营有关，和分用户运营也有关。</p>\r\n', '对推送后的用户行为的监控和用户行为数据的分析非常重要，通过数据分析，我们可以知道用户对哪些渠道是信任的、有兴趣的，对哪些渠道是不感兴趣的、触达不到的；也能够明白用户对哪些消息是乐于了解的，对哪些消息是不敢兴趣的；还可以知道什么样的文案和内容可以促进用户进一步的动作的，那么，在日后的运营中就可以有意识的调整和提高，以达到更好的效果。\r\n![](/upload/image/8044d7e01ffe4d3891a38cfee3b9e809.png)\r\n上图描述了用户从收到推送到完成转化的路径，在各个环节中都应该有统计数据，各级数据中，都有对应的转化率。\r\n![](/upload/image/da40c233f57f47fe8aa6d8eebc78a9a9.png)\r\n需要了解的是，漏斗的每个环节的转化率分别是多少，要比照渠道、内容、用户选型去分析。分析的结论主要包括：\r\n> 渠道的质量分析，比如哪个/哪些渠道效果好，哪些渠道效果不佳。\r\n> 通过各渠道发出的推送成功到达用户的数量。\r\n> 用户对待推送的态度如何，有多少用户打开、阅读了推送的内容。\r\n> 在接收、查看推送的用户中，有多少人进入网站（产品）中对应的Landing Page（着陆页）。\r\n> 最后，有多少用户完成了我们期望的转化。\r\n> 对待这些数据，我们有哪些经验和教训，以后应当如何保持、改进、提高，这些应落实到具体的措施中，下一次再进行尝试。\r\n\r\n整个推送过程中，一定要注意：**避免用户打扰**。要让推送的质量有所保证，就需要学习如何让用户愉快的接受推送而不觉得是一种打扰。这一点和内容的质量有关，和内容的精细化运营有关，和分用户运营也有关。'),(63, 63, '<h2 id=\"h2-u63A8u8350u4E0Eu6574u5408\"><a name=\"推荐与整合\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>推荐与整合</h2><p>当内容逐渐充实，内容运营人员的日常工作从生产内容转变为内容的推荐与整合。所谓内容的推荐，就是让优质的内容更多的呈现给用户。所谓内容的整合，就是让同类的内容产生集合。<br>列举一些知乎在内容推荐、整合上的动作</p>\r\n<blockquote>\r\n<p>关注话题与关注对象，用户主动关注的对象或话题内容更新，都是主动推荐/推送给用户。<br>对于网站上大量的优质内容，用户可以主动通过“发现”、“话题”等功能区寻找。<br>对于新近进入的成员的优质内容，通过“首场秀”进行推荐。<br>对于一些推荐阅读的内容，通过“每周精选”呈现给用户。</p>\r\n</blockquote>\r\n<p>不管进行怎样的外延、采用怎样的包装，其核心都是内容的筛选与面向对象的构建与策略。</p>\r\n<h2 id=\"h2-u81EAu8FD0u8425u7684u8DEFu5F84u4E0Eu673Au5236u9009u62E9\"><a name=\"自运营的路径与机制选择\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>自运营的路径与机制选择</h2><p>自运营是网站（产品）的最高境界，但是在达到这个境界之前，我们必须要做用户引导与内容构建，否则很难实现网站（产品）健康有序的“自运营”。所谓“自运营”，是指建立一些机制和规则，用户通过遵守这些机制，利用这些规则，使得日常运营不再过多的依赖运营人员的引导，实现用户自主运营。<br>一般来说，在自运营状态下，运营人员只需要通过组织活动、应对用户投诉等日常工作来进行日常管理和达成运营目标。</p>\r\n<p><img src=\"/upload/image/5ae9b4c734cc41ba94ff4efb42a1c1fb.png\" alt=\"\"></p>\r\n', '## 推荐与整合\r\n当内容逐渐充实，内容运营人员的日常工作从生产内容转变为内容的推荐与整合。所谓内容的推荐，就是让优质的内容更多的呈现给用户。所谓内容的整合，就是让同类的内容产生集合。\r\n列举一些知乎在内容推荐、整合上的动作\r\n> 关注话题与关注对象，用户主动关注的对象或话题内容更新，都是主动推荐/推送给用户。\r\n> 对于网站上大量的优质内容，用户可以主动通过“发现”、“话题”等功能区寻找。\r\n> 对于新近进入的成员的优质内容，通过“首场秀”进行推荐。\r\n> 对于一些推荐阅读的内容，通过“每周精选”呈现给用户。\r\n\r\n不管进行怎样的外延、采用怎样的包装，其核心都是内容的筛选与面向对象的构建与策略。\r\n\r\n## 自运营的路径与机制选择\r\n自运营是网站（产品）的最高境界，但是在达到这个境界之前，我们必须要做用户引导与内容构建，否则很难实现网站（产品）健康有序的“自运营”。所谓“自运营”，是指建立一些机制和规则，用户通过遵守这些机制，利用这些规则，使得日常运营不再过多的依赖运营人员的引导，实现用户自主运营。\r\n一般来说，在自运营状态下，运营人员只需要通过组织活动、应对用户投诉等日常工作来进行日常管理和达成运营目标。\r\n\r\n![](/upload/image/5ae9b4c734cc41ba94ff4efb42a1c1fb.png)'),(64, 64, '<h2 id=\"h2-u5148u5B9Au4F4D\"><a name=\"先定位\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>先定位</h2><p>根据品牌自身的特点、受众、调性来定义公共平台所要进行运营的内容的特色、受众的调性。<br>第一层的意思是面对受众群的定位。你要清楚哪些受众群体会喜欢你的内容。第二层的意思是面向内容的定位。对于这样的受众群体，你应该通过什么类型的内容进行长期的运营。</p>\r\n<h2 id=\"h2--\"><a name=\"快速测试，获取反馈\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>快速测试，获取反馈</h2><p>明确了定位，意味着内容的类型确立了，可以放置备选的内容了，然后就要去观察用户是否喜欢、是否感兴趣。通过数据分析，假定你发布的时间是固定的，你的受众群体是固定的，那么，更多的转发、评论、收藏、点赞就意味着用户对内容感兴趣，反之，则表示不感兴趣。</p>\r\n<h2 id=\"h2-u57F9u517Bu7528u6237u4E60u60EF\"><a name=\"培养用户习惯\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>培养用户习惯</h2><p>无论早上、中午、晚上，重要的是，要在固定的时间发布内容。如果内容发布的时间固定，长期关注内容的用户会培养成定时查看的习惯。当然，习惯是建立在用户对内容感兴趣的基础上。</p>\r\n<h2 id=\"h2-u575Au6301u957Fu671Fu7684u5185u5BB9u8FD0u8425u65B9u9488\"><a name=\"坚持长期的内容运营方针\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>坚持长期的内容运营方针</h2><p>明天做了后天就有效果，不管做什么事情，这样的想法都是错误的，尤其是在内容运营方面。有句话叫“一个人做一件好事不难，难的是一辈子都做好事”，内容运营也是这样，“一段时间最优质的内容不难，难的是一直最优质的内容”。</p>\r\n<h2 id=\"h2-u4E0Eu5185u5BB9u6D88u8D39u8005u4FDDu6301u4E92u52A8\"><a name=\"与内容消费者保持互动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>与内容消费者保持互动</h2><p>每天都保持与来消费内容的用户保持互动是很难的，公共平台上的内容消费者，或许也是内容生产者，和他们进行沟通，很有可能带来有益的提醒，帮助运营者找到用户关心的问题并予以解决。这并不难，只要你肯提供消费者需要的内容，你就解决了他们关心的问题。</p>\r\n<h2 id=\"h2-u575Au6301u539Fu521B\"><a name=\"坚持原创\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>坚持原创</h2><p>坚持原创是一件很难的事情，如果大多是内容都是转发的，那么很难吸引粉丝长期关注。内容获取渠道可以被替代，是很可怕的。<br><strong>原创的符合品牌特点及受众口味的内容，最容易引爆热点</strong>。</p>\r\n', '## 先定位\r\n根据品牌自身的特点、受众、调性来定义公共平台所要进行运营的内容的特色、受众的调性。\r\n第一层的意思是面对受众群的定位。你要清楚哪些受众群体会喜欢你的内容。第二层的意思是面向内容的定位。对于这样的受众群体，你应该通过什么类型的内容进行长期的运营。\r\n## 快速测试，获取反馈\r\n明确了定位，意味着内容的类型确立了，可以放置备选的内容了，然后就要去观察用户是否喜欢、是否感兴趣。通过数据分析，假定你发布的时间是固定的，你的受众群体是固定的，那么，更多的转发、评论、收藏、点赞就意味着用户对内容感兴趣，反之，则表示不感兴趣。\r\n## 培养用户习惯\r\n无论早上、中午、晚上，重要的是，要在固定的时间发布内容。如果内容发布的时间固定，长期关注内容的用户会培养成定时查看的习惯。当然，习惯是建立在用户对内容感兴趣的基础上。\r\n## 坚持长期的内容运营方针\r\n明天做了后天就有效果，不管做什么事情，这样的想法都是错误的，尤其是在内容运营方面。有句话叫“一个人做一件好事不难，难的是一辈子都做好事”，内容运营也是这样，“一段时间最优质的内容不难，难的是一直最优质的内容”。\r\n## 与内容消费者保持互动\r\n每天都保持与来消费内容的用户保持互动是很难的，公共平台上的内容消费者，或许也是内容生产者，和他们进行沟通，很有可能带来有益的提醒，帮助运营者找到用户关心的问题并予以解决。这并不难，只要你肯提供消费者需要的内容，你就解决了他们关心的问题。\r\n## 坚持原创\r\n坚持原创是一件很难的事情，如果大多是内容都是转发的，那么很难吸引粉丝长期关注。内容获取渠道可以被替代，是很可怕的。\r\n**原创的符合品牌特点及受众口味的内容，最容易引爆热点**。'),(65, 65, '<p>一个网站（产品），只要有内容，就涉及内容供应链的建立。而内容供应链必然会涉及三方：内容消费者、内容生产者、网站与产品。</p>\r\n<h2 id=\"h2-u5185u5BB9u6D88u8D39u8005\"><a name=\"内容消费者\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容消费者</h2><p>内容消费者是消费内容的人（阅读、采纳、运用），他们与网站（产品）的定位息息相关，他们决定了网站（产品）的内容给谁看，谁会对这些内容感兴趣从而提供可转化的流量。</p>\r\n<h2 id=\"h2-u5185u5BB9u751Fu4EA7u8005\"><a name=\"内容生产者\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容生产者</h2><p>内容生产者是生产内容的人，他们是网站（产品）内容的发动机，他们决定了网站（产品）会提供什么样的内容。内容生产者所提供的内容与消费者兴趣匹配，是保证内容流转效率和网站（产品）转化能力的动力。</p>\r\n<h2 id=\"h2-u7F51u7AD9u4E0Eu4EA7u54C1\"><a name=\"网站与产品\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>网站与产品</h2><p>网站与产品是联系内容生产者和内容消费者的渠道或平台，它是需要<strong>维系内容生产者</strong>，<strong>满足内容消费者</strong>，通过各种方式保证网站（产品）的运转。</p>\r\n<blockquote>\r\n<p>从内容运营的角度来看，它不仅仅要明确内容定位内容消费者，也需要努力维系内容生产者，同时对用户反馈进行跟踪和推进，让内容流转更顺畅、内容消费更黏着、用户转化更便捷。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5185u5BB9u6D88u8D39u8005u5B9Au4F4D\"><a name=\"内容消费者定位\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容消费者定位</h2><p>内容消费者定位之后，可以确定网站（产品）早期提供的内容会聚焦在哪一些用户群体，从而建立比较单纯但直接的效果评价体系，并为后续运营调整和改进提供依据。<br>需要注意的是，内容消费者的定位是动态的，也就是说，并非在任何时间节点，内容消费者的描像都是一致的，它可能随着网站（产品）内容的调整而发生变化。</p>\r\n<blockquote>\r\n<p>以内容为主的网站（产品）都需要评估让用户进入的速率以用户选型的控制。用户过快进入可能会导致内容消费定位来不及调整，甚至冲击最初建立的内容消费者定位，影响网站（产品）所提供的质量和用户接受度。而用户进入过慢会导致内容消费力不足，内容生产者缺乏动力，从而影响内容的质量与数量。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u63A7u5236u5185u5BB9u6D88u8D39u8005u8FDBu5165u901Fu7387\"><a name=\"控制内容消费者进入速率\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>控制内容消费者进入速率</h2><p>控制内容消费者进入最成熟的方案是：<strong>邀请机制</strong>。<br>例如，通过发放邀请码的方式，让一部分用户获得进入的资格。邀请机制分为<strong>主动邀请</strong>和<strong>互动邀请</strong>。</p>\r\n<h3 id=\"h3-u4E3Bu52A8u9080u8BF7\"><a name=\"主动邀请\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>主动邀请</h3><p>由品牌或者产品主导，邀请业内有影响力或对品牌、产品感兴趣的用户。这种邀请多见于网络游戏的测试阶段和互联网产品获取种子用户阶段。</p>\r\n<h3 id=\"h3-u4E92u52A8u9080u8BF7\"><a name=\"互动邀请\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>互动邀请</h3><p>网站（产品）已有用户对还未进入的用户发起的邀请，让有需要的用户进入并体验产品。这种邀请多见于社交产品、社区产品和针对性产品。</p>\r\n<h3 id=\"h3-u9080u8BF7u673Au5236u662Fu4E00u628Au53CCu5203u5251\"><a name=\"邀请机制是一把双刃剑\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>邀请机制是一把双刃剑</h3><p>第一，让人感受到“稀缺性”，能够带来精确锁定，也会造成黑市交易。人群精确锁定是最好的结果，这意味着进入网站（产品）的用户完全符合运营者的期望。但如果稀缺的邀请码流入黑市，就无法达到其锁定人群的目标，甚至导致用户厌恶情绪，损害品牌形象。<br>第二，可以制造垂直领域用户群，但可能导致用户群体过于单一。在内容为主的网站（产品）早期，用户群体单一可以让网站（产品）拥有较好的掌控能力和内容生产能力，但长期来说会因为缺乏成长性和活力降低用户的兴趣。</p>\r\n<h2 id=\"h2-u62A4u57CEu6CB3u673Au5236\"><a name=\"护城河机制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>护城河机制</h2><p>控制内容消费者进入的另一种方案，是人为的确立一个较高的门槛，只有跨过这一门槛的用户才获得一定的权限和资格。好处是避免小号、水军进入，减少灌水内容的发布；可以结合一些手段，确保用户发言或者发帖前已经学习了相关的规章制度，减少垃圾内容的出现。坏处是考验用户的耐心，考验耐心是在考验用户对内容需求的强烈程度；考验内容本身的质量。</p>\r\n<h2 id=\"h2-u5185u5BB9u751Fu4EA7u8005u7EF4u7CFB\"><a name=\"内容生产者维系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容生产者维系</h2><p>一旦内容运营者完成了内容消费者定位，接下来就会考虑内容由谁来提供、什么样的内容是内容消费者喜欢的，这其实是内容生产者的定位。</p>\r\n<h3 id=\"h3-u5185u5BB9u751Fu4EA7u8005u5B9Au4F4D\"><a name=\"内容生产者定位\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容生产者定位</h3><blockquote>\r\n<p>内容生产者是谁？<br>内容生产者可能是网站（产品）内部的员工，也可能是外部用户。<br>他们提供何种内容？<br>内容生产者应当提供内容消费者需要的内容。<br>他们为什么会提供这些内容？<br>这意味着运营人员需要考虑激励内容生产者的措施。<br>内容的质量如何？<br>为定义高质量内容与质量一般的内容，运营人员需要制定一个简单的标准，可以是用户打分，也可以是网站（产品）的内容评价机制。<br>如何让他们长期提供高质量的内容？<br>这同样意味着需要考虑激励措施，不管是有形的物质激励还是无形的精神激励，运营人员都需要考虑激励的方式与方法。</p>\r\n</blockquote>\r\n<h3 id=\"h3--\"><a name=\"网站（产品）的氛围营造\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>网站（产品）的氛围营造</h3><p>有什么样的氛围就会产生什么样的内容生产者，如果希望内容生产者持续提供优质的内容且不会轻易流失，就需要为内容生产者提供一个合适的氛围，这个氛围需要符合内容网站（产品）的特点和气质。</p>\r\n<ul>\r\n<li>确保网站（产品）有相应的社区规范对内容进行管理。</li><li>确保对用户言论具有掌控力，合理并按规则予以奖惩。</li></ul>\r\n<h3 id=\"h3-u5185u5BB9u751Fu4EA7u8005u6FC0u52B1u63AAu65BDu8BBEu8BA1\"><a name=\"内容生产者激励措施设计\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容生产者激励措施设计</h3><p>对于内容生产者，需要有一套完整的激励措施，来激励他们持续的贡献内容。任何网站（产品）对用户都有激励措施，只是激励方式的类型有所不同。</p>\r\n<h3 id=\"h3-u5185u5BB9u751Fu4EA7u8005u4EF7u503Cu7EF4u7CFB\"><a name=\"内容生产者价值维系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容生产者价值维系</h3><p>内容运营者要充分理解并信任内容生产者的价值，并基于这个简单的逻辑，保持与内容生产者之间的关联。简单来说，就是运营人员要知道内容生产者是谁，知道他们能贡献哪个方面或哪个层次的内容，并且知道如何推动他们贡献内容。</p>\r\n<h2 id=\"h2-u5185u5BB9u7684u53CDu9988u673Au5236u4E0Eu8DDFu8E2Au7B56u7565\"><a name=\"内容的反馈机制与跟踪策略\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容的反馈机制与跟踪策略</h2><blockquote>\r\n<p>在内容的采集与管理工作中，必须考虑用户反馈和对应的根据策略。<br>反馈机制和根据策略可以根据平台的不同选择合适的展现方式。<br>数据挖掘机制非常重要，但更重要的是对数据挖掘之后的反馈与跟进。<br>内容不是一成不变的，而是需要调整与提高。<br>内容运营必须要有KPI，但不管是曝光度的指标还是其他指标，指标的意义都不仅仅是“达成”，而是要反过来知道下一阶段的内容运营工作。</p>\r\n</blockquote>\r\n', '一个网站（产品），只要有内容，就涉及内容供应链的建立。而内容供应链必然会涉及三方：内容消费者、内容生产者、网站与产品。\r\n## 内容消费者\r\n内容消费者是消费内容的人（阅读、采纳、运用），他们与网站（产品）的定位息息相关，他们决定了网站（产品）的内容给谁看，谁会对这些内容感兴趣从而提供可转化的流量。\r\n## 内容生产者\r\n内容生产者是生产内容的人，他们是网站（产品）内容的发动机，他们决定了网站（产品）会提供什么样的内容。内容生产者所提供的内容与消费者兴趣匹配，是保证内容流转效率和网站（产品）转化能力的动力。\r\n## 网站与产品\r\n网站与产品是联系内容生产者和内容消费者的渠道或平台，它是需要**维系内容生产者**，**满足内容消费者**，通过各种方式保证网站（产品）的运转。\r\n> 从内容运营的角度来看，它不仅仅要明确内容定位内容消费者，也需要努力维系内容生产者，同时对用户反馈进行跟踪和推进，让内容流转更顺畅、内容消费更黏着、用户转化更便捷。\r\n\r\n## 内容消费者定位\r\n内容消费者定位之后，可以确定网站（产品）早期提供的内容会聚焦在哪一些用户群体，从而建立比较单纯但直接的效果评价体系，并为后续运营调整和改进提供依据。\r\n需要注意的是，内容消费者的定位是动态的，也就是说，并非在任何时间节点，内容消费者的描像都是一致的，它可能随着网站（产品）内容的调整而发生变化。\r\n> 以内容为主的网站（产品）都需要评估让用户进入的速率以用户选型的控制。用户过快进入可能会导致内容消费定位来不及调整，甚至冲击最初建立的内容消费者定位，影响网站（产品）所提供的质量和用户接受度。而用户进入过慢会导致内容消费力不足，内容生产者缺乏动力，从而影响内容的质量与数量。\r\n\r\n## 控制内容消费者进入速率\r\n控制内容消费者进入最成熟的方案是：**邀请机制**。\r\n例如，通过发放邀请码的方式，让一部分用户获得进入的资格。邀请机制分为**主动邀请**和**互动邀请**。\r\n### 主动邀请\r\n由品牌或者产品主导，邀请业内有影响力或对品牌、产品感兴趣的用户。这种邀请多见于网络游戏的测试阶段和互联网产品获取种子用户阶段。\r\n### 互动邀请\r\n网站（产品）已有用户对还未进入的用户发起的邀请，让有需要的用户进入并体验产品。这种邀请多见于社交产品、社区产品和针对性产品。\r\n### 邀请机制是一把双刃剑\r\n第一，让人感受到“稀缺性”，能够带来精确锁定，也会造成黑市交易。人群精确锁定是最好的结果，这意味着进入网站（产品）的用户完全符合运营者的期望。但如果稀缺的邀请码流入黑市，就无法达到其锁定人群的目标，甚至导致用户厌恶情绪，损害品牌形象。\r\n第二，可以制造垂直领域用户群，但可能导致用户群体过于单一。在内容为主的网站（产品）早期，用户群体单一可以让网站（产品）拥有较好的掌控能力和内容生产能力，但长期来说会因为缺乏成长性和活力降低用户的兴趣。\r\n## 护城河机制\r\n控制内容消费者进入的另一种方案，是人为的确立一个较高的门槛，只有跨过这一门槛的用户才获得一定的权限和资格。好处是避免小号、水军进入，减少灌水内容的发布；可以结合一些手段，确保用户发言或者发帖前已经学习了相关的规章制度，减少垃圾内容的出现。坏处是考验用户的耐心，考验耐心是在考验用户对内容需求的强烈程度；考验内容本身的质量。\r\n## 内容生产者维系\r\n一旦内容运营者完成了内容消费者定位，接下来就会考虑内容由谁来提供、什么样的内容是内容消费者喜欢的，这其实是内容生产者的定位。\r\n### 内容生产者定位\r\n> 内容生产者是谁？\r\n> 内容生产者可能是网站（产品）内部的员工，也可能是外部用户。\r\n> 他们提供何种内容？\r\n> 内容生产者应当提供内容消费者需要的内容。\r\n> 他们为什么会提供这些内容？\r\n> 这意味着运营人员需要考虑激励内容生产者的措施。\r\n> 内容的质量如何？\r\n> 为定义高质量内容与质量一般的内容，运营人员需要制定一个简单的标准，可以是用户打分，也可以是网站（产品）的内容评价机制。\r\n> 如何让他们长期提供高质量的内容？\r\n这同样意味着需要考虑激励措施，不管是有形的物质激励还是无形的精神激励，运营人员都需要考虑激励的方式与方法。\r\n\r\n### 网站（产品）的氛围营造\r\n有什么样的氛围就会产生什么样的内容生产者，如果希望内容生产者持续提供优质的内容且不会轻易流失，就需要为内容生产者提供一个合适的氛围，这个氛围需要符合内容网站（产品）的特点和气质。\r\n- 确保网站（产品）有相应的社区规范对内容进行管理。\r\n- 确保对用户言论具有掌控力，合理并按规则予以奖惩。\r\n\r\n### 内容生产者激励措施设计\r\n对于内容生产者，需要有一套完整的激励措施，来激励他们持续的贡献内容。任何网站（产品）对用户都有激励措施，只是激励方式的类型有所不同。\r\n### 内容生产者价值维系\r\n内容运营者要充分理解并信任内容生产者的价值，并基于这个简单的逻辑，保持与内容生产者之间的关联。简单来说，就是运营人员要知道内容生产者是谁，知道他们能贡献哪个方面或哪个层次的内容，并且知道如何推动他们贡献内容。\r\n## 内容的反馈机制与跟踪策略\r\n> 在内容的采集与管理工作中，必须考虑用户反馈和对应的根据策略。\r\n> 反馈机制和根据策略可以根据平台的不同选择合适的展现方式。\r\n> 数据挖掘机制非常重要，但更重要的是对数据挖掘之后的反馈与跟进。\r\n> 内容不是一成不变的，而是需要调整与提高。\r\n> 内容运营必须要有KPI，但不管是曝光度的指标还是其他指标，指标的意义都不仅仅是“达成”，而是要反过来知道下一阶段的内容运营工作。\r\n'),(66, 66, '<h2 id=\"h2-u627Eu5230u5185u5BB9u6D88u8D39u8005\"><a name=\"找到内容消费者\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>找到内容消费者</h2><p>最重要的是最用户研究，一个优秀的运营者通常是在不知不觉或者自觉主动做了很多用户研究工作的人，运营者的用户研究通常和运营目标紧密相关。</p>\r\n<blockquote>\r\n<p>内容消费者是谁？<br>他们通常在什么地方活跃？<br>他们的习惯是怎样的？<br>最近他们在关注什么热点？<br>我需要提供怎样的内容才能让他们注意到我？</p>\r\n</blockquote>\r\n<p>请注意，并不是只有内容生产者才是种子用户，一个内容为主的社区或者网站，内容消费者的类型和内容生产者的质量一样重要。对于内容运营者来说，要让内容生产者持续的创造内容，就要尽量避免在一个时间段内，带来大量与内容生产者创造的内容类型、内容质量不匹配的内容消费者；内容消费者引入有偏差，或者速率有偏差，引发社区或者网站内容的变化，而这种变化，冲击到了固有的核心用户，导致用户出现了不满情绪，进而会出现用户流失，甚至用户结构崩塌，注意，在扩大用户群体的过程中，对已有用户群体不产生过大的冲击。</p>\r\n<h2 id=\"h2-u7EF4u62A4u5185u5BB9u751Fu4EA7u8005\"><a name=\"维护内容生产者\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>维护内容生产者</h2><p>除了避免大量不匹配的内容消费者进入带来的冲击，我们还应当做好内容生产者的维系工作。通过加V、权重、认证等，人为隔离对丰富社区内容拥有不同贡献度的用户，以保证核心的内容生产者不受过多的干扰，尽量避免“鸡同鸭讲”甚至互相倾轧的现象，以维护内容社区的健康、稳定。</p>\r\n<h2 id=\"h2-u5185u5BB9u5982u4F55u6269u6563\"><a name=\"内容如何扩散\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容如何扩散</h2><p>在信息爆炸的今天，我们有各种工具、各种渠道可以让内容扩散，是相对简单的。</p>\r\n', '## 找到内容消费者\r\n最重要的是最用户研究，一个优秀的运营者通常是在不知不觉或者自觉主动做了很多用户研究工作的人，运营者的用户研究通常和运营目标紧密相关。\r\n> 内容消费者是谁？\r\n> 他们通常在什么地方活跃？\r\n> 他们的习惯是怎样的？\r\n> 最近他们在关注什么热点？\r\n> 我需要提供怎样的内容才能让他们注意到我？\r\n\r\n请注意，并不是只有内容生产者才是种子用户，一个内容为主的社区或者网站，内容消费者的类型和内容生产者的质量一样重要。对于内容运营者来说，要让内容生产者持续的创造内容，就要尽量避免在一个时间段内，带来大量与内容生产者创造的内容类型、内容质量不匹配的内容消费者；内容消费者引入有偏差，或者速率有偏差，引发社区或者网站内容的变化，而这种变化，冲击到了固有的核心用户，导致用户出现了不满情绪，进而会出现用户流失，甚至用户结构崩塌，注意，在扩大用户群体的过程中，对已有用户群体不产生过大的冲击。\r\n## 维护内容生产者\r\n除了避免大量不匹配的内容消费者进入带来的冲击，我们还应当做好内容生产者的维系工作。通过加V、权重、认证等，人为隔离对丰富社区内容拥有不同贡献度的用户，以保证核心的内容生产者不受过多的干扰，尽量避免“鸡同鸭讲”甚至互相倾轧的现象，以维护内容社区的健康、稳定。\r\n## 内容如何扩散\r\n在信息爆炸的今天，我们有各种工具、各种渠道可以让内容扩散，是相对简单的。'),(67, 67, '<p>大多数社区的内容生产者是稀少的，而消费内容的用户则占大多数。因此，有时候，我们会担心如何让社区的用户动起来，不仅仅是内容生产者，更重要的是让内容消费者积极的参与到社区内容中，营造社区用户活跃度高的氛围。</p>\r\n<h2 id=\"h2-u63D0u9AD8u51C6u5165u95E8u69DB\"><a name=\"提高准入门槛\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>提高准入门槛</h2><p>拥有稀缺内容或者优质内容的社区，会采用抬高用户的准入门槛的方式，通过设置护城河、用户分级，让真正需要内容的用户进入，让不是真正需要内容的用户离开，进入的用户通常会积极参与到社区讨论，让社区氛围热闹起来。这种做法的优势在于：由于内容获取的难度大，进入的用户会自愿、积极的参与到社区内容中，他们不得不通过自身的活跃去换取获得内容的权限。而劣势在于：如果其内容并非稀缺或不可替代，用户会选择门槛更低的社区，导致运营者建立活跃社区的目标难以达成。</p>\r\n<h2 id=\"h2--\"><a name=\"建立标准化内容，让用户按照规定动作参与社区运营\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>建立标准化内容，让用户按照规定动作参与社区运营</h2><p>规范用户发布的内容，降低用户使用的门槛，让更多的用户参与提供社区内容。例如，微博通过140个字数的限制，让用户发现其实制作内容的门槛很低，只要在规定的字数内表达自己的观点即可。</p>\r\n<h2 id=\"h2--\"><a name=\"制造观念冲突，让用户自发站队\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>制造观念冲突，让用户自发站队</h2><p>“豆腐脑应该是甜的还是咸的”这样一个千古难题，竟然引发各大社区划分出“甜豆腐脑派”和“咸豆腐脑派”，并两派互相嘲讽。“制造冲突”是一种比较有风险的做法。当然，这也是一种能够在短时间内制造出用户活跃和用户引入的做法。最通常的运营方式是利用社会热点，创造多种不同角度、不同立场的初始化内容，然后通过多种手段，让认同不同观点的用户发现彼此，并制造冲突，从而引发用户的站队。</p>\r\n', '大多数社区的内容生产者是稀少的，而消费内容的用户则占大多数。因此，有时候，我们会担心如何让社区的用户动起来，不仅仅是内容生产者，更重要的是让内容消费者积极的参与到社区内容中，营造社区用户活跃度高的氛围。\r\n## 提高准入门槛\r\n拥有稀缺内容或者优质内容的社区，会采用抬高用户的准入门槛的方式，通过设置护城河、用户分级，让真正需要内容的用户进入，让不是真正需要内容的用户离开，进入的用户通常会积极参与到社区讨论，让社区氛围热闹起来。这种做法的优势在于：由于内容获取的难度大，进入的用户会自愿、积极的参与到社区内容中，他们不得不通过自身的活跃去换取获得内容的权限。而劣势在于：如果其内容并非稀缺或不可替代，用户会选择门槛更低的社区，导致运营者建立活跃社区的目标难以达成。\r\n## 建立标准化内容，让用户按照规定动作参与社区运营\r\n规范用户发布的内容，降低用户使用的门槛，让更多的用户参与提供社区内容。例如，微博通过140个字数的限制，让用户发现其实制作内容的门槛很低，只要在规定的字数内表达自己的观点即可。\r\n## 制造观念冲突，让用户自发站队\r\n“豆腐脑应该是甜的还是咸的”这样一个千古难题，竟然引发各大社区划分出“甜豆腐脑派”和“咸豆腐脑派”，并两派互相嘲讽。“制造冲突”是一种比较有风险的做法。当然，这也是一种能够在短时间内制造出用户活跃和用户引入的做法。最通常的运营方式是利用社会热点，创造多种不同角度、不同立场的初始化内容，然后通过多种手段，让认同不同观点的用户发现彼此，并制造冲突，从而引发用户的站队。'),(68, 68, '<p>做运营，离不开活动，活动运营，顾名思义是通过组织活动在短期内提升相关指标的运营手段。一个完整的活动运营流程会涉及一下步骤：</p>\r\n<blockquote>\r\n<p>策划&gt;开发&gt;测试&gt;宣传&gt;上线&gt;指标监控&gt;奖励发放&gt;效果评估</p>\r\n</blockquote>\r\n<p>策划：活动的设计阶段，会定义明确的活动时间、对象、方式、目标、预算等。</p>\r\n<p>开发：活动需要由设计人员设计界面，请开发人员开发实现功能。</p>\r\n<p>测试：一个活动开发完成后，需要测试以确认功能是否可用于易用。</p>\r\n<p>宣传：找到可以触达用户的渠道，协调资源来做活动露出。这个阶段是和开发、测试同时进行的，而且为了活动效果，在上线前就会做一些预热。</p>\r\n<p>上线：终于到了上线时间，活动就会在线上进行展示，让用户参与活动。</p>\r\n<p>指标监控：活动上线后，需要监测相应的指标，根据指标反映的问题进行适当的调整。</p>\r\n<p>奖励发放：活动结束后或者活动中对符合奖励条件的用户发放奖励。</p>\r\n<p>效果评估：活动结束后，评估活动效果，总结经验教训，以备下次活动参考借鉴。</p>\r\n<p>在整个活动运营过程中，有四件事情非常重要，可以称为“核心”：</p>\r\n<blockquote>\r\n<p>活动设计与成本预算<br>活动风险管控与应急预案<br>活动数据监测与应对策略<br>活动效果判断与总结</p>\r\n</blockquote>\r\n', '做运营，离不开活动，活动运营，顾名思义是通过组织活动在短期内提升相关指标的运营手段。一个完整的活动运营流程会涉及一下步骤：\r\n> 策划>开发>测试>宣传>上线>指标监控>奖励发放>效果评估\r\n\r\n策划：活动的设计阶段，会定义明确的活动时间、对象、方式、目标、预算等。\r\n\r\n开发：活动需要由设计人员设计界面，请开发人员开发实现功能。\r\n\r\n测试：一个活动开发完成后，需要测试以确认功能是否可用于易用。\r\n\r\n宣传：找到可以触达用户的渠道，协调资源来做活动露出。这个阶段是和开发、测试同时进行的，而且为了活动效果，在上线前就会做一些预热。\r\n\r\n上线：终于到了上线时间，活动就会在线上进行展示，让用户参与活动。\r\n\r\n指标监控：活动上线后，需要监测相应的指标，根据指标反映的问题进行适当的调整。\r\n\r\n奖励发放：活动结束后或者活动中对符合奖励条件的用户发放奖励。\r\n\r\n效果评估：活动结束后，评估活动效果，总结经验教训，以备下次活动参考借鉴。\r\n\r\n在整个活动运营过程中，有四件事情非常重要，可以称为“核心”：\r\n> 活动设计与成本预算\r\n> 活动风险管控与应急预案\r\n> 活动数据监测与应对策略\r\n> 活动效果判断与总结'),(69, 69, '<p>如何进行活动策划；如何写活动策划。但是，有一件更重要的事情必须贯彻活动运营的始终，那就是：<strong>目的明确、目标清晰</strong>。一个运营者，如果心中永远只有当前的目标，而忽略了行动的目的，那么他终将一无所获。<br>运营的成本指的是达成目标所需要支出的费用，运营的预算指的是公司期望通过运营达成目标所承担的费用。运营的方针有两种：一曰借力，二曰借势。</p>\r\n<blockquote>\r\n<p>先看能不能借势，再看能不能借力。<br>如果势、力皆无，那么就拿出数据说服老板，要么降低活动预期，要么增加活动预算。<br>如果说服不了老板，那么，尽你的最大努力，来设计一个吸引人的活动吧。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5982u4F55u7B56u5212u6D3Bu52A8\"><a name=\"如何策划活动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>如何策划活动</h2><p>所有活动都必须有理由，所以，在着手策划活动之前，请给自己一个做活动的理由。</p>\r\n<h3 id=\"h3-u65F6u95F4u8282u70B9\"><a name=\"时间节点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>时间节点</h3><p>时间节点是最常见的理由。例如：节假日、季节变化。以时间为理由做活动，比较容易获得用户认同。用户在传统商业活动中已经养成习惯，认为这个节点应该有活动，所以，即便设计的活动不是很精彩，用户也愿意来参加，因为这是习惯。</p>\r\n<h3 id=\"h3-u57FAu4E8Eu4EA7u54C1u6216u8005u5546u54C1u672Cu8EABu7684u7B56u5212\"><a name=\"基于产品或者商品本身的策划\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>基于产品或者商品本身的策划</h3><p>利用产品或者商品本身的一些属性，有针对性的开展活动，这种活动，通常会利用商品的一个类目或者共同属性，甚至产品迭代的某个重要版本，有针对性的开展活动。这种活动设计需要运营与策划人员对产品或者商品有<strong>足够的理解</strong>，并且能够抓住消费者最感兴趣的点进行组织和引导。</p>\r\n<h3 id=\"h3--\"><a name=\"热点类，包括社会热点、娱乐热点、生活热点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>热点类，包括社会热点、娱乐热点、生活热点</h3><p>不管是社会热点、娱乐热点，还是生活热点，都可以拿来作为活动素材、活动理由。所以，如果要从这个角度去设计活动，运营人员要知道最近有哪些热点，人们为什么关注这些热点，这些热点可以怎么利用。</p>\r\n<h3 id=\"h3-u81EAu9020u70EDu70B9\"><a name=\"自造热点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>自造热点</h3><p>总而言之，难度很大，新手无法驾驭，不要轻易尝试。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u89C4u5219u7684u8BBEu8BA1u51C6u5219\"><a name=\"活动规则的设计准则\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动规则的设计准则</h2><p>活动设计与活动理由要无缝衔接，流程简单少思考，文案清晰无歧义。</p>\r\n<blockquote>\r\n<p>让活动主题吸引人<br>让活动给人独特的感受<br>细致的设计活动方式与规则<br>认真的匹配活动与理由<br>活动规则越复杂，用户逃跑心态越强烈<br>采用游戏化或任务化的设计，对把控用户的参与节奏很有帮助。<br>不管活动设计得多好，如果活动宣传没做好，活动效果还是会很差。</p>\r\n</blockquote>\r\n<p>运营人员要考虑活动怎么让用户看到！尤其是让目标用户看到。对于活动宣传渠道的选择，即使一个活动设计得再无聊，如果有足够多的人看到它，它可能会起到很好的宣传效果；而不管一个活动设计得那么精致，如果人们并不知晓，那它也不太可能有效果。<br>必须要知道产品的用户是谁，他们处于怎样的生命周期，活动的设计是为了达成什么目标。同时，需要记住，不论是怎样的活动目标，活动围绕的对象永远都是人，所以，了解用户是非常重要的环节。需要知道，用户经常在哪里出没、对怎样的内容感兴趣，从而精准的选择投放渠道。至于如何选择，可以参考<strong>过往的数据</strong>，如果没有历史数据，百度指数相关活动的搜索、来源都可以作为参考。</p>\r\n', '如何进行活动策划；如何写活动策划。但是，有一件更重要的事情必须贯彻活动运营的始终，那就是：**目的明确、目标清晰**。一个运营者，如果心中永远只有当前的目标，而忽略了行动的目的，那么他终将一无所获。\r\n运营的成本指的是达成目标所需要支出的费用，运营的预算指的是公司期望通过运营达成目标所承担的费用。运营的方针有两种：一曰借力，二曰借势。\r\n> 先看能不能借势，再看能不能借力。\r\n> 如果势、力皆无，那么就拿出数据说服老板，要么降低活动预期，要么增加活动预算。\r\n> 如果说服不了老板，那么，尽你的最大努力，来设计一个吸引人的活动吧。\r\n\r\n## 如何策划活动\r\n所有活动都必须有理由，所以，在着手策划活动之前，请给自己一个做活动的理由。\r\n### 时间节点\r\n时间节点是最常见的理由。例如：节假日、季节变化。以时间为理由做活动，比较容易获得用户认同。用户在传统商业活动中已经养成习惯，认为这个节点应该有活动，所以，即便设计的活动不是很精彩，用户也愿意来参加，因为这是习惯。\r\n### 基于产品或者商品本身的策划\r\n利用产品或者商品本身的一些属性，有针对性的开展活动，这种活动，通常会利用商品的一个类目或者共同属性，甚至产品迭代的某个重要版本，有针对性的开展活动。这种活动设计需要运营与策划人员对产品或者商品有**足够的理解**，并且能够抓住消费者最感兴趣的点进行组织和引导。\r\n### 热点类，包括社会热点、娱乐热点、生活热点\r\n不管是社会热点、娱乐热点，还是生活热点，都可以拿来作为活动素材、活动理由。所以，如果要从这个角度去设计活动，运营人员要知道最近有哪些热点，人们为什么关注这些热点，这些热点可以怎么利用。\r\n### 自造热点\r\n总而言之，难度很大，新手无法驾驭，不要轻易尝试。\r\n## 活动规则的设计准则\r\n活动设计与活动理由要无缝衔接，流程简单少思考，文案清晰无歧义。\r\n> 让活动主题吸引人\r\n> 让活动给人独特的感受\r\n> 细致的设计活动方式与规则\r\n> 认真的匹配活动与理由\r\n> 活动规则越复杂，用户逃跑心态越强烈\r\n> 采用游戏化或任务化的设计，对把控用户的参与节奏很有帮助。\r\n> 不管活动设计得多好，如果活动宣传没做好，活动效果还是会很差。\r\n\r\n运营人员要考虑活动怎么让用户看到！尤其是让目标用户看到。对于活动宣传渠道的选择，即使一个活动设计得再无聊，如果有足够多的人看到它，它可能会起到很好的宣传效果；而不管一个活动设计得那么精致，如果人们并不知晓，那它也不太可能有效果。\r\n必须要知道产品的用户是谁，他们处于怎样的生命周期，活动的设计是为了达成什么目标。同时，需要记住，不论是怎样的活动目标，活动围绕的对象永远都是人，所以，了解用户是非常重要的环节。需要知道，用户经常在哪里出没、对怎样的内容感兴趣，从而精准的选择投放渠道。至于如何选择，可以参考**过往的数据**，如果没有历史数据，百度指数相关活动的搜索、来源都可以作为参考。'),(70, 70, '<p>标准的活动策划方案包括如下内容</p>\r\n<h3 id=\"h3-u6D3Bu52A8u4E3Bu9898\"><a name=\"活动主题\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动主题</h3><p>活动文案的一部分，让用户看得懂，明白活动是什么主题，是否对他有吸引力。</p>\r\n<h3 id=\"h3-u6D3Bu52A8u5BF9u8C61\"><a name=\"活动对象\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动对象</h3><p>明确活动针对的群体，让用户看得懂，让自己抓得住，让领导认可。</p>\r\n<h3 id=\"h3-u6D3Bu52A8u65F6u95F4\"><a name=\"活动时间\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动时间</h3><p>活动的开始时间、结束时间，奖励发放时间、领取时间。</p>\r\n<h3 id=\"h3-u6D3Bu52A8u63CFu8FF0\"><a name=\"活动描述\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动描述</h3><p>活动文案的一部分，让用户看过之后明白要不要参与，怎么参与。</p>\r\n<h3 id=\"h3-u89C4u5219u8BE6u60C5\"><a name=\"规则详情\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>规则详情</h3><p>活动文案的一部分，让用户看得懂，让开发人员看得懂，一部分内容是在前端展示给用户看的，另一部分内容是让开发人员知道活动如何实现。</p>\r\n<h3 id=\"h3-u6295u653Eu6E20u9053\"><a name=\"投放渠道\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>投放渠道</h3><p>让市场人员或者你自己看得懂，要有投放时间、投放渠道的选择、预算。</p>\r\n<h3 id=\"h3-u98CEu9669u63A7u5236\"><a name=\"风险控制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>风险控制</h3><p>让开发人员开得懂你的风险环节是什么，有无对应的措施来解决。</p>\r\n<h3 id=\"h3-u76D1u6D4Bu6307u6807\"><a name=\"监测指标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>监测指标</h3><p>涵盖大多数相关指标，包括投放渠道的监控、用户参与情况的监控、奖励发放的监控等。监测这些指标可以帮助你在查看数据的时候找到问题，并且启发你去解决这些问题。</p>\r\n<h3 id=\"h3-u6210u672Cu9884u4F30\"><a name=\"成本预估\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>成本预估</h3><p>一个活动需要多少钱，单人成本是多少。成本预估不一定非常准确，但必须要树立这个意识。有一些活动是不花钱的，但是如果要花钱，你要明白一个活动的容量有多大，对指标的帮助是什么，为了这些利益，你需要多少成本支持。</p>\r\n<h3 id=\"h3-u6548u679Cu8BC4u4F30\"><a name=\"效果评估\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>效果评估</h3><p>有成本就有收益，你的活动目的对网站（产品）的哪些指标是有帮助的，以及如何体现，你需要考虑，并让领导认可。</p>\r\n<h3 id=\"h3-faq-\"><a name=\"FAQ（常见问题解答）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>FAQ（常见问题解答）</h3><p>可以另外准备一个文档，提供给客服或者相关人员，帮助解决用户在参与活动中遇到的问题。FAQ要详细、标准。如果活动规模大，仅有FAQ还不够，你需要提前准备客服的培训文件，并积极与客服人员沟通。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u7B56u5212u6587u672C\"><a name=\"活动策划文本\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动策划文本</h2><p>一部分作为前端展示，除了让用户看得明白如何参与活动，更要能够推动用户主动参与；另一部分是作为与开发人员的约定，活动如何设计、如何实现，需要和开发人员沟通，必要的时候，你需要另外做一个文档，将流程、需求罗列清楚，并且和开发人员保持沟通。<br>活动策划文档的目的，是为了让活动做得有理有据。做活动的理由、耗费运营成本的代价、上线后可能带来的预期收益都是必须体现在活动策划中的。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u6548u679Cu62A5u544A\"><a name=\"活动效果报告\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动效果报告</h2><blockquote>\r\n<p>活动概述：简单概述活动主题、对象、时间、内容。<br>活动效果统计：对活动结束后的活动效果进行描述。<br>宣传效果统计：对各个投放渠道的效果进行统计，并且掌握每个渠道带来的流量、转化率的相关数据。<br>反思与总结：活动效果、宣传效果带来了哪些经验和教训，下次应该怎么调整，如何提高。</p>\r\n</blockquote>\r\n', '标准的活动策划方案包括如下内容\r\n### 活动主题\r\n活动文案的一部分，让用户看得懂，明白活动是什么主题，是否对他有吸引力。\r\n### 活动对象\r\n明确活动针对的群体，让用户看得懂，让自己抓得住，让领导认可。\r\n### 活动时间\r\n活动的开始时间、结束时间，奖励发放时间、领取时间。\r\n### 活动描述\r\n活动文案的一部分，让用户看过之后明白要不要参与，怎么参与。\r\n### 规则详情\r\n活动文案的一部分，让用户看得懂，让开发人员看得懂，一部分内容是在前端展示给用户看的，另一部分内容是让开发人员知道活动如何实现。\r\n### 投放渠道\r\n让市场人员或者你自己看得懂，要有投放时间、投放渠道的选择、预算。\r\n### 风险控制\r\n让开发人员开得懂你的风险环节是什么，有无对应的措施来解决。\r\n### 监测指标\r\n涵盖大多数相关指标，包括投放渠道的监控、用户参与情况的监控、奖励发放的监控等。监测这些指标可以帮助你在查看数据的时候找到问题，并且启发你去解决这些问题。\r\n### 成本预估\r\n一个活动需要多少钱，单人成本是多少。成本预估不一定非常准确，但必须要树立这个意识。有一些活动是不花钱的，但是如果要花钱，你要明白一个活动的容量有多大，对指标的帮助是什么，为了这些利益，你需要多少成本支持。\r\n### 效果评估\r\n有成本就有收益，你的活动目的对网站（产品）的哪些指标是有帮助的，以及如何体现，你需要考虑，并让领导认可。\r\n### FAQ（常见问题解答）\r\n可以另外准备一个文档，提供给客服或者相关人员，帮助解决用户在参与活动中遇到的问题。FAQ要详细、标准。如果活动规模大，仅有FAQ还不够，你需要提前准备客服的培训文件，并积极与客服人员沟通。\r\n\r\n## 活动策划文本\r\n一部分作为前端展示，除了让用户看得明白如何参与活动，更要能够推动用户主动参与；另一部分是作为与开发人员的约定，活动如何设计、如何实现，需要和开发人员沟通，必要的时候，你需要另外做一个文档，将流程、需求罗列清楚，并且和开发人员保持沟通。\r\n活动策划文档的目的，是为了让活动做得有理有据。做活动的理由、耗费运营成本的代价、上线后可能带来的预期收益都是必须体现在活动策划中的。\r\n## 活动效果报告\r\n> 活动概述：简单概述活动主题、对象、时间、内容。\r\n> 活动效果统计：对活动结束后的活动效果进行描述。\r\n> 宣传效果统计：对各个投放渠道的效果进行统计，并且掌握每个渠道带来的流量、转化率的相关数据。\r\n> 反思与总结：活动效果、宣传效果带来了哪些经验和教训，下次应该怎么调整，如何提高。\r\n\r\n'),(71, 71, '<p>线上活动的流程</p>\r\n<blockquote>\r\n<p>策划-审批-开发-测试-上线</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5B58u5728u98CEu9669\"><a name=\"存在风险\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>存在风险</h2><p>第一、运营人员与市场人员沟通不足，在理解上存在分歧。理解上的分歧加上未充分沟通，导致了后续流程中的隐患。首当其冲的就是对于发奖条件的设计，这直接影响到开发人员的工作量。</p>\r\n<p>第二、市场人员与开发人员沟通不足，双方信息不对称。市场人员因为之前做过类似活动，所以认为可以直接复用之前活动的代码，加以调整后即可测试上线。开发人员则在整理代码的时候，把类似活动的代码给清除了，因此本次活动需要重新写代码，重新测试，才可以部署上线。信息不对称导致市场人员对开发难度的估计过低，过于乐观的认为活动是可以随时上线的，而开发人员则要遵守上线规范，必然达不到“随时上线”的要求。</p>\r\n<p>第三、运营人员与市场、开发、测试人员沟通不足，出现了流程断档。</p>\r\n<p>发生以上类似问题后，从运营层面提出解决方案：<br>所有内部、外部活动策划完成后，活动负责人员出具详细的需求定义文档，在审核通过后，活动涉及的所有开发与测试人员一起沟通，使所有人知晓活动上线时间，并通过邮件确认。<br>所有文档、交互、设计，都必须使用类似redmine（项目管理软件）的工具进行统一汇总，并且在发生任何更新时，通知所有相关人员。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u98CEu63A7u4E0Eu5E94u6025u9884u6848\"><a name=\"活动风控与应急预案\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动风控与应急预案</h2><p>在活动策划环节，要考虑几个基础问题：</p>\r\n<blockquote>\r\n<p>设计活动的规则是否有漏洞（穷举极端事件）<br>活动是否影响普通用户的体验（系统问题，需要和产品人员沟通）<br>奖励设置是否合理（考虑用户获奖难度和用户获奖所需成本）<br>运营节奏如何把控（何时投放宣传、哪些字符串与文字要调整）<br>运营效果如何监测（通过什么方式监测哪些指标）</p>\r\n</blockquote>\r\n<p>与开发人员、测试人员确认了开发需求和排期之后，需要着手整理FAQ以及客服事件模板，并在产品上线前完成与客服团队的沟通，确认客服人员知晓处理相应事件的话术与应对策略。必要时还要准备PPT去做客服培训。<br>做好应急预案，假设发生极端事件或数据异常波动，可以采用什么手段和办法进行及时调整，将活动拉回健康状态。</p>\r\n<p><img src=\"/upload/image/477f1cce279dfe62a222605d43e00ead4936.png\" alt=\"\"></p>\r\n<p><img src=\"/upload/image/ab847da8d68b82a1c8bfd19322ded8b65770.png\" alt=\"\"></p>\r\n<p><img src=\"/upload/image/04eaa8da8be33af2ea74ecc13b76a31f7412.png\" alt=\"\"></p>\r\n<p><img src=\"/upload/image/c107430ab124d0c02c401631266508fe4095.png\" alt=\"\"></p>\r\n', '线上活动的流程\r\n> 策划-审批-开发-测试-上线\r\n\r\n## 存在风险\r\n第一、运营人员与市场人员沟通不足，在理解上存在分歧。理解上的分歧加上未充分沟通，导致了后续流程中的隐患。首当其冲的就是对于发奖条件的设计，这直接影响到开发人员的工作量。\r\n\r\n第二、市场人员与开发人员沟通不足，双方信息不对称。市场人员因为之前做过类似活动，所以认为可以直接复用之前活动的代码，加以调整后即可测试上线。开发人员则在整理代码的时候，把类似活动的代码给清除了，因此本次活动需要重新写代码，重新测试，才可以部署上线。信息不对称导致市场人员对开发难度的估计过低，过于乐观的认为活动是可以随时上线的，而开发人员则要遵守上线规范，必然达不到“随时上线”的要求。\r\n\r\n第三、运营人员与市场、开发、测试人员沟通不足，出现了流程断档。\r\n\r\n发生以上类似问题后，从运营层面提出解决方案：\r\n所有内部、外部活动策划完成后，活动负责人员出具详细的需求定义文档，在审核通过后，活动涉及的所有开发与测试人员一起沟通，使所有人知晓活动上线时间，并通过邮件确认。\r\n所有文档、交互、设计，都必须使用类似redmine（项目管理软件）的工具进行统一汇总，并且在发生任何更新时，通知所有相关人员。\r\n\r\n## 活动风控与应急预案\r\n在活动策划环节，要考虑几个基础问题：\r\n> 设计活动的规则是否有漏洞（穷举极端事件）\r\n> 活动是否影响普通用户的体验（系统问题，需要和产品人员沟通）\r\n> 奖励设置是否合理（考虑用户获奖难度和用户获奖所需成本）\r\n> 运营节奏如何把控（何时投放宣传、哪些字符串与文字要调整）\r\n> 运营效果如何监测（通过什么方式监测哪些指标）\r\n\r\n与开发人员、测试人员确认了开发需求和排期之后，需要着手整理FAQ以及客服事件模板，并在产品上线前完成与客服团队的沟通，确认客服人员知晓处理相应事件的话术与应对策略。必要时还要准备PPT去做客服培训。\r\n做好应急预案，假设发生极端事件或数据异常波动，可以采用什么手段和办法进行及时调整，将活动拉回健康状态。\r\n\r\n![](/upload/image/477f1cce279dfe62a222605d43e00ead4936.png)\r\n\r\n![](/upload/image/ab847da8d68b82a1c8bfd19322ded8b65770.png)\r\n\r\n![](/upload/image/04eaa8da8be33af2ea74ecc13b76a31f7412.png)\r\n\r\n![](/upload/image/c107430ab124d0c02c401631266508fe4095.png)'),(72, 72, '<p>作为一个活动运营人员，如果我们要充分的了解一个活动中发生了什么，我们就需要监控活动数据。<br><img src=\"/upload/image/7d84979bc5454627ac12f9f8724141204638.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5982u679Cu5F15u6D41u6709u95EEu9898\"><a name=\"如果引流有问题\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>如果引流有问题</h2><p>第一步，更换素材与文案，持续监测效果，如果无效，进行第二步。<br>第二步，更换投放时间及覆盖范围，持续监测效果，如果无效，进行第三步。<br>第三步，下架或更换渠道。</p>\r\n<h2 id=\"h2-u5982u679Cu7528u6237u6D41u7A0Bu6709u95EEu9898\"><a name=\"如果用户流程有问题\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>如果用户流程有问题</h2><p>第一步，更改页面活动流程描述，或更具体，或更简明。<br>第二步，推送消息或通知，引导用户再次操作。<br>第三步，尽快迭代，简化或优化流程。更新活动后再从第一步开始循环进行。</p>\r\n<h2 id=\"h2-u6B63u786Eu7684u76D1u63A7u6D3Bu52A8u6570u636E\"><a name=\"正确的监控活动数据\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>正确的监控活动数据</h2><p>首先，不监控没有价值的数据。监控活动数据的目的是发现问题和解决问题。但是并非发现和解决所有问题，而是关注核心数据，忽略非核心数据。虽然活动数据监控非常重要，但并不意味着达成数据监控的目标是活动运营的核心。活动运营的本质是为了短期拉动指标，所以，如果出现资源不足，无法支撑密集的活动监控数据时，不是要追着开发人员去埋点，而是退而求其次，与产品人员讨论所有可能的数据监控埋点，从而在后续的活动中可以有效的获取这些数据监控项。<br>从理论上说，数据监控并不仅仅是活动的需求，也是整个产品的诉求，而活动数据监控和产品自身数据监控的出发点，既有相似的可以复用的需求，也有侧重点各异无法复用的需求。</p>\r\n', '作为一个活动运营人员，如果我们要充分的了解一个活动中发生了什么，我们就需要监控活动数据。\r\n![](/upload/image/7d84979bc5454627ac12f9f8724141204638.png)\r\n\r\n## 如果引流有问题\r\n第一步，更换素材与文案，持续监测效果，如果无效，进行第二步。\r\n第二步，更换投放时间及覆盖范围，持续监测效果，如果无效，进行第三步。\r\n第三步，下架或更换渠道。\r\n## 如果用户流程有问题\r\n第一步，更改页面活动流程描述，或更具体，或更简明。\r\n第二步，推送消息或通知，引导用户再次操作。\r\n第三步，尽快迭代，简化或优化流程。更新活动后再从第一步开始循环进行。\r\n## 正确的监控活动数据\r\n首先，不监控没有价值的数据。监控活动数据的目的是发现问题和解决问题。但是并非发现和解决所有问题，而是关注核心数据，忽略非核心数据。虽然活动数据监控非常重要，但并不意味着达成数据监控的目标是活动运营的核心。活动运营的本质是为了短期拉动指标，所以，如果出现资源不足，无法支撑密集的活动监控数据时，不是要追着开发人员去埋点，而是退而求其次，与产品人员讨论所有可能的数据监控埋点，从而在后续的活动中可以有效的获取这些数据监控项。\r\n从理论上说，数据监控并不仅仅是活动的需求，也是整个产品的诉求，而活动数据监控和产品自身数据监控的出发点，既有相似的可以复用的需求，也有侧重点各异无法复用的需求。'),(73, 73, '<h2 id=\"h2-u534Fu8C03u8D44u6E90\"><a name=\"协调资源\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>协调资源</h2><p>活动策划完成后的第一件事，就是确认资源。产品和运营人员最常见的困境就是：没有资源。如果你所在的公司采用了项目组制的管理，你还是很容易协调资源的，甚至资源都在等着你召唤，如果你所在的公司采用扁平化管理，你需要各方人士去协调资源。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u5F00u53D1\"><a name=\"活动开发\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动开发</h2><p>我们永远不知道我们的活动设计，对于开发人员和设计人员来说存在什么问题，是否有一些资源无法满足，所以，必须提前沟通，避免资源准备好之后又重新检视需求，带来不必要的麻烦。</p>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>各条线的工作计划和时间节点，是否有延迟，完成进度如何。<br>需求实现完成度，有没有遗漏的需求。</p>\r\n<h2 id=\"h2-u5199u4E00u4EFDu9760u8C31u7684u6D3Bu52A8u603Bu7ED3\"><a name=\"写一份靠谱的活动总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>写一份靠谱的活动总结</h2><p>第一、所谓的活动效果评估，绝不仅仅是活动之后写一篇活动报告这样简单，活动总结报告的要求是言之有物，对以后的活动运营有知道作用。<br>第二、效果评估更多的是为了从一次活动中得出经验和教训，有助于以后活动运营效果的提升，而不是为了追究活动效果不佳的责任，或者美化活动效果以得到奖励。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u603Bu7ED3u7684u683Cu5F0Fu4E0Eu5185u5BB9\"><a name=\"活动总结的格式与内容\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动总结的格式与内容</h2><p>活动总结的内容应当包含：活动时间、活动内容、活动效果、经验教训。<br>对于前两点，需要对照最初活动设计的策划案，确认哪些需求实现了，哪些需求没有实现，以及有没有按时上线或者变更需求，这些都需要如实反馈。<br>对于后两点，首先得了解数据的情况；同时还得知道数据波动的原因，其中哪些是自然波动，有哪些是做了调整导致的，还有哪些是外因所致，哪些原因是不可抗力；知道了数据波动的原因之后，你要对导致数据波动的原因的主次关系进行分析，得出结论：什么因数对数据影响最大，哪些因数几乎没有影响，哪些是负面影响。<br><strong>如果你无法知道这些，那么你也从不会从中收获经验和教训</strong></p>\r\n<h2 id=\"h2-u6D3Bu52A8u603Bu7ED3u7684u5173u952Eu4E0Eu6838u5FC3\"><a name=\"活动总结的关键与核心\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动总结的关键与核心</h2><p>一份活动总结中最关键和最核心的部分，就是你对活动效果的判定和经验教训的总结。对于经验教训，要<strong>大胆假设，积极再现</strong>。</p>\r\n<h3 id=\"h3-u6210u672Cu6D4Bu91CFu539Fu5219\"><a name=\"成本测量原则\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>成本测量原则</h3><p>所谓成本测量原则，是指在活动设计阶段，设定一个总成本、人均成本以及活动目标值，活动结束后，考核成本是否在预期成本以内。<br>成本测量原则的预期是：将活动总成本控制在预算总成本以内，不超发，同时单个指标的成本越低越好。</p>\r\n<h3 id=\"h3-kpi-\"><a name=\"KPI达成原则\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>KPI达成原则</h3><p>是指在活动设计阶段，虽然提出了总成本和人均成本，但同时也提除了活动目标值，活动结束时，考核是否达成了活动的KPI。<br>KPI达成原则的预期是：<strong>用超出预期的效果来抵消成本控制不当的负面影响</strong>。</p>\r\n', '## 协调资源\r\n活动策划完成后的第一件事，就是确认资源。产品和运营人员最常见的困境就是：没有资源。如果你所在的公司采用了项目组制的管理，你还是很容易协调资源的，甚至资源都在等着你召唤，如果你所在的公司采用扁平化管理，你需要各方人士去协调资源。\r\n## 活动开发\r\n我们永远不知道我们的活动设计，对于开发人员和设计人员来说存在什么问题，是否有一些资源无法满足，所以，必须提前沟通，避免资源准备好之后又重新检视需求，带来不必要的麻烦。\r\n## 测试\r\n各条线的工作计划和时间节点，是否有延迟，完成进度如何。\r\n需求实现完成度，有没有遗漏的需求。\r\n## 写一份靠谱的活动总结\r\n第一、所谓的活动效果评估，绝不仅仅是活动之后写一篇活动报告这样简单，活动总结报告的要求是言之有物，对以后的活动运营有知道作用。\r\n第二、效果评估更多的是为了从一次活动中得出经验和教训，有助于以后活动运营效果的提升，而不是为了追究活动效果不佳的责任，或者美化活动效果以得到奖励。\r\n## 活动总结的格式与内容\r\n活动总结的内容应当包含：活动时间、活动内容、活动效果、经验教训。\r\n对于前两点，需要对照最初活动设计的策划案，确认哪些需求实现了，哪些需求没有实现，以及有没有按时上线或者变更需求，这些都需要如实反馈。\r\n对于后两点，首先得了解数据的情况；同时还得知道数据波动的原因，其中哪些是自然波动，有哪些是做了调整导致的，还有哪些是外因所致，哪些原因是不可抗力；知道了数据波动的原因之后，你要对导致数据波动的原因的主次关系进行分析，得出结论：什么因数对数据影响最大，哪些因数几乎没有影响，哪些是负面影响。\r\n**如果你无法知道这些，那么你也从不会从中收获经验和教训**\r\n## 活动总结的关键与核心\r\n一份活动总结中最关键和最核心的部分，就是你对活动效果的判定和经验教训的总结。对于经验教训，要**大胆假设，积极再现**。\r\n### 成本测量原则\r\n所谓成本测量原则，是指在活动设计阶段，设定一个总成本、人均成本以及活动目标值，活动结束后，考核成本是否在预期成本以内。\r\n成本测量原则的预期是：将活动总成本控制在预算总成本以内，不超发，同时单个指标的成本越低越好。\r\n### KPI达成原则\r\n是指在活动设计阶段，虽然提出了总成本和人均成本，但同时也提除了活动目标值，活动结束时，考核是否达成了活动的KPI。\r\nKPI达成原则的预期是：**用超出预期的效果来抵消成本控制不当的负面影响**。'),(74, 74, '<h2 id=\"h2-u6D3Bu52A8u7684u76EEu7684\"><a name=\"活动的目的\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动的目的</h2><p>第一、促进用户行为相关的目的：注册、活跃、付费或者转化以及其他需要短期进行提升的用户行为。<br>第二、促进网站（产品）指标相关的目的：功能使用频次、电商客单价、转化率、社区UGC数量等。</p>\r\n<h2 id=\"h2--\"><a name=\"周期性活动/定期活动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>周期性活动/定期活动</h2><p>活动的玩法或者说运营方式不会有很大的变化，且自身的核心功能关联紧密，因此，无需付出更多的成本去教育用户。</p>\r\n<h2 id=\"h2-u7CFBu7EDFu89C2u5FF5\"><a name=\"系统观念\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>系统观念</h2><p>如果不系统的思考活动的设计和策划，往往会做很多重复性工作。所谓系统观念来对待活动策划，是对活动运营人员提出一个考虑“系统复用”的课题，同时还要求活动运营人员具备周期性活动策划的意识。</p>\r\n<h2 id=\"h2-u7CFBu7EDFu590Du7528\"><a name=\"系统复用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>系统复用</h2><p>一套系统可以被用于多个场景，对于活动运营来说，就是有一个系统可以支撑多种活动运营模式，而无需再次开发。</p>\r\n<h2 id=\"h2--\"><a name=\"为什么要“系统复用”\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>为什么要“系统复用”</h2><p>产品开发和运营活动开发都是技术开发，需要美工设计人员和技术人员排期。特别是对技术人员来说，如果发现很多内容都是过去已经开发过的，将很难产生开发热情，重复的工作毫无价值。因此，运营人员必须要尝试学习系统复用的概念。系统复用可以帮助我们节省开发资源、缩短测试时间，然后快速完成上线。</p>\r\n<h2 id=\"h2-u4EC0u4E48u6837u7684u7CFBu7EDFu53EFu4EE5u590Du7528\"><a name=\"什么样的系统可以复用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么样的系统可以复用</h2><p>可以复用的系统应该包含几个特点：<br>可扩展，系统本身开放性很高，因此可以兼容多个产品设计方案的填充；<br>可配置，调整配置就可以产生各种不同的效果；<br>可通用，用户的需求有核心需求和边缘需求，系统也有核心功能和扩展功能，核心功能越没针对性，可复用的可能性就越高。</p>\r\n<h2 id=\"h2-u5468u671Fu6027u6D3Bu52A8u7B56u5212\"><a name=\"周期性活动策划\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>周期性活动策划</h2><p>周期性活动有助于用户习惯的养成，可以减少宣传成本，养成习惯的用户到了时间节点会主动参与活动。通过用户主动参与的行为，运营人员可以了解用户的偏好，对之后活动运营的改进大有裨益。<strong>用户推广计划</strong>，就是目前非常常见的周期性活动，甚至有很多产品已经将其作为自身功能的一部分，基本核心很简单：从已有用户出发，请已有用户在社交圈传播自己的产品，并定向邀请自己的好友加入使用，作为回报，邀请他人的用户和被邀请的用户都有可能获得奖励。</p>\r\n', '## 活动的目的\r\n第一、促进用户行为相关的目的：注册、活跃、付费或者转化以及其他需要短期进行提升的用户行为。\r\n第二、促进网站（产品）指标相关的目的：功能使用频次、电商客单价、转化率、社区UGC数量等。\r\n## 周期性活动/定期活动\r\n活动的玩法或者说运营方式不会有很大的变化，且自身的核心功能关联紧密，因此，无需付出更多的成本去教育用户。\r\n## 系统观念\r\n如果不系统的思考活动的设计和策划，往往会做很多重复性工作。所谓系统观念来对待活动策划，是对活动运营人员提出一个考虑“系统复用”的课题，同时还要求活动运营人员具备周期性活动策划的意识。\r\n## 系统复用\r\n一套系统可以被用于多个场景，对于活动运营来说，就是有一个系统可以支撑多种活动运营模式，而无需再次开发。\r\n## 为什么要“系统复用”\r\n产品开发和运营活动开发都是技术开发，需要美工设计人员和技术人员排期。特别是对技术人员来说，如果发现很多内容都是过去已经开发过的，将很难产生开发热情，重复的工作毫无价值。因此，运营人员必须要尝试学习系统复用的概念。系统复用可以帮助我们节省开发资源、缩短测试时间，然后快速完成上线。\r\n## 什么样的系统可以复用\r\n可以复用的系统应该包含几个特点：\r\n可扩展，系统本身开放性很高，因此可以兼容多个产品设计方案的填充；\r\n可配置，调整配置就可以产生各种不同的效果；\r\n可通用，用户的需求有核心需求和边缘需求，系统也有核心功能和扩展功能，核心功能越没针对性，可复用的可能性就越高。\r\n## 周期性活动策划\r\n周期性活动有助于用户习惯的养成，可以减少宣传成本，养成习惯的用户到了时间节点会主动参与活动。通过用户主动参与的行为，运营人员可以了解用户的偏好，对之后活动运营的改进大有裨益。**用户推广计划**，就是目前非常常见的周期性活动，甚至有很多产品已经将其作为自身功能的一部分，基本核心很简单：从已有用户出发，请已有用户在社交圈传播自己的产品，并定向邀请自己的好友加入使用，作为回报，邀请他人的用户和被邀请的用户都有可能获得奖励。'),(75, 75, '<h2 id=\"h2-u5185u90E8u6D3Bu52A8\"><a name=\"内部活动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内部活动</h2><p>活动运营人员是驱动器，是活动需求方。几乎所有的公司都是如此，对于内部活动，活动运营人员有很大的权限，可以决定做什么活动、如何实施、申请活动预算、维护活动全程、让活动落地执行，有始有终。</p>\r\n<h2 id=\"h2-u8054u5408u6D3Bu52A8\"><a name=\"联合活动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>联合活动</h2><p>活动运营人员是调和剂，是活动需求的承接方和合作者。在有的公司，活动运营人员同时还兼任BD（business development，商务拓展）的角色，需要去和其他公司谈判，采用联合活动的方式，共担成本甚至让对方负担成本，完成活动策划并让活动落地执行；而另一些公司，活动运营人员只承接来之第三方市场部门传递过来的合作意向，完成需求的整理及活动策划并让活动落地执行。</p>\r\n<h2 id=\"h2-u5BA2u6237u9884u671Fu7BA1u7406\"><a name=\"客户预期管理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>客户预期管理</h2><p>首要要做好需求确认与需求控制，联合活动的的目的必须明确，你需要的资源通过什么方式从合作方转接过来，这需要准确的需求确认。并不是合作方出了钱，那么合作方就占据优势，提出的一切需求都要满足。因为合作方的需求大多数情况下是个性化的，个性化的问题在于，每个活动实际需求可能不同，而且几乎无法复用。所以要做客户预期管理。<br><img src=\"/upload/image/4c3a5fe54312fe9438288d93d750182d8702.png\" alt=\"\"><br>预期需求是客户被告知的、被教育会获得的服务。<br>基本需求是客户认为服务方提供本应提供的服务。<br>如果基本需求得不到很好满足，客户就会不满意，而即便基本需求可以得到很好的满足，其实客户也不会觉得非常满意。<br>而惊喜需求则是客户觉得你不会提供的服务，是一种超越了期待的服务，不管效果好不好，是否全面，客户都会觉得非常满意。<br>传统的管理客户预期的方法是：<br><img src=\"/upload/image/843aadb7f45387ed91d9c8cee5efd8042449.png\" alt=\"\"><br>对于运营人员来说，可以替换为：<br><img src=\"/upload/image/99f26a96739b3dd4d544ec84f85da7326338.png\" alt=\"\"><br>围绕单一的合作活动去做活动设计，总结合作活动的共性，去做系统设计。即实现了当前合作目标，又为了未来可以批量实现类似的合作目标。单一的合作活动总有个性化，即使做了系统，依然不能避免再次开发，那么多系统设计是否有必要？答案是绝对有必要。</p>\r\n', '## 内部活动\r\n活动运营人员是驱动器，是活动需求方。几乎所有的公司都是如此，对于内部活动，活动运营人员有很大的权限，可以决定做什么活动、如何实施、申请活动预算、维护活动全程、让活动落地执行，有始有终。\r\n## 联合活动\r\n活动运营人员是调和剂，是活动需求的承接方和合作者。在有的公司，活动运营人员同时还兼任BD（business development，商务拓展）的角色，需要去和其他公司谈判，采用联合活动的方式，共担成本甚至让对方负担成本，完成活动策划并让活动落地执行；而另一些公司，活动运营人员只承接来之第三方市场部门传递过来的合作意向，完成需求的整理及活动策划并让活动落地执行。\r\n## 客户预期管理\r\n首要要做好需求确认与需求控制，联合活动的的目的必须明确，你需要的资源通过什么方式从合作方转接过来，这需要准确的需求确认。并不是合作方出了钱，那么合作方就占据优势，提出的一切需求都要满足。因为合作方的需求大多数情况下是个性化的，个性化的问题在于，每个活动实际需求可能不同，而且几乎无法复用。所以要做客户预期管理。\r\n![](/upload/image/4c3a5fe54312fe9438288d93d750182d8702.png)\r\n预期需求是客户被告知的、被教育会获得的服务。\r\n基本需求是客户认为服务方提供本应提供的服务。\r\n如果基本需求得不到很好满足，客户就会不满意，而即便基本需求可以得到很好的满足，其实客户也不会觉得非常满意。\r\n而惊喜需求则是客户觉得你不会提供的服务，是一种超越了期待的服务，不管效果好不好，是否全面，客户都会觉得非常满意。\r\n传统的管理客户预期的方法是：\r\n![](/upload/image/843aadb7f45387ed91d9c8cee5efd8042449.png)\r\n对于运营人员来说，可以替换为：\r\n![](/upload/image/99f26a96739b3dd4d544ec84f85da7326338.png)\r\n围绕单一的合作活动去做活动设计，总结合作活动的共性，去做系统设计。即实现了当前合作目标，又为了未来可以批量实现类似的合作目标。单一的合作活动总有个性化，即使做了系统，依然不能避免再次开发，那么多系统设计是否有必要？答案是绝对有必要。\r\n'),(76, 76, '<p>用户运营是每个产品的核心工作，不管是内容运营还是活动运营，最后指标都会落实到最终的运营收益上，收益可能是用户数也可能是交易额或利润。用户运营是指产品的用户活跃、留存、付费为目标，依据用户需求，指定运营方案甚至运营机制。用户运营的核心是开源、节流（减少损失）、维持（促进活跃及提高留存）、刺激（转化付费）。</p>\r\n<h2 id=\"h2-u5F00u6E90\"><a name=\"开源\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>开源</h2><p>主要是指用户规模的扩大，通常落脚点在访问量和注册用户。<br><img src=\"/upload/image/608c6326f565c517ad31e1d876642d9a9864.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u6CE8u518Cu6E20u9053u7684u6311u9009u548Cu6253u5F00\"><a name=\"注册渠道的挑选和打开\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注册渠道的挑选和打开</h3><p>注册渠道的选择决定用户进入产品的入口，注册方式的选择决定用户进入的门槛。<br>第一种方式：自建帐号体系。<br>第二种方式：使用社会化登录。<br>第三种方式：使用社会化登录，并与自建帐号体系结合。</p>\r\n<h3 id=\"h3-u63D0u5347u6CE8u518Cu8F6Cu5316u7387\"><a name=\"提升注册转化率\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>提升注册转化率</h3><p>用户完成注册只是第一步，最重要的运营工作是，如何将一个注册用户转化为一个<strong>对产品有认知的有效用户</strong>。<br><img src=\"/upload/image/bd022125c9a7bed2366820c797bfa8396214.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u8282u6D41\"><a name=\"节流\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>节流</h2><p>主要是保持用户规模，通常落脚点在沉默用户或流失用户。</p>\r\n<h3 id=\"h3-u5B9Au4E49u7528u6237u6C89u9ED8u6216u6D41u5931u7684u6807u51C6\"><a name=\"定义用户沉默或流失的标准\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义用户沉默或流失的标准</h3><p>用户多长时间没有登录产品就意味着流失，这需要明确定义。</p>\r\n<h3 id=\"h3-u5EFAu7ACBu6D41u5931u9884u8B66u673Au5236\"><a name=\"建立流失预警机制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>建立流失预警机制</h3><p>弄清楚用户是在什么情况下流失的，通过运营数据建立模型，并制定相关的运营策略，当用户行为符合流失模型定义时发出警告，敦促运营人员进行针对性调整，预防流失发生。</p>\r\n<h3 id=\"h3-u5BF9u5DF2u6D41u5931u7684u7528u6237u8FDBu884Cu633Du56DE\"><a name=\"对已流失的用户进行挽回\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>对已流失的用户进行挽回</h3><p>用户如果已经流失了，如何让他们回到产品中，这需要开展活动，但挽回用户非常困难，所以更重要的是预防流失，而不是挽回。</p>\r\n<h2 id=\"h2-u4FC3u6D3Bu8DC3\"><a name=\"促活跃\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>促活跃</h2><p>提升用户使用产品的频次，通常落脚点在用户留存率和用户活跃率。</p>\r\n<h3 id=\"h3-u5B9Au4E49u7528u6237u7559u5B58u4E0Eu7528u6237u6D3Bu8DC3u7684u6807u51C6\"><a name=\"定义用户留存与用户活跃的标准\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义用户留存与用户活跃的标准</h3><p>移动互联网时代，有一些应用界定用户留存的标准是打开应用，这无可厚非，但仅仅是打开，其实并不意味着用户活跃，所以，需要制定更严格的策略和定义来规定用户的活跃行为。</p>\r\n<h3 id=\"h3-u63D0u5347u7528u6237u7559u5B58u7387\"><a name=\"提升用户留存率\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>提升用户留存率</h3><p>用户不会无缘无故的留下来，产品或运营人员需要做一些促进用户留存的工作，如果用户留存的比例过低，运营人员需要想办法提高留存的数据。</p>\r\n<h3 id=\"h3--\"><a name=\"提升用户活跃度（用户行为、产品使用频次）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>提升用户活跃度（用户行为、产品使用频次）</h3><p>用户留下来了，不意味着用户就是活跃的，那些行为数据可以衡量出用户是否活跃，这是运营人员要做的功课。</p>\r\n<h2 id=\"h2-u8F6Cu4ED8u8D39\"><a name=\"转付费\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>转付费</h2><p>抓住高价值用户或核心用户的需求，让他们为产品付费，并且持续付费。</p>\r\n<h3 id=\"h3-u901Au8FC7u4E00u7CFBu5217u884Cu4E3Au8BA9u672Au4ED8u8D39u7684u7528u6237u4ED8u8D39\"><a name=\"通过一系列行为让未付费的用户付费\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>通过一系列行为让未付费的用户付费</h3><p>促进用户从活跃向付费转化，是以用户付费为盈利方式的产品的重要工作内容。</p>\r\n<h3 id=\"h3-u901Au8FC7u673Au5236u8BA9u5DF2u4ED8u8D39u7684u7528u6237u6301u7EEDu4ED8u8D39\"><a name=\"通过机制让已付费的用户持续付费\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>通过机制让已付费的用户持续付费</h3><p>付费用户对产品有极高的依赖，如何通过运营手段，让他们认为值得为产品的功能付费甚至持续付费，是一件困难但必须考虑的事情。</p>\r\n', '用户运营是每个产品的核心工作，不管是内容运营还是活动运营，最后指标都会落实到最终的运营收益上，收益可能是用户数也可能是交易额或利润。用户运营是指产品的用户活跃、留存、付费为目标，依据用户需求，指定运营方案甚至运营机制。用户运营的核心是开源、节流（减少损失）、维持（促进活跃及提高留存）、刺激（转化付费）。\r\n##开源\r\n主要是指用户规模的扩大，通常落脚点在访问量和注册用户。\r\n![](/upload/image/608c6326f565c517ad31e1d876642d9a9864.png)\r\n###注册渠道的挑选和打开\r\n注册渠道的选择决定用户进入产品的入口，注册方式的选择决定用户进入的门槛。\r\n第一种方式：自建帐号体系。\r\n第二种方式：使用社会化登录。\r\n第三种方式：使用社会化登录，并与自建帐号体系结合。\r\n###提升注册转化率\r\n用户完成注册只是第一步，最重要的运营工作是，如何将一个注册用户转化为一个**对产品有认知的有效用户**。\r\n![](/upload/image/bd022125c9a7bed2366820c797bfa8396214.png)\r\n##节流\r\n主要是保持用户规模，通常落脚点在沉默用户或流失用户。\r\n###定义用户沉默或流失的标准\r\n用户多长时间没有登录产品就意味着流失，这需要明确定义。\r\n###建立流失预警机制\r\n弄清楚用户是在什么情况下流失的，通过运营数据建立模型，并制定相关的运营策略，当用户行为符合流失模型定义时发出警告，敦促运营人员进行针对性调整，预防流失发生。\r\n###对已流失的用户进行挽回\r\n用户如果已经流失了，如何让他们回到产品中，这需要开展活动，但挽回用户非常困难，所以更重要的是预防流失，而不是挽回。\r\n##促活跃\r\n提升用户使用产品的频次，通常落脚点在用户留存率和用户活跃率。\r\n###定义用户留存与用户活跃的标准\r\n移动互联网时代，有一些应用界定用户留存的标准是打开应用，这无可厚非，但仅仅是打开，其实并不意味着用户活跃，所以，需要制定更严格的策略和定义来规定用户的活跃行为。\r\n###提升用户留存率\r\n用户不会无缘无故的留下来，产品或运营人员需要做一些促进用户留存的工作，如果用户留存的比例过低，运营人员需要想办法提高留存的数据。\r\n###提升用户活跃度（用户行为、产品使用频次）\r\n用户留下来了，不意味着用户就是活跃的，那些行为数据可以衡量出用户是否活跃，这是运营人员要做的功课。\r\n##转付费\r\n抓住高价值用户或核心用户的需求，让他们为产品付费，并且持续付费。\r\n###通过一系列行为让未付费的用户付费\r\n促进用户从活跃向付费转化，是以用户付费为盈利方式的产品的重要工作内容。\r\n###通过机制让已付费的用户持续付费\r\n付费用户对产品有极高的依赖，如何通过运营手段，让他们认为值得为产品的功能付费甚至持续付费，是一件困难但必须考虑的事情。'),(77, 77, '<p>目前用户注册通道越来越多的采取先用第三方登录再绑定用户资料的方式，当用户意识到自己不需要那么多用户名和密码，当企业意识到用户其实就是同一个群体，帐号的共享之路就开启了。</p>\r\n<h2 id=\"h2-u6CE8u518Cu8F6Cu5316\"><a name=\"注册转化\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注册转化</h2><p>用户填写完资料以后，要不留余力的引导用户了解并使用产品，可以使用引导步骤，好处是：第一，运营人员在整个流程中，能够轻松的帮助用户使用产品的功能，确立注册用户对产品的首次认知。第二，用户完成引导流程后，就掌握了产品的大概玩法，容易继续进行动作，成为一个有效的注册用户。<br>运营和产品人员应该通过引导流程告诉用户：产品是什么、核心价值在哪里、提供怎样的服务等等。作为运营者，必须清醒的认识到，对于一个新用户，只有TA通过注册引导流程，到达产品使用界面，甚至完第一次产品使用，才算的上是一个真正的用户。</p>\r\n<blockquote>\r\n<p>把用户当傻子。应当简单明了、图文并茂的告诉用户，这是什么，用户能做什么，用户从哪里开始体验。<br>最大程度的展现核心功能、核心价值、核心玩法。<br>分阶段的展示次要功能、次要价值、次要玩法，不要试图全部塞给用户。<br>根据统计整理文案，改进引导顺序等细节。<br>引导要有趣，不要让用户觉得枯燥；步骤简单、流程要短。<br>引导要捆绑用户行为，用户的每一个反馈都可以告诉你，他究竟是否明白你在说什么。每一个反馈都可以提供一些激励，促使他继续下去，完成流程。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5173u8054u6307u6807\"><a name=\"关联指标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>关联指标</h2><p>在用户运营工作的相关数据中，对应用户注册行为，有几项关联指标。</p>\r\n<h6 id=\"h6-u6CE8u518Cu6765u6E90\"><a name=\"注册来源\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注册来源</h6><p>外部投放的广告落地到某个 Landing Page ，引导用户完成注册。<br>用户直接在产品上完成注册。</p>\r\n<h6 id=\"h6-u6CE8u518Cu8F6Cu6362u7387\"><a name=\"注册转换率\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注册转换率</h6><p>从进入注册流程到完成注册流程的注册成功用户数，占所达到注册页面的用户数的比例。这个数据涉及注册流程是否有优化空间，以及如何优化。</p>\r\n<h6 id=\"h6-u8E66u5931u9875u9762\"><a name=\"蹦失页面\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>蹦失页面</h6><p>没有完成注册流程的用户跳出注册流程的页面或者步骤。这个数据涉及后续流失用户的分析，必须关注。</p>\r\n<h2 id=\"h2-u5173u8054u6307u6807u5728u4E0Du540Cu65F6u671Fu7684u4F5Cu7528\"><a name=\"关联指标在不同时期的作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>关联指标在不同时期的作用</h2><p>在用户运营的初期，为了降低获取外部用户，注册来源的质量是最重要的指标，而判断来源的质量，就要考虑注册转化的成功率，并参考蹦失页面，来确认用户为什么放弃注册转化，判断是否可以优化注册引导流程。</p>\r\n<p>在用户运营中期，需要新用户的稳定进入，就需要密切的关注注册转化率指标与蹦失页面指标，适时调整，并考虑采用配套活动推动用户的注册引导行为。</p>\r\n<p>在用户运营的后期，需要关注用户的留存及活跃度，此时就不需要刻意关注注册的相关指标，反而需要注意用户的留存指标和活跃指标，以及流失用户的模型建立及预警机制。</p>\r\n', '目前用户注册通道越来越多的采取先用第三方登录再绑定用户资料的方式，当用户意识到自己不需要那么多用户名和密码，当企业意识到用户其实就是同一个群体，帐号的共享之路就开启了。\r\n## 注册转化\r\n用户填写完资料以后，要不留余力的引导用户了解并使用产品，可以使用引导步骤，好处是：第一，运营人员在整个流程中，能够轻松的帮助用户使用产品的功能，确立注册用户对产品的首次认知。第二，用户完成引导流程后，就掌握了产品的大概玩法，容易继续进行动作，成为一个有效的注册用户。\r\n运营和产品人员应该通过引导流程告诉用户：产品是什么、核心价值在哪里、提供怎样的服务等等。作为运营者，必须清醒的认识到，对于一个新用户，只有TA通过注册引导流程，到达产品使用界面，甚至完第一次产品使用，才算的上是一个真正的用户。\r\n> 把用户当傻子。应当简单明了、图文并茂的告诉用户，这是什么，用户能做什么，用户从哪里开始体验。\r\n> 最大程度的展现核心功能、核心价值、核心玩法。\r\n> 分阶段的展示次要功能、次要价值、次要玩法，不要试图全部塞给用户。\r\n> 根据统计整理文案，改进引导顺序等细节。\r\n> 引导要有趣，不要让用户觉得枯燥；步骤简单、流程要短。\r\n> 引导要捆绑用户行为，用户的每一个反馈都可以告诉你，他究竟是否明白你在说什么。每一个反馈都可以提供一些激励，促使他继续下去，完成流程。\r\n\r\n## 关联指标\r\n在用户运营工作的相关数据中，对应用户注册行为，有几项关联指标。\r\n###### 注册来源\r\n外部投放的广告落地到某个 Landing Page ，引导用户完成注册。\r\n用户直接在产品上完成注册。\r\n###### 注册转换率\r\n从进入注册流程到完成注册流程的注册成功用户数，占所达到注册页面的用户数的比例。这个数据涉及注册流程是否有优化空间，以及如何优化。\r\n###### 蹦失页面\r\n没有完成注册流程的用户跳出注册流程的页面或者步骤。这个数据涉及后续流失用户的分析，必须关注。\r\n## 关联指标在不同时期的作用\r\n在用户运营的初期，为了降低获取外部用户，注册来源的质量是最重要的指标，而判断来源的质量，就要考虑注册转化的成功率，并参考蹦失页面，来确认用户为什么放弃注册转化，判断是否可以优化注册引导流程。\r\n\r\n在用户运营中期，需要新用户的稳定进入，就需要密切的关注注册转化率指标与蹦失页面指标，适时调整，并考虑采用配套活动推动用户的注册引导行为。\r\n\r\n在用户运营的后期，需要关注用户的留存及活跃度，此时就不需要刻意关注注册的相关指标，反而需要注意用户的留存指标和活跃指标，以及流失用户的模型建立及预警机制。'),(78, 78, '<p>开源的反面是节流，作为用户运营的关键事项，节流担负着减少产品的用户流失，以及挽回已流失用户的重任。</p>\r\n<h2 id=\"h2-u5B9Au4E49u6D41u5931u7528u6237u7684u8861u91CFu6807u51C6\"><a name=\"定义流失用户的衡量标准\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义流失用户的衡量标准</h2><p>通常情况下，用户的生命周期如下图：<br><img src=\"/upload/image/b71dffbc3bae7616e9f8f4bb088444ae2024.png\" alt=\"\"><br>以上所有环节都有可能发生用户流失。<br>在运营工作中，我们通常会看到如下事实：</p>\r\n<blockquote>\r\n<p>流失行为是一个长期的持续行为。<br>定义流失首先要定义用户行为模型，从而确认对产品来说，到底用户多长时间不使用就是流失。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5EFAu7ACBu6D41u5931u9884u8B66u673Au5236\"><a name=\"建立流失预警机制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>建立流失预警机制</h2><p>流失预警的前提是，对用户行为数据和产品节奏保持长期有效的监控，因为运营人员需要了解数据，才能对流失预警做出判断：</p>\r\n<blockquote>\r\n<p>在流失前，用户进行了哪些类是行为。<br>这些用户是否集中于某一渠道。<br>这些用户的性别属性、地域属性、年龄层次、兴趣特征是否类似。<br>在发生流失的时间点，产品做了哪些动作，是否发布了新版本，是否改动了某些核心功能。</p>\r\n</blockquote>\r\n<p>第一，产品在做改版设计时，一定要充分调研用户和听取运营人员的意见。运营人员也一定要拿出数据佐证产品改版设计是否合理，是否会影响已有用户的活跃和留存。</p>\r\n<p>第二，对于大改版，一定要慎之又慎，灰度测试必不可少，同时该坚持的原则一定要坚持，改版一定不要仅凭感觉。改版之前，一定要和运营同学讨论一下新版本的引导学习流程的设计。运营人员要充分加入讨论中，做好各种预案和策略，在出现问题时，可以有效的缓解甚至解决，避免带来预料之外的麻烦。</p>\r\n<p>第三，运营人员要密切掌握用户的使用反馈，及时解决各种可能的运营风险。</p>\r\n<h2 id=\"h2-u9884u9632u7528u6237u6D41u5931\"><a name=\"预防用户流失\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>预防用户流失</h2><p>依然是从数据层面来看，运营人员已经完成了用户分类，了解了不同的用户来源渠道，掌握了用户的性别特征、地域特征、年龄层次，接下来运营人员要了解的，主要就是用户的兴趣点。</p>\r\n<blockquote>\r\n<p>给用户想要的一切。<br>持续给他们想要的一切。<br>尝试给他们可能喜欢的一切。<br>避免让他们失去兴趣。</p>\r\n</blockquote>\r\n<p>要切实做到预防流失，除了已建立的流失预警模型外，还需要运营人员有快速的反应能力，对影响用户、发生流失的环节进行强补。</p>\r\n', '开源的反面是节流，作为用户运营的关键事项，节流担负着减少产品的用户流失，以及挽回已流失用户的重任。\r\n## 定义流失用户的衡量标准\r\n通常情况下，用户的生命周期如下图：\r\n![](/upload/image/b71dffbc3bae7616e9f8f4bb088444ae2024.png)\r\n以上所有环节都有可能发生用户流失。\r\n在运营工作中，我们通常会看到如下事实：\r\n> 流失行为是一个长期的持续行为。\r\n> 定义流失首先要定义用户行为模型，从而确认对产品来说，到底用户多长时间不使用就是流失。\r\n\r\n## 建立流失预警机制\r\n流失预警的前提是，对用户行为数据和产品节奏保持长期有效的监控，因为运营人员需要了解数据，才能对流失预警做出判断：\r\n> 在流失前，用户进行了哪些类是行为。\r\n> 这些用户是否集中于某一渠道。\r\n> 这些用户的性别属性、地域属性、年龄层次、兴趣特征是否类似。\r\n> 在发生流失的时间点，产品做了哪些动作，是否发布了新版本，是否改动了某些核心功能。\r\n\r\n第一，产品在做改版设计时，一定要充分调研用户和听取运营人员的意见。运营人员也一定要拿出数据佐证产品改版设计是否合理，是否会影响已有用户的活跃和留存。\r\n\r\n第二，对于大改版，一定要慎之又慎，灰度测试必不可少，同时该坚持的原则一定要坚持，改版一定不要仅凭感觉。改版之前，一定要和运营同学讨论一下新版本的引导学习流程的设计。运营人员要充分加入讨论中，做好各种预案和策略，在出现问题时，可以有效的缓解甚至解决，避免带来预料之外的麻烦。\r\n\r\n第三，运营人员要密切掌握用户的使用反馈，及时解决各种可能的运营风险。\r\n\r\n## 预防用户流失\r\n依然是从数据层面来看，运营人员已经完成了用户分类，了解了不同的用户来源渠道，掌握了用户的性别特征、地域特征、年龄层次，接下来运营人员要了解的，主要就是用户的兴趣点。\r\n> 给用户想要的一切。\r\n> 持续给他们想要的一切。\r\n> 尝试给他们可能喜欢的一切。\r\n> 避免让他们失去兴趣。\r\n\r\n要切实做到预防流失，除了已建立的流失预警模型外，还需要运营人员有快速的反应能力，对影响用户、发生流失的环节进行强补。'),(79, 79, '<p>用户流失是一个自然发生的无法完全避免的事情，运营人员面对流失的用户，必然要尝试挽回，获取一个新用户的成本，比维护一个老用户的成本要高得多，如果用户流失了，再次唤醒他们会非常困难。</p>\r\n<h2 id=\"h2-u6D41u5931u9884u8B66\"><a name=\"流失预警\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>流失预警</h2><p>明确定义、变量选取、多次建模、指导业务。</p>\r\n<blockquote>\r\n<p>明确用户流失的标准。<br>选取用户建模的指标，用户的行为、活跃的频率、活跃时候对应的操作。<br>建立模型，并不断的调试，剔除无意义的干扰项。<br>从数据库中把符合模型的用户筛选出来。<br>设计活动、话术、直接与用户沟通，尝试延长其在产品中的生命周期。</p>\r\n</blockquote>\r\n<p>流失预警模型仅仅展示了通常情况下用户流失的原因，而特殊情况下的用户流失通过模型是看不出来的，了解了用户能够被唤醒的原因，或许是利益，给用户带来点利好；或许是情怀，帮助用户回忆一下过去的情景，或许是别的什么。可以让流失的用户回归后，有留下来并活跃的理由；或许是别的什么。节流的关键，是在用户未流失之前，而用户挽回的关键，则是在挽回后的用户留存。</p>\r\n<p>第一、流失预警其实是亡羊补牢，针对的是未来的流失隐患，要确保羊不走失，更多的还是要提高留存和活跃度，对于已经走失的羊，是很难找回来的。</p>\r\n<p>第二、流失挽回虽然收效甚微，但依然要做，而重要的永远不是活动如何设计才能挽回更多的流失用户，而是用户回来之后如何让其留下来，别再流失。用户流失的次数越多，挽回的可能性就越低。</p>\r\n<h2 id=\"h2-u7528u6237u633Du56DEu7684u6B65u9AA4\"><a name=\"用户挽回的步骤\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>用户挽回的步骤</h2><p>第一步、让用户知道你要挽回TA，通过哪个渠道告诉他、如何告诉他，你要挽回TA；用户流失了，意味着你不可能通过系统内的渠道和TA渠道联系，那么就要依靠系统外的渠道。</p>\r\n<blockquote>\r\n<p>邮箱，不管是到达率还是打开率，都很一般，唯一的优点就是发送量大。<br>短信，用户每天接收铺天盖地的垃圾短信，所以你的挽回内容设计得不好，很容易被当成垃圾短信而无视，用户会认为隐私被侵犯，导致严重的客户投诉。</p>\r\n</blockquote>\r\n<p>检测挽回的效果需要看监控几个数据：到达率、打开率、转化率。</p>\r\n<p>第二步、让用户认为你是在乎TA，而不仅仅是要挽回TA。不管通过何种渠道推送挽回流失用户的内容，运营人员想要达到的目标是先让流失用户回来看看，然后才是考虑让他再在站内进行一些动作。那么，运营人员准备的挽回文案就很重要了。一个关键要是是：告诉用户有礼品，比单纯的让用户回来坐坐，更有吸引力。</p>\r\n<p>第三步、挽回后的用户更需要引导和关怀。当你挽回一个用户，就要把他当作一个全新的用户，好好的引导和关怀。做一些流失用户回来之后的引导工作，那么成功的挽回的概率将远远超过大多数人。</p>\r\n', '用户流失是一个自然发生的无法完全避免的事情，运营人员面对流失的用户，必然要尝试挽回，获取一个新用户的成本，比维护一个老用户的成本要高得多，如果用户流失了，再次唤醒他们会非常困难。\r\n## 流失预警\r\n明确定义、变量选取、多次建模、指导业务。\r\n> 明确用户流失的标准。\r\n> 选取用户建模的指标，用户的行为、活跃的频率、活跃时候对应的操作。\r\n> 建立模型，并不断的调试，剔除无意义的干扰项。\r\n> 从数据库中把符合模型的用户筛选出来。\r\n> 设计活动、话术、直接与用户沟通，尝试延长其在产品中的生命周期。\r\n\r\n流失预警模型仅仅展示了通常情况下用户流失的原因，而特殊情况下的用户流失通过模型是看不出来的，了解了用户能够被唤醒的原因，或许是利益，给用户带来点利好；或许是情怀，帮助用户回忆一下过去的情景，或许是别的什么。可以让流失的用户回归后，有留下来并活跃的理由；或许是别的什么。节流的关键，是在用户未流失之前，而用户挽回的关键，则是在挽回后的用户留存。\r\n\r\n第一、流失预警其实是亡羊补牢，针对的是未来的流失隐患，要确保羊不走失，更多的还是要提高留存和活跃度，对于已经走失的羊，是很难找回来的。\r\n\r\n第二、流失挽回虽然收效甚微，但依然要做，而重要的永远不是活动如何设计才能挽回更多的流失用户，而是用户回来之后如何让其留下来，别再流失。用户流失的次数越多，挽回的可能性就越低。\r\n\r\n## 用户挽回的步骤\r\n第一步、让用户知道你要挽回TA，通过哪个渠道告诉他、如何告诉他，你要挽回TA；用户流失了，意味着你不可能通过系统内的渠道和TA渠道联系，那么就要依靠系统外的渠道。\r\n> 邮箱，不管是到达率还是打开率，都很一般，唯一的优点就是发送量大。\r\n> 短信，用户每天接收铺天盖地的垃圾短信，所以你的挽回内容设计得不好，很容易被当成垃圾短信而无视，用户会认为隐私被侵犯，导致严重的客户投诉。\r\n\r\n检测挽回的效果需要看监控几个数据：到达率、打开率、转化率。\r\n\r\n第二步、让用户认为你是在乎TA，而不仅仅是要挽回TA。不管通过何种渠道推送挽回流失用户的内容，运营人员想要达到的目标是先让流失用户回来看看，然后才是考虑让他再在站内进行一些动作。那么，运营人员准备的挽回文案就很重要了。一个关键要是是：告诉用户有礼品，比单纯的让用户回来坐坐，更有吸引力。\r\n\r\n第三步、挽回后的用户更需要引导和关怀。当你挽回一个用户，就要把他当作一个全新的用户，好好的引导和关怀。做一些流失用户回来之后的引导工作，那么成功的挽回的概率将远远超过大多数人。\r\n\r\n'),(80, 80, '<p><img src=\"/upload/image/54e7af3e7798a48f44c3c700a3bca37c1500.png\" alt=\"\"><br>如果我们把产品拥有的用户看作是一个鱼塘，用户是鱼，那么鱼塘里有多少鱼取决于两点：</p>\r\n<blockquote>\r\n<p>从外部流进来多少鱼（开源）。<br>从鱼塘里游出去多少鱼（节流）。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/0fd84594a6e419be119db3c3ab73ad9f3274.png\" alt=\"\"><br>整个用户运营体系中最重要的一件事情，就是维护到开源带来的用户，提高他们的留存率及活跃度，减少他们的流失。</p>\r\n<p>围绕核心业务设计可以获得奖励的用户行为；强调连续行为的重要性；尽量让奖励变得对用户有价值。奖励一定要设置有期限性，促使用户使用奖励去消费。</p>\r\n<p>从运营的角度出发如何增加用户的黏性，促使他们留存和活跃，给用户好处、让用户通过长期积累获得好处从而增加他们放弃产品成本之外，还有另一种方式是做好产品的运营与维护，让用户觉得产品有用、好用，养成习惯，从而确保用户不会轻易离开。</p>\r\n<p>不管有多少种办法引入用户，必须至少有一种办法来留住用户，这才是运营最关键的部分。</p>\r\n', '![](/upload/image/54e7af3e7798a48f44c3c700a3bca37c1500.png)\r\n如果我们把产品拥有的用户看作是一个鱼塘，用户是鱼，那么鱼塘里有多少鱼取决于两点：\r\n> 从外部流进来多少鱼（开源）。\r\n> 从鱼塘里游出去多少鱼（节流）。\r\n\r\n![](/upload/image/0fd84594a6e419be119db3c3ab73ad9f3274.png)\r\n整个用户运营体系中最重要的一件事情，就是维护到开源带来的用户，提高他们的留存率及活跃度，减少他们的流失。\r\n\r\n围绕核心业务设计可以获得奖励的用户行为；强调连续行为的重要性；尽量让奖励变得对用户有价值。奖励一定要设置有期限性，促使用户使用奖励去消费。\r\n\r\n从运营的角度出发如何增加用户的黏性，促使他们留存和活跃，给用户好处、让用户通过长期积累获得好处从而增加他们放弃产品成本之外，还有另一种方式是做好产品的运营与维护，让用户觉得产品有用、好用，养成习惯，从而确保用户不会轻易离开。\r\n\r\n不管有多少种办法引入用户，必须至少有一种办法来留住用户，这才是运营最关键的部分。'),(81, 81, '<p>大多数产品都会定期的搞一些“A-P”活动，“A”指的是“Active”，“P”是“pay”，也就是将活跃用户转化为付费用户，一个不争的事实是，当用户真正开始为产品付费，产品就会提供给用户更多的功能、更好的服务、更深的关怀。这是因为，只有花了钱的用户才是好用户。</p>\r\n<p>产品通常会采用“赠送”、“体验”的方式，让活跃用户去感知收费功能的便利性，可以更好的提高转化率。</p>\r\n<p>// 今天内容有点少，没办法，重点就这么多而已。</p>\r\n', '大多数产品都会定期的搞一些“A-P”活动，“A”指的是“Active”，“P”是“pay”，也就是将活跃用户转化为付费用户，一个不争的事实是，当用户真正开始为产品付费，产品就会提供给用户更多的功能、更好的服务、更深的关怀。这是因为，只有花了钱的用户才是好用户。\r\n\r\n产品通常会采用“赠送”、“体验”的方式，让活跃用户去感知收费功能的便利性，可以更好的提高转化率。\r\n\r\n// 今天内容有点少，没办法，重点就这么多而已。'),(82, 82, '<h2 id=\"h2-u6570u7EC4\"><a name=\"数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>数组</h2><p>Swift 数组使用有序列表存储同一类型的多个值。相同的值可以多次出现在一个数组的不同位置中。</p>\r\n<p>Swift 数组会强制检测元素的类型，如果类型不同则会报错，Swift 数组应该遵循像<code>Array&lt;Element&gt;</code>这样的形式，其中Element是这个数组中唯一允许存在的数据类型。</p>\r\n<p>如果创建一个数组，并赋值给一个变量，则创建的集合就是可以修改的。这意味着在创建数组后，可以通过添加、删除、修改的方式改变数组里的项目。如果将一个数组赋值给常量，数组就不可更改，并且数组的大小和内容都不可以修改。</p>\r\n<h2 id=\"h2-u521Bu5EFAu6570u7EC4\"><a name=\"创建数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>创建数组</h2><p>创建一个由特定数据类型构成的空数组</p>\r\n<pre><code class=\"lang-swift\">var someArray = [SomeType]()\r\n</code></pre>\r\n<p>创建一个初始化大小数组的语法</p>\r\n<pre><code class=\"lang-swift\">var someArray = [SomeType](repeatedValue: InitialValue,count: NumbeOfElements)\r\n</code></pre>\r\n<p>实例创建了一个类型为 Int ，大小为 3，初始值为 0 的空数组</p>\r\n<pre><code class=\"lang-swift\">var someInts = [Int](repeatedValue: 0,count: 3)\r\n</code></pre>\r\n<p>实例创建了含有三个元素的数组</p>\r\n<pre><code class=\"lang-swift\">var someInts:[Int] = [10, 20, 30]\r\n</code></pre>\r\n<h2 id=\"h2-u8BBFu95EEu6570u7EC4\"><a name=\"访问数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>访问数组</h2><p>根据数组的索引来访问数组的元素语法</p>\r\n<pre><code class=\"lang-swift\">var someVar = someArray[index]\r\n</code></pre>\r\n<p>实例根据索引访问数组元素</p>\r\n<pre><code class=\"lang-swift\">var someVar = someInts[0]\r\n</code></pre>\r\n<h2 id=\"h2-u4FEEu6539u6570u7EC4\"><a name=\"修改数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>修改数组</h2><p>你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素</p>\r\n<pre><code class=\"lang-swift\">var someInts = [Int]()\r\nsomeInts.append(20)\r\nsomeInts.append(30)\r\nsomeInts += [40]\r\nvar someVar = someInts[0]\r\n</code></pre>\r\n<p>可以通过索引修改数组元素的值</p>\r\n<pre><code class=\"lang-swift\">someInts[2] = 50\r\n</code></pre>\r\n<h2 id=\"h2-u904Du5386u6570u7EC4\"><a name=\"遍历数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>遍历数组</h2><p>可以使用for-in循环来遍历所有数组中的数据项</p>\r\n<pre><code class=\"lang-swift\">var someStrs = [String]()\r\nsomeStrs.append(&quot;Apple&quot;)\r\nsomeStrs.append(&quot;Amazon&quot;)\r\nsomeStrs.append(&quot;W3CSchool&quot;)\r\nsomeStrs += [&quot;Google&quot;]\r\nfor item in someStrs {\r\n    print(item)\r\n}\r\n</code></pre>\r\n<p>同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历</p>\r\n<pre><code class=\"lang-swift\">for (index, item) in someStrs.enumerate() {\r\n   print(&quot;在 index = \\(index) 位置上的值为 \\(item)&quot;)\r\n}\r\n</code></pre>\r\n<h2 id=\"h2-u5408u5E76u6570u7EC4\"><a name=\"合并数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>合并数组</h2><p>可以使用加法操作符（+）来合并两种已存在的相同类型数组</p>\r\n<pre><code class=\"lang-swift\">var intsA = [Int](repeating: 0, count: 1)\r\nvar intsB = [Int](repeating: 1, count: 1)\r\nvar intsC = intsA + intsB\r\nfor item in intsC {\r\n    print(item)\r\n}\r\n</code></pre>\r\n<h2 id=\"h2-count-\"><a name=\"count 属性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>count 属性</h2><p>可以使用 count 属性来计算数组元素个数</p>\r\n<pre><code class=\"lang-swift\">intsC.count\r\n</code></pre>\r\n<h2 id=\"h2-isempty-\"><a name=\"isEmpty 属性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>isEmpty 属性</h2><p>可以通过只读属性 isEmpty 来判断数组是否为空，返回布尔值</p>\r\n<pre><code class=\"lang-swift\">intsC.isEmpty\r\n</code></pre>\r\n', '## 数组\r\nSwift 数组使用有序列表存储同一类型的多个值。相同的值可以多次出现在一个数组的不同位置中。\r\n\r\nSwift 数组会强制检测元素的类型，如果类型不同则会报错，Swift 数组应该遵循像`Array<Element>`这样的形式，其中Element是这个数组中唯一允许存在的数据类型。\r\n\r\n如果创建一个数组，并赋值给一个变量，则创建的集合就是可以修改的。这意味着在创建数组后，可以通过添加、删除、修改的方式改变数组里的项目。如果将一个数组赋值给常量，数组就不可更改，并且数组的大小和内容都不可以修改。\r\n\r\n## 创建数组\r\n创建一个由特定数据类型构成的空数组\r\n```swift\r\nvar someArray = [SomeType]()\r\n```\r\n创建一个初始化大小数组的语法\r\n```swift\r\nvar someArray = [SomeType](repeatedValue: InitialValue,count: NumbeOfElements)\r\n```\r\n实例创建了一个类型为 Int ，大小为 3，初始值为 0 的空数组\r\n```swift\r\nvar someInts = [Int](repeatedValue: 0,count: 3)\r\n```\r\n实例创建了含有三个元素的数组\r\n```swift\r\nvar someInts:[Int] = [10, 20, 30]\r\n```\r\n## 访问数组\r\n根据数组的索引来访问数组的元素语法\r\n```swift\r\nvar someVar = someArray[index]\r\n```\r\n实例根据索引访问数组元素\r\n```swift\r\nvar someVar = someInts[0]\r\n```\r\n## 修改数组\r\n你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素\r\n```swift\r\nvar someInts = [Int]()\r\nsomeInts.append(20)\r\nsomeInts.append(30)\r\nsomeInts += [40]\r\nvar someVar = someInts[0]\r\n```\r\n可以通过索引修改数组元素的值\r\n```swift\r\nsomeInts[2] = 50\r\n```\r\n## 遍历数组\r\n可以使用for-in循环来遍历所有数组中的数据项\r\n```swift\r\nvar someStrs = [String]()\r\nsomeStrs.append(\"Apple\")\r\nsomeStrs.append(\"Amazon\")\r\nsomeStrs.append(\"W3CSchool\")\r\nsomeStrs += [\"Google\"]\r\nfor item in someStrs {\r\n    print(item)\r\n}\r\n```\r\n同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历\r\n```swift\r\nfor (index, item) in someStrs.enumerate() {\r\n   print(\"在 index = \\(index) 位置上的值为 \\(item)\")\r\n}\r\n```\r\n## 合并数组\r\n可以使用加法操作符（+）来合并两种已存在的相同类型数组\r\n```swift\r\nvar intsA = [Int](repeating: 0, count: 1)\r\nvar intsB = [Int](repeating: 1, count: 1)\r\nvar intsC = intsA + intsB\r\nfor item in intsC {\r\n    print(item)\r\n}\r\n```\r\n## count 属性\r\n可以使用 count 属性来计算数组元素个数\r\n```swift\r\nintsC.count\r\n```\r\n## isEmpty 属性\r\n可以通过只读属性 isEmpty 来判断数组是否为空，返回布尔值\r\n```swift\r\nintsC.isEmpty\r\n```'),(83, 83, '<p>市场推广是打开渠道，引入用户，而开源更侧重于对引入用户的承接，所以开源是一个动作，但不是唯一的动作，用户运营的四个核心事项也不是毫无交集的，相反，是且必须互相交融的。<br>用户运营的目标，最基础的是用户规模，而用户的规模又隐含了：<br><strong>用户数</strong>（使用用户数、注册用户数、活跃用户数、付费用户数、流失用户数，如果是客户端还要考虑下载量）<br><strong>用户结构</strong>（新老用户的比例）<br><strong>用户属性与用户行为</strong>（用户属性可以用于分类目标用户，用户行为可以用来考察用户的声明周期和用户习惯）</p>\r\n<p>在做用户运营，有两件事很重要：</p>\r\n<h3 id=\"h3-u4EA7u54C1u7684u53EFu7528u6027\"><a name=\"产品的可用性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>产品的可用性</h3><p>可用性是说，这个产品的功能是不是好的，能不能给用户用，会不会引起用户对产品认知的歧义，会不会出现重大BUG。</p>\r\n<h3 id=\"h3-u4EA7u54C1u7684u6613u7528u6027\"><a name=\"产品的易用性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>产品的易用性</h3><p>易用性是说，相比竞品，这个产品是不是有更好的体验，是否让用户觉得舒服，是否需要设计特别的用户引导。</p>\r\n<p>“不足”对于产品来说，是一个长期的状态，没有十全十美的产品，任何产品都需要产品以外的帮助，包括运营协助、市场的推动、商务的补充，“产品不足运营补”。<br>“运营”其实是个大运营的概念，用户运营和产品关系也是一样的道理,产品的核心功能如果过硬，用户运营就越容易进行，越能够起到协助产品前进的作用。</p>\r\n', '市场推广是打开渠道，引入用户，而开源更侧重于对引入用户的承接，所以开源是一个动作，但不是唯一的动作，用户运营的四个核心事项也不是毫无交集的，相反，是且必须互相交融的。\r\n用户运营的目标，最基础的是用户规模，而用户的规模又隐含了：\r\n**用户数**（使用用户数、注册用户数、活跃用户数、付费用户数、流失用户数，如果是客户端还要考虑下载量）\r\n**用户结构**（新老用户的比例）\r\n**用户属性与用户行为**（用户属性可以用于分类目标用户，用户行为可以用来考察用户的声明周期和用户习惯）\r\n\r\n在做用户运营，有两件事很重要：\r\n### 产品的可用性\r\n可用性是说，这个产品的功能是不是好的，能不能给用户用，会不会引起用户对产品认知的歧义，会不会出现重大BUG。\r\n### 产品的易用性\r\n易用性是说，相比竞品，这个产品是不是有更好的体验，是否让用户觉得舒服，是否需要设计特别的用户引导。\r\n\r\n“不足”对于产品来说，是一个长期的状态，没有十全十美的产品，任何产品都需要产品以外的帮助，包括运营协助、市场的推动、商务的补充，“产品不足运营补”。\r\n“运营”其实是个大运营的概念，用户运营和产品关系也是一样的道理,产品的核心功能如果过硬，用户运营就越容易进行，越能够起到协助产品前进的作用。'),(84, 84, '<p>枚举简单的说也是一种数据类型，只不过是这种数据类型只包含自定义的特定数据，它是一组有共同特性的数据的集合。</p>\r\n', '枚举简单的说也是一种数据类型，只不过是这种数据类型只包含自定义的特定数据，它是一组有共同特性的数据的集合。'),(85, 85, '<h2 id=\"h2-u9C9Cu660Eu7684u4E3Bu9898\"><a name=\"鲜明的主题\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>鲜明的主题</h2><p>所要表达的内容必须清晰明了，一张照片想要表达什么，想要传递什么核心的信息，如果说一张照片让人看了不知所云，或者说题材毫无吸引力，这张照片很可能是失败的。摄影是瞬间艺术，需要敏锐的观察力、表现力，正是艺术修养和生活积淀和情感积淀在摄影上的体现，在潜意识的引领下灵感火花的闪现。</p>\r\n<p>明对拍摄对象，应该<strong>精心推敲，确认主题</strong>，想办法通过照片把想表达的思想准确的传递给观众，尽量简洁明了的能让读者理解。</p>\r\n<h2 id=\"h2-u6280u672Fu63A7u5236u5F97u5F53\"><a name=\"技术控制得当\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>技术控制得当</h2><p>熟练使用手中的相机，理解各个按钮的含义，并能快速准确的进行调节，能依据拍摄的效果，合理的控制曝光、景深、色调等等，这些基本的摄影技术，是成就一张好照片的最基础的因素。</p>\r\n<p>对焦清晰，成像质量锐利，曝光准确，用光得当会提升照片的感染力。对焦不实，曝光不准确，色彩不自然，后期粗糙等等都将使你的作品明显缺乏美感。</p>\r\n<h2 id=\"h2-u51FAu8272u7684u753Bu9762u5143u7D20u6784u6210\"><a name=\"出色的画面元素构成\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>出色的画面元素构成</h2><p>一张照片画面元素的构成是多方面的，包括主体、配体、背景、前景、环境、色彩、体块、线条、质感、空间、情绪、气氛等等多个方面。</p>\r\n<h3 id=\"h3-u4E3Bu4F53u7A81u51FA\"><a name=\"主体突出\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>主体突出</h3><p>摄影画面必须有一个突出醒目的主体，主体和主题是两个不同的概念，主题是你想要表达的思想，而主体是你想要表达思想的最重要载体，一幅好照片必须能把注意力吸引向被摄主体，这一点和画面简洁、背景简化等拍摄要求是一脉相承的，换句话来说，就是使得观赏者的目光一下子就投向画面的主要物体，而不受画面背景的干扰。<strong>主体是你照片的一个支点，所有的技术手段都应该围绕它来执行</strong>。</p>\r\n<h3 id=\"h3-u753Bu9762u7B80u6D01u660Eu4E86\"><a name=\"画面简洁明了\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>画面简洁明了</h3><p>一幅好的照片，画面必须简洁明了，画面中应该只包括那些<strong>有利于把视线引向被摄主体的内容</strong>，或者说有利于主题表达的内容，而排出或者压缩那些可能分散注意力，并与主题无关的内容。</p>\r\n<h3 id=\"h3-u51FAu8272u7684u6784u56FE\"><a name=\"出色的构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>出色的构图</h3><p>良好的构图是好作品必须具备的条件，出色的构图处理，既能突出主体，也能增加照片美感，让人更容易理解照片内容，也大大的提高了照片的艺术性，摄影艺术是视觉艺术，视觉艺术中形式美感，如点、线、面、色、光，以及均衡、变化、节奏、比例等美的要素要匠心安排，才能人们得到非常愉快的观赏体验。</p>\r\n<h2 id=\"h2--\"><a name=\"倾注情感、涵义深刻\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>倾注情感、涵义深刻</h2><p>优秀的被大家认可的摄影作品，都倾注了作者丰富的情感，有深刻的社会涵义，能引起人们的思考和情绪的共鸣，触动人们的心灵，拍摄付出了情感，画面就有了灵魂，作品只有首先打动了寄己才能感动别人。</p>\r\n<h2 id=\"h2-u6848u4F8B\"><a name=\"案例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>案例</h2><p><img src=\"/upload/image/dccb98c8efc8c8e13d4faa761dc82f3f5363.png\" alt=\"\"></p>\r\n', '## 鲜明的主题\r\n所要表达的内容必须清晰明了，一张照片想要表达什么，想要传递什么核心的信息，如果说一张照片让人看了不知所云，或者说题材毫无吸引力，这张照片很可能是失败的。摄影是瞬间艺术，需要敏锐的观察力、表现力，正是艺术修养和生活积淀和情感积淀在摄影上的体现，在潜意识的引领下灵感火花的闪现。\r\n\r\n明对拍摄对象，应该**精心推敲，确认主题**，想办法通过照片把想表达的思想准确的传递给观众，尽量简洁明了的能让读者理解。\r\n## 技术控制得当\r\n熟练使用手中的相机，理解各个按钮的含义，并能快速准确的进行调节，能依据拍摄的效果，合理的控制曝光、景深、色调等等，这些基本的摄影技术，是成就一张好照片的最基础的因素。\r\n\r\n对焦清晰，成像质量锐利，曝光准确，用光得当会提升照片的感染力。对焦不实，曝光不准确，色彩不自然，后期粗糙等等都将使你的作品明显缺乏美感。\r\n## 出色的画面元素构成\r\n一张照片画面元素的构成是多方面的，包括主体、配体、背景、前景、环境、色彩、体块、线条、质感、空间、情绪、气氛等等多个方面。\r\n### 主体突出\r\n摄影画面必须有一个突出醒目的主体，主体和主题是两个不同的概念，主题是你想要表达的思想，而主体是你想要表达思想的最重要载体，一幅好照片必须能把注意力吸引向被摄主体，这一点和画面简洁、背景简化等拍摄要求是一脉相承的，换句话来说，就是使得观赏者的目光一下子就投向画面的主要物体，而不受画面背景的干扰。**主体是你照片的一个支点，所有的技术手段都应该围绕它来执行**。\r\n### 画面简洁明了\r\n一幅好的照片，画面必须简洁明了，画面中应该只包括那些**有利于把视线引向被摄主体的内容**，或者说有利于主题表达的内容，而排出或者压缩那些可能分散注意力，并与主题无关的内容。\r\n### 出色的构图\r\n良好的构图是好作品必须具备的条件，出色的构图处理，既能突出主体，也能增加照片美感，让人更容易理解照片内容，也大大的提高了照片的艺术性，摄影艺术是视觉艺术，视觉艺术中形式美感，如点、线、面、色、光，以及均衡、变化、节奏、比例等美的要素要匠心安排，才能人们得到非常愉快的观赏体验。\r\n## 倾注情感、涵义深刻\r\n优秀的被大家认可的摄影作品，都倾注了作者丰富的情感，有深刻的社会涵义，能引起人们的思考和情绪的共鸣，触动人们的心灵，拍摄付出了情感，画面就有了灵魂，作品只有首先打动了寄己才能感动别人。\r\n## 案例\r\n![](/upload/image/dccb98c8efc8c8e13d4faa761dc82f3f5363.png)\r\n'),(86, 86, '<p>拿相机在手中，是我们开始学习摄影的第一个动作。<br>拍摄图像的模糊不清晰，大部分的原因都是因为没有拿稳手中的相机，相机晃动所造成的，拿稳手中的相机，关键在于掌握正确的持机方法，采用正确姿势拍摄，不仅能够让我们顺利的完成拍摄任务，而且会极大的提高图片的质量。</p>\r\n<h2 id=\"h2-u6A2Au5411u6301u673Au65B9u6CD5\"><a name=\"横向持机方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>横向持机方法</h2><p><img src=\"/upload/image/b3f4817d27f846e155b3cd2664551de62697.png\" alt=\"\"><br>横向持机是拍摄中常用的持机方法。<br>右手紧握相机手柄，食指轻触快门键，以备随时拍摄；左手从相机下方托稳相机，拇指和食指握住相机来稳定镜头，眼睛紧贴眼罩，通过眼睛和双手的3点来支撑相机，防止相机出现抖动。一定要注意双臂和双肘尽力紧贴身体，按动快门时，动作尽量要轻，并且尽量能够屏住呼吸，这样能够最大的减少对相机的影响，保持相机的稳定。</p>\r\n<h2 id=\"h2-u7EB5u5411u6301u673Au65B9u6CD5\"><a name=\"纵向持机方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>纵向持机方法</h2><p><img src=\"/upload/image/90dbd16ae473edac8c83eb26ddf749381537.png\" alt=\"\"><br>右手上翻，一般左手在下。</p>\r\n<h2 id=\"h2-u957Fu7126u955Cu5934u65B9u6CD5\"><a name=\"长焦镜头方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>长焦镜头方法</h2><p><img src=\"/upload/image/a96cfc17d2f12cbcfbdba98c2e68b7aa6894.png\" alt=\"\"><br>一般使用三脚架拍摄，如条件不允许，可以使用如图所示方法。</p>\r\n<h2 id=\"h2-u4F4Eu4F4Du62CDu6444u65B9u6CD5\"><a name=\"低位拍摄方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>低位拍摄方法</h2><p><img src=\"/upload/image/485e26e0a8e92bf04f31ce1b2be17b412786.png\" alt=\"\"><br>左膝支撑握持相机手柄的左臂的肘部，以防止出现抖动。一般情况下，跪姿拍摄较难稳定身体，最好也借助固定物体依靠，如树、墙等。<br><img src=\"/upload/image/4cc15065a40b214de2609cdd3d54a3342815.png\" alt=\"\"><br>采用坐姿拍摄，则应将双臂的肘部稳稳的放在膝部以获得稳定的支撑，不建议把双腿放平的拍摄姿势。</p>\r\n<h2 id=\"h2-u5176u5B83\"><a name=\"其它\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>其它</h2><p>趴下拍摄，拿稳相机即可，单反相机不建议使用实时取景液晶屏拍摄。</p>\r\n', '拿相机在手中，是我们开始学习摄影的第一个动作。\r\n拍摄图像的模糊不清晰，大部分的原因都是因为没有拿稳手中的相机，相机晃动所造成的，拿稳手中的相机，关键在于掌握正确的持机方法，采用正确姿势拍摄，不仅能够让我们顺利的完成拍摄任务，而且会极大的提高图片的质量。\r\n## 横向持机方法\r\n![](/upload/image/b3f4817d27f846e155b3cd2664551de62697.png)\r\n横向持机是拍摄中常用的持机方法。\r\n右手紧握相机手柄，食指轻触快门键，以备随时拍摄；左手从相机下方托稳相机，拇指和食指握住相机来稳定镜头，眼睛紧贴眼罩，通过眼睛和双手的3点来支撑相机，防止相机出现抖动。一定要注意双臂和双肘尽力紧贴身体，按动快门时，动作尽量要轻，并且尽量能够屏住呼吸，这样能够最大的减少对相机的影响，保持相机的稳定。\r\n## 纵向持机方法\r\n![](/upload/image/90dbd16ae473edac8c83eb26ddf749381537.png)\r\n右手上翻，一般左手在下。\r\n## 长焦镜头方法\r\n![](/upload/image/a96cfc17d2f12cbcfbdba98c2e68b7aa6894.png)\r\n一般使用三脚架拍摄，如条件不允许，可以使用如图所示方法。\r\n## 低位拍摄方法\r\n![](/upload/image/485e26e0a8e92bf04f31ce1b2be17b412786.png)\r\n左膝支撑握持相机手柄的左臂的肘部，以防止出现抖动。一般情况下，跪姿拍摄较难稳定身体，最好也借助固定物体依靠，如树、墙等。\r\n![](/upload/image/4cc15065a40b214de2609cdd3d54a3342815.png)\r\n采用坐姿拍摄，则应将双臂的肘部稳稳的放在膝部以获得稳定的支撑，不建议把双腿放平的拍摄姿势。\r\n## 其它\r\n趴下拍摄，拿稳相机即可，单反相机不建议使用实时取景液晶屏拍摄。\r\n'),(87, 87, '<h2 id=\"h2-u573Au666Fu667Au80FDu81EAu52A8u6A21u5F0F\"><a name=\"场景智能自动模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>场景智能自动模式</h2><p><img src=\"/upload/image/236f79aa84569425a7ea1b09ba24252f3876.png\" alt=\"\"><br>场景智能自动模式，不少厂家称其为“绿区模式”，属于全自动拍摄模式，数码相机能够自动分析拍摄场景，进行恰当的设置。比如可以在风光拍摄时将蓝天、绿树、夕阳映照的天空表现得鲜艳。人像拍摄时调整色调表现自然健康的肤色。可以理解为“傻瓜模式”。<br>这种模式适合在光线明了的环境使用，如在阴天或环境光线不太好的情况下，往往达不到理想的效果，很容易出现躁点与照片的模糊不清及偏色现象。</p>\r\n<h2 id=\"h2-u4EBAu50CFu6A21u5F0F\"><a name=\"人像模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>人像模式</h2><p><img src=\"/upload/image/f60fea917f65e442db44fde746bd15a18481.png\" alt=\"\"><br>人像模式比较适合拍摄以人物为主体的照片。在该模式下相机会利用大光圈虚化背景，使人物更加醒目。同时对照片色调进行调整，使肌肤质地更加柔和，另外，曝光也相对偏亮，使皮肤显得更加白皙。</p>\r\n<h2 id=\"h2-u98CEu666Fu6A21u5F0F\"><a name=\"风景模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>风景模式</h2><p><img src=\"/upload/image/c20af11ef5b1f4286e71147d9dd73a2a7538.png\" alt=\"\"><br>风景模式适合拍摄辽阔的风光题材，相机设置能够对由近及远的大范围景物进行锐利成像。同时还具有使绿色、红色、蓝色更加鲜艳的特征。照片整体映像更加清晰、锐利。另外，在此模式下，不管环境有多暗内置闪光灯都不会自动闪光。</p>\r\n<h2 id=\"h2-u5FAEu8DDDu6A21u5F0F\"><a name=\"微距模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>微距模式</h2><p><img src=\"/upload/image/da354ba138fc350f8b2b08c5451f28241506.png\" alt=\"\"><br>微距模式的设置便于拍摄多种微小被摄物体。可应用于花草、昆虫以及身边多种微小物体等拍摄，是一种可以广泛应用的便捷拍摄模式。但要注意你的相机镜头的最近拍摄距离，使用近距离拍摄专用的微距镜头效果更好。</p>\r\n<h2 id=\"h2-u8FD0u52A8u6A21u5F0F\"><a name=\"运动模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运动模式</h2><p><img src=\"/upload/image/3b5793b35358c6ef457d5869e2f49f2d1781.png\" alt=\"\"><br>运动模式组合了适于拍摄高速运动物体的多种设置，可用于多种多样的的运动物体，也适于拍摄儿童或宠物。<br>在运动模式下，自动对焦功能将追踪正在运动的被摄体，进行连续对焦。同时，相机采用较高的快门速度。而且运动模式还采用了连拍功能，提高了扑捉瞬间机会的能力。</p>\r\n<h2 id=\"h2-u95EAu5149u706Fu5173u95EDu6A21u5F0F\"><a name=\"闪光灯关闭模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>闪光灯关闭模式</h2><p><img src=\"/upload/image/d4330ddf769937ffd21ebaa55f5d99427469.png\" alt=\"\"><br>虽然闪光灯摄影可将昏暗场景下的被摄体拍得明亮，是非常方便的功能，但根据拍摄条件和环境场所的不同，拍摄的时候可能并不希望闪光灯闪光。这时候可以使用闪光灯关闭模式。</p>\r\n<h2 id=\"h2-ca-\"><a name=\"CA（创意自动）模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>CA（创意自动）模式</h2><p><img src=\"/upload/image/96c63e9f669091431f3d4e51680441996430.png\" alt=\"\"><br>CA（创意自动）模式是能够提升表现力的全自动模式。可通过简单的操作控制设置，获得符合意图的效果。<br>CA（创意自动）模式是基于场景智能自动，又能一定程度反映拍摄者意图的拍摄模式。刚刚接触单反相机的人也可以通过简单的文字描述选择功能。<br>1111</p>\r\n', '## 场景智能自动模式\r\n![](/upload/image/236f79aa84569425a7ea1b09ba24252f3876.png)\r\n场景智能自动模式，不少厂家称其为“绿区模式”，属于全自动拍摄模式，数码相机能够自动分析拍摄场景，进行恰当的设置。比如可以在风光拍摄时将蓝天、绿树、夕阳映照的天空表现得鲜艳。人像拍摄时调整色调表现自然健康的肤色。可以理解为“傻瓜模式”。\r\n这种模式适合在光线明了的环境使用，如在阴天或环境光线不太好的情况下，往往达不到理想的效果，很容易出现躁点与照片的模糊不清及偏色现象。\r\n## 人像模式\r\n![](/upload/image/f60fea917f65e442db44fde746bd15a18481.png)\r\n人像模式比较适合拍摄以人物为主体的照片。在该模式下相机会利用大光圈虚化背景，使人物更加醒目。同时对照片色调进行调整，使肌肤质地更加柔和，另外，曝光也相对偏亮，使皮肤显得更加白皙。\r\n## 风景模式\r\n![](/upload/image/c20af11ef5b1f4286e71147d9dd73a2a7538.png)\r\n风景模式适合拍摄辽阔的风光题材，相机设置能够对由近及远的大范围景物进行锐利成像。同时还具有使绿色、红色、蓝色更加鲜艳的特征。照片整体映像更加清晰、锐利。另外，在此模式下，不管环境有多暗内置闪光灯都不会自动闪光。\r\n## 微距模式\r\n![](/upload/image/da354ba138fc350f8b2b08c5451f28241506.png)\r\n微距模式的设置便于拍摄多种微小被摄物体。可应用于花草、昆虫以及身边多种微小物体等拍摄，是一种可以广泛应用的便捷拍摄模式。但要注意你的相机镜头的最近拍摄距离，使用近距离拍摄专用的微距镜头效果更好。\r\n## 运动模式\r\n![](/upload/image/3b5793b35358c6ef457d5869e2f49f2d1781.png)\r\n运动模式组合了适于拍摄高速运动物体的多种设置，可用于多种多样的的运动物体，也适于拍摄儿童或宠物。\r\n在运动模式下，自动对焦功能将追踪正在运动的被摄体，进行连续对焦。同时，相机采用较高的快门速度。而且运动模式还采用了连拍功能，提高了扑捉瞬间机会的能力。\r\n## 闪光灯关闭模式\r\n![](/upload/image/d4330ddf769937ffd21ebaa55f5d99427469.png)\r\n虽然闪光灯摄影可将昏暗场景下的被摄体拍得明亮，是非常方便的功能，但根据拍摄条件和环境场所的不同，拍摄的时候可能并不希望闪光灯闪光。这时候可以使用闪光灯关闭模式。\r\n## CA（创意自动）模式\r\n![](/upload/image/96c63e9f669091431f3d4e51680441996430.png)\r\nCA（创意自动）模式是能够提升表现力的全自动模式。可通过简单的操作控制设置，获得符合意图的效果。\r\nCA（创意自动）模式是基于场景智能自动，又能一定程度反映拍摄者意图的拍摄模式。刚刚接触单反相机的人也可以通过简单的文字描述选择功能。\r\n1111\r\n'),(88, 88, '<h2 id=\"h2-u8BA4u8BC6u66DDu5149\"><a name=\"认识曝光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>认识曝光</h2><p>曝光就是相机感光元件接受从镜头进入的光线，从而形成影像的过程。<br><img src=\"/upload/image/091a0be482a388f2b01b30f15c6e6f3c7664.png\" alt=\"\"><br>相机接收光线，形成图像，一般有三种情形<br><img src=\"/upload/image/d6125b23c7ed0a286b923db109a508089228.png\" alt=\"\"><br>接收光线太多，照片太亮，超出景物整体亮度，我们称之为“曝光过度（过曝、过亮）”<br><img src=\"/upload/image/5122f8640111e500f3f642d1712f6b677866.png\" alt=\"\"><br>画面灰暗，整体亮度不足，被称为“曝光不足（欠曝、过暗）”<br><img src=\"/upload/image/44f6ac0c599770a43ac5b2d252150b648198.png\" alt=\"\"><br>真实的表现了场景亮度，整个画面亮度恰当，合乎我们视觉感受，这张照片我们认为是曝光正确的。曝光的正确与否，直接影响着图像的亮度、质感、色彩等。在摄影中，通过控制曝光来还原与景物亮度近似的明暗对比关系，或者根据创作意图将不同的景物亮度在画面中形成最佳效果。</p>\r\n<h2 id=\"h2-u66DDu5149u4E09u8981u7D20\"><a name=\"曝光三要素\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>曝光三要素</h2><p>在单反相机上级，影响曝光要素的有三个，分别是光圈、快门、感光度（ISO）。在拍摄过程可以通过对光圈、快门、感光度（ISO）的调节，来控制照片的整体亮度。<br><img src=\"/upload/image/542505be01204302038890307a7023f23085.png\" alt=\"\"></p>\r\n', '## 认识曝光\r\n曝光就是相机感光元件接受从镜头进入的光线，从而形成影像的过程。\r\n![](/upload/image/091a0be482a388f2b01b30f15c6e6f3c7664.png)\r\n相机接收光线，形成图像，一般有三种情形\r\n![](/upload/image/d6125b23c7ed0a286b923db109a508089228.png)\r\n接收光线太多，照片太亮，超出景物整体亮度，我们称之为“曝光过度（过曝、过亮）”\r\n![](/upload/image/5122f8640111e500f3f642d1712f6b677866.png)\r\n画面灰暗，整体亮度不足，被称为“曝光不足（欠曝、过暗）”\r\n![](/upload/image/44f6ac0c599770a43ac5b2d252150b648198.png)\r\n真实的表现了场景亮度，整个画面亮度恰当，合乎我们视觉感受，这张照片我们认为是曝光正确的。曝光的正确与否，直接影响着图像的亮度、质感、色彩等。在摄影中，通过控制曝光来还原与景物亮度近似的明暗对比关系，或者根据创作意图将不同的景物亮度在画面中形成最佳效果。\r\n## 曝光三要素\r\n在单反相机上级，影响曝光要素的有三个，分别是光圈、快门、感光度（ISO）。在拍摄过程可以通过对光圈、快门、感光度（ISO）的调节，来控制照片的整体亮度。\r\n![](/upload/image/542505be01204302038890307a7023f23085.png)'),(89, 89, '<p>光圈是集成在镜头里面，由可以活动的金属叶片组成，用于控制镜头通光亮度的光闸。光圈通常由多片可活动的金属叶片组成，可以使中间形成的（近似）圆孔变大或缩小，以达到控制通过光量大小的目的。</p>\r\n<h2 id=\"h2-u5149u5708u5927u5C0F\"><a name=\"光圈大小\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光圈大小</h2><p>通常都是用“光圈系数”来称呼，简称“光圈”或者“f-系数”。<br><img src=\"/upload/image/4d5c2c8c4a322a4425d68cb12d8667a86898.png\" alt=\"\"><br>光圈的大小正好和数值的大小相反，光圈越大，数值越小，光圈越小，数值越大。<br>每个镜头因为面对用户群、制造工艺的不同，最大光圈是不一样的。<br><img src=\"/upload/image/87967b9c600b98de68f474cc5f97cfc01266.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5149u5708u5BF9u66DDu5149u7684u5F71u54CD\"><a name=\"光圈对曝光的影响\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光圈对曝光的影响</h2><p><img src=\"/upload/image/89be58ff558e2daa1885ff8bdfe594f32716.png\" alt=\"\"><br>假设圆柱认为是通过光圈的光线，那么很明显，F2.8通过的光线多，而F22就非常的小，那么，在同等时间里，明显F2.8通光量就要多于F8和F22。</p>\r\n<h2 id=\"h2-u5149u5708u5927u5C0Fu53EFu63A7u5236u753Bu9762u7684u865Au5B9E\"><a name=\"光圈大小可控制画面的虚实\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光圈大小可控制画面的虚实</h2><p>光圈对画面曝光产生影响之外，光圈的调节还有一个重要的作用，就是可以控制画面的虚实，我们可以通过对光圈大小的调节，在调整进光量的同时可以对背景虚化进行控制，这个效果称之为景深。<br><img src=\"/upload/image/e3544458d3607a18c990cf031a15c0701926.png\" alt=\"\"><br>大光圈可以拍摄出背景虚化的效果<br><img src=\"/upload/image/0b631d639a17b54b92ea7e00597e1f109680.png\" alt=\"\"><br>小光圈可以拍摄出前后都很清晰，表现非常深远的空间纵深感。</p>\r\n<h2 id=\"h2-u5149u5708u5F71u54CDu753Bu8D28\"><a name=\"光圈影响画质\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光圈影响画质</h2><p>任何镜头，都有某一档光圈的成像质量是最好的，即受各种像差的影响最小，这档光圈俗称最佳光圈。一般来说，最佳光圈位于该镜头最大光圈缩小2至3档处。所以在拍摄时要尽量使用最佳光圈，以提高成像质量。</p>\r\n', '光圈是集成在镜头里面，由可以活动的金属叶片组成，用于控制镜头通光亮度的光闸。光圈通常由多片可活动的金属叶片组成，可以使中间形成的（近似）圆孔变大或缩小，以达到控制通过光量大小的目的。\r\n## 光圈大小\r\n通常都是用“光圈系数”来称呼，简称“光圈”或者“f-系数”。\r\n![](/upload/image/4d5c2c8c4a322a4425d68cb12d8667a86898.png)\r\n光圈的大小正好和数值的大小相反，光圈越大，数值越小，光圈越小，数值越大。\r\n每个镜头因为面对用户群、制造工艺的不同，最大光圈是不一样的。\r\n![](/upload/image/87967b9c600b98de68f474cc5f97cfc01266.png)\r\n## 光圈对曝光的影响\r\n![](/upload/image/89be58ff558e2daa1885ff8bdfe594f32716.png)\r\n假设圆柱认为是通过光圈的光线，那么很明显，F2.8通过的光线多，而F22就非常的小，那么，在同等时间里，明显F2.8通光量就要多于F8和F22。\r\n## 光圈大小可控制画面的虚实\r\n光圈对画面曝光产生影响之外，光圈的调节还有一个重要的作用，就是可以控制画面的虚实，我们可以通过对光圈大小的调节，在调整进光量的同时可以对背景虚化进行控制，这个效果称之为景深。\r\n![](/upload/image/e3544458d3607a18c990cf031a15c0701926.png)\r\n大光圈可以拍摄出背景虚化的效果\r\n![](/upload/image/0b631d639a17b54b92ea7e00597e1f109680.png)\r\n小光圈可以拍摄出前后都很清晰，表现非常深远的空间纵深感。\r\n## 光圈影响画质\r\n任何镜头，都有某一档光圈的成像质量是最好的，即受各种像差的影响最小，这档光圈俗称最佳光圈。一般来说，最佳光圈位于该镜头最大光圈缩小2至3档处。所以在拍摄时要尽量使用最佳光圈，以提高成像质量。'),(90, 90, '<p>快门是照相机中用来控制光线照射感光元件时间长短的装置，快门隐藏在相机内部，位于相机反光板的后面，感光元件前面，其作用就像一扇黑色不透光的门，只有打开时才会让光线通过，照射到感光元件上，形成图像。<br><img src=\"/upload/image/d160491f8287c2a1c2d7eb6f1a7b6f8b1001.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5DE5u4F5Cu539Fu7406\"><a name=\"工作原理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>工作原理</h2><p>为了保护相机内部的感光器件，不至于曝光，快门总是关闭的。拍摄时，调整好快门速度后，按下照相机的快门释放按钮，快门才会打开。在快门开启与关闭的间隙间，让光线照射到相机内的影像传感器上，从而活动影像。</p>\r\n<h2 id=\"h2-u5FEBu95E8u901Fu5EA6\"><a name=\"快门速度\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>快门速度</h2><p>快门速度的大小，是指传感器暴露在光线中的时间长短，可以理解为快门速度就是曝光时间，常见的快门速度有：<br><img src=\"/upload/image/7e157bdba496a0f80c084056c1ed9f197925.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u8D85u9AD8u901Fu5FEBu95E8u51DDu56FAu4E00u77ACu95F4\"><a name=\"超高速快门凝固一瞬间\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>超高速快门凝固一瞬间</h2><p>采用高速快门，可以将运动中的物体清晰的凝固住。<br><img src=\"/upload/image/5090d2f9c910f93a73beaefd4a8de30c9271.png\" alt=\"\"><br>画面主体的运动速度越快，凝固其动态所需的快门速度就必须越高。1/250秒以上的快门速度能捕捉大部分运动速度较慢的运动对象的动态。</p>\r\n<h2 id=\"h2-u6162u901Fu5FEBu95E8u8868u73B0u52A8u611Fu865Au5E7Bu7684u6548u679C\"><a name=\"慢速快门表现动感虚幻的效果\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>慢速快门表现动感虚幻的效果</h2><p>使用慢速快门拍摄，可以使运动的物体在照片上形成模糊的虚影，而不动的物体依然清晰，从而形成虚实相映的效果。<br><img src=\"/upload/image/155f807c7978550083d35a0b58ed082c5844.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5B89u5168u5FEBu95E8\"><a name=\"安全快门\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安全快门</h2><p>手持相机的时候，需要使得快门速度搞过“安全快门”速度，才能保证照片不模糊。安全快门一般是焦距的倒数，例如，镜头焦距为50mm，安全快门速度为1/50，另外，即使使用小于50mm的短焦距镜头，安全快门依旧不能低于1/50。</p>\r\n', '快门是照相机中用来控制光线照射感光元件时间长短的装置，快门隐藏在相机内部，位于相机反光板的后面，感光元件前面，其作用就像一扇黑色不透光的门，只有打开时才会让光线通过，照射到感光元件上，形成图像。\r\n![](/upload/image/d160491f8287c2a1c2d7eb6f1a7b6f8b1001.png)\r\n## 工作原理\r\n为了保护相机内部的感光器件，不至于曝光，快门总是关闭的。拍摄时，调整好快门速度后，按下照相机的快门释放按钮，快门才会打开。在快门开启与关闭的间隙间，让光线照射到相机内的影像传感器上，从而活动影像。\r\n## 快门速度\r\n快门速度的大小，是指传感器暴露在光线中的时间长短，可以理解为快门速度就是曝光时间，常见的快门速度有：\r\n![](/upload/image/7e157bdba496a0f80c084056c1ed9f197925.png)\r\n## 超高速快门凝固一瞬间\r\n采用高速快门，可以将运动中的物体清晰的凝固住。\r\n![](/upload/image/5090d2f9c910f93a73beaefd4a8de30c9271.png)\r\n画面主体的运动速度越快，凝固其动态所需的快门速度就必须越高。1/250秒以上的快门速度能捕捉大部分运动速度较慢的运动对象的动态。\r\n## 慢速快门表现动感虚幻的效果\r\n使用慢速快门拍摄，可以使运动的物体在照片上形成模糊的虚影，而不动的物体依然清晰，从而形成虚实相映的效果。\r\n![](/upload/image/155f807c7978550083d35a0b58ed082c5844.png)\r\n## 安全快门\r\n手持相机的时候，需要使得快门速度搞过“安全快门”速度，才能保证照片不模糊。安全快门一般是焦距的倒数，例如，镜头焦距为50mm，安全快门速度为1/50，另外，即使使用小于50mm的短焦距镜头，安全快门依旧不能低于1/50。'),(91, 91, '<p>可以理解为感受光线的数值，也称为ISO值，是指相机感光元件对光线的敏感程度。也可以理解为是感光元件感受光线的能力。<br>数值越大表示感光性越强，也就是对光线越敏感，很容易接收到光线，而数值越小表示感光性越弱，表示对光线反应迟钝，不容易感光。<br><img src=\"/upload/image/55011650be6dc9a1adb5ba0de6296b1d7864.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u611Fu5149u5EA6u5BF9u66DDu5149u7684u5F71u54CD\"><a name=\"感光度对曝光的影响\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>感光度对曝光的影响</h2><p>在快门、光圈设置不变的情况下，调节感光度，画面随着感光度逐步提高，会越来越亮，如果把数值调节越低，画面会越来越暗。<br><img src=\"/upload/image/4b24aed7733cba801b84663db2b5d27e4461.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u611Fu5149u5EA6u5BF9u753Bu8D28u7684u5F71u54CD\"><a name=\"感光度对画质的影响\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>感光度对画质的影响</h2><p>感光度与画质之间有着密切的联系。<strong>采用高感光度时，照片噪点增加，图片质量下降</strong>。采用低感光度拍摄，图片的质量明显好于采用高感光度拍摄的画面。所以，在拍摄时，推荐大家尽可能使用低感光度。<br><img src=\"/upload/image/c0cbc362cc20021a2faffe47b4a1fcce4901.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u611Fu5149u5EA6u7684u9009u62E9u548Cu4F7Fu7528\"><a name=\"感光度的选择和使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>感光度的选择和使用</h2><h3 id=\"h3-u4F4Eu611Fu5149u5EA6u7684u4F7Fu7528\"><a name=\"低感光度的使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>低感光度的使用</h3><p>在光线充足的环境下，选择较低的感光度，可以获得清晰度高、颗粒细腻、层次丰富的高质量照片。为达到画面特定的艺术效果，在实际拍摄中，可以降低感光度，使快门速度变慢，从而实现特殊效果。<br><img src=\"/upload/image/07cecb0e69e78264ea27c8e4dd3270239062.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u9AD8u611Fu5149u5EA6u7684u4F7Fu7528\"><a name=\"高感光度的使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>高感光度的使用</h3><p>在光线较暗的情况下，选择高感光度，能增加进光量，缩短曝光时间，提高快门速度，从而减少相机抖动，保证画面的清晰度。<br><img src=\"/upload/image/69f7227e32ec1ad2b0e7ed245774e2fe6751.png\" alt=\"\"></p>\r\n', '可以理解为感受光线的数值，也称为ISO值，是指相机感光元件对光线的敏感程度。也可以理解为是感光元件感受光线的能力。\r\n数值越大表示感光性越强，也就是对光线越敏感，很容易接收到光线，而数值越小表示感光性越弱，表示对光线反应迟钝，不容易感光。\r\n![](/upload/image/55011650be6dc9a1adb5ba0de6296b1d7864.png)\r\n## 感光度对曝光的影响\r\n在快门、光圈设置不变的情况下，调节感光度，画面随着感光度逐步提高，会越来越亮，如果把数值调节越低，画面会越来越暗。\r\n![](/upload/image/4b24aed7733cba801b84663db2b5d27e4461.png)\r\n## 感光度对画质的影响\r\n感光度与画质之间有着密切的联系。**采用高感光度时，照片噪点增加，图片质量下降**。采用低感光度拍摄，图片的质量明显好于采用高感光度拍摄的画面。所以，在拍摄时，推荐大家尽可能使用低感光度。\r\n![](/upload/image/c0cbc362cc20021a2faffe47b4a1fcce4901.png)\r\n## 感光度的选择和使用\r\n### 低感光度的使用\r\n在光线充足的环境下，选择较低的感光度，可以获得清晰度高、颗粒细腻、层次丰富的高质量照片。为达到画面特定的艺术效果，在实际拍摄中，可以降低感光度，使快门速度变慢，从而实现特殊效果。\r\n![](/upload/image/07cecb0e69e78264ea27c8e4dd3270239062.png)\r\n### 高感光度的使用\r\n在光线较暗的情况下，选择高感光度，能增加进光量，缩短曝光时间，提高快门速度，从而减少相机抖动，保证画面的清晰度。\r\n![](/upload/image/69f7227e32ec1ad2b0e7ed245774e2fe6751.png)'),(92, 92, '<h2 id=\"h2-p-\"><a name=\"P 程序自动曝光模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>P 程序自动曝光模式</h2><p>P模式是程序自动曝光模式，与场景模式A+（AUTO或者绿框模式）有点相似。相机会根据现场光线的情况自动设置光圈和快门的曝光组合，从而获得准确的曝光。</p>\r\n<p>程序自动模式下，光圈、快门都可以手动调节，但不是单独调节，而是组合调节。就是说，相机原本设置一个曝光组合，你想要获得小景深（即背景虚化效果），可调节光圈，快门自动配置。当然你要是想调节快门，光圈会自动设置，同时可以对曝光补偿、ISO感光度等功能进行控制，也就是说，你可以选择一组适合自己拍摄要求的曝光组合。</p>\r\n<p>P模式下，既有全自动的便利，同时又有手动控制的空间。</p>\r\n<h2 id=\"h2-av-a-\"><a name=\"AV/A 光圈优先拍摄模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>AV/A 光圈优先拍摄模式</h2><p>Av或者A光圈优先模式，是一种半自动拍摄模式。在这种拍摄模式下，你可以先设定光圈的大小，相机和根据拍摄条件自动调节其它参数。光圈优先模式通常适用于需要控制景深的照片。<br><img src=\"/upload/image/c7f1a4f2c092165e5fda057ba554a72d3145.png\" alt=\"\"></p>\r\n<h2 id=\"h2-tv-s-\"><a name=\"TV/S 快门优先拍摄模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>TV/S 快门优先拍摄模式</h2><p>在该模式下，你可以先设定快门速度，相机会自动选择与快门速度匹配的光圈值。在快门优先的情况下，利用不同的快门速度控制运动物体的虚实，形成特殊的画面效果。<br><img src=\"/upload/image/e95dd300eacd67154374e750ee178d1c7486.png\" alt=\"\"></p>\r\n<h2 id=\"h2-m-\"><a name=\"M 全手动拍摄模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>M 全手动拍摄模式</h2><p>摄影师可以自己调节快门与光圈、ISO等参数，完全手动控制画面的曝光。也就是说，在你按下相机快门之前，相机上所有拍摄参数必须手动设置好。M挡全手动拍摄模式在遇到复杂多变光线的场合时，使用方便。好多专业摄影师在进行创作摄影中基本都会使用这种拍摄模式。</p>\r\n', '## P 程序自动曝光模式\r\nP模式是程序自动曝光模式，与场景模式A+（AUTO或者绿框模式）有点相似。相机会根据现场光线的情况自动设置光圈和快门的曝光组合，从而获得准确的曝光。\r\n\r\n程序自动模式下，光圈、快门都可以手动调节，但不是单独调节，而是组合调节。就是说，相机原本设置一个曝光组合，你想要获得小景深（即背景虚化效果），可调节光圈，快门自动配置。当然你要是想调节快门，光圈会自动设置，同时可以对曝光补偿、ISO感光度等功能进行控制，也就是说，你可以选择一组适合自己拍摄要求的曝光组合。\r\n\r\nP模式下，既有全自动的便利，同时又有手动控制的空间。\r\n\r\n## AV/A 光圈优先拍摄模式\r\nAv或者A光圈优先模式，是一种半自动拍摄模式。在这种拍摄模式下，你可以先设定光圈的大小，相机和根据拍摄条件自动调节其它参数。光圈优先模式通常适用于需要控制景深的照片。\r\n![](/upload/image/c7f1a4f2c092165e5fda057ba554a72d3145.png)\r\n\r\n## TV/S 快门优先拍摄模式\r\n在该模式下，你可以先设定快门速度，相机会自动选择与快门速度匹配的光圈值。在快门优先的情况下，利用不同的快门速度控制运动物体的虚实，形成特殊的画面效果。\r\n![](/upload/image/e95dd300eacd67154374e750ee178d1c7486.png)\r\n\r\n## M 全手动拍摄模式\r\n摄影师可以自己调节快门与光圈、ISO等参数，完全手动控制画面的曝光。也就是说，在你按下相机快门之前，相机上所有拍摄参数必须手动设置好。M挡全手动拍摄模式在遇到复杂多变光线的场合时，使用方便。好多专业摄影师在进行创作摄影中基本都会使用这种拍摄模式。'),(93, 93, '<h2 id=\"h2-u4E3Au4EC0u4E48u8981u6D4Bu5149\"><a name=\"为什么要测光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>为什么要测光</h2><p>早起机械相机时代，摄影师拍摄时，主要依靠经验来判断光圈、快门、感光度的组合，来取得照片合适的亮度。现代单反相机已经具备非常完备的测光系统，并能够胜任几乎所有复杂的拍摄场景，使获得正确曝光非常方便快捷。<br><img src=\"/upload/image/4b6ae84ec7ed7dd73b2a3193b9335fb75792.png\" alt=\"\"><br><img src=\"/upload/image/a93ac602f50135e78cd66e33d647b6933586.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u6D4Bu5149u6A21u5F0Fu7684u4F7Fu7528\"><a name=\"测光模式的使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测光模式的使用</h2><h3 id=\"h3-u8BC4u4EF7u6D4Bu5149\"><a name=\"评价测光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>评价测光</h3><p>几乎所有相机都将这类测光作为默认的测光模式。评价测光会将画面切割成多个区块，然后分别在各个区块进行测光，可以对画面整体亮度进行判断，计算基本平均的曝光。是目前最先进的智能化测光方式，即使对测光不熟悉的人，用这种方式一般也能够得到曝光毕竟准确的照片。</p>\r\n<p>这种模式在拍摄顺光的情况下，光照比较均匀的场景时效果最好，目前已经成为许多摄影师和摄影爱好者最常用的测光方式。但是，在对画面内有极端亮度差的物体存在或逆光状态的场景下略显力不从心，有时候会出现曝光不稳定的情况。<br><img src=\"/upload/image/f479d26b3bf6278c860a27497f54f1248633.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u4E2Du592Eu91CDu70B9u5E73u5747u6D4Bu5149\"><a name=\"中央重点平均测光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>中央重点平均测光</h3><p>该模式主要考虑到一般摄影者喜欢将拍摄主体放在画面中间这个习惯。以画面中心部分亮度作为主要测光依据，同时根据画面边缘的亮度进行调整来觉得曝光。</p>\r\n<p>这种测光模式在拍摄中心构图的景物时效果比较好。比如半身或者特写人像，因为它更多的考虑画面中心的人物，往往能正确的还原人物的肤色。<br><img src=\"/upload/image/3bacd919e0db850ae4ba742a1b12b5085036.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u5C40u90E8u6D4Bu5149\"><a name=\"局部测光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>局部测光</h3><p>局部测光只对画面中央的一块区域画面的某一局部进行测光，与中央重点平均测光最大的区别在于该测光模式不兼顾画面其它地方，而只以中央部分的测光数据为整个画面曝光的依据。</p>\r\n<p>当被摄主体与背景有着强烈明暗反差，而且被摄主体所占画面比例不大时，运用这种测光方式最适合。<br><img src=\"/upload/image/4808beaac484586d518007fd33a79dfa9906.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u70B9u6D4Bu5149\"><a name=\"点测光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>点测光</h3><p>点测光只对画面中央一个很小的区域进行测光，可近似的看成是一个点，相机根据这个较窄区域测得的光线，作为曝光依据，这是一种相当准确的测光方法。<br><img src=\"/upload/image/4b8eaba9327442056d191b2b193729413863.png\" alt=\"\"></p>\r\n', '## 为什么要测光\r\n早起机械相机时代，摄影师拍摄时，主要依靠经验来判断光圈、快门、感光度的组合，来取得照片合适的亮度。现代单反相机已经具备非常完备的测光系统，并能够胜任几乎所有复杂的拍摄场景，使获得正确曝光非常方便快捷。\r\n![](/upload/image/4b6ae84ec7ed7dd73b2a3193b9335fb75792.png)\r\n![](/upload/image/a93ac602f50135e78cd66e33d647b6933586.png)\r\n## 测光模式的使用\r\n### 评价测光\r\n几乎所有相机都将这类测光作为默认的测光模式。评价测光会将画面切割成多个区块，然后分别在各个区块进行测光，可以对画面整体亮度进行判断，计算基本平均的曝光。是目前最先进的智能化测光方式，即使对测光不熟悉的人，用这种方式一般也能够得到曝光毕竟准确的照片。\r\n\r\n这种模式在拍摄顺光的情况下，光照比较均匀的场景时效果最好，目前已经成为许多摄影师和摄影爱好者最常用的测光方式。但是，在对画面内有极端亮度差的物体存在或逆光状态的场景下略显力不从心，有时候会出现曝光不稳定的情况。\r\n![](/upload/image/f479d26b3bf6278c860a27497f54f1248633.png)\r\n### 中央重点平均测光\r\n该模式主要考虑到一般摄影者喜欢将拍摄主体放在画面中间这个习惯。以画面中心部分亮度作为主要测光依据，同时根据画面边缘的亮度进行调整来觉得曝光。\r\n\r\n这种测光模式在拍摄中心构图的景物时效果比较好。比如半身或者特写人像，因为它更多的考虑画面中心的人物，往往能正确的还原人物的肤色。\r\n![](/upload/image/3bacd919e0db850ae4ba742a1b12b5085036.png)\r\n### 局部测光\r\n局部测光只对画面中央的一块区域画面的某一局部进行测光，与中央重点平均测光最大的区别在于该测光模式不兼顾画面其它地方，而只以中央部分的测光数据为整个画面曝光的依据。\r\n\r\n当被摄主体与背景有着强烈明暗反差，而且被摄主体所占画面比例不大时，运用这种测光方式最适合。\r\n![](/upload/image/4808beaac484586d518007fd33a79dfa9906.png)\r\n### 点测光\r\n点测光只对画面中央一个很小的区域进行测光，可近似的看成是一个点，相机根据这个较窄区域测得的光线，作为曝光依据，这是一种相当准确的测光方法。\r\n![](/upload/image/4b8eaba9327442056d191b2b193729413863.png)'),(94, 94, '<h2 id=\"h2-u4EC0u4E48u662Fu66DDu5149u8865u507F\"><a name=\"什么是曝光补偿\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是曝光补偿</h2><p>曝光补偿指的是当我们完成测光，设定光圈快门之后，因环境光线的变化，依据拍摄者的构思对曝光做加减的额外设定，从而让照片更明亮或更昏暗。是控制曝光的非常常用的一个功能。</p>\r\n<h2 id=\"h2-u66DDu5149u8865u507Fu7684u4F7Fu7528\"><a name=\"曝光补偿的使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>曝光补偿的使用</h2><p>面对不同的拍摄场景，曝光补偿有以下几个使用技巧：</p>\r\n<h3 id=\"h3-u88ABu6444u5BF9u8C61u4EAEu5EA6u8F83u9AD8u65F6u9700u4F5Cu6B63u8865u507F\"><a name=\"被摄对象亮度较高时需作正补偿\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>被摄对象亮度较高时需作正补偿</h3><p><img src=\"/upload/image/74bed2a5029c1be042c672285cc9db233074.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u88ABu6444u5BF9u8C61u4EAEu5EA6u8F83u4F4Eu65F6u9700u4F5Cu8D1Fu8865u507F\"><a name=\"被摄对象亮度较低时需作负补偿\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>被摄对象亮度较低时需作负补偿</h3><p><img src=\"/upload/image/55b5740b22e49b26cdd44ab7f0501c783968.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u5F53u88ABu6444u5BF9u8C61u4E0Eu80CCu666Fu5173u7CFBu590Du6742u65F6u9700u7075u6D3Bu5904u7406\"><a name=\"当被摄对象与背景关系复杂时需灵活处理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>当被摄对象与背景关系复杂时需灵活处理</h3><p>在拍摄中我们经常性的遇到以下两种情况，第一种情况是背景比较亮，主体物亮度低，这种情况需要做正补偿。<br><img src=\"/upload/image/0d9c8e24f2323c103adda42d82aaa74c3786.png\" alt=\"\"><br>第二种情况正好相反，景物背景亮度低，而主体亮度高，这种情况需作负补偿。这样，主体不至于曝光过度，而背景更暗，主体物显得更加突出。<br><img src=\"/upload/image/449e41f5b76ec31fddbd355eaa2129f42871.png\" alt=\"\"><br>曝光补偿对于照片的表现有着重要的作用，在控制曝光中我们常用“白加黑减”这四个字来阐述曝光补偿的要领，要对白色物体进行曝光正补偿，对深色调的物体进行曝光负补偿。物体越黑或越白，曝光修正幅度越大。<br><img src=\"/upload/image/369f299cd2ac4bf97257eeba88a59e006675.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5305u56F4u66DDu5149\"><a name=\"包围曝光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>包围曝光</h2><p>包围曝光是一种通过对同一对象拍摄曝光量不同的多张照片“包围”在一起，以获得正确的曝光照片的方法。自动包围曝光会先按相机测光值拍摄一张，然后在其基础上，增加和减少曝光量各拍摄一张，若仍无把握，可重新拍摄多几张，这样就可以拍摄一组曝光量均不同的照片，方便你选择。</p>\r\n', '## 什么是曝光补偿\r\n曝光补偿指的是当我们完成测光，设定光圈快门之后，因环境光线的变化，依据拍摄者的构思对曝光做加减的额外设定，从而让照片更明亮或更昏暗。是控制曝光的非常常用的一个功能。\r\n## 曝光补偿的使用\r\n面对不同的拍摄场景，曝光补偿有以下几个使用技巧：\r\n### 被摄对象亮度较高时需作正补偿\r\n![](/upload/image/74bed2a5029c1be042c672285cc9db233074.png)\r\n### 被摄对象亮度较低时需作负补偿\r\n![](/upload/image/55b5740b22e49b26cdd44ab7f0501c783968.png)\r\n### 当被摄对象与背景关系复杂时需灵活处理\r\n在拍摄中我们经常性的遇到以下两种情况，第一种情况是背景比较亮，主体物亮度低，这种情况需要做正补偿。\r\n![](/upload/image/0d9c8e24f2323c103adda42d82aaa74c3786.png)\r\n第二种情况正好相反，景物背景亮度低，而主体亮度高，这种情况需作负补偿。这样，主体不至于曝光过度，而背景更暗，主体物显得更加突出。\r\n![](/upload/image/449e41f5b76ec31fddbd355eaa2129f42871.png)\r\n曝光补偿对于照片的表现有着重要的作用，在控制曝光中我们常用“白加黑减”这四个字来阐述曝光补偿的要领，要对白色物体进行曝光正补偿，对深色调的物体进行曝光负补偿。物体越黑或越白，曝光修正幅度越大。\r\n![](/upload/image/369f299cd2ac4bf97257eeba88a59e006675.png)\r\n## 包围曝光\r\n包围曝光是一种通过对同一对象拍摄曝光量不同的多张照片“包围”在一起，以获得正确的曝光照片的方法。自动包围曝光会先按相机测光值拍摄一张，然后在其基础上，增加和减少曝光量各拍摄一张，若仍无把握，可重新拍摄多几张，这样就可以拍摄一组曝光量均不同的照片，方便你选择。'),(95, 95, '<h2 id=\"h2-u4E86u89E3u666Fu6DF1\"><a name=\"了解景深\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>了解景深</h2><p>景深的的“景”是指我们要拍摄的景物，“深”就是清晰度度的纵深范围。所谓景深，就是被摄主体前后能够清晰成像的距离范围。从比较清晰的最近点，到比较清晰的最远点之间的距离，就是景深。<br><img src=\"/upload/image/bab0fa55676dbc15d30df3df6d6c29495078.png\" alt=\"\"><br>景深越大，纵深景物的清晰范围也就越大，称为大景深。景深越小，纵深景物的清晰范围也就越小，称为小景深或浅景深。<br><img src=\"/upload/image/5cdc0177aa987c1362008714acdcc3d58913.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u666Fu6DF1u63A7u5236u7684u4E09u8981u7D20\"><a name=\"景深控制的三要素\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>景深控制的三要素</h2><p>景深一般由三个方面来控制：分别是光圈的大小、镜头焦距的长短、拍摄距离的远近。</p>\r\n<h3 id=\"h3--\"><a name=\"光圈越小，景深就越长，光圈越大，景深越浅\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光圈越小，景深就越长，光圈越大，景深越浅</h3><p><img src=\"/upload/image/be3bbf4361c47a44fd7fe1d65a8d0eed7829.png\" alt=\"\"></p>\r\n<h3 id=\"h3--\"><a name=\"镜头焦距越长，景深范围越小，镜头焦距越短，景深范围越大\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>镜头焦距越长，景深范围越小，镜头焦距越短，景深范围越大</h3><p><img src=\"/upload/image/f81d75bf5ed2c1833f84ad18306d0d672060.png\" alt=\"\"></p>\r\n<h3 id=\"h3--\"><a name=\"拍摄距离越近，景深范围越小，距离越远，景深范围越大\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>拍摄距离越近，景深范围越小，距离越远，景深范围越大</h3><p><img src=\"/upload/image/8eeb36b7d80ba65f00ea2d4fad0469b23062.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u666Fu6DF1u63A7u5236u7684u5E94u7528\"><a name=\"景深控制的应用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>景深控制的应用</h2><p>在实际拍摄中，我们要根据拍摄的题材，以及画面预计要达到的效果等，通过光圈、焦距的调节，通过调整距离拍摄对象的远近来控制景深。</p>\r\n<h3 id=\"h3-u6D45u666Fu6DF1u7684u63A7u5236u65B9u6CD5\"><a name=\"浅景深的控制方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>浅景深的控制方法</h3><p>在拍摄人物、花卉、小动物和植物等题材，可利用浅景深的方式来模糊被摄体前后的景物，使背景简洁，更加容易突出主体。</p>\r\n<blockquote>\r\n<p>a.尽可能的靠近被摄物体<br>b.使用大光圈<br>c.使用长焦距</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/868f779a78270bfa89171d59a314b6d47004.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u5927u666Fu6DF1u7684u63A7u5236u65B9u6CD5\"><a name=\"大景深的控制方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>大景深的控制方法</h3><p>在拍摄风光、建筑等题材的照片时，我们常利用大景深来表现整个清晰的场景。在抓拍纪实、运动摄影、新闻摄影当中，首先应该考虑画面的清晰度和曝光的准确性，景深控制就不是画面的主要追求的技术了。</p>\r\n<blockquote>\r\n<p>a.尽可能的远离被摄物体<br>b.使用小光圈<br>c.使用短焦距</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/0f78cf073f8617dd82b11ca607cb04454895.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u666Fu6DF1u9884u6D4Bu6309u94AE\"><a name=\"景深预测按钮\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>景深预测按钮</h3><p>在拍摄过程中，摄影师可以通过取景器里面的影像，大致判断景深的情况。但是，需要提醒大家，取景器景深情况，并不是拍摄时实际景深的效果，因为光圈没有按照你设置的参数收缩，所以取景器所看到的是光圈保持最大状态的景深。可以按下景深预测按钮，从观景窗判断景深效果。</p>\r\n', '## 了解景深\r\n景深的的“景”是指我们要拍摄的景物，“深”就是清晰度度的纵深范围。所谓景深，就是被摄主体前后能够清晰成像的距离范围。从比较清晰的最近点，到比较清晰的最远点之间的距离，就是景深。\r\n![](/upload/image/bab0fa55676dbc15d30df3df6d6c29495078.png)\r\n景深越大，纵深景物的清晰范围也就越大，称为大景深。景深越小，纵深景物的清晰范围也就越小，称为小景深或浅景深。\r\n![](/upload/image/5cdc0177aa987c1362008714acdcc3d58913.png)\r\n## 景深控制的三要素\r\n景深一般由三个方面来控制：分别是光圈的大小、镜头焦距的长短、拍摄距离的远近。\r\n### 光圈越小，景深就越长，光圈越大，景深越浅\r\n![](/upload/image/be3bbf4361c47a44fd7fe1d65a8d0eed7829.png)\r\n### 镜头焦距越长，景深范围越小，镜头焦距越短，景深范围越大\r\n![](/upload/image/f81d75bf5ed2c1833f84ad18306d0d672060.png)\r\n### 拍摄距离越近，景深范围越小，距离越远，景深范围越大\r\n![](/upload/image/8eeb36b7d80ba65f00ea2d4fad0469b23062.png)\r\n## 景深控制的应用\r\n在实际拍摄中，我们要根据拍摄的题材，以及画面预计要达到的效果等，通过光圈、焦距的调节，通过调整距离拍摄对象的远近来控制景深。\r\n### 浅景深的控制方法\r\n在拍摄人物、花卉、小动物和植物等题材，可利用浅景深的方式来模糊被摄体前后的景物，使背景简洁，更加容易突出主体。\r\n> a.尽可能的靠近被摄物体\r\n> b.使用大光圈\r\n> c.使用长焦距\r\n\r\n![](/upload/image/868f779a78270bfa89171d59a314b6d47004.png)\r\n### 大景深的控制方法\r\n在拍摄风光、建筑等题材的照片时，我们常利用大景深来表现整个清晰的场景。在抓拍纪实、运动摄影、新闻摄影当中，首先应该考虑画面的清晰度和曝光的准确性，景深控制就不是画面的主要追求的技术了。\r\n> a.尽可能的远离被摄物体\r\n> b.使用小光圈\r\n> c.使用短焦距\r\n\r\n![](/upload/image/0f78cf073f8617dd82b11ca607cb04454895.png)\r\n\r\n### 景深预测按钮\r\n在拍摄过程中，摄影师可以通过取景器里面的影像，大致判断景深的情况。但是，需要提醒大家，取景器景深情况，并不是拍摄时实际景深的效果，因为光圈没有按照你设置的参数收缩，所以取景器所看到的是光圈保持最大状态的景深。可以按下景深预测按钮，从观景窗判断景深效果。'),(96, 96, '<h2 id=\"h2-u4EC0u4E48u662Fu8272u6E29\"><a name=\"什么是色温\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是色温</h2><p>简单说，就是人们眼睛所感受到光线的颜色变化。色温以开尔文（K）为计算单位。光源中含有红黄成分越多表示色温越低，含有蓝紫成分越多则表示色温越高。通常把色温数值较低的称为“暖光”，呈现“暖调”；色温数值比较高的称为“冷光”，呈现“冷调”。</p>\r\n<h2 id=\"h2-u4E3Au4EC0u4E48u662Fu767Du5E73u8861\"><a name=\"为什么是白平衡\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>为什么是白平衡</h2><p>白平衡字面上的理解是白色的平衡。在单反相机用WB这两个字母表示。通俗的讲，白平衡就是“在不同光线环境中，让相机拍出来的白色物体还原白色”。如果白色还原成白色，那其他景物的影像就会接近人眼的色彩视觉习惯。简单的说就是矫正照片偏色的过程。<br><img src=\"/upload/image/029e81070c9c41b4fdc480577a3001892412.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u767Du5E73u8861u548Cu8272u6E29u7684u5173u7CFB\"><a name=\"白平衡和色温的关系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>白平衡和色温的关系</h2><p>白平衡的调整过程其实就是通过调整色温来控制画面色调，所以，色温对于单反相机而言就是白平衡的问题，彼此有着密切的关联性。因为有色温的差异，我们在拍摄期间要根据光线的不同而经常性调节白平衡，从而相对准确的还原现实色彩。<br><img src=\"/upload/image/4b88dae126970861ecc33a0cce7b26c63300.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u81EAu52A8u767Du5E73u8861\"><a name=\"自动白平衡\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>自动白平衡</h2><p>相机默认的白平衡设置，由相机根据光源色温自动确定白平衡。在阴天或多云天气的自然光源环境下，准确率还是比较高的，但是，一般不适用于闪光灯、荧光灯等人造光源，在这种光源下使用自动白平衡，照片色彩会出现或多或少的偏差。</p>\r\n<h2 id=\"h2-u624Bu52A8u767Du5E73u8861\"><a name=\"手动白平衡\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>手动白平衡</h2><p>根据实际光源色温选择相机上给定的白平衡类型。又分按光源类型分为日光、阴天、闪光灯、白炽灯、荧光灯等多种模式，我们在实际拍摄中，只要按目前的光源环境，选择相应的白平衡模式，就可以比较准确的还原当前画面本来的色彩。</p>\r\n<h2 id=\"h2-u81EAu5B9Au4E49u767Du5E73u8861u7684u65B9u6CD5\"><a name=\"自定义白平衡的方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>自定义白平衡的方法</h2><p>使用专业的白平衡卡，可以是纯白的白色卡，也可以是使用18%的灰卡。<br><img src=\"/upload/image/a02ac9e5310e12e8f428d26db5c17cdd3649.png\" alt=\"\"><br><img src=\"/upload/image/ac59f4475de3df8ba42de9c643c497295110.png\" alt=\"\"></p>\r\n', '## 什么是色温\r\n简单说，就是人们眼睛所感受到光线的颜色变化。色温以开尔文（K）为计算单位。光源中含有红黄成分越多表示色温越低，含有蓝紫成分越多则表示色温越高。通常把色温数值较低的称为“暖光”，呈现“暖调”；色温数值比较高的称为“冷光”，呈现“冷调”。\r\n## 为什么是白平衡\r\n白平衡字面上的理解是白色的平衡。在单反相机用WB这两个字母表示。通俗的讲，白平衡就是“在不同光线环境中，让相机拍出来的白色物体还原白色”。如果白色还原成白色，那其他景物的影像就会接近人眼的色彩视觉习惯。简单的说就是矫正照片偏色的过程。\r\n![](/upload/image/029e81070c9c41b4fdc480577a3001892412.png)\r\n## 白平衡和色温的关系\r\n白平衡的调整过程其实就是通过调整色温来控制画面色调，所以，色温对于单反相机而言就是白平衡的问题，彼此有着密切的关联性。因为有色温的差异，我们在拍摄期间要根据光线的不同而经常性调节白平衡，从而相对准确的还原现实色彩。\r\n![](/upload/image/4b88dae126970861ecc33a0cce7b26c63300.png)\r\n## 自动白平衡\r\n相机默认的白平衡设置，由相机根据光源色温自动确定白平衡。在阴天或多云天气的自然光源环境下，准确率还是比较高的，但是，一般不适用于闪光灯、荧光灯等人造光源，在这种光源下使用自动白平衡，照片色彩会出现或多或少的偏差。\r\n## 手动白平衡\r\n根据实际光源色温选择相机上给定的白平衡类型。又分按光源类型分为日光、阴天、闪光灯、白炽灯、荧光灯等多种模式，我们在实际拍摄中，只要按目前的光源环境，选择相应的白平衡模式，就可以比较准确的还原当前画面本来的色彩。\r\n## 自定义白平衡的方法\r\n使用专业的白平衡卡，可以是纯白的白色卡，也可以是使用18%的灰卡。\r\n![](/upload/image/a02ac9e5310e12e8f428d26db5c17cdd3649.png)\r\n![](/upload/image/ac59f4475de3df8ba42de9c643c497295110.png)'),(97, 97, '<h1 id=\"h1-u62CDu6444u4F4Du7F6E\"><a name=\"拍摄位置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>拍摄位置</h1><p>在考虑构图的过程中，首选要考虑的就是画面中主体物的最佳拍摄位置。由于相机与被摄体的距离不同，而造成被摄体在拍摄画面中所呈现出的范围大小区别也就是我们俗称的景别。构成摄影的景别有以下几种：远景、全景、中景、近景和特写。</p>\r\n<h2 id=\"h2-u6784u6210u6444u5F71u7684u666Fu522B\"><a name=\"构成摄影的景别\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>构成摄影的景别</h2><p>远景：表现气势、强调整体，忽略细节。<br>全景：表现全貌与环境、主体明显。<br>中景：表现主体与辅体关系、情节取胜。<br>近景：突出表现主要部分。<br>特写：刻画细节。</p>\r\n<h3 id=\"h3-u8FDCu666F\"><a name=\"远景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>远景</h3><p>包括景物范围很广，能显示出宽阔的场景和广大的空间。向观众展现被摄场景总的印象，表现大的气势和气氛，但不能表现被摄主体的细节。<br><img src=\"/upload/image/64a9fdd66488393fee82df720657b75b7890.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u5168u666F\"><a name=\"全景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>全景</h3><p>是以完整的包容某一事物或某一具体对象，并有适当空间环境组成的画面。其特点是事物或具体对象有完整的形象，环境也能得到体现。<br><img src=\"/upload/image/86829529009cda81a5cd6a79487c16e04938.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u4E2Du666F\"><a name=\"中景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>中景</h3><p>中景只是包容某一事物或某一具体对象的局部范围画面。比如拍人物，表现膝盖以上相貌的画面为中景（半身人像）。其特点是以表现某一事物的主要部分为中心，常常以情节取胜，环境表现降到次要地位。<br><img src=\"/upload/image/0d7f251c8742940f7755fde2a63013e88717.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u8FD1u666F\"><a name=\"近景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>近景</h3><p>画面包括的景物范围很小，被摄对象能表现出更多的细节，容易给观众留下具体而深刻的印象，不易表现环境背景的特点。<br><img src=\"/upload/image/152c237323536696f844e13b141c4ca97419.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u7279u5199\"><a name=\"特写\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>特写</h3><p>较近景更进一步，让被摄对象的某一局部充满画面，只表现被摄对象的某一细节，从细微处揭示物体的特点，给观众留下很深的印象。<br><img src=\"/upload/image/221093ea0f0a4709ba65350f8872f8f23506.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u62CDu6444u7684u65B9u5411\"><a name=\"拍摄的方向\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>拍摄的方向</h2><p>正面：主体正面形象、对称美、庄重威严、缺乏透视感。</p>\r\n<p>斜侧：透视效果明显、画面生动。</p>\r\n<p>正侧：刻画轮廓、表现人物的神态面目。</p>\r\n<p>背面：含蓄、引起联想。</p>\r\n<h2 id=\"h2-u62CDu6444u7684u9AD8u5EA6\"><a name=\"拍摄的高度\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>拍摄的高度</h2><p>平拍：亲切自然、突出主体。</p>\r\n<p>仰拍：强调夸张、高昂向上。</p>\r\n<p>俯拍：层次充分、场面盛大。</p>\r\n<h1 id=\"h1-u753Bu9762u6784u6210\"><a name=\"画面构成\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>画面构成</h1><p>一幅摄影作品的画面大体可以分为4个部分：主体、陪体、前景与背景。</p>\r\n<h2 id=\"h2-u4E3Bu4F53\"><a name=\"主体\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>主体</h2><p>摄影画面的兴趣中心，主体是摄影画面中要表现的主要对象，也是摄影画面的兴趣中心，是画面表现内容的主要体现者，是组织画面的主要依据。</p>\r\n<blockquote>\r\n<p>主体的作用：<br>提现主题思想，使观众正确理解照片的内容；<br>主体是画面结构中心，有利集中观众的视线。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/139ab99edc08c0300750ff7b7bbcbe146993.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u966Au4F53\"><a name=\"陪体\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>陪体</h2><p>主题内涵特征表达的辅助者</p>\r\n<blockquote>\r\n<p>陪体的作用：<br>与主体共同完成主题思想的表达；<br>增加画面信息量，使画面更自然生动；<br>使画面造型更丰富，更具感染力。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/d7c3da312fb96d93993594a563ae284c1952.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u524Du666F\"><a name=\"前景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>前景</h2><p>离相机最近的景物，前景一般处于主体前面，有明显的特点。其位置可以分布在画面四周，也可遍布画面；可以是实像，也可以是虚像。</p>\r\n<blockquote>\r\n<p>前景的作用<br>渲染主题，具有概括性。<br>增强空间感，强化主观地位；<br>均衡画面；<br>加强装饰性。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/d8b92f25ba94cd4af9dc7b72d316f3c64203.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u80CCu666F\"><a name=\"背景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>背景</h2><p>画面主题的有力烘托着，一幅照片的成功与主体的背景有关。良好的背景能有效的起到烘托主体的作用。</p>\r\n<blockquote>\r\n<p>背景的作用<br>烘托主体，使主体形状、轮廓更加突出；<br>交代环境、点化中心；<br>帮助构图，使画面具有空间感、均衡感等。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/2fd86363e770bf087f14bbd9eea69df43467.png\" alt=\"\"></p>\r\n', '# 拍摄位置\r\n在考虑构图的过程中，首选要考虑的就是画面中主体物的最佳拍摄位置。由于相机与被摄体的距离不同，而造成被摄体在拍摄画面中所呈现出的范围大小区别也就是我们俗称的景别。构成摄影的景别有以下几种：远景、全景、中景、近景和特写。\r\n## 构成摄影的景别\r\n远景：表现气势、强调整体，忽略细节。\r\n全景：表现全貌与环境、主体明显。\r\n中景：表现主体与辅体关系、情节取胜。\r\n近景：突出表现主要部分。\r\n特写：刻画细节。\r\n### 远景\r\n包括景物范围很广，能显示出宽阔的场景和广大的空间。向观众展现被摄场景总的印象，表现大的气势和气氛，但不能表现被摄主体的细节。\r\n![](/upload/image/64a9fdd66488393fee82df720657b75b7890.png)\r\n### 全景\r\n是以完整的包容某一事物或某一具体对象，并有适当空间环境组成的画面。其特点是事物或具体对象有完整的形象，环境也能得到体现。\r\n![](/upload/image/86829529009cda81a5cd6a79487c16e04938.png)\r\n### 中景\r\n中景只是包容某一事物或某一具体对象的局部范围画面。比如拍人物，表现膝盖以上相貌的画面为中景（半身人像）。其特点是以表现某一事物的主要部分为中心，常常以情节取胜，环境表现降到次要地位。\r\n![](/upload/image/0d7f251c8742940f7755fde2a63013e88717.png)\r\n### 近景\r\n画面包括的景物范围很小，被摄对象能表现出更多的细节，容易给观众留下具体而深刻的印象，不易表现环境背景的特点。\r\n![](/upload/image/152c237323536696f844e13b141c4ca97419.png)\r\n### 特写\r\n较近景更进一步，让被摄对象的某一局部充满画面，只表现被摄对象的某一细节，从细微处揭示物体的特点，给观众留下很深的印象。\r\n![](/upload/image/221093ea0f0a4709ba65350f8872f8f23506.png)\r\n## 拍摄的方向\r\n\r\n正面：主体正面形象、对称美、庄重威严、缺乏透视感。\r\n\r\n斜侧：透视效果明显、画面生动。\r\n\r\n正侧：刻画轮廓、表现人物的神态面目。\r\n\r\n背面：含蓄、引起联想。\r\n\r\n## 拍摄的高度\r\n\r\n平拍：亲切自然、突出主体。\r\n\r\n仰拍：强调夸张、高昂向上。\r\n\r\n俯拍：层次充分、场面盛大。\r\n\r\n# 画面构成\r\n一幅摄影作品的画面大体可以分为4个部分：主体、陪体、前景与背景。\r\n\r\n## 主体\r\n摄影画面的兴趣中心，主体是摄影画面中要表现的主要对象，也是摄影画面的兴趣中心，是画面表现内容的主要体现者，是组织画面的主要依据。\r\n> 主体的作用：\r\n> 提现主题思想，使观众正确理解照片的内容；\r\n> 主体是画面结构中心，有利集中观众的视线。\r\n\r\n![](/upload/image/139ab99edc08c0300750ff7b7bbcbe146993.png)\r\n\r\n## 陪体\r\n主题内涵特征表达的辅助者\r\n> 陪体的作用：\r\n> 与主体共同完成主题思想的表达；\r\n> 增加画面信息量，使画面更自然生动；\r\n> 使画面造型更丰富，更具感染力。\r\n\r\n![](/upload/image/d7c3da312fb96d93993594a563ae284c1952.png)\r\n\r\n## 前景\r\n离相机最近的景物，前景一般处于主体前面，有明显的特点。其位置可以分布在画面四周，也可遍布画面；可以是实像，也可以是虚像。\r\n> 前景的作用\r\n> 渲染主题，具有概括性。\r\n> 增强空间感，强化主观地位；\r\n> 均衡画面；\r\n> 加强装饰性。\r\n\r\n![](/upload/image/d8b92f25ba94cd4af9dc7b72d316f3c64203.png)\r\n\r\n## 背景\r\n画面主题的有力烘托着，一幅照片的成功与主体的背景有关。良好的背景能有效的起到烘托主体的作用。\r\n> 背景的作用\r\n> 烘托主体，使主体形状、轮廓更加突出；\r\n> 交代环境、点化中心；\r\n> 帮助构图，使画面具有空间感、均衡感等。\r\n\r\n![](/upload/image/2fd86363e770bf087f14bbd9eea69df43467.png)'),(98, 98, '<p>点是以细小的点状物形成画面造型的方法，线是以线条形成画面造型的方法，块是以块状物形成画面造型的方法。点、线、面是平面构成中的三大要素，在摄影构图中起着支配画面布局、觉得视觉观看效果的作用。</p>\r\n<h2 id=\"h2-u70B9u6027u683Cu7279u5F81\"><a name=\"点性格特征\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>点性格特征</h2><p>自由、不受约束、轻松、跳跃、不安分、飘逸。<br>点是最基本的视觉元素，是构成画面的视觉、情绪的核心。<br><img src=\"/upload/image/5f1131655ea6e0d9a429942f89cb25936570.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u7EBFu7684u6027u683Cu7279u5F81\"><a name=\"线的性格特征\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>线的性格特征</h2><p>连贯、轻松、轻盈、有韵律、造型感、引导性。<br>线的组合往往造成画面中力的走向和运行节奏，也为点的出现提供了框架画面构图的选择，对视觉的引导、控制是由所有的视觉元素共同完成。<br><img src=\"/upload/image/f61ab547264d85b181fc8054025f4e823201.png\" alt=\"\"><br>直线会唤起对地平线的印象，从而引发对广大的空间、距离等概念的联想。水平直线本身也会给人以平衡、安静的视觉感受。<br><img src=\"/upload/image/44d318bbf16761077add96c5e2f236cd2367.png\" alt=\"\"><br>发射线构图有增加视觉张力的效果，给人一种力度的感觉。发射线构图不仅可以制造、烘托气氛，还可以使视线焦点更为集中。<br><img src=\"/upload/image/006a9a310cbbc7971357a9667c7ce7b34587.png\" alt=\"\"><br>垂直线给人耸立的感觉和高度的联想，与之相伴产生的是理性、冷静、精确、疏远等心理感觉。<br><img src=\"/upload/image/9e6fefb57d193ee03f50e79bd2e4f61f8456.png\" alt=\"\"><br>曲线表现优雅、美丽和可爱，是一种轻松愉快的线条，人的眼睛很容易追随这种线条。<br><img src=\"/upload/image/2c105e6c24d1579d217e3cda6fea08874579.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u9762u7684u6027u683Cu7279u5F81\"><a name=\"面的性格特征\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>面的性格特征</h2><p>稳定、沉重、安全、包容性、分量感、把控大局。<br>面的大小、形状、位置的变化使面在构图中扮演着不同的角色。<br><img src=\"/upload/image/81fae4dbacd6a11f0b733d47f57e3fa63523.png\" alt=\"\"><br>画面因线的分割而产生面。<br><img src=\"/upload/image/efb7fb47666d423b588d1e327551bead1525.png\" alt=\"\"><br>因黑白或彩色的分布而产生面。<br><img src=\"/upload/image/32a454819d1fe7aca9c6952cabd0a2ed2607.png\" alt=\"\"><br>大面积的颜色会给人的视觉以强烈的冲击，小面积的面则会让人感觉轻松许多。<br><img src=\"/upload/image/44bdf1c4097c31eff0e47f0fda809ce51255.png\" alt=\"\"></p>\r\n', '点是以细小的点状物形成画面造型的方法，线是以线条形成画面造型的方法，块是以块状物形成画面造型的方法。点、线、面是平面构成中的三大要素，在摄影构图中起着支配画面布局、觉得视觉观看效果的作用。\r\n## 点性格特征\r\n自由、不受约束、轻松、跳跃、不安分、飘逸。\r\n点是最基本的视觉元素，是构成画面的视觉、情绪的核心。\r\n![](/upload/image/5f1131655ea6e0d9a429942f89cb25936570.png)\r\n## 线的性格特征\r\n连贯、轻松、轻盈、有韵律、造型感、引导性。\r\n线的组合往往造成画面中力的走向和运行节奏，也为点的出现提供了框架画面构图的选择，对视觉的引导、控制是由所有的视觉元素共同完成。\r\n![](/upload/image/f61ab547264d85b181fc8054025f4e823201.png)\r\n直线会唤起对地平线的印象，从而引发对广大的空间、距离等概念的联想。水平直线本身也会给人以平衡、安静的视觉感受。\r\n![](/upload/image/44d318bbf16761077add96c5e2f236cd2367.png)\r\n发射线构图有增加视觉张力的效果，给人一种力度的感觉。发射线构图不仅可以制造、烘托气氛，还可以使视线焦点更为集中。\r\n![](/upload/image/006a9a310cbbc7971357a9667c7ce7b34587.png)\r\n垂直线给人耸立的感觉和高度的联想，与之相伴产生的是理性、冷静、精确、疏远等心理感觉。\r\n![](/upload/image/9e6fefb57d193ee03f50e79bd2e4f61f8456.png)\r\n曲线表现优雅、美丽和可爱，是一种轻松愉快的线条，人的眼睛很容易追随这种线条。\r\n![](/upload/image/2c105e6c24d1579d217e3cda6fea08874579.png)\r\n## 面的性格特征\r\n稳定、沉重、安全、包容性、分量感、把控大局。\r\n面的大小、形状、位置的变化使面在构图中扮演着不同的角色。\r\n![](/upload/image/81fae4dbacd6a11f0b733d47f57e3fa63523.png)\r\n画面因线的分割而产生面。\r\n![](/upload/image/efb7fb47666d423b588d1e327551bead1525.png)\r\n因黑白或彩色的分布而产生面。\r\n![](/upload/image/32a454819d1fe7aca9c6952cabd0a2ed2607.png)\r\n大面积的颜色会给人的视觉以强烈的冲击，小面积的面则会让人感觉轻松许多。\r\n![](/upload/image/44bdf1c4097c31eff0e47f0fda809ce51255.png)'),(99, 99, '<p>Redis 字符串数据类型的相关命令用于管理 redis 字符串值。</p>\r\n<h2 id=\"h2-u8BEDu6CD5\"><a name=\"语法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>语法</h2><pre><code>redis 127.0.0.1:6379 &gt; COMMAND KEY_NAME\r\n</code></pre><h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><pre><code>127.0.0.1:6379&gt; set hello redis\r\nOK\r\n127.0.0.1:6379&gt; get hello\r\n&quot;redis&quot;\r\n</code></pre><h2 id=\"h2-redis-\"><a name=\"Redis 字符串命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 字符串命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>序号</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>SET key value</td>\r\n<td>设置指定 key 的值</td>\r\n</tr>\r\n<tr>\r\n<td>GET key</td>\r\n<td>获取指定 key 的值</td>\r\n</tr>\r\n<tr>\r\n<td>GETRANGE key start end</td>\r\n<td>返回 key 中字符串值的子字符</td>\r\n</tr>\r\n<tr>\r\n<td>GETSET key value</td>\r\n<td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)</td>\r\n</tr>\r\n<tr>\r\n<td>GETBIT key offset</td>\r\n<td>对 key 所储存的字符串值，获取指定偏移量上的位(bit)</td>\r\n</tr>\r\n<tr>\r\n<td>MGET key1 [key2..]</td>\r\n<td>获取所有(一个或多个)给定 key 的值</td>\r\n</tr>\r\n<tr>\r\n<td>SETBIT key offset value</td>\r\n<td>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)</td>\r\n</tr>\r\n<tr>\r\n<td>SETEX key seconds value</td>\r\n<td>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)</td>\r\n</tr>\r\n<tr>\r\n<td>SETNX key value</td>\r\n<td>只有在 key 不存在时设置 key 的值</td>\r\n</tr>\r\n<tr>\r\n<td>SETRANGE key offset value</td>\r\n<td>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始</td>\r\n</tr>\r\n<tr>\r\n<td>STRLEN key</td>\r\n<td>返回 key 所储存的字符串值的长度</td>\r\n</tr>\r\n<tr>\r\n<td>MSET key value [key value …]</td>\r\n<td>同时设置一个或多个 key-value 对</td>\r\n</tr>\r\n<tr>\r\n<td>MSETNX key value [key value …]</td>\r\n<td>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</td>\r\n</tr>\r\n<tr>\r\n<td>PSETEX key milliseconds value</td>\r\n<td>这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位</td>\r\n</tr>\r\n<tr>\r\n<td>INCR key</td>\r\n<td>将 key 中储存的数字值增一</td>\r\n</tr>\r\n<tr>\r\n<td>INCRBY key increment</td>\r\n<td>将 key 所储存的值加上给定的增量值（increment）</td>\r\n</tr>\r\n<tr>\r\n<td>INCRBYFLOAT key increment</td>\r\n<td>将 key 所储存的值加上给定的浮点增量值（increment）</td>\r\n</tr>\r\n<tr>\r\n<td>DECR key</td>\r\n<td>将 key 中储存的数字值减一</td>\r\n</tr>\r\n<tr>\r\n<td>DECRBY key decrement</td>\r\n<td>key 所储存的值减去给定的减量值（decrement）</td>\r\n</tr>\r\n<tr>\r\n<td>APPEND key value</td>\r\n<td>如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis 字符串数据类型的相关命令用于管理 redis 字符串值。\r\n## 语法\r\n```\r\nredis 127.0.0.1:6379 > COMMAND KEY_NAME\r\n```\r\n## 实例\r\n```\r\n127.0.0.1:6379> set hello redis\r\nOK\r\n127.0.0.1:6379> get hello\r\n\"redis\"\r\n```\r\n## Redis 字符串命令\r\n| 序号  | 描述 |\r\n| ------------ | ------------ |\r\n| SET key value |  设置指定 key 的值 |\r\n| GET key | 获取指定 key 的值 |\r\n| GETRANGE key start end  | 返回 key 中字符串值的子字符 |\r\n| GETSET key value | 将给定 key 的值设为 value ，并返回 key 的旧值(old value) |\r\n| GETBIT key offset | 对 key 所储存的字符串值，获取指定偏移量上的位(bit) |\r\n| MGET key1 [key2..] | 获取所有(一个或多个)给定 key 的值 |\r\n| SETBIT key offset value | 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit) |\r\n| SETEX key seconds value | 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位) |\r\n| SETNX key value | 只有在 key 不存在时设置 key 的值 |\r\n| SETRANGE key offset value | 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始 |\r\n| STRLEN key | 返回 key 所储存的字符串值的长度 |\r\n| MSET key value [key value ...] | 同时设置一个或多个 key-value 对 |\r\n| MSETNX key value [key value ...]  | 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在 |\r\n| PSETEX key milliseconds value | 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位 |\r\n| INCR key | 将 key 中储存的数字值增一 |\r\n| INCRBY key increment | 将 key 所储存的值加上给定的增量值（increment） |\r\n| INCRBYFLOAT key increment | 将 key 所储存的值加上给定的浮点增量值（increment） |\r\n| DECR key | 将 key 中储存的数字值减一 |\r\n| DECRBY key decrement | key 所储存的值减去给定的减量值（decrement） |\r\n| APPEND key value | 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾 |'),(100, 100, '<p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>\r\n<p>Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。</p>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><pre><code>127.0.0.1:6379&gt; HMSET hello 1 2 3 4 5 6\r\nOK\r\n127.0.0.1:6379&gt; HGETALL hello\r\n1) &quot;1&quot;\r\n2) &quot;2&quot;\r\n3) &quot;3&quot;\r\n4) &quot;4&quot;\r\n5) &quot;5&quot;\r\n6) &quot;6&quot;\r\n</code></pre><h2 id=\"h2-redis-hash-\"><a name=\"Redis hash 命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis hash 命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>HDEL key field1 [field2]</td>\r\n<td>删除一个或多个哈希表字段</td>\r\n</tr>\r\n<tr>\r\n<td>HEXISTS key field</td>\r\n<td>查看哈希表 key 中，指定的字段是否存在</td>\r\n</tr>\r\n<tr>\r\n<td>HGETALL key</td>\r\n<td>获取在哈希表中指定 key 的所有字段和值</td>\r\n</tr>\r\n<tr>\r\n<td>HINCRBY key field increment</td>\r\n<td>为哈希表 key 中的指定字段的整数值加上增量 increment</td>\r\n</tr>\r\n<tr>\r\n<td>HINCRBYFLOAT key field increment</td>\r\n<td>为哈希表 key 中的指定字段的浮点数值加上增量 increment</td>\r\n</tr>\r\n<tr>\r\n<td>HKEYS key</td>\r\n<td>获取所有哈希表中的字段</td>\r\n</tr>\r\n<tr>\r\n<td>HLEN key</td>\r\n<td>获取哈希表中字段的数量</td>\r\n</tr>\r\n<tr>\r\n<td>HMGET key field1 [field2]</td>\r\n<td>获取所有给定字段的值</td>\r\n</tr>\r\n<tr>\r\n<td>HMSET key field1 value1 [field2 value2 ]</td>\r\n<td>同时将多个 field-value (域-值)对设置到哈希表 key 中</td>\r\n</tr>\r\n<tr>\r\n<td>HSET key field value</td>\r\n<td>将哈希表 key 中的字段 field 的值设为 value</td>\r\n</tr>\r\n<tr>\r\n<td>HSETNX key field value</td>\r\n<td>只有在字段 field 不存在时，设置哈希表字段的值</td>\r\n</tr>\r\n<tr>\r\n<td>HVALS key</td>\r\n<td>获取哈希表中所有值</td>\r\n</tr>\r\n<tr>\r\n<td>HSCAN key cursor [MATCH pattern] [COUNT count]</td>\r\n<td>迭代哈希表中的键值对</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。\r\n\r\nRedis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。\r\n## 实例\r\n```\r\n127.0.0.1:6379> HMSET hello 1 2 3 4 5 6\r\nOK\r\n127.0.0.1:6379> HGETALL hello\r\n1) \"1\"\r\n2) \"2\"\r\n3) \"3\"\r\n4) \"4\"\r\n5) \"5\"\r\n6) \"6\"\r\n```\r\n## Redis hash 命令\r\n| 命令  | 描述  |\r\n| ------------ | ------------ |\r\n| HDEL key field1 [field2] | 删除一个或多个哈希表字段 |\r\n| HEXISTS key field  | 查看哈希表 key 中，指定的字段是否存在 |\r\n| HGETALL key  | 获取在哈希表中指定 key 的所有字段和值 |\r\n| HINCRBY key field increment  | 为哈希表 key 中的指定字段的整数值加上增量 increment  |\r\n| HINCRBYFLOAT key field increment  | 为哈希表 key 中的指定字段的浮点数值加上增量 increment |\r\n| HKEYS key  | 获取所有哈希表中的字段 |\r\n| HLEN key  | 获取哈希表中字段的数量 |\r\n| HMGET key field1 [field2]  | 获取所有给定字段的值 |\r\n| HMSET key field1 value1 [field2 value2 ]  | 同时将多个 field-value (域-值)对设置到哈希表 key 中 |\r\n| HSET key field value  | 将哈希表 key 中的字段 field 的值设为 value |\r\n| HSETNX key field value  | 只有在字段 field 不存在时，设置哈希表字段的值 |\r\n| HVALS key | 获取哈希表中所有值 |\r\n| HSCAN key cursor [MATCH pattern] [COUNT count]  | 迭代哈希表中的键值对 |\r\n'),(101, 101, '<p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><pre><code>127.0.0.1:6379&gt; LPUSH hello redis\r\n(integer) 1\r\n127.0.0.1:6379&gt; LPUSH hello mongodb\r\n(integer) 2\r\n127.0.0.1:6379&gt; LPUSH hello mysql\r\n(integer) 3\r\n127.0.0.1:6379&gt; LRANGE hello 0 10\r\n1) &quot;mysql&quot;\r\n2) &quot;mongodb&quot;\r\n3) &quot;redis&quot;\r\n</code></pre><h2 id=\"h2-redis-\"><a name=\"Redis 列表命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 列表命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>BLPOP key1 [key2 ] timeout</td>\r\n<td>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\r\n</tr>\r\n<tr>\r\n<td>BRPOP key1 [key2 ] timeout</td>\r\n<td>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\r\n</tr>\r\n<tr>\r\n<td>BRPOPLPUSH source destination timeout</td>\r\n<td>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\r\n</tr>\r\n<tr>\r\n<td>LINDEX key index</td>\r\n<td>通过索引获取列表中的元素</td>\r\n</tr>\r\n<tr>\r\n<td>LINSERT key BEFORE\\AFTER pivot value</td>\r\n<td>在列表的元素前或者后插入元素</td>\r\n</tr>\r\n<tr>\r\n<td>LLEN key</td>\r\n<td>获取列表长度</td>\r\n</tr>\r\n<tr>\r\n<td>LPOP key</td>\r\n<td>移出并获取列表的第一个元素</td>\r\n</tr>\r\n<tr>\r\n<td>LPUSH key value1 [value2]</td>\r\n<td>将一个或多个值插入到列表头部</td>\r\n</tr>\r\n<tr>\r\n<td>LPUSHX key value</td>\r\n<td>将一个值插入到已存在的列表头部</td>\r\n</tr>\r\n<tr>\r\n<td>LRANGE key start stop</td>\r\n<td>获取列表指定范围内的元素</td>\r\n</tr>\r\n<tr>\r\n<td>LREM key count value</td>\r\n<td>移除列表元素</td>\r\n</tr>\r\n<tr>\r\n<td>LSET key index value</td>\r\n<td>通过索引设置列表元素的值</td>\r\n</tr>\r\n<tr>\r\n<td>LTRIM key start stop</td>\r\n<td>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>\r\n</tr>\r\n<tr>\r\n<td>RPOP key</td>\r\n<td>移除列表的最后一个元素，返回值为移除的元素。</td>\r\n</tr>\r\n<tr>\r\n<td>RPOPLPUSH source destination</td>\r\n<td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>\r\n</tr>\r\n<tr>\r\n<td>RPUSH key value1 [value2]</td>\r\n<td>在列表中添加一个或多个值</td>\r\n</tr>\r\n<tr>\r\n<td>RPUSHX key value</td>\r\n<td>为已存在的列表添加值</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。\r\n## 实例\r\n```\r\n127.0.0.1:6379> LPUSH hello redis\r\n(integer) 1\r\n127.0.0.1:6379> LPUSH hello mongodb\r\n(integer) 2\r\n127.0.0.1:6379> LPUSH hello mysql\r\n(integer) 3\r\n127.0.0.1:6379> LRANGE hello 0 10\r\n1) \"mysql\"\r\n2) \"mongodb\"\r\n3) \"redis\"\r\n```\r\n## Redis 列表命令\r\n| 命令 | 描述 |\r\n| ------------ | ------------ |\r\n| BLPOP key1 [key2 ] timeout  | 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。|\r\n| BRPOP key1 [key2 ] timeout  | 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。|\r\n| BRPOPLPUSH source destination timeout  | 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 |\r\n| LINDEX key index  | 通过索引获取列表中的元素 |\r\n| LINSERT key BEFORE\\AFTER pivot value  | 在列表的元素前或者后插入元素 |\r\n| LLEN key  | 获取列表长度 |\r\n| LPOP key  | 移出并获取列表的第一个元素 |\r\n| LPUSH key value1 [value2]  | 将一个或多个值插入到列表头部 |\r\n| LPUSHX key value  | 将一个值插入到已存在的列表头部 |\r\n| LRANGE key start stop  | 获取列表指定范围内的元素 |\r\n| LREM key count value  | 移除列表元素 |\r\n| LSET key index value  | 通过索引设置列表元素的值 |\r\n| LTRIM key start stop  | 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。 |\r\n| RPOP key  | 移除列表的最后一个元素，返回值为移除的元素。 |\r\n| RPOPLPUSH source destination  | 移除列表的最后一个元素，并将该元素添加到另一个列表并返回 |\r\n| RPUSH key value1 [value2]  | 在列表中添加一个或多个值 |\r\n| RPUSHX key value  | 为已存在的列表添加值 |\r\n'),(102, 102, '<p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>\r\n<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>\r\n<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><pre><code>127.0.0.1:6379&gt; SADD hello redis\r\n(integer) 1\r\n127.0.0.1:6379&gt; SADD hello mongodb\r\n(integer) 1\r\n127.0.0.1:6379&gt; SADD hello mysql\r\n(integer) 1\r\n127.0.0.1:6379&gt; SADD hello mysql\r\n(integer) 0\r\n127.0.0.1:6379&gt; SMEMBERS hello\r\n1) &quot;mysql&quot;\r\n2) &quot;redis&quot;\r\n3) &quot;mongodb&quot;\r\n</code></pre><h2 id=\"h2-redis-\"><a name=\"Redis 集合命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 集合命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>SADD key member1 [member2]</td>\r\n<td>向集合添加一个或多个成员</td>\r\n</tr>\r\n<tr>\r\n<td>SCARD key</td>\r\n<td>获取集合的成员数</td>\r\n</tr>\r\n<tr>\r\n<td>SDIFF key1 [key2]</td>\r\n<td>返回给定所有集合的差集</td>\r\n</tr>\r\n<tr>\r\n<td>SDIFFSTORE destination key1 [key2]</td>\r\n<td>返回给定所有集合的差集并存储在 destination 中</td>\r\n</tr>\r\n<tr>\r\n<td>SINTER key1 [key2]</td>\r\n<td>返回给定所有集合的交集</td>\r\n</tr>\r\n<tr>\r\n<td>SINTERSTORE destination key1 [key2]</td>\r\n<td>返回给定所有集合的交集并存储在 destination 中</td>\r\n</tr>\r\n<tr>\r\n<td>SISMEMBER key member</td>\r\n<td>判断 member 元素是否是集合 key 的成员</td>\r\n</tr>\r\n<tr>\r\n<td>SMEMBERS key</td>\r\n<td>返回集合中的所有成员</td>\r\n</tr>\r\n<tr>\r\n<td>SMOVE source destination member</td>\r\n<td>将 member 元素从 source 集合移动到 destination 集合</td>\r\n</tr>\r\n<tr>\r\n<td>SPOP key</td>\r\n<td>移除并返回集合中的一个随机元素</td>\r\n</tr>\r\n<tr>\r\n<td>SRANDMEMBER key [count]</td>\r\n<td>返回集合中一个或多个随机数</td>\r\n</tr>\r\n<tr>\r\n<td>SREM key member1 [member2]</td>\r\n<td>移除集合中一个或多个成员</td>\r\n</tr>\r\n<tr>\r\n<td>SUNION key1 [key2]</td>\r\n<td>返回所有给定集合的并集</td>\r\n</tr>\r\n<tr>\r\n<td>SUNIONSTORE destination key1 [key2]</td>\r\n<td>所有给定集合的并集存储在 destination 集合中</td>\r\n</tr>\r\n<tr>\r\n<td>SSCAN key cursor [MATCH pattern] [COUNT count]</td>\r\n<td>迭代集合中的元素</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。\r\n\r\nRedis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。\r\n\r\n集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。\r\n\r\n## 实例\r\n```\r\n127.0.0.1:6379> SADD hello redis\r\n(integer) 1\r\n127.0.0.1:6379> SADD hello mongodb\r\n(integer) 1\r\n127.0.0.1:6379> SADD hello mysql\r\n(integer) 1\r\n127.0.0.1:6379> SADD hello mysql\r\n(integer) 0\r\n127.0.0.1:6379> SMEMBERS hello\r\n1) \"mysql\"\r\n2) \"redis\"\r\n3) \"mongodb\"\r\n```\r\n## Redis 集合命令\r\n| 命令 | 描述 |\r\n| ------------ | ------------ |\r\n| SADD key member1 [member2] | 向集合添加一个或多个成员 |\r\n| SCARD key | 获取集合的成员数 |\r\n| SDIFF key1 [key2] | 返回给定所有集合的差集 |\r\n| SDIFFSTORE destination key1 [key2]  | 返回给定所有集合的差集并存储在 destination 中 |\r\n| SINTER key1 [key2] | 返回给定所有集合的交集 |\r\n| SINTERSTORE destination key1 [key2] | 返回给定所有集合的交集并存储在 destination 中 |\r\n| SISMEMBER key member | 判断 member 元素是否是集合 key 的成员 |\r\n| SMEMBERS key | 返回集合中的所有成员 |\r\n| SMOVE source destination member | 将 member 元素从 source 集合移动到 destination 集合 |\r\n| SPOP key | 移除并返回集合中的一个随机元素 |\r\n| SRANDMEMBER key [count] | 返回集合中一个或多个随机数 |\r\n| SREM key member1 [member2] | 移除集合中一个或多个成员 |\r\n| SUNION key1 [key2] | 返回所有给定集合的并集 |\r\n| SUNIONSTORE destination key1 [key2] | 所有给定集合的并集存储在 destination 集合中 |\r\n| SSCAN key cursor [MATCH pattern] [COUNT count]  | 迭代集合中的元素 |\r\n'),(103, 103, '<p>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</p>\r\n<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\r\n<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>\r\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><pre><code>127.0.0.1:6379&gt; ZADD hello 1 redis\r\n(integer) 1\r\n127.0.0.1:6379&gt; ZADD hello 2 mongodb\r\n(integer) 1\r\n127.0.0.1:6379&gt; ZADD hello 3 mysql\r\n(integer) 1\r\n127.0.0.1:6379&gt; ZADD hello 3 mysql\r\n(integer) 0\r\n127.0.0.1:6379&gt; ZADD hello 4 mysql\r\n(integer) 0\r\n127.0.0.1:6379&gt; ZRANGE hello 0 10 WITHSCORES\r\n1) &quot;redis&quot;\r\n2) &quot;1&quot;\r\n3) &quot;mongodb&quot;\r\n4) &quot;2&quot;\r\n5) &quot;mysql&quot;\r\n6) &quot;4&quot;\r\n</code></pre><h2 id=\"h2-redis-\"><a name=\"Redis 有序集合命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 有序集合命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>ZADD key score1 member1 [score2 member2]</td>\r\n<td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>\r\n</tr>\r\n<tr>\r\n<td>ZCARD key</td>\r\n<td>获取有序集合的成员数</td>\r\n</tr>\r\n<tr>\r\n<td>ZCOUNT key min max</td>\r\n<td>计算在有序集合中指定区间分数的成员数</td>\r\n</tr>\r\n<tr>\r\n<td>ZINCRBY key increment member</td>\r\n<td>有序集合中对指定成员的分数加上增量 increment</td>\r\n</tr>\r\n<tr>\r\n<td>ZINTERSTORE destination numkeys key [key …]</td>\r\n<td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td>\r\n</tr>\r\n<tr>\r\n<td>ZLEXCOUNT key min max</td>\r\n<td>在有序集合中计算指定字典区间内成员数量</td>\r\n</tr>\r\n<tr>\r\n<td>ZRANGE key start stop [WITHSCORES]</td>\r\n<td>通过索引区间返回有序集合指定区间内的成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZRANGEBYLEX key min max [LIMIT offset count]</td>\r\n<td>通过字典区间返回有序集合的成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</td>\r\n<td>通过分数返回有序集合指定区间内的成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZRANK key member</td>\r\n<td>返回有序集合中指定成员的索引</td>\r\n</tr>\r\n<tr>\r\n<td>ZREM key member [member …]</td>\r\n<td>移除有序集合中的一个或多个成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZREMRANGEBYLEX key min max</td>\r\n<td>移除有序集合中给定的字典区间的所有成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZREMRANGEBYRANK key start stop</td>\r\n<td>移除有序集合中给定的排名区间的所有成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZREMRANGEBYSCORE key min max</td>\r\n<td>移除有序集合中给定的分数区间的所有成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZREVRANGE key start stop [WITHSCORES]</td>\r\n<td>返回有序集中指定区间内的成员，通过索引，分数从高到低</td>\r\n</tr>\r\n<tr>\r\n<td>ZREVRANGEBYSCORE key max min [WITHSCORES]</td>\r\n<td>返回有序集中指定分数区间内的成员，分数从高到低排序</td>\r\n</tr>\r\n<tr>\r\n<td>ZREVRANK key member</td>\r\n<td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td>\r\n</tr>\r\n<tr>\r\n<td>ZSCORE key member</td>\r\n<td>返回有序集中，成员的分数值</td>\r\n</tr>\r\n<tr>\r\n<td>ZUNIONSTORE destination numkeys key [key …]</td>\r\n<td>计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>\r\n</tr>\r\n<tr>\r\n<td>ZSCAN key cursor [MATCH pattern] [COUNT count]</td>\r\n<td>迭代有序集合中的元素（包括元素成员和元素分值）</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。\r\n\r\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\r\n\r\n有序集合的成员是唯一的,但分数(score)却可以重复。\r\n\r\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。\r\n\r\n## 实例\r\n```\r\n127.0.0.1:6379> ZADD hello 1 redis\r\n(integer) 1\r\n127.0.0.1:6379> ZADD hello 2 mongodb\r\n(integer) 1\r\n127.0.0.1:6379> ZADD hello 3 mysql\r\n(integer) 1\r\n127.0.0.1:6379> ZADD hello 3 mysql\r\n(integer) 0\r\n127.0.0.1:6379> ZADD hello 4 mysql\r\n(integer) 0\r\n127.0.0.1:6379> ZRANGE hello 0 10 WITHSCORES\r\n1) \"redis\"\r\n2) \"1\"\r\n3) \"mongodb\"\r\n4) \"2\"\r\n5) \"mysql\"\r\n6) \"4\"\r\n```\r\n## Redis 有序集合命令\r\n| 命令  |  描述 |\r\n| ------------ | ------------ |\r\n| ZADD key score1 member1 [score2 member2]  | 向有序集合添加一个或多个成员，或者更新已存在成员的分数  |\r\n| ZCARD key  | 获取有序集合的成员数  |\r\n| ZCOUNT key min max | 计算在有序集合中指定区间分数的成员数 |\r\n| ZINCRBY key increment member | 有序集合中对指定成员的分数加上增量 increment |\r\n| ZINTERSTORE destination numkeys key [key ...] | 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中 |\r\n| ZLEXCOUNT key min max | 在有序集合中计算指定字典区间内成员数量 |\r\n| ZRANGE key start stop [WITHSCORES] | 通过索引区间返回有序集合指定区间内的成员 |\r\n| ZRANGEBYLEX key min max [LIMIT offset count] | 通过字典区间返回有序集合的成员 |\r\n| ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] | 通过分数返回有序集合指定区间内的成员 |\r\n| ZRANK key member | 返回有序集合中指定成员的索引 |\r\n| ZREM key member [member ...] | 移除有序集合中的一个或多个成员 |\r\n| ZREMRANGEBYLEX key min max | 移除有序集合中给定的字典区间的所有成员 |\r\n| ZREMRANGEBYRANK key start stop | 移除有序集合中给定的排名区间的所有成员 |\r\n| ZREMRANGEBYSCORE key min max | 移除有序集合中给定的分数区间的所有成员 |\r\n| ZREVRANGE key start stop [WITHSCORES] | 返回有序集中指定区间内的成员，通过索引，分数从高到低 |\r\n| ZREVRANGEBYSCORE key max min [WITHSCORES] | 返回有序集中指定分数区间内的成员，分数从高到低排序 |\r\n| ZREVRANK key member | 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序 |\r\n| ZSCORE key member | 返回有序集中，成员的分数值 |\r\n| ZUNIONSTORE destination numkeys key [key ...] | 计算给定的一个或多个有序集的并集，并存储在新的 key 中 |\r\n| ZSCAN key cursor [MATCH pattern] [COUNT count] | 迭代有序集合中的元素（包括元素成员和元素分值） |'),(104, 104, '<p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p>\r\n<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p>\r\n<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>\r\n<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>\r\n<h2 id=\"h2--\"><a name=\"什么是基数?\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是基数?</h2><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2>', 'Redis 在 2.8.9 版本添加了 HyperLogLog 结构。\r\n\r\nRedis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。\r\n\r\n在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。\r\n\r\n但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。\r\n\r\n## 什么是基数?\r\n比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。\r\n## 实例\r\n'),(105, 105, '<p>摄影本无定法，所谓“摄影构图”是人们根据成功摄影作品归纳总结出来的一套实践经验上升而成的“理论”。构图理论是有一定实践指导意义的，需要注意的是不能被所谓的理论所桎梏。</p>\r\n<h2 id=\"h2-u5E73u8861u5F0Fu6784u56FE\"><a name=\"平衡式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>平衡式构图</h2><p>平衡式构图给人以满足的感觉，画面结构完整，安排巧妙，对应而平衡。常用于月夜、水面、夜景、新闻等题材。<br><img src=\"/upload/image/3a0b5d930ebc7166882cfc463c13ea994277.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5BF9u79F0u5F0Fu6784u56FE\"><a name=\"对称式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>对称式构图</h2><p>对称式构图具有平衡、稳定、相呼应的特点。缺点：呆板、缺少变化。常用于表现对称的物体、建筑、特殊风格的物体。<br><img src=\"/upload/image/e611d92dca496e50000a0260a141a0093626.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u53D8u5316u5F0Fu6784u56FE\"><a name=\"变化式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>变化式构图</h2><p>变化式构图故意将主体安排在某一角落或某一边，给人一种思考和遐想的空间，留下进一步判断的余地。这种构图富余韵味和情趣，常用于山水小景、体育运动、艺术摄影、幽默照片等。<br><img src=\"/upload/image/2c25c802e818ec155710a55866acadb83729.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5BF9u89D2u7EBFu6784u56FE\"><a name=\"对角线构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>对角线构图</h2><p>对角线构图是最基本的经典构图方式之一，把主题安排在对角线上，能有效的利用画面对角线的长度，同时也能使衬体与主体发生直接关系，富于动感，画面活泼，容易产生线条汇聚趋势，吸引人的视线，达到突出主体的效果。<br><img src=\"/upload/image/da386ec831f2518dd8193b5886df37fa8583.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4EA4u53C9u7EBFu6784u56FE\"><a name=\"交叉线构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>交叉线构图</h2><p>景物呈交叉线结构，景物的交叉点可以在画面以内，也可以在画面以外。前者有类似十字线构图的特点，后者有类似斜线构图的特点，能充分利用画面空间，并把视线引向交叉中心，也可引向画面以外，具有活泼、轻松、舒展、含蓄的特点。<br><img src=\"/upload/image/f23f32e2c3d033fe5ae7a5b3444e2a075494.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u692Du5706u578Bu6784u56FE\"><a name=\"椭圆型构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>椭圆型构图</h2><p>椭圆形构图容易产生强烈的整体感，并能产生旋转、运动、收缩等视觉效果。常用于表现不需要特别强调主体，而着重表现场面或者渲染气氛的画面内容。<br><img src=\"/upload/image/9872aba68b92f507040e04551c761ae74170.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5341u5B57u578Bu6784u56FE\"><a name=\"十字型构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>十字型构图</h2><p>十字型构图画面上的景物、影调或色彩的变化呈正交十字形，能利用较多的空间，因而能容纳较多的背景和衬体，使视线自然向十字交叉的部位集中。多用于有稳定排列组合的物体，或者拍摄有规律的运动物体等。<br><img src=\"/upload/image/096728aa49db260ea40a82a1b620bea13641.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u6C34u5E73u7EBFu5F0Fu6784u56FE\"><a name=\"水平线式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>水平线式构图</h2><p>水平线式构图具有平静、安宁、舒适、稳定等特点。常用于表现平静如镜的湖面、微波荡漾的水面、一望无际的平川、广阔平坦的原野、辽阔无垠的草原等。<br><img src=\"/upload/image/5462d518f98c6f5d98f32ded035364c39386.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u659Cu7EBFu5F0Fu6784u56FE\"><a name=\"斜线式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>斜线式构图</h2><p>斜线式构图分立式斜线和平式斜线两种，常表现运动、流动、倾斜、动荡、失衡、紧张、危险、一泻千里等场面。也有画面利用斜线指出特定的物体，起到一个固定引导的作用。<br><img src=\"/upload/image/e12fd1683a62bc575acde26fe51ce0895195.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4E09u89D2u5F62u6784u56FE\"><a name=\"三角形构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>三角形构图</h2><p>三角形构图以视觉中心为景物的主要位置，有时是以三点成面几何构成来安排景物，形成一个稳定的三角形。这种三角形可以是正三角形也可以是斜三角形或倒三角形，其中斜三角形较为常用，也较为灵活。三角形构图具有安定、均衡但不失灵活的特点。<br><img src=\"/upload/image/520416d3825920c0f9ec3635e8ffa56b9670.png\" alt=\"\"></p>\r\n<h2 id=\"h2-s-\"><a name=\"S型构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>S型构图</h2><p>S型构图又是另一种基本的经典构图方式。画面上的景物呈S形曲线的方式分布，具有延长、变化的特点，使画面看上去有韵律感，产生优美、雅致、协调的感觉。当需要采用曲线形式表现被摄物体时，首先应该想到用S形构图。常用于表现河流、小溪、曲径等。<br><img src=\"/upload/image/9a80384bf2d97da92e65332f4f79d1a65332.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5411u5FC3u5F0Fu6784u56FE\"><a name=\"向心式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>向心式构图</h2><p>向心式构图主体处于画面中心位置，四周景物呈现朝中心集中的构图形式，能将实现强烈引向主体，并起到聚焦的作用。具有突出主体的鲜明特点，但有时也产生压迫中心，局促沉重的感觉。<br><img src=\"/upload/image/7dee48bb11d40319ced2cdf548518e931864.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5782u76F4u5F0Fu6784u56FE\"><a name=\"垂直式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>垂直式构图</h2><p>垂直式构图能充分显示景物的高大和纵深。常用于表现万木争荣的森林、参天大树、险峻山石、飞泻的瀑布、摩天大楼等。<br><img src=\"/upload/image/81a8c7ffd6abaa6c37e7d96b5f6b365d2937.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4E5Du5BABu683Cu6784u56FE\"><a name=\"九宫格构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>九宫格构图</h2><p>这是最基本的构图方式之一，将主体安排在九宫格交叉点的位置上，一般认为右上角的交叉点最为理想，其次为右下方。这种构图方式较为符合人们的视觉习惯，使主体自然成为视觉中心，具有突出主体并使画面趋向均衡的特点。<br><img src=\"/upload/image/a0c35afc6d733c325d05e313192f694c1710.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u7D27u51D1u5F0Fu6784u56FE\"><a name=\"紧凑式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>紧凑式构图</h2><p>将景物主体以特写的形式加以放大，使其局部布满画面，具有紧凑、细腻、微观等特点。常用于人物肖像，显微摄影或者表现局部细节。对刻画人物的面部往往达到传神境地，令人难忘。<br><img src=\"/upload/image/1df8dea6c25d6c6b6fbe3fa536d3a5f68607.png\" alt=\"\"></p>\r\n<h2 id=\"h2-l-\"><a name=\"L型构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>L型构图</h2><p>用类似于L形的线条或色块将需要强调的主体围绕、框架起来，起到突出主题的作用。L形如同半个围框，可以是正L形，也可以是倒L形，均能把人的注意力集中到围框以内，使主体突出，主题鲜明。常用于有一定规律的线条画面。<br><img src=\"/upload/image/5a7c8b02c4aa76726195cf3ec0cece9b9390.png\" alt=\"\"></p>\r\n', '摄影本无定法，所谓“摄影构图”是人们根据成功摄影作品归纳总结出来的一套实践经验上升而成的“理论”。构图理论是有一定实践指导意义的，需要注意的是不能被所谓的理论所桎梏。\r\n## 平衡式构图\r\n平衡式构图给人以满足的感觉，画面结构完整，安排巧妙，对应而平衡。常用于月夜、水面、夜景、新闻等题材。\r\n![](/upload/image/3a0b5d930ebc7166882cfc463c13ea994277.png)\r\n## 对称式构图\r\n对称式构图具有平衡、稳定、相呼应的特点。缺点：呆板、缺少变化。常用于表现对称的物体、建筑、特殊风格的物体。\r\n![](/upload/image/e611d92dca496e50000a0260a141a0093626.png)\r\n## 变化式构图\r\n变化式构图故意将主体安排在某一角落或某一边，给人一种思考和遐想的空间，留下进一步判断的余地。这种构图富余韵味和情趣，常用于山水小景、体育运动、艺术摄影、幽默照片等。\r\n![](/upload/image/2c25c802e818ec155710a55866acadb83729.png)\r\n## 对角线构图\r\n对角线构图是最基本的经典构图方式之一，把主题安排在对角线上，能有效的利用画面对角线的长度，同时也能使衬体与主体发生直接关系，富于动感，画面活泼，容易产生线条汇聚趋势，吸引人的视线，达到突出主体的效果。\r\n![](/upload/image/da386ec831f2518dd8193b5886df37fa8583.png)\r\n## 交叉线构图\r\n景物呈交叉线结构，景物的交叉点可以在画面以内，也可以在画面以外。前者有类似十字线构图的特点，后者有类似斜线构图的特点，能充分利用画面空间，并把视线引向交叉中心，也可引向画面以外，具有活泼、轻松、舒展、含蓄的特点。\r\n![](/upload/image/f23f32e2c3d033fe5ae7a5b3444e2a075494.png)\r\n## 椭圆型构图\r\n椭圆形构图容易产生强烈的整体感，并能产生旋转、运动、收缩等视觉效果。常用于表现不需要特别强调主体，而着重表现场面或者渲染气氛的画面内容。\r\n![](/upload/image/9872aba68b92f507040e04551c761ae74170.png)\r\n## 十字型构图\r\n十字型构图画面上的景物、影调或色彩的变化呈正交十字形，能利用较多的空间，因而能容纳较多的背景和衬体，使视线自然向十字交叉的部位集中。多用于有稳定排列组合的物体，或者拍摄有规律的运动物体等。\r\n![](/upload/image/096728aa49db260ea40a82a1b620bea13641.png)\r\n## 水平线式构图\r\n水平线式构图具有平静、安宁、舒适、稳定等特点。常用于表现平静如镜的湖面、微波荡漾的水面、一望无际的平川、广阔平坦的原野、辽阔无垠的草原等。\r\n![](/upload/image/5462d518f98c6f5d98f32ded035364c39386.png)\r\n## 斜线式构图\r\n斜线式构图分立式斜线和平式斜线两种，常表现运动、流动、倾斜、动荡、失衡、紧张、危险、一泻千里等场面。也有画面利用斜线指出特定的物体，起到一个固定引导的作用。\r\n![](/upload/image/e12fd1683a62bc575acde26fe51ce0895195.png)\r\n## 三角形构图\r\n三角形构图以视觉中心为景物的主要位置，有时是以三点成面几何构成来安排景物，形成一个稳定的三角形。这种三角形可以是正三角形也可以是斜三角形或倒三角形，其中斜三角形较为常用，也较为灵活。三角形构图具有安定、均衡但不失灵活的特点。\r\n![](/upload/image/520416d3825920c0f9ec3635e8ffa56b9670.png)\r\n## S型构图\r\nS型构图又是另一种基本的经典构图方式。画面上的景物呈S形曲线的方式分布，具有延长、变化的特点，使画面看上去有韵律感，产生优美、雅致、协调的感觉。当需要采用曲线形式表现被摄物体时，首先应该想到用S形构图。常用于表现河流、小溪、曲径等。\r\n![](/upload/image/9a80384bf2d97da92e65332f4f79d1a65332.png)\r\n## 向心式构图\r\n向心式构图主体处于画面中心位置，四周景物呈现朝中心集中的构图形式，能将实现强烈引向主体，并起到聚焦的作用。具有突出主体的鲜明特点，但有时也产生压迫中心，局促沉重的感觉。\r\n![](/upload/image/7dee48bb11d40319ced2cdf548518e931864.png)\r\n## 垂直式构图\r\n垂直式构图能充分显示景物的高大和纵深。常用于表现万木争荣的森林、参天大树、险峻山石、飞泻的瀑布、摩天大楼等。\r\n![](/upload/image/81a8c7ffd6abaa6c37e7d96b5f6b365d2937.png)\r\n## 九宫格构图\r\n这是最基本的构图方式之一，将主体安排在九宫格交叉点的位置上，一般认为右上角的交叉点最为理想，其次为右下方。这种构图方式较为符合人们的视觉习惯，使主体自然成为视觉中心，具有突出主体并使画面趋向均衡的特点。\r\n![](/upload/image/a0c35afc6d733c325d05e313192f694c1710.png)\r\n## 紧凑式构图\r\n将景物主体以特写的形式加以放大，使其局部布满画面，具有紧凑、细腻、微观等特点。常用于人物肖像，显微摄影或者表现局部细节。对刻画人物的面部往往达到传神境地，令人难忘。\r\n![](/upload/image/1df8dea6c25d6c6b6fbe3fa536d3a5f68607.png)\r\n## L型构图\r\n用类似于L形的线条或色块将需要强调的主体围绕、框架起来，起到突出主题的作用。L形如同半个围框，可以是正L形，也可以是倒L形，均能把人的注意力集中到围框以内，使主体突出，主题鲜明。常用于有一定规律的线条画面。\r\n![](/upload/image/5a7c8b02c4aa76726195cf3ec0cece9b9390.png)'),(106, 106, '<h2 id=\"h2--main-storyboard-\"><a name=\"删除 Main.storyboard 引用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>删除 Main.storyboard 引用</h2><p>删除main.storyboard  — 删除info.plist  storyboard name main   general 删掉 main interface 内main</p>\r\n<p><img src=\"/upload/image/8624f0df2f0e82dcbd513fb20db5e60f9003.png\" alt=\"\"></p>\r\n<h2 id=\"h2--viewcontroller\"><a name=\"设置ViewController\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>设置ViewController</h2><p>在 SceneDelegate.swift 的 scene 方法中编写代码</p>\r\n<pre><code class=\"lang-swift\">    var window: UIWindow?\r\n\r\n\r\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\r\n\r\n        self.window = UIWindow(windowScene: scene as! UIWindowScene)\r\n        self.window?.rootViewController = RootViewController(nibName: &quot;RootViewController&quot;, bundle: nil)\r\n        self.window?.makeKeyAndVisible()\r\n\r\n        guard let _ = (scene as? UIWindowScene) else { return }\r\n\r\n    }\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p><img src=\"/upload/image/445cc51cb8554f9eed3ba2a24842d63f9119.png\" alt=\"\"></p>\r\n', '## 删除 Main.storyboard 引用\r\n删除main.storyboard  — 删除info.plist  storyboard name main   general 删掉 main interface 内main\r\n\r\n![](/upload/image/8624f0df2f0e82dcbd513fb20db5e60f9003.png)\r\n\r\n## 设置ViewController\r\n在 SceneDelegate.swift 的 scene 方法中编写代码\r\n```swift\r\n    var window: UIWindow?\r\n\r\n\r\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\r\n        \r\n        self.window = UIWindow(windowScene: scene as! UIWindowScene)\r\n        self.window?.rootViewController = RootViewController(nibName: \"RootViewController\", bundle: nil)\r\n        self.window?.makeKeyAndVisible()\r\n        \r\n        guard let _ = (scene as? UIWindowScene) else { return }\r\n        \r\n    }\r\n```\r\n\r\n## 测试\r\n![](/upload/image/445cc51cb8554f9eed3ba2a24842d63f9119.png)'),(107, 107, '<h2 id=\"h2--maven\"><a name=\"下载Maven\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载Maven</h2><p>下载地址 <a href=\"http://maven.apache.org/download.cgi\" title=\"Maven官网\">Maven官网</a><br><img src=\"/upload/image/7372f1a262496b3e793897c67f03f5244133.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5B89u88C5\"><a name=\"安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装</h2><p>解压文件</p>\r\n<pre><code class=\"lang-shell\">tar -zxvf apache-maven-3.6.2-bin.tar.gz\r\n</code></pre>\r\n<p>将解压出来的文件夹，移动到 usr/local 下</p>\r\n<pre><code class=\"lang-shell\">sudo mv -f apache-maven-3.6.2 /usr/local/\r\n</code></pre>\r\n<p>配置环境变量，mac 下配置 <code>~/.bash_profile</code> 文件，每次打开都需要先<code>source ~/.bash_profile</code>，非常不方便，配置<code>~/.zshrc</code>则不用。</p>\r\n<pre><code class=\"lang-shell\">export MAVEN_HOME=/usr/local/apache-maven-3.6.2\r\nexport PATH=${PATH}:${MAVEN_HOME}/bin\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>在 terminal 输入</p>\r\n<pre><code class=\"lang-shell\">mvn -v\r\n</code></pre>\r\n<p>输出如下结果，则表示 maven 安装成功了<br><img src=\"/upload/image/1207891fc8b34ee12c2a5324d3beb8206834.png\" alt=\"\"></p>\r\n', '## 下载Maven\r\n下载地址 [Maven官网](http://maven.apache.org/download.cgi \"Maven官网\")\r\n![](/upload/image/7372f1a262496b3e793897c67f03f5244133.png)\r\n## 安装\r\n解压文件\r\n```shell\r\ntar -zxvf apache-maven-3.6.2-bin.tar.gz\r\n```\r\n将解压出来的文件夹，移动到 usr/local 下\r\n```shell\r\nsudo mv -f apache-maven-3.6.2 /usr/local/\r\n```\r\n配置环境变量，mac 下配置 `~/.bash_profile` 文件，每次打开都需要先`source ~/.bash_profile`，非常不方便，配置`~/.zshrc`则不用。\r\n```shell\r\nexport MAVEN_HOME=/usr/local/apache-maven-3.6.2\r\nexport PATH=${PATH}:${MAVEN_HOME}/bin\r\n```\r\n## 测试\r\n在 terminal 输入\r\n```shell\r\nmvn -v\r\n```\r\n输出如下结果，则表示 maven 安装成功了\r\n![](/upload/image/1207891fc8b34ee12c2a5324d3beb8206834.png)'),(108, 108, '<h2 id=\"h2-u4E0Bu8F7D\"><a name=\"下载\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载</h2><p>下载地址 <a href=\"https://www.sonatype.com/nexus-repository-oss\" title=\"nexus官网\">nexus官网</a></p>\r\n<p><img src=\"/upload/image/ddcb37aab1746e2522d5f613d75523679363.png\" alt=\"\"></p>\r\n<p>推荐在 Linux 环境下运行 nexus 仓库，使用 wget 下载 UNIX 安装包。</p>\r\n<h2 id=\"h2-u5B89u88C5\"><a name=\"安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装</h2><p>进入安装包下载的目录，执行解压命令</p>\r\n<pre><code class=\"lang-shell\"> tar -zxvf nexus-3.19.1-01-unix.tar.gz\r\n</code></pre>\r\n<p>解压后得出两个文件夹 nexus-3.19.1-01 和 sonatype-work </p>\r\n<p>如有有需求修改 nexus 使用的端口</p>\r\n<pre><code class=\"lang-shell\">vim nexus-3.19.1-01/etc/nexus-default.properties\r\n</code></pre>\r\n<p>修改端口为期望的值</p>\r\n<pre><code class=\"lang-shell\">application-port=8083\r\n</code></pre>\r\n<p>启动 nexus 只需要到 bin 目录执行 nexus 启动文件即可</p>\r\n<pre><code class=\"lang-shell\">./nexus-3.19.1-01/bin/nexus start\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>在浏览器输入 localhost:8083 即可访问 nexus oss了</p>\r\n<p><img src=\"/upload/image/ace48071e41478ebddf1084d5ff920eb1170.png\" alt=\"\"></p>\r\n', '## 下载\r\n下载地址 [nexus官网](https://www.sonatype.com/nexus-repository-oss \"nexus官网\")\r\n\r\n![](/upload/image/ddcb37aab1746e2522d5f613d75523679363.png)\r\n\r\n推荐在 Linux 环境下运行 nexus 仓库，使用 wget 下载 UNIX 安装包。\r\n## 安装\r\n进入安装包下载的目录，执行解压命令\r\n```shell\r\n tar -zxvf nexus-3.19.1-01-unix.tar.gz \r\n```\r\n解压后得出两个文件夹 nexus-3.19.1-01 和 sonatype-work \r\n\r\n如有有需求修改 nexus 使用的端口\r\n```shell\r\nvim nexus-3.19.1-01/etc/nexus-default.properties\r\n```\r\n修改端口为期望的值\r\n```shell\r\napplication-port=8083\r\n```\r\n启动 nexus 只需要到 bin 目录执行 nexus 启动文件即可\r\n```shell\r\n./nexus-3.19.1-01/bin/nexus start\r\n```\r\n## 测试\r\n在浏览器输入 localhost:8083 即可访问 nexus oss了\r\n\r\n![](/upload/image/ace48071e41478ebddf1084d5ff920eb1170.png)'),(109, 109, '<h2 id=\"h2-u6784u5EFA\"><a name=\"构建\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>构建</h2><p>在安装了 maven 的状态下，可以使用 maven 官方提供的原型来创建符合 maven 目录结构的java项目，执行如下命令</p>\r\n<pre><code class=\"lang-shell\">mvn archetype:generate\r\n</code></pre>\r\n<h3 id=\"h3-u9009u62E9u9700u8981u7684u9879u76EEu539Fu578B\"><a name=\"选择需要的项目原型\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>选择需要的项目原型</h3><pre><code class=\"lang-shell\">Choose org.apache.maven.archetypes:maven-archetype-quickstart version: \r\n1: 1.0-alpha-1\r\n2: 1.0-alpha-2\r\n3: 1.0-alpha-3\r\n4: 1.0-alpha-4\r\n5: 1.0\r\n6: 1.1\r\n7: 1.3\r\n8: 1.4\r\nChoose a number: 8:\r\n</code></pre>\r\n<p>这里我们选择默认的值 8</p>\r\n<h3 id=\"h3--groupid-\"><a name=\"定义我们的 groupId 组织名\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义我们的 groupId 组织名</h3><pre><code class=\"lang-shell\">Define value for property &#39;groupId&#39;:\r\n</code></pre>\r\n<p>输入 com._365d1.demo ，一般我们按照 <code>公司网址的反写 + 项目名称</code> 的格式输入</p>\r\n<h3 id=\"h3-u5B9Au4E49u9879u76EEu540Du79F0\"><a name=\"定义项目名称\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义项目名称</h3><pre><code class=\"lang-shell\">Define value for property &#39;artifactId&#39;\r\n</code></pre>\r\n<p>输入 demo</p>\r\n<h3 id=\"h3-u5B9Au4E49u9879u76EEu7248u672C\"><a name=\"定义项目版本\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义项目版本</h3><pre><code class=\"lang-shell\">Define value for property &#39;version&#39; 1.0-SNAPSHOT: :\r\n</code></pre>\r\n<p>默认值为 1.0-SHAPSHOT  ，这里选择默认</p>\r\n<h3 id=\"h3-u5B9Au4E49u5305u540Du79F0\"><a name=\"定义包名称\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义包名称</h3><pre><code class=\"lang-shell\">Define value for property &#39;package&#39; com._365d1.demo: :\r\n</code></pre>\r\n<p>这里我们选择默认</p>\r\n<h3 id=\"h3-u751Fu6210u9879u76EE\"><a name=\"生成项目\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>生成项目</h3><p>确定后，我们即可使用官方提供的原型生成 java 项目了，目录结构</p>\r\n<pre><code>demo                 工程目录\r\n├─src              源代码目录\r\n└─target         构建生成目录\r\n</code></pre><h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>执行命令将项目打包为jar包</p>\r\n<pre><code class=\"lang-shell\">mvn package\r\n</code></pre>\r\n<p>在 target 目录中则生成了构建后的 .jar 包</p>\r\n', '## 构建\r\n在安装了 maven 的状态下，可以使用 maven 官方提供的原型来创建符合 maven 目录结构的java项目，执行如下命令\r\n```shell\r\nmvn archetype:generate\r\n```\r\n### 选择需要的项目原型\r\n```shell\r\nChoose org.apache.maven.archetypes:maven-archetype-quickstart version: \r\n1: 1.0-alpha-1\r\n2: 1.0-alpha-2\r\n3: 1.0-alpha-3\r\n4: 1.0-alpha-4\r\n5: 1.0\r\n6: 1.1\r\n7: 1.3\r\n8: 1.4\r\nChoose a number: 8:   \r\n```\r\n这里我们选择默认的值 8\r\n\r\n### 定义我们的 groupId 组织名\r\n```shell\r\nDefine value for property \'groupId\': \r\n```\r\n输入 com._365d1.demo ，一般我们按照 `公司网址的反写 + 项目名称` 的格式输入\r\n\r\n### 定义项目名称\r\n```shell\r\nDefine value for property \'artifactId\'\r\n```\r\n输入 demo\r\n### 定义项目版本\r\n```shell\r\nDefine value for property \'version\' 1.0-SNAPSHOT: :\r\n```\r\n默认值为 1.0-SHAPSHOT  ，这里选择默认\r\n### 定义包名称\r\n```shell\r\nDefine value for property \'package\' com._365d1.demo: : \r\n```\r\n这里我们选择默认\r\n### 生成项目\r\n确定后，我们即可使用官方提供的原型生成 java 项目了，目录结构\r\n```\r\ndemo                 工程目录\r\n├─src              源代码目录\r\n└─target         构建生成目录\r\n```\r\n## 测试\r\n执行命令将项目打包为jar包\r\n```shell\r\nmvn package\r\n```\r\n在 target 目录中则生成了构建后的 .jar 包'),(110, 110, '<h2 id=\"h2--maven-setting-\"><a name=\"配置 Maven Setting 文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置 Maven Setting 文件</h2><pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;settings xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot; xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\r\n\r\n  &lt;!-- 配置服务端的设置 --&gt;\r\n  &lt;servers&gt;\r\n    &lt;!--服务器元素包含配置服务器时需要的信息 --&gt;\r\n    &lt;server&gt;\r\n      &lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt;\r\n      &lt;id&gt;releases&lt;/id&gt;\r\n      &lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt;\r\n      &lt;username&gt;developer&lt;/username&gt;\r\n      &lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 + --&gt;\r\n      &lt;password&gt;888888&lt;/password&gt;  \r\n    &lt;/server&gt;\r\n    &lt;!--服务器元素包含配置服务器时需要的信息 --&gt;\r\n    &lt;server&gt;\r\n      &lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt;\r\n      &lt;id&gt;snapshots&lt;/id&gt;\r\n      &lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt;\r\n      &lt;username&gt;developer&lt;/username&gt; \r\n      &lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 + --&gt;\r\n      &lt;password&gt;888888&lt;/password&gt;  \r\n    &lt;/server&gt;\r\n  &lt;/servers&gt;\r\n\r\n  &lt;!-- 配置镜像地址 --&gt;\r\n  &lt;mirrors&gt;\r\n    &lt;!-- 私服仓库地址 --&gt;\r\n    &lt;mirror&gt;\r\n      &lt;!-- 该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;\r\n      &lt;id&gt;nexus&lt;/id&gt;\r\n      &lt;!-- 镜像名称 --&gt;\r\n      &lt;name&gt;nexus.365d1.com&lt;/name&gt;\r\n      &lt;!-- 该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;\r\n      &lt;url&gt;http://nexus.365d1.com/repository/maven-public/&lt;/url&gt;\r\n      &lt;!-- 被镜像的服务器的id，*号表示所有仓库都被镜像 --&gt;\r\n      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;      \r\n    &lt;/mirror&gt;\r\n  &lt;/mirrors&gt;\r\n\r\n&lt;/settings&gt;\r\n</code></pre>\r\n<h2 id=\"h2--pom-\"><a name=\"工程 POM 文件加入私服配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>工程 POM 文件加入私服配置</h2><pre><code class=\"lang-xml\">&lt;distributionManagement&gt;\r\n    &lt;repository&gt;\r\n        &lt;id&gt;releases&lt;/id&gt;\r\n        &lt;name&gt;Releases&lt;/name&gt;\r\n        &lt;url&gt;http://nexus.365d1.com/repository/maven-releases/&lt;/url&gt;\r\n    &lt;/repository&gt;\r\n    &lt;snapshotRepository&gt;\r\n        &lt;id&gt;snapshots&lt;/id&gt;\r\n        &lt;name&gt;Snapshot&lt;/name&gt;\r\n        &lt;url&gt;http://nexus.365d1.com/repository/maven-snapshots/&lt;/url&gt;\r\n    &lt;/snapshotRepository&gt;\r\n&lt;/distributionManagement&gt;\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>执行 maven deploy 命令，查看登录仓库查看，已经部署到私服了。<br><img src=\"/upload/image/7231555fc80bdb479d0af40cc4e769658786.png\" alt=\"\"></p>\r\n', '## 配置 Maven Setting 文件\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n\r\n  <!-- 配置服务端的设置 -->\r\n  <servers>\r\n	<!--服务器元素包含配置服务器时需要的信息 -->\r\n	<server>\r\n	  <!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 -->\r\n	  <id>releases</id>\r\n	  <!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 -->\r\n	  <username>developer</username>\r\n	  <!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 + -->\r\n	  <password>888888</password>  \r\n	</server>\r\n	<!--服务器元素包含配置服务器时需要的信息 -->\r\n	<server>\r\n	  <!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 -->\r\n	  <id>snapshots</id>\r\n	  <!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 -->\r\n	  <username>developer</username> \r\n	  <!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 + -->\r\n	  <password>888888</password>  \r\n	</server>\r\n  </servers>\r\n\r\n  <!-- 配置镜像地址 -->\r\n  <mirrors>\r\n	<!-- 私服仓库地址 -->\r\n    <mirror>\r\n	  <!-- 该镜像的唯一标识符。id用来区分不同的mirror元素。 -->\r\n	  <id>nexus</id>\r\n	  <!-- 镜像名称 -->\r\n	  <name>nexus.365d1.com</name>\r\n	  <!-- 该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 -->\r\n	  <url>http://nexus.365d1.com/repository/maven-public/</url>\r\n	  <!-- 被镜像的服务器的id，*号表示所有仓库都被镜像 -->\r\n	  <mirrorOf>*</mirrorOf>	  \r\n    </mirror>\r\n  </mirrors>\r\n  \r\n</settings>\r\n```\r\n## 工程 POM 文件加入私服配置\r\n```xml\r\n<distributionManagement>\r\n    <repository>\r\n        <id>releases</id>\r\n        <name>Releases</name>\r\n        <url>http://nexus.365d1.com/repository/maven-releases/</url>\r\n    </repository>\r\n    <snapshotRepository>\r\n        <id>snapshots</id>\r\n        <name>Snapshot</name>\r\n        <url>http://nexus.365d1.com/repository/maven-snapshots/</url>\r\n    </snapshotRepository>\r\n</distributionManagement>\r\n```\r\n## 测试\r\n执行 maven deploy 命令，查看登录仓库查看，已经部署到私服了。\r\n![](/upload/image/7231555fc80bdb479d0af40cc4e769658786.png)\r\n'),(111, 111, '', ''),(112, 112, '<blockquote>\r\n<p>警告：在生产环境以下做法都不适用。<br>建议: 在生产环境请使用 Kubernetes。<br>特殊用途：没有一堆服务器，又想尝试学习搭建一些集群使用。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u57FAu7840u73AFu5883\"><a name=\"基础环境\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>基础环境</h2><p>1.虚拟机 VirtualBox<br>2.操作系统 Ubuntu 18.04.3 LTS<br>3.容器引擎 Docker 19.03.5</p>\r\n<h2 id=\"h2-u865Au62DFu673Au8BBEu7F6E\"><a name=\"虚拟机设置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>虚拟机设置</h2><p>在虚拟机上安装 Ubuntu 系统，安装完毕后需要将网卡设置为<strong>混杂模式</strong>。</p>\r\n<p><img src=\"/upload/image/3ff9525ddf3432cf5296280207471a075167.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u914Du7F6Eu7F51u6865\"><a name=\"配置网桥\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置网桥</h2><p>宿主机与docker如果要使用一样的网段，可以建立一个网桥，将宿主机网卡桥接到该网桥上。Ubuntu18.04的网络配置文件为/etc/netplan/50-cloud-init.yaml，编辑该文件，代码如下：</p>\r\n<pre><code class=\"lang-yaml\">network:\r\n  version: 2\r\n  ethernets:\r\n    enp0s3:\r\n      dhcp4: no\r\n      dhcp6: no\r\n  bridges:\r\n    br0:\r\n      interfaces: [enp0s3]\r\n      dhcp4: no\r\n      addresses: [192.168.1.251/24]\r\n      gateway4: 192.168.1.1\r\n      nameservers:\r\n        addresses: [192.168.1.1,8.8.8.8]\r\n</code></pre>\r\n<p>新建了一个名字为br0的网桥，并将网卡enp0s3桥接上来，设置使用静态IP 192.168.1.251。使用命令<code>netplan apply</code>启用新的网络配置，使用命令<code>ifconfig</code>查看网络配置是否生效。</p>\r\n<p><img src=\"/upload/image/ff9a4a00d6864c44c786a4dc674f19f08677.png\" alt=\"\"></p>\r\n<p>尝试ping外网确认配置的网络是通的。</p>\r\n<p><img src=\"/upload/image/ad9298af2238956cd57015c5920154632146.png\" alt=\"\"></p>\r\n<h2 id=\"h2--docker\"><a name=\"配置docker\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置docker</h2><p>默认情况下，docker启动时会创建一个名为docker0的网桥，并使用该网桥，需要修改docker的启动配置，不再使用docker0的默认网桥，转而使用新建的br0网桥。修改/etc/docker/daemon.json文件（文件不存在就创建一个），加入如下配置：</p>\r\n<pre><code class=\"lang-yaml\">{\r\n  &quot;bridge&quot;:&quot;br0&quot;\r\n}\r\n</code></pre>\r\n<p>使用命令<code>systemctl restart docker</code>重启docker引擎。</p>\r\n<h2 id=\"h2-u8FD0u884Cu5BB9u5668\"><a name=\"运行容器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运行容器</h2><p>可以使用官方的busybox镜像来启一个容器进行测试。</p>\r\n<blockquote>\r\n<p>Busybox是一个集成了一百多个最常用Linux命令和工具的软件工具箱，它在单一的可执行文件中提供了精简的Unix工具集。BusyBox可运行于多款POSIX环境操作系统中，如Linux（包括Andoroid）、Hurd、FreeBSD等。Busybox既包含了一些简单实用的工具，如cat和echo，也包含了一些更大，更复&gt; 杂的工具，如grep、find、mount以及telnet。可以说BusyBox是Linux系统的瑞士军刀。</p>\r\n</blockquote>\r\n<p>执行命令</p>\r\n<pre><code class=\"lang-shell\">run -it --rm --name test busybox\r\n</code></pre>\r\n<p>容器起来后，在容器里执行<code>ifconfig</code>命令查看IP地址。</p>\r\n<p><img src=\"/upload/image/5812f4caa29f0cf99f33775626fd5fe13186.png\" alt=\"\"></p>\r\n<p>虽然分配了和宿主机一样的网段，但是分配的IP是192.168.1.1，docker会从依次往上分配IP，如果再启一个容器分配的就是192.168.1.2了，但这不是想要的，IP不能控制分配非常舒服。</p>\r\n<h2 id=\"h2--ip\"><a name=\"配置固定IP\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置固定IP</h2><p>要固定IP需要使用到pipework。</p>\r\n<blockquote>\r\n<p>pipework 是由 Docker 的工程师 Jérôme Petazzoni 开发的一个 Docker 网络配置工具，由 200 多行 shell 实现，方便易用。</p>\r\n</blockquote>\r\n<p>执行以下代码获取pipework：</p>\r\n<pre><code class=\"lang-shell\">git clone https://github.com/jpetazzo/pipework\r\ncp pipework/pipework /usr/local/bin/\r\n</code></pre>\r\n<p>停止刚才创建的测试容器，它不符合要求，从新创建一个容器。</p>\r\n<pre><code class=\"lang-shell\">docker run -it --rm --network none --name test busybox\r\n</code></pre>\r\n<p>使用<code>--network none</code>在创建的时候不分配IP，稍后使用pipwork分配。此时查看容器里是没有IP的。</p>\r\n<p><img src=\"/upload/image/777e9eb53866032f27dd0297be590c294154.png\" alt=\"\"></p>\r\n<p>使用pipwork分配固定的IP，执行如下命令：</p>\r\n<pre><code class=\"lang-shell\">pipework br0 test 192.168.1.100/24@192.168.1.251\r\n</code></pre>\r\n<p>在这里的br0是上面新建的网桥，test是新建的容器名称，@符合后面的是网关地址，需要写宿主机的IP地址。重新进入容器执行<code>ifconfig</code>查看。</p>\r\n<p><img src=\"/upload/image/b2bbc3f4637e96c94fb7595045cf5c755854.png\" alt=\"\"></p>\r\n<p>此时，容器的IP就已经是刚才指定分配的了。其实固定分配IP也可以通过docker create network实现，那是另外一个故事了，现在先把这个故事讲完，最后，测试一下容器的网络情况。</p>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>容器ping外网，结果<code>通</code>。</p>\r\n<p><img src=\"/upload/image/b3f576b4f4b69166d526296a13f3b8444671.png\" alt=\"\"></p>\r\n<p>容器ping宿主机，结果<code>通</code>。</p>\r\n<p><img src=\"/upload/image/a8dda1c576e854df1d70948263213ebb4403.png\" alt=\"\"></p>\r\n<p>宿主机ping容器，结果<code>通</code>。</p>\r\n<p><img src=\"/upload/image/2b82b4c6d2e640afaf054453eef828689006.png\" alt=\"\"></p>\r\n<p>我的电脑ping容器，正在用的这个，非虚拟机(宿主机)，结果<code>通</code>。</p>\r\n<p><img src=\"/upload/image/5e784aebc654d1f8382451cbbf1754952548.png\" alt=\"\"></p>\r\n<p>容器ping我的电脑，结果<code>通</code>，肯定通的，不用测试！！！</p>\r\n', '> 警告：在生产环境以下做法都不适用。\r\n> 建议: 在生产环境请使用 Kubernetes。\r\n> 特殊用途：没有一堆服务器，又想尝试学习搭建一些集群使用。\r\n\r\n## 基础环境\r\n1.虚拟机 VirtualBox \r\n2.操作系统 Ubuntu 18.04.3 LTS\r\n3.容器引擎 Docker 19.03.5\r\n\r\n## 虚拟机设置\r\n在虚拟机上安装 Ubuntu 系统，安装完毕后需要将网卡设置为**混杂模式**。\r\n\r\n![](/upload/image/3ff9525ddf3432cf5296280207471a075167.png)\r\n\r\n## 配置网桥\r\n宿主机与docker如果要使用一样的网段，可以建立一个网桥，将宿主机网卡桥接到该网桥上。Ubuntu18.04的网络配置文件为/etc/netplan/50-cloud-init.yaml，编辑该文件，代码如下：\r\n```yaml\r\nnetwork:\r\n  version: 2\r\n  ethernets:\r\n    enp0s3:\r\n      dhcp4: no\r\n      dhcp6: no\r\n  bridges:\r\n    br0:\r\n      interfaces: [enp0s3]\r\n      dhcp4: no\r\n      addresses: [192.168.1.251/24]\r\n      gateway4: 192.168.1.1\r\n      nameservers:\r\n        addresses: [192.168.1.1,8.8.8.8]\r\n```\r\n新建了一个名字为br0的网桥，并将网卡enp0s3桥接上来，设置使用静态IP 192.168.1.251。使用命令`netplan apply`启用新的网络配置，使用命令`ifconfig`查看网络配置是否生效。\r\n\r\n![](/upload/image/ff9a4a00d6864c44c786a4dc674f19f08677.png)\r\n\r\n尝试ping外网确认配置的网络是通的。\r\n\r\n![](/upload/image/ad9298af2238956cd57015c5920154632146.png)\r\n\r\n## 配置docker\r\n默认情况下，docker启动时会创建一个名为docker0的网桥，并使用该网桥，需要修改docker的启动配置，不再使用docker0的默认网桥，转而使用新建的br0网桥。修改/etc/docker/daemon.json文件（文件不存在就创建一个），加入如下配置：\r\n```yaml\r\n{\r\n  \"bridge\":\"br0\"\r\n}\r\n```\r\n使用命令`systemctl restart docker`重启docker引擎。\r\n## 运行容器\r\n可以使用官方的busybox镜像来启一个容器进行测试。\r\n> Busybox是一个集成了一百多个最常用Linux命令和工具的软件工具箱，它在单一的可执行文件中提供了精简的Unix工具集。BusyBox可运行于多款POSIX环境操作系统中，如Linux（包括Andoroid）、Hurd、FreeBSD等。Busybox既包含了一些简单实用的工具，如cat和echo，也包含了一些更大，更复> 杂的工具，如grep、find、mount以及telnet。可以说BusyBox是Linux系统的瑞士军刀。\r\n\r\n执行命令\r\n```shell\r\nrun -it --rm --name test busybox\r\n```\r\n容器起来后，在容器里执行`ifconfig`命令查看IP地址。\r\n\r\n![](/upload/image/5812f4caa29f0cf99f33775626fd5fe13186.png)\r\n\r\n虽然分配了和宿主机一样的网段，但是分配的IP是192.168.1.1，docker会从依次往上分配IP，如果再启一个容器分配的就是192.168.1.2了，但这不是想要的，IP不能控制分配非常舒服。\r\n## 配置固定IP\r\n要固定IP需要使用到pipework。\r\n> pipework 是由 Docker 的工程师 Jérôme Petazzoni 开发的一个 Docker 网络配置工具，由 200 多行 shell 实现，方便易用。\r\n\r\n执行以下代码获取pipework：\r\n```shell\r\ngit clone https://github.com/jpetazzo/pipework\r\ncp pipework/pipework /usr/local/bin/\r\n```\r\n停止刚才创建的测试容器，它不符合要求，从新创建一个容器。\r\n```shell\r\ndocker run -it --rm --network none --name test busybox\r\n```\r\n使用`--network none`在创建的时候不分配IP，稍后使用pipwork分配。此时查看容器里是没有IP的。\r\n\r\n![](/upload/image/777e9eb53866032f27dd0297be590c294154.png)\r\n\r\n使用pipwork分配固定的IP，执行如下命令：\r\n```shell\r\npipework br0 test 192.168.1.100/24@192.168.1.251\r\n```\r\n在这里的br0是上面新建的网桥，test是新建的容器名称，@符合后面的是网关地址，需要写宿主机的IP地址。重新进入容器执行`ifconfig`查看。\r\n\r\n![](/upload/image/b2bbc3f4637e96c94fb7595045cf5c755854.png)\r\n\r\n此时，容器的IP就已经是刚才指定分配的了。其实固定分配IP也可以通过docker create network实现，那是另外一个故事了，现在先把这个故事讲完，最后，测试一下容器的网络情况。\r\n## 测试\r\n容器ping外网，结果`通`。\r\n\r\n![](/upload/image/b3f576b4f4b69166d526296a13f3b8444671.png)\r\n\r\n容器ping宿主机，结果`通`。\r\n\r\n![](/upload/image/a8dda1c576e854df1d70948263213ebb4403.png)\r\n\r\n宿主机ping容器，结果`通`。\r\n\r\n![](/upload/image/2b82b4c6d2e640afaf054453eef828689006.png)\r\n\r\n我的电脑ping容器，正在用的这个，非虚拟机(宿主机)，结果`通`。\r\n\r\n![](/upload/image/5e784aebc654d1f8382451cbbf1754952548.png)\r\n\r\n容器ping我的电脑，结果`通`，肯定通的，不用测试！！！'),(113, 113, '<blockquote>\r\n<p>警告：以下操作均不适合在生产环境使用。<br>建议：生产环境请使用成熟 OSS 方案。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u51C6u5907u5DE5u4F5C\"><a name=\"准备工作\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>准备工作</h2><p>要操作 MongoDB，首先得有，安装参考 MongoDB 官方网站，选择自己对应的操作系统进行安装，<a href=\"https://www.mongodb.com/\" title=\"MongoDB官方网站\">MongoDB官方网站</a>。修改 MongoDB 配置，配置文件的路径是 /etc/mongod.conf，修改配置的bindIp选项，修改为 0.0.0.0，使得任何设备都可以连接。</p>\r\n<pre><code class=\"lang-yaml\"># network interfaces\r\nnet:\r\n  port: 27017\r\n  bindIp: 0.0.0.0\r\n</code></pre>\r\n<p>为什么先改bindIp，这样可以用客户端工具连接，执行添加用户和设置密码的命令，也可以使用命令<code>mongo</code>进入 MongoDB shell 设置，效果一样。依次执行如下代码。</p>\r\n<pre><code class=\"lang-javascript\">// 使用admin数据库\r\nuse admin\r\n// 创建root用户\r\ndb.createUser({user: &#39;root&#39;, pwd: &#39;********&#39;, roles: [&#39;root&#39;]})\r\n// 查看用户是否设置成功\r\ndb.system.users.find()\r\n</code></pre>\r\n<p>这里需要注意，密码设置要复杂一些，不推荐国际密码这种东西。再次编辑配置文件/etc/mongod.conf，开启安全认证。</p>\r\n<pre><code class=\"lang-yaml\">security:\r\n  authorization: enabled\r\n</code></pre>\r\n<h2 id=\"h2-springboot-mongodb-\"><a name=\"SpringBoot 加入 MongoDB 依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>SpringBoot 加入 MongoDB 依赖</h2><p>编辑工程 pom.xml 文件，加入依赖。</p>\r\n<pre><code class=\"lang-xml\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n</code></pre>\r\n<p>配置 MongoDB 数据库链接。</p>\r\n<pre><code class=\"lang-yaml\">spring:\r\n  data:\r\n    mongodb:\r\n      host: 10.249.1.140\r\n      database: static\r\n      authentication-database: admin\r\n      username: root\r\n      password: !国际密码\r\n</code></pre>\r\n<p>编写一个提供GridFS的service。</p>\r\n<pre><code class=\"lang-java\">public interface GridfsService {\r\n\r\n    String upload(MultipartFile file);\r\n\r\n    GridResource resource(String id);\r\n\r\n}\r\n</code></pre>\r\n<p>编写一个接口的实现类。</p>\r\n<pre><code class=\"lang-java\">@Service\r\npublic class GridsServiceImpl implements GridfsService {\r\n\r\n    @Autowired\r\n    private GridFsTemplate gridFsTemplate;\r\n\r\n    @Autowired\r\n    private MongoDbFactory mongoDbFactory;\r\n\r\n    @Override\r\n    public String upload(MultipartFile file) {\r\n        try {\r\n            ObjectId objectId = gridFsTemplate.store(file.getInputStream(), file.getOriginalFilename(), file.getContentType());\r\n            return objectId.toString();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public GridResource resource(String id) {\r\n        GridFSFile gridFSFile = gridFsTemplate.findOne(Query.query(Criteria.where(&quot;_id&quot;).is(id)));\r\n        String contentType = gridFSFile.getMetadata().getString(&quot;_contentType&quot;);\r\n        GridFSBucket bucket = GridFSBuckets.create(mongoDbFactory.getDb());\r\n        GridFSDownloadStream stream = bucket.openDownloadStream(gridFSFile.getObjectId());\r\n        GridFsResource resource = new GridFsResource(gridFSFile, stream);\r\n        return new GridResource().setMediaType(contentType).setResource(resource);\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<p>编写控制器，用于测试。</p>\r\n<pre><code class=\"lang-java\">@Api(tags = &quot;静态资源&quot;)\r\n@RestController(value = &quot;publishStaticController&quot;)\r\n@RequestMapping(value = &quot;static&quot;)\r\npublic class StaticController extends PublishController {\r\n\r\n    @Autowired\r\n    private GridfsService gridfsService;\r\n\r\n    @RequestMapping(value = &quot;resource&quot;, method = RequestMethod.GET)\r\n    public ResponseEntity&lt;?&gt; resource(\r\n            @RequestParam(value = &quot;id&quot;) String id\r\n    ) {\r\n        GridResource resource = gridfsService.resource(id);\r\n        return ResponseEntity.ok().contentType(MediaType.parseMediaType(resource.getMediaType())).body(resource.getResource());\r\n    }\r\n\r\n    @ApiOperation(value = &quot;上传文件&quot;)\r\n    @RequestMapping(value = &quot;upload&quot;, method = RequestMethod.POST)\r\n    public Object upload(@RequestParam(value = &quot;file&quot;) MultipartFile file) {\r\n        String objectId = gridfsService.upload(file);\r\n        if (!ObjectUtils.isEmpty(objectId)) {\r\n            return ResultFormat.success(&quot;上传成功&quot;, objectId);\r\n        }\r\n        return ResultFormat.error(&quot;上传失败&quot;);\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>打开swagger接口文档，已经看到刚才编写的控制器了。</p>\r\n<p><img src=\"/upload/image/c5ddc6564ebdfc793ff2e0ef0985165f7479.png\" alt=\"\"></p>\r\n<p>上传一个文件测试一下。</p>\r\n<p><img src=\"/upload/image/d09bbaa8063590a99c4eed8bee134af92412.png\" alt=\"\"></p>\r\n<p>上传成功了，并返回了ObjectID，使用这个ID去调用查询接口，测试是否可以查询到文件。</p>\r\n<p><img src=\"/upload/image/d97f37cb4dad0b61526f758c6e2a07314336.png\" alt=\"\"></p>\r\n<p>成功获取到刚才上传的文件了。查看数据库中，也相应的存储了上传的文件了。</p>\r\n<p><img src=\"/upload/image/8abdeecf81e6bb70c8f335dafec7904c4760.png\" alt=\"\"></p>\r\n', '> 警告：以下操作均不适合在生产环境使用。\r\n> 建议：生产环境请使用成熟 OSS 方案。\r\n\r\n## 准备工作\r\n要操作 MongoDB，首先得有，安装参考 MongoDB 官方网站，选择自己对应的操作系统进行安装，[MongoDB官方网站](https://www.mongodb.com/ \"MongoDB官方网站\")。修改 MongoDB 配置，配置文件的路径是 /etc/mongod.conf，修改配置的bindIp选项，修改为 0.0.0.0，使得任何设备都可以连接。\r\n```yaml\r\n# network interfaces\r\nnet:\r\n  port: 27017\r\n  bindIp: 0.0.0.0\r\n```\r\n为什么先改bindIp，这样可以用客户端工具连接，执行添加用户和设置密码的命令，也可以使用命令`mongo`进入 MongoDB shell 设置，效果一样。依次执行如下代码。\r\n```javascript\r\n// 使用admin数据库\r\nuse admin\r\n// 创建root用户\r\ndb.createUser({user: \'root\', pwd: \'********\', roles: [\'root\']})\r\n// 查看用户是否设置成功\r\ndb.system.users.find()\r\n```\r\n这里需要注意，密码设置要复杂一些，不推荐国际密码这种东西。再次编辑配置文件/etc/mongod.conf，开启安全认证。\r\n```yaml\r\nsecurity:\r\n  authorization: enabled\r\n```\r\n## SpringBoot 加入 MongoDB 依赖\r\n编辑工程 pom.xml 文件，加入依赖。\r\n```xml\r\n<dependency>\r\n	<groupId>org.springframework.boot</groupId>\r\n	<artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n</dependency>\r\n```\r\n配置 MongoDB 数据库链接。\r\n```yaml\r\nspring:\r\n  data:\r\n    mongodb:\r\n      host: 10.249.1.140\r\n      database: static\r\n      authentication-database: admin\r\n      username: root\r\n      password: !国际密码\r\n```\r\n编写一个提供GridFS的service。\r\n```java\r\npublic interface GridfsService {\r\n\r\n    String upload(MultipartFile file);\r\n\r\n    GridResource resource(String id);\r\n\r\n}\r\n```\r\n编写一个接口的实现类。\r\n```java\r\n@Service\r\npublic class GridsServiceImpl implements GridfsService {\r\n\r\n    @Autowired\r\n    private GridFsTemplate gridFsTemplate;\r\n\r\n    @Autowired\r\n    private MongoDbFactory mongoDbFactory;\r\n\r\n    @Override\r\n    public String upload(MultipartFile file) {\r\n        try {\r\n            ObjectId objectId = gridFsTemplate.store(file.getInputStream(), file.getOriginalFilename(), file.getContentType());\r\n            return objectId.toString();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public GridResource resource(String id) {\r\n        GridFSFile gridFSFile = gridFsTemplate.findOne(Query.query(Criteria.where(\"_id\").is(id)));\r\n        String contentType = gridFSFile.getMetadata().getString(\"_contentType\");\r\n        GridFSBucket bucket = GridFSBuckets.create(mongoDbFactory.getDb());\r\n        GridFSDownloadStream stream = bucket.openDownloadStream(gridFSFile.getObjectId());\r\n        GridFsResource resource = new GridFsResource(gridFSFile, stream);\r\n        return new GridResource().setMediaType(contentType).setResource(resource);\r\n    }\r\n\r\n}\r\n```\r\n编写控制器，用于测试。\r\n```java\r\n@Api(tags = \"静态资源\")\r\n@RestController(value = \"publishStaticController\")\r\n@RequestMapping(value = \"static\")\r\npublic class StaticController extends PublishController {\r\n\r\n    @Autowired\r\n    private GridfsService gridfsService;\r\n\r\n    @RequestMapping(value = \"resource\", method = RequestMethod.GET)\r\n    public ResponseEntity<?> resource(\r\n            @RequestParam(value = \"id\") String id\r\n    ) {\r\n        GridResource resource = gridfsService.resource(id);\r\n        return ResponseEntity.ok().contentType(MediaType.parseMediaType(resource.getMediaType())).body(resource.getResource());\r\n    }\r\n\r\n    @ApiOperation(value = \"上传文件\")\r\n    @RequestMapping(value = \"upload\", method = RequestMethod.POST)\r\n    public Object upload(@RequestParam(value = \"file\") MultipartFile file) {\r\n        String objectId = gridfsService.upload(file);\r\n        if (!ObjectUtils.isEmpty(objectId)) {\r\n            return ResultFormat.success(\"上传成功\", objectId);\r\n        }\r\n        return ResultFormat.error(\"上传失败\");\r\n    }\r\n\r\n}\r\n```\r\n## 测试\r\n打开swagger接口文档，已经看到刚才编写的控制器了。\r\n\r\n![](/upload/image/c5ddc6564ebdfc793ff2e0ef0985165f7479.png)\r\n\r\n上传一个文件测试一下。\r\n\r\n![](/upload/image/d09bbaa8063590a99c4eed8bee134af92412.png)\r\n\r\n上传成功了，并返回了ObjectID，使用这个ID去调用查询接口，测试是否可以查询到文件。\r\n\r\n![](/upload/image/d97f37cb4dad0b61526f758c6e2a07314336.png)\r\n\r\n成功获取到刚才上传的文件了。查看数据库中，也相应的存储了上传的文件了。\r\n\r\n![](/upload/image/8abdeecf81e6bb70c8f335dafec7904c4760.png)'),(114, 114, '<blockquote>\r\n<p>警告：该以下操作，只适合单点服务，不适合集群环境。<br>建议：集群环境下，请使用ELK等日志分析系统。</p>\r\n</blockquote>\r\n<h2 id=\"h2--logback\"><a name=\"配置 logback\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置 logback</h2><p>在 SpringBoot 环境下，应该尽量避免使用 xml 配置文件的，但是 logback 不支持代码配置，所以还是需要用 xml 配置的。</p>\r\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;configuration&gt;\r\n    &lt;!-- 日志文件主目录 --&gt;\r\n    &lt;define name=&quot;LOG_HOME&quot; class=&quot;com._365d1.config.logback.LogDirConfig&quot; /&gt;\r\n\r\n    &lt;!-- 默认配置 --&gt;\r\n    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot;/&gt;\r\n    &lt;!-- 配置控制台(Console) --&gt;\r\n    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot;/&gt;\r\n\r\n    &lt;!-- 配置日志文件(File) --&gt;\r\n    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\r\n        &lt;!-- 设置策略 --&gt;\r\n        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;\r\n            &lt;!-- 日志文件路径：这里%d{yyyyMMdd}表示按天分类日志 --&gt;\r\n            &lt;FileNamePattern&gt;${LOG_HOME}/%d{yyyy-MM-dd}/%i.log&lt;/FileNamePattern&gt;\r\n            &lt;!-- 启用日志清理 --&gt;\r\n            &lt;cleanHistoryOnStart&gt;true&lt;/cleanHistoryOnStart&gt;\r\n            &lt;!-- 日志保留天数 --&gt;\r\n            &lt;maxHistory&gt;30&lt;/maxHistory&gt;\r\n            &lt;!-- 日志文件最大的大小 --&gt;\r\n            &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;\r\n        &lt;/rollingPolicy&gt;\r\n        &lt;!-- 设置格式 --&gt;\r\n        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;\r\n            &lt;!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 --&gt;\r\n            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&lt;/pattern&gt;\r\n            &lt;!-- 或者使用默认配置 --&gt;\r\n            &lt;!-- &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt; --&gt;\r\n            &lt;charset&gt;utf8&lt;/charset&gt;\r\n        &lt;/encoder&gt;\r\n    &lt;/appender&gt;\r\n\r\n    &lt;!-- root节点 全局日志级别，用来指定最基础的日志输出级别 --&gt;\r\n    &lt;root level=&quot;INFO&quot;&gt;\r\n        &lt;appender-ref ref=&quot;FILE&quot;/&gt;\r\n        &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;\r\n    &lt;/root&gt;\r\n\r\n&lt;/configuration&gt;\r\n</code></pre>\r\n<p>主要是配置使用 RollingFileAppender 来控制日志的生成，配置日志生成目录的时候，需要用 define 来定义，否则日志生成的目录，不一定受控制，define 定义的变量代码。</p>\r\n<pre><code class=\"lang-java\">@Component\r\npublic class LogDirConfig extends PropertyDefinerBase {\r\n\r\n    private String LOG_HOME;\r\n\r\n    @Override\r\n    public String getPropertyValue() {\r\n        this.LOG_HOME = PathUtils.getAbsolutePath(&quot;log&quot;);\r\n        return this.LOG_HOME;\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<p>代码<code>PathUtils.getAbsolutePath</code>只是封装里获取 jar 包所在的目录而已。</p>\r\n', '> 警告：该以下操作，只适合单点服务，不适合集群环境。\r\n> 建议：集群环境下，请使用ELK等日志分析系统。\r\n\r\n## 配置 logback \r\n在 SpringBoot 环境下，应该尽量避免使用 xml 配置文件的，但是 logback 不支持代码配置，所以还是需要用 xml 配置的。\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration>\r\n    <!-- 日志文件主目录 -->\r\n    <define name=\"LOG_HOME\" class=\"com._365d1.config.logback.LogDirConfig\" />\r\n\r\n    <!-- 默认配置 -->\r\n    <include resource=\"org/springframework/boot/logging/logback/defaults.xml\"/>\r\n    <!-- 配置控制台(Console) -->\r\n    <include resource=\"org/springframework/boot/logging/logback/console-appender.xml\"/>\r\n\r\n    <!-- 配置日志文件(File) -->\r\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <!-- 设置策略 -->\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\r\n            <!-- 日志文件路径：这里%d{yyyyMMdd}表示按天分类日志 -->\r\n            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/%i.log</FileNamePattern>\r\n			<!-- 启用日志清理 -->\r\n            <cleanHistoryOnStart>true</cleanHistoryOnStart>\r\n            <!-- 日志保留天数 -->\r\n            <maxHistory>30</maxHistory>\r\n            <!-- 日志文件最大的大小 -->\r\n            <maxFileSize>10MB</maxFileSize>\r\n        </rollingPolicy>\r\n        <!-- 设置格式 -->\r\n        <encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\r\n            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->\r\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\r\n            <!-- 或者使用默认配置 -->\r\n            <!-- <pattern>${FILE_LOG_PATTERN}</pattern> -->\r\n            <charset>utf8</charset>\r\n        </encoder>\r\n    </appender>\r\n	\r\n    <!-- root节点 全局日志级别，用来指定最基础的日志输出级别 -->\r\n    <root level=\"INFO\">\r\n        <appender-ref ref=\"FILE\"/>\r\n        <appender-ref ref=\"CONSOLE\"/>\r\n    </root>\r\n\r\n</configuration>\r\n```\r\n\r\n主要是配置使用 RollingFileAppender 来控制日志的生成，配置日志生成目录的时候，需要用 define 来定义，否则日志生成的目录，不一定受控制，define 定义的变量代码。\r\n```java\r\n@Component\r\npublic class LogDirConfig extends PropertyDefinerBase {\r\n\r\n    private String LOG_HOME;\r\n\r\n    @Override\r\n    public String getPropertyValue() {\r\n        this.LOG_HOME = PathUtils.getAbsolutePath(\"log\");\r\n        return this.LOG_HOME;\r\n    }\r\n\r\n}\r\n```\r\n代码`PathUtils.getAbsolutePath`只是封装里获取 jar 包所在的目录而已。\r\n'),(115, 115, '<h2 id=\"h2-u4E0Bu8F7Du5B89u88C5u5305\"><a name=\"下载安装包\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载安装包</h2><p><a href=\"https://github.com/alibaba/nacos/releases\" title=\"最新安装包\">最新安装包</a></p>\r\n<h2 id=\"h2--nacos\"><a name=\"运行Nacos\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运行Nacos</h2><p>解压 Nacos 压缩包，进入 bin 目录，启动命令(standalone代表着单机模式运行，非集群模式)</p>\r\n<pre><code class=\"lang-shell\">sh startup.sh -m standalone\r\n</code></pre>\r\n<p>使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行</p>\r\n<pre><code class=\"lang-shell\">bash startup.sh -m standalone\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>输入网址：<a href=\"http://ip:8848/nacos\">http://ip:8848/nacos</a></p>\r\n<p><img src=\"/upload/image/6f3757ec8408e82a53d52a833b4317385068.png\" alt=\"\"></p>\r\n', '## 下载安装包\r\n[最新安装包](https://github.com/alibaba/nacos/releases \"最新安装包\")\r\n## 运行Nacos\r\n解压 Nacos 压缩包，进入 bin 目录，启动命令(standalone代表着单机模式运行，非集群模式)\r\n```shell\r\nsh startup.sh -m standalone\r\n```\r\n使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行\r\n```shell\r\nbash startup.sh -m standalone\r\n```\r\n## 测试\r\n输入网址：http://ip:8848/nacos\r\n\r\n![](/upload/image/6f3757ec8408e82a53d52a833b4317385068.png)'),(116, 116, '<h2 id=\"h2-u4FEEu6539u914Du7F6Eu6587u4EF6\"><a name=\"修改配置文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>修改配置文件</h2><p>编辑配置文件</p>\r\n<pre><code class=\"lang-shell\">vim /etc/mysql/mysql.conf.d/mysqld.cnf\r\n</code></pre>\r\n<p>将 bind-address 修改为</p>\r\n<pre><code class=\"lang-shell\">bind-address = 0.0.0.0\r\n</code></pre>\r\n<p>重启 MySQL 服务</p>\r\n<pre><code class=\"lang-shell\">systemctl restart mysql\r\n</code></pre>\r\n<h2 id=\"h2-u65B0u589Eu53EFu8FDCu7A0Bu767Bu5F55u7684u7528u6237\"><a name=\"新增可远程登录的用户\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>新增可远程登录的用户</h2><pre><code class=\"lang-shell\">grant all on *.* to root@&#39;%&#39; identified by &#39;123456&#39; with grant option;\r\nflush privileges;\r\n</code></pre>\r\n<p>重启 MySQL 服务</p>\r\n<pre><code class=\"lang-shell\">systemctl restart mysql\r\n</code></pre>\r\n', '## 修改配置文件\r\n编辑配置文件\r\n```shell\r\nvim /etc/mysql/mysql.conf.d/mysqld.cnf\r\n```\r\n将 bind-address 修改为\r\n```shell\r\nbind-address = 0.0.0.0\r\n```\r\n重启 MySQL 服务\r\n```shell\r\nsystemctl restart mysql\r\n```\r\n## 新增可远程登录的用户\r\n```shell\r\ngrant all on *.* to root@\'%\' identified by \'123456\' with grant option;\r\nflush privileges;\r\n```\r\n重启 MySQL 服务\r\n```shell\r\nsystemctl restart mysql\r\n```'),(117, 117, '<h2 id=\"h2-u73AFu5883u51C6u5907\"><a name=\"环境准备\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>环境准备</h2><table>\r\n<thead>\r\n<tr>\r\n<th>软件</th>\r\n<th>版本</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>虚拟机</td>\r\n<td>VirtualBox 6.1.6</td>\r\n</tr>\r\n<tr>\r\n<td>操作系统</td>\r\n<td>Ubuntu 18.04</td>\r\n</tr>\r\n<tr>\r\n<td>Elasticsearch</td>\r\n<td>7.6.2</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"h2-u4E0Bu8F7Du5B89u88C5u5305\"><a name=\"下载安装包\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载安装包</h2><p>官方网站 <a href=\"https://www.elastic.co/cn/\" title=\"https://www.elastic.co/cn/\">https://www.elastic.co/cn/</a></p>\r\n<h2 id=\"h2-u5B89u88C5u6B65u9AA4\"><a name=\"安装步骤\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装步骤</h2><p>上传安装包到<code>/software/</code>目录下，执行解压</p>\r\n<pre><code class=\"lang-shell\">tar -zxvf elasticsearch-7.6.2-linux-x86_64.tar.gz\r\n</code></pre>\r\n<p>elasticsearch 不能使用 root 用户运行，创建新用户 es 用于运行 elasticsearch</p>\r\n<pre><code class=\"lang-shell\">groupadd es\r\nuseradd es -g es -p es\r\n</code></pre>\r\n<p>将解压出来的 elasticsearch-7.6.2 目录拥有者设置为 es</p>\r\n<pre><code class=\"lang-shell\">chown -R es:es elasticsearch-7.6.2\r\n</code></pre>\r\n<p>切换用户为 es 进入 <code>elasticsearch-7.6.2/bin</code> 目录，执行启动命令</p>\r\n<pre><code class=\"lang-shell\">./elasticsearch -d\r\n</code></pre>\r\n<p>参数 -d 表示使用守护进程方式运行</p>\r\n<h2 id=\"h2-u7F51u7EDCu8BBEu7F6E\"><a name=\"网络设置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>网络设置</h2><p>进入<code>elasticsearch-7.6.2/config</code>目录，编辑elasticsearch.yml文件，修改如下</p>\r\n<pre><code class=\"lang-shell\">network.host: 0.0.0.0\r\ncluster.initial_master_nodes: [&quot;node-1&quot;]\r\n</code></pre>\r\n<p>重启 elasticsearch</p>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>浏览器访问 <a href=\"http://ip:9200\">http://ip:9200</a> 输出如下</p>\r\n<pre><code class=\"lang-json\">{\r\n    &quot;name&quot;: &quot;server&quot;,\r\n    &quot;cluster_name&quot;: &quot;elasticsearch&quot;,\r\n    &quot;cluster_uuid&quot;: &quot;xE6k6bkXSaK1ZkeNjwyrTw&quot;,\r\n    &quot;version&quot;: {\r\n        &quot;number&quot;: &quot;7.6.2&quot;,\r\n        &quot;build_flavor&quot;: &quot;default&quot;,\r\n        &quot;build_type&quot;: &quot;tar&quot;,\r\n        &quot;build_hash&quot;: &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,\r\n        &quot;build_date&quot;: &quot;2020-03-26T06:34:37.794943Z&quot;,\r\n        &quot;build_snapshot&quot;: false,\r\n        &quot;lucene_version&quot;: &quot;8.4.0&quot;,\r\n        &quot;minimum_wire_compatibility_version&quot;: &quot;6.8.0&quot;,\r\n        &quot;minimum_index_compatibility_version&quot;: &quot;6.0.0-beta1&quot;\r\n    },\r\n    &quot;tagline&quot;: &quot;You Know, for Search&quot;\r\n}\r\n</code></pre>\r\n<p>运行正常</p>\r\n<h2 id=\"h2-u542Fu52A8u5F02u5E38u89E3u51B3u529Eu6CD5\"><a name=\"启动异常解决办法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动异常解决办法</h2><p>异常 max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<br>解决，编辑 <code>/etc/security/limits.conf</code> 倒数第二行增加</p>\r\n<pre><code class=\"lang-shell\">* soft nofile 65536\r\n* hard nofile 65536\r\n# End of file\r\n</code></pre>\r\n<p>编辑<code>/etc/sysctl.conf</code>增加</p>\r\n<pre><code class=\"lang-shell\">vm.max_map_count=655360\r\n</code></pre>\r\n<p>保存后执行</p>\r\n<pre><code class=\"lang-shell\">sysctl -p\r\n</code></pre>\r\n<p>重启 elasticsearch</p>\r\n', '## 环境准备\r\n| 软件 | 版本 |\r\n| ------------ | ------------ |\r\n| 虚拟机 | VirtualBox 6.1.6 |\r\n| 操作系统 | Ubuntu 18.04 |\r\n| Elasticsearch | 7.6.2 |\r\n\r\n## 下载安装包\r\n官方网站 [https://www.elastic.co/cn/](https://www.elastic.co/cn/ \"https://www.elastic.co/cn/\")\r\n\r\n## 安装步骤\r\n上传安装包到`/software/`目录下，执行解压\r\n```shell\r\ntar -zxvf elasticsearch-7.6.2-linux-x86_64.tar.gz\r\n```\r\nelasticsearch 不能使用 root 用户运行，创建新用户 es 用于运行 elasticsearch\r\n```shell\r\ngroupadd es\r\nuseradd es -g es -p es\r\n```\r\n将解压出来的 elasticsearch-7.6.2 目录拥有者设置为 es\r\n```shell\r\nchown -R es:es elasticsearch-7.6.2\r\n```\r\n切换用户为 es 进入 `elasticsearch-7.6.2/bin` 目录，执行启动命令\r\n```shell\r\n./elasticsearch -d\r\n```\r\n参数 -d 表示使用守护进程方式运行\r\n## 网络设置\r\n进入`elasticsearch-7.6.2/config`目录，编辑elasticsearch.yml文件，修改如下\r\n```shell\r\nnetwork.host: 0.0.0.0\r\ncluster.initial_master_nodes: [\"node-1\"]\r\n```\r\n重启 elasticsearch\r\n## 测试\r\n浏览器访问 http://ip:9200 输出如下\r\n```json\r\n{\r\n    \"name\": \"server\",\r\n    \"cluster_name\": \"elasticsearch\",\r\n    \"cluster_uuid\": \"xE6k6bkXSaK1ZkeNjwyrTw\",\r\n    \"version\": {\r\n        \"number\": \"7.6.2\",\r\n        \"build_flavor\": \"default\",\r\n        \"build_type\": \"tar\",\r\n        \"build_hash\": \"ef48eb35cf30adf4db14086e8aabd07ef6fb113f\",\r\n        \"build_date\": \"2020-03-26T06:34:37.794943Z\",\r\n        \"build_snapshot\": false,\r\n        \"lucene_version\": \"8.4.0\",\r\n        \"minimum_wire_compatibility_version\": \"6.8.0\",\r\n        \"minimum_index_compatibility_version\": \"6.0.0-beta1\"\r\n    },\r\n    \"tagline\": \"You Know, for Search\"\r\n}\r\n```\r\n运行正常\r\n## 启动异常解决办法\r\n异常 max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\r\n解决，编辑 `/etc/security/limits.conf` 倒数第二行增加\r\n```shell\r\n* soft nofile 65536\r\n* hard nofile 65536\r\n# End of file\r\n```\r\n编辑`/etc/sysctl.conf`增加\r\n```shell\r\nvm.max_map_count=655360\r\n```\r\n保存后执行\r\n```shell\r\nsysctl -p\r\n```\r\n重启 elasticsearch'),(118, 118, '<p>111</p>\r\n', '111'),(119, 119, '<h2 id=\"h2-u73AFu5883u51C6u5907\"><a name=\"环境准备\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>环境准备</h2><table>\r\n<thead>\r\n<tr>\r\n<th>软件</th>\r\n<th>版本</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>虚拟机</td>\r\n<td>VirtualBox 6.1.6</td>\r\n</tr>\r\n<tr>\r\n<td>操作系统</td>\r\n<td>Ubuntu 18.04</td>\r\n</tr>\r\n<tr>\r\n<td>Kibana</td>\r\n<td>7.6.2</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"h2-u4E0Bu8F7Du5B89u88C5u5305\"><a name=\"下载安装包\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载安装包</h2><p>官方网站 <a href=\"https://www.elastic.co/cn/\" title=\"https://www.elastic.co/cn/\">https://www.elastic.co/cn/</a></p>\r\n<h2 id=\"h2-u5B89u88C5u6B65u9AA4\"><a name=\"安装步骤\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装步骤</h2><p>上传安装包到<code>/software/</code>目录下，执行解压</p>\r\n<pre><code class=\"lang-shell\">tar -zxvf kibana-7.6.2-linux-x86_64.tar.gz\r\n</code></pre>\r\n<p>kibana 不能使用 root 用户运行，创建新用户 es 用于运行 kibana</p>\r\n<pre><code class=\"lang-shell\">groupadd es\r\nuseradd es -g es -p es\r\n</code></pre>\r\n<p>将解压出来的 kibana-7.6.2-linux-x86_64 目录拥有者设置为 es</p>\r\n<pre><code class=\"lang-shell\">chown -R es:es kibana-7.6.2-linux-x86_64\r\n</code></pre>\r\n<h2 id=\"h2-u914Du7F6E\"><a name=\"配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置</h2><p>进入<code>kibana-7.6.2-linux-x86_64/config</code>目录，kibana.yml文件，修改如下</p>\r\n<pre><code class=\"lang-shell\">server.host: &quot;0.0.0.0&quot;\r\nelasticsearch.hosts: [&quot;http://192.168.1.254:9200&quot;]\r\n</code></pre>\r\n<h2 id=\"h2-u542Fu52A8\"><a name=\"启动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动</h2><p>切换用户为 es 进入 <code>kibana-7.6.2-linux-x86_64/bin</code> 目录，执行启动命令</p>\r\n<pre><code class=\"lang-shell\">./kibana &amp;\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>浏览器访问 <a href=\"http://ip:5601\">http://ip:5601</a> 输出如下</p>\r\n<p><img src=\"/upload/image/299fc014fd67905b8d82359784a9f5c64571.png\" alt=\"\"></p>\r\n<p>运行正常</p>\r\n', '## 环境准备\r\n| 软件 | 版本 |\r\n| ------------ | ------------ |\r\n| 虚拟机 | VirtualBox 6.1.6 |\r\n| 操作系统 | Ubuntu 18.04 |\r\n| Kibana | 7.6.2 |\r\n\r\n## 下载安装包\r\n官方网站 [https://www.elastic.co/cn/](https://www.elastic.co/cn/ \"https://www.elastic.co/cn/\")\r\n\r\n## 安装步骤\r\n上传安装包到`/software/`目录下，执行解压\r\n```shell\r\ntar -zxvf kibana-7.6.2-linux-x86_64.tar.gz\r\n```\r\nkibana 不能使用 root 用户运行，创建新用户 es 用于运行 kibana\r\n```shell\r\ngroupadd es\r\nuseradd es -g es -p es\r\n```\r\n将解压出来的 kibana-7.6.2-linux-x86_64 目录拥有者设置为 es\r\n```shell\r\nchown -R es:es kibana-7.6.2-linux-x86_64\r\n```\r\n## 配置\r\n进入`kibana-7.6.2-linux-x86_64/config`目录，kibana.yml文件，修改如下\r\n```shell\r\nserver.host: \"0.0.0.0\"\r\nelasticsearch.hosts: [\"http://192.168.1.254:9200\"]\r\n```\r\n## 启动\r\n切换用户为 es 进入 `kibana-7.6.2-linux-x86_64/bin` 目录，执行启动命令\r\n```shell\r\n./kibana &\r\n```\r\n## 测试\r\n浏览器访问 http://ip:5601 输出如下\r\n\r\n![](/upload/image/299fc014fd67905b8d82359784a9f5c64571.png)\r\n\r\n运行正常'),(120, 120, '<h2 id=\"h2-u6982u8FF0\"><a name=\"概述\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>概述</h2><p>Node 应用由模块组成，采用 CommonJS 模块规范。</p>\r\n<p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。CommonJS规范规定，每个模块内部，<code>module</code>变量代表当前模块。这个变量是一个对象，它的<code>exports</code>属性（即<code>module.exports</code>）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。<code>require</code>方法用于加载模块。</p>\r\n<h2 id=\"h2-commonjs-\"><a name=\"CommonJS的服务端应用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>CommonJS的服务端应用</h2><p>编写模块 module1 </p>\r\n<pre><code class=\"lang-javascript\">module.exports = {\r\n    msg: &#39;hello world&#39;,\r\n    say() {\r\n        console.log(this.msg);\r\n    }\r\n}\r\n</code></pre>\r\n<p>编写模块 module2</p>\r\n<pre><code class=\"lang-javascript\">exports.arr = [0, 5, 1, 3, 5, 2, 9, 6, 7, 4]\r\n</code></pre>\r\n<p>编写 app.js</p>\r\n<pre><code class=\"lang-javascript\">let uniq = require(&#39;uniq&#39;);\r\nlet module1 = require(&#39;./modules/module1&#39;);\r\nlet module2 = require(&#39;./modules/module2&#39;);\r\n\r\nconsole.log(module1);\r\nconsole.log(module2);\r\n\r\nconsole.log(uniq(module2.arr))\r\n</code></pre>\r\n<p>引入项目中的模块需要指定相对路径，引入第三方模块只需要写模块名称即可。<br>在 NodeJS 环境下，可以直接使用 node xxx.js 的方式直接运行。</p>\r\n<pre><code class=\"lang-shell\">node app.js\r\n</code></pre>\r\n<p>输出如下</p>\r\n<p><img src=\"/upload/image/3c59f9d0a54a0e6517e86502bcf394543056.png\" alt=\"\"></p>\r\n<h2 id=\"h2-commonjs-\"><a name=\"CommonJS的浏览器端应用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>CommonJS的浏览器端应用</h2><p>由于浏览器不能直接识别<code>module.exports</code>和<code>require</code>，需要借助一个工具，将代码转化为浏览器可以执行的代码，安装 browserify</p>\r\n<pre><code class=\"lang-shell\">npm install -g browserify\r\n</code></pre>\r\n<p>使用命令将代码转换为浏览器可以执行代码</p>\r\n<pre><code class=\"lang-shell\">browserify src/app.js -o dist/bundle.js\r\n</code></pre>\r\n<p>新建 HTML 文件并引入 bundle.js 文件，用浏览器打开该 HTML 文件</p>\r\n<p><img src=\"/upload/image/3552356249c28a7281b0912f193d17ad8666.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4EE3u7801u4ED3u5E93\"><a name=\"代码仓库\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>代码仓库</h2><p><a href=\"https://github.com/365D1/javascript-modules.git\" title=\"https://github.com/365D1/javascript-modules.git\">https://github.com/365D1/javascript-modules.git</a></p>\r\n', '## 概述\r\nNode 应用由模块组成，采用 CommonJS 模块规范。\r\n\r\n每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。CommonJS规范规定，每个模块内部，`module`变量代表当前模块。这个变量是一个对象，它的`exports`属性（即`module.exports`）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。`require`方法用于加载模块。\r\n\r\n## CommonJS的服务端应用\r\n编写模块 module1 \r\n```javascript\r\nmodule.exports = {\r\n    msg: \'hello world\',\r\n    say() {\r\n        console.log(this.msg);\r\n    }\r\n}\r\n```\r\n编写模块 module2\r\n```javascript\r\nexports.arr = [0, 5, 1, 3, 5, 2, 9, 6, 7, 4]\r\n```\r\n编写 app.js\r\n```javascript\r\nlet uniq = require(\'uniq\');\r\nlet module1 = require(\'./modules/module1\');\r\nlet module2 = require(\'./modules/module2\');\r\n\r\nconsole.log(module1);\r\nconsole.log(module2);\r\n\r\nconsole.log(uniq(module2.arr))\r\n\r\n```\r\n引入项目中的模块需要指定相对路径，引入第三方模块只需要写模块名称即可。\r\n在 NodeJS 环境下，可以直接使用 node xxx.js 的方式直接运行。\r\n```shell\r\nnode app.js\r\n```\r\n输出如下\r\n\r\n![](/upload/image/3c59f9d0a54a0e6517e86502bcf394543056.png)\r\n## CommonJS的浏览器端应用\r\n由于浏览器不能直接识别`module.exports`和`require`，需要借助一个工具，将代码转化为浏览器可以执行的代码，安装 browserify\r\n```shell\r\nnpm install -g browserify\r\n```\r\n使用命令将代码转换为浏览器可以执行代码\r\n```shell\r\nbrowserify src/app.js -o dist/bundle.js\r\n```\r\n新建 HTML 文件并引入 bundle.js 文件，用浏览器打开该 HTML 文件\r\n\r\n![](/upload/image/3552356249c28a7281b0912f193d17ad8666.png)\r\n\r\n## 代码仓库\r\n[https://github.com/365D1/javascript-modules.git](https://github.com/365D1/javascript-modules.git \"https://github.com/365D1/javascript-modules.git\")'),(121, 121, '<h2 id=\"h2-u6982u8FF0\"><a name=\"概述\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>概述</h2><p>在 ES6 中，import、export 取代了 require、module.exports 用来引入和导出模块</p>\r\n<blockquote>\r\n<p>ES6 模块输出的是值的引用，输出接口动态绑定，而 CommonJS 输出的是值的拷贝<br>ES6 模块编译时执行，而 CommonJS 模块总是在运行时加载</p>\r\n</blockquote>\r\n<h2 id=\"h2-es6-\"><a name=\"ES6 模块化应用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>ES6 模块化应用</h2><p>由于浏览器不能完全支持 ES6 及以上语法，需要借助一个工具，将代码转化 ES5 语法，安装 Babel</p>\r\n<pre><code class=\"lang-shell\">npm install -g babel-cli\r\n</code></pre>\r\n<p>安装 ES5 转化</p>\r\n<pre><code class=\"lang-shell\">npm install --save-dev babel-preset-es2015\r\n</code></pre>\r\n<p>编写模块 module</p>\r\n<pre><code class=\"lang-javascript\">export default class {\r\n\r\n    constructor() {\r\n        this.msg = &#39;hello world&#39;;\r\n    }\r\n\r\n    say() {\r\n        console.log(this.msg);\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<p>编辑 app.js</p>\r\n<pre><code class=\"lang-javascript\">import Module from &#39;./module/module&#39;\r\nlet module = new Module();\r\nmodule.say();\r\n</code></pre>\r\n<p>新增 babel 配置文件 .babelrc</p>\r\n<pre><code class=\"lang-json\">{\r\n    &quot;presets&quot;: [\r\n        &quot;es2015&quot;\r\n    ]\r\n}\r\n</code></pre>\r\n<p>使用 babel 将 ES6 语法转化为 ES5 语法</p>\r\n<pre><code class=\"lang-shell\">babel src -d build\r\n</code></pre>\r\n<p>使用 browserify 将代码转化为浏览器可执行代码</p>\r\n<pre><code class=\"lang-shell\">browserify build\\app.js -o dist\\bundle,js\r\n</code></pre>\r\n<p>新建 HTML 文件并引入 bundle.js 文件，用浏览器打开该 HTML 文件</p>\r\n<p><img src=\"/upload/image/21f0bc60d6795c0ec51285384cd0fa826956.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4EE3u7801u4ED3u5E93\"><a name=\"代码仓库\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>代码仓库</h2><p><a href=\"https://github.com/365D1/javascript-modules.git\" title=\"https://github.com/365D1/javascript-modules.git\">https://github.com/365D1/javascript-modules.git</a></p>\r\n', '## 概述\r\n在 ES6 中，import、export 取代了 require、module.exports 用来引入和导出模块\r\n> ES6 模块输出的是值的引用，输出接口动态绑定，而 CommonJS 输出的是值的拷贝\r\n> ES6 模块编译时执行，而 CommonJS 模块总是在运行时加载\r\n\r\n## ES6 模块化应用\r\n由于浏览器不能完全支持 ES6 及以上语法，需要借助一个工具，将代码转化 ES5 语法，安装 Babel\r\n```shell\r\nnpm install -g babel-cli \r\n```\r\n安装 ES5 转化\r\n```shell\r\nnpm install --save-dev babel-preset-es2015\r\n```\r\n编写模块 module\r\n```javascript\r\nexport default class {\r\n\r\n    constructor() {\r\n        this.msg = \'hello world\';\r\n    }\r\n\r\n    say() {\r\n        console.log(this.msg);\r\n    }\r\n\r\n}\r\n```\r\n编辑 app.js\r\n```javascript\r\nimport Module from \'./module/module\'\r\nlet module = new Module();\r\nmodule.say();\r\n```\r\n新增 babel 配置文件 .babelrc\r\n```json\r\n{\r\n    \"presets\": [\r\n        \"es2015\"\r\n    ]\r\n}\r\n```\r\n使用 babel 将 ES6 语法转化为 ES5 语法\r\n```shell\r\nbabel src -d build\r\n```\r\n使用 browserify 将代码转化为浏览器可执行代码\r\n```shell\r\nbrowserify build\\app.js -o dist\\bundle,js\r\n```\r\n新建 HTML 文件并引入 bundle.js 文件，用浏览器打开该 HTML 文件\r\n\r\n![](/upload/image/21f0bc60d6795c0ec51285384cd0fa826956.png)\r\n\r\n## 代码仓库\r\n[https://github.com/365D1/javascript-modules.git](https://github.com/365D1/javascript-modules.git \"https://github.com/365D1/javascript-modules.git\")'),(122, 122, '<p>用户运营里最重要的两端，一端是引入用户，一端是避免流失，如果把这两端比作头和尾，中间最健壮的躯干就是激励留存。</p>\r\n<h2 id=\"h2-u5934u8854\"><a name=\"头衔\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>头衔</h2><p>头衔是一种简单、易用，同时几乎没有其他运营成本得策略，用来体现用户的贡献或活跃度。<br>通常头衔会采用<strong>渐进式</strong>的设计，并且可能有一个较长的成长周期，头衔代表了一种虚拟荣誉，外露给其他用户查看，从而彰显头衔拥有者独特的地位和价值。<br>大多数的头衔设置都遵循一些原则：名称渐进、易懂；与用户贡献或者活跃度挂钩；可能代表一定的权限，也可能没有任何额外的权限。</p>\r\n<h2 id=\"h2-u7B49u7EA7\"><a name=\"等级\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>等级</h2><p>等级系统与头衔其实是一脉相承的，都是着眼于用户的活跃度或者贡献。等级系统现在更多的被制作为<strong>成长值系统</strong>，用户通过系统认可的行为来积攒成长值，达到系统规定的额度，就会自动升级。同时，等级和头衔有差别，头衔获得后不会被取消，但等级可以根据用户行为的变化而发生相应的变化，可以提升也可以下降。<br>等级机制之所以能够激励用户，是因为不同的等级会有对应的增值服务设计。所以，等级通常和“特权”同时出现。在整个会员等级体系中，最核心的并不是会员等级本身，而是<strong>对应的权益</strong>，只有权益设计合理，用户才会对等级有所追求。</p>\r\n<h2 id=\"h2-u52CBu7AE0\"><a name=\"勋章\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>勋章</h2><p>与头衔、等级不同，勋章非渐进式，它对应的是单一事件。用户获取的勋章可能有稀缺性，而勋章是一种可以被所有人查看的信息，所以用户通常会为了获取勋章而做出对应的行为。<br>勋章对应的是某一个事件，希望激励用户参与，有些勋章还有收集之后换奖品的作用。可兑换的勋章，比单一展示目的的勋章，对用户更有激励价值。<br>勋章的设计原则需要遵循：造型美观；用户获取勋章有明确的指引；勋章可以展示给其它用户或者收集后兑换额外的收益。</p>\r\n<h2 id=\"h2-u6210u5C31\"><a name=\"成就\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>成就</h2><p>成就也是稀缺的，但稀缺性低于勋章，适用于有纪念性意义、有大规模效应的场合。<br>成就设计应当遵循的原则：循环渐进的获取逻辑；可以展示给其他用户的渠道；部分成就应当具备稀缺性，并具有普适性。</p>\r\n<h2 id=\"h2-u6392u540Du4E0Eu7ADEu4E89\"><a name=\"排名与竞争\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>排名与竞争</h2><p>排名与竞争策略，运用正反激励的手段，刺激用户使用产品。设计这类激励策略，需要注意：正面激励与负面激励兼顾；放大正面激励的快感，控制负面激励带来的挫败感；从负面激励转向正面激励的操作成本较低，可以鼓励用户进行转向。</p>\r\n<h2 id=\"h2-u79EFu5206\"><a name=\"积分\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>积分</h2><p>积分大多数通过鼓励用户做出系统认可的行为获取，获取的积分可以兑换礼品或与等级关联。使用积分体系需要注意：积分应当对用户有价值；如果积分能够兑换实物，需要确定积分的成本承担方。</p>\r\n<h2 id=\"h2-u6FC0u52B1u7B56u7565u7684u8BBEu8BA1\"><a name=\"激励策略的设计\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>激励策略的设计</h2><p>用户激励还有很多其他措施，设计的初衷都是为了刺激用户的持续活跃与留存，甚至是付费。设计激励制度，需要考虑几个层面的内容：</p>\r\n<h4 id=\"h4-u4EA7u54C1u7279u70B9\"><a name=\"产品特点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>产品特点</h4><p>你的产品有什么特点，什么功能与哪些KPI相关联。</p>\r\n<h4 id=\"h4-u8FD0u8425u76EEu6807\"><a name=\"运营目标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运营目标</h4><p>用户的哪些行为应当被鼓励，哪些行为应当被遏制，激励手段分正、反向，奖惩有度才能更好激励用户。</p>\r\n<h4 id=\"h4-u5BA2u6237u7FA4u4F53u7684u7279u5F81\"><a name=\"客户群体的特征\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>客户群体的特征</h4><p>用户群体有哪些特征，能否顺势而为。</p>\r\n<h4 id=\"h4-u6210u672Cu7ED3u6784\"><a name=\"成本结构\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>成本结构</h4><p>一套激励机制是否需要付出成本，成本总计多少，分摊给单个用户是多少，这些都需要测算。</p>\r\n', '用户运营里最重要的两端，一端是引入用户，一端是避免流失，如果把这两端比作头和尾，中间最健壮的躯干就是激励留存。\r\n## 头衔\r\n头衔是一种简单、易用，同时几乎没有其他运营成本得策略，用来体现用户的贡献或活跃度。\r\n通常头衔会采用**渐进式**的设计，并且可能有一个较长的成长周期，头衔代表了一种虚拟荣誉，外露给其他用户查看，从而彰显头衔拥有者独特的地位和价值。\r\n大多数的头衔设置都遵循一些原则：名称渐进、易懂；与用户贡献或者活跃度挂钩；可能代表一定的权限，也可能没有任何额外的权限。\r\n## 等级\r\n等级系统与头衔其实是一脉相承的，都是着眼于用户的活跃度或者贡献。等级系统现在更多的被制作为**成长值系统**，用户通过系统认可的行为来积攒成长值，达到系统规定的额度，就会自动升级。同时，等级和头衔有差别，头衔获得后不会被取消，但等级可以根据用户行为的变化而发生相应的变化，可以提升也可以下降。\r\n等级机制之所以能够激励用户，是因为不同的等级会有对应的增值服务设计。所以，等级通常和“特权”同时出现。在整个会员等级体系中，最核心的并不是会员等级本身，而是**对应的权益**，只有权益设计合理，用户才会对等级有所追求。\r\n## 勋章\r\n与头衔、等级不同，勋章非渐进式，它对应的是单一事件。用户获取的勋章可能有稀缺性，而勋章是一种可以被所有人查看的信息，所以用户通常会为了获取勋章而做出对应的行为。\r\n勋章对应的是某一个事件，希望激励用户参与，有些勋章还有收集之后换奖品的作用。可兑换的勋章，比单一展示目的的勋章，对用户更有激励价值。\r\n勋章的设计原则需要遵循：造型美观；用户获取勋章有明确的指引；勋章可以展示给其它用户或者收集后兑换额外的收益。\r\n## 成就\r\n成就也是稀缺的，但稀缺性低于勋章，适用于有纪念性意义、有大规模效应的场合。\r\n成就设计应当遵循的原则：循环渐进的获取逻辑；可以展示给其他用户的渠道；部分成就应当具备稀缺性，并具有普适性。\r\n## 排名与竞争\r\n排名与竞争策略，运用正反激励的手段，刺激用户使用产品。设计这类激励策略，需要注意：正面激励与负面激励兼顾；放大正面激励的快感，控制负面激励带来的挫败感；从负面激励转向正面激励的操作成本较低，可以鼓励用户进行转向。\r\n## 积分\r\n积分大多数通过鼓励用户做出系统认可的行为获取，获取的积分可以兑换礼品或与等级关联。使用积分体系需要注意：积分应当对用户有价值；如果积分能够兑换实物，需要确定积分的成本承担方。\r\n## 激励策略的设计\r\n用户激励还有很多其他措施，设计的初衷都是为了刺激用户的持续活跃与留存，甚至是付费。设计激励制度，需要考虑几个层面的内容：\r\n#### 产品特点\r\n你的产品有什么特点，什么功能与哪些KPI相关联。\r\n#### 运营目标\r\n用户的哪些行为应当被鼓励，哪些行为应当被遏制，激励手段分正、反向，奖惩有度才能更好激励用户。\r\n#### 客户群体的特征\r\n用户群体有哪些特征，能否顺势而为。\r\n#### 成本结构\r\n一套激励机制是否需要付出成本，成本总计多少，分摊给单个用户是多少，这些都需要测算。'),(123, 123, '<p>传统商业的用户管理的做法种，最简单最广泛应用的就是建立RFM模型，RFM模型是一种工具和手段。R是Recency，最近一次消费；F是Frequency，消费频率；M是Monetary，消费金额。<br><img src=\"/upload/image/36a9a226647089a47993061142d8be961891.png\" alt=\"\"><br>在整个RFM模型中，最近一次消费的时间越近越好，因为这类用户更敏感，基于这类用户进行的运营和营销产生的效果会更好；而在限定时间内的消费频率越高越好，消费金额越高越好，原因是，<strong>消费频率</strong>高说明用户的满意度高，原意重复够买，更有价值；<strong>消费金额</strong>高则说明用户本身的价值高。</p>\r\n<h2 id=\"h2-u6848u4F8B\"><a name=\"案例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>案例</h2><p>对R进行分级<br><img src=\"/upload/image/9a7c8a0ed3d200a637daa596a701e0723718.png\" alt=\"\"><br>对F进行分级<br><img src=\"/upload/image/11a46f1461ce8de0242b7c028c90f6d83353.png\" alt=\"\"><br>对M进行分级<br><img src=\"/upload/image/004885d9bf29c41859a4cb85b6d9b3d55632.png\" alt=\"\"></p>\r\n', '传统商业的用户管理的做法种，最简单最广泛应用的就是建立RFM模型，RFM模型是一种工具和手段。R是Recency，最近一次消费；F是Frequency，消费频率；M是Monetary，消费金额。\r\n![](/upload/image/36a9a226647089a47993061142d8be961891.png)\r\n在整个RFM模型中，最近一次消费的时间越近越好，因为这类用户更敏感，基于这类用户进行的运营和营销产生的效果会更好；而在限定时间内的消费频率越高越好，消费金额越高越好，原因是，**消费频率**高说明用户的满意度高，原意重复够买，更有价值；**消费金额**高则说明用户本身的价值高。\r\n## 案例\r\n对R进行分级\r\n![](/upload/image/9a7c8a0ed3d200a637daa596a701e0723718.png)\r\n对F进行分级\r\n![](/upload/image/11a46f1461ce8de0242b7c028c90f6d83353.png)\r\n对M进行分级\r\n![](/upload/image/004885d9bf29c41859a4cb85b6d9b3d55632.png)'),(124, 124, '<h2 id=\"h2-u5149u7684u6982u5FF5\"><a name=\"光的概念\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光的概念</h2><p>在摄影中，光线是形成画面的根本，是构图、造型的重要手段。光线不同，产生的艺术效果就不同，给人的感觉也就不同。摄影其实是对光线的处理和把握，是一个正确选择和表现光线，生动、准确的表达主题思想的过程。<br><img src=\"/upload/image/dc42390925f7381783259695d566fba21869.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5149u7684u4F5Cu7528\"><a name=\"光的作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光的作用</h2><p>通过对光的选择、调度、控制，逼真的再现被摄对象的形状、颜色、质感和空间位置。运用特定的光线，还可以有选择的突出或者抑制被摄对象的某些内容的表现，以实现作者的创意。同时，光线的运用对于作品主题的表达、环境氛围的渲染，以及思想感情的传递起着重要作用。<br>因此，认识光线进而利用光线，光与影的关系来构成影像和影调，是摄影创作中一个重要环节，它直接影响到摄影作品的画面效果，影响到作品的感染力。</p>\r\n<p><img src=\"/upload/image/005b4d483758c420073d6176964e9e9b4253.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5149u5728u6444u5F71u4F5Cu54C1u4E2Du7684u4F5Cu7528\"><a name=\"光在摄影作品中的作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光在摄影作品中的作用</h2><blockquote>\r\n<p>表现形状、色彩、质感<br>表现立体感与空间感<br>营造气氛<br>特殊的光影效果</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/494e35beaf16385da19079ab730629357913.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5149u7684u5206u7C7B\"><a name=\"光的分类\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光的分类</h2><p>光线可以分为自然光与人造光两大类。以自然光为例，可分为直射光，散射光，反射光。</p>\r\n<p><img src=\"/upload/image/c2fab8a93465412cf1e15ec3a8c8bc7f7036.png\" alt=\"\"></p>\r\n<p>通常来说摄影外拍时，上午9点到10点左右时段，下午3点到5点左右的光线亮度与角度较为适应，有利展示景物的质感与细节，而且照射的角度能更好的表现出景物的立体感与纵深感。</p>\r\n<h2 id=\"h2-u6563u5C04u5149\"><a name=\"散射光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>散射光</h2><p>散射光的光质柔和，光比小，而且投影浅，阴影少，层次丰富。<br>天空光：天空光主要是指太阳光在大气层中经过多次反射，形成柔和漫散射光。<br>薄云遮日：当太阳被薄薄的云雾遮挡时，便失去了直射光的性质，但仍有一定的方向性。<br>乌云密布：浓云密布的阴天、雨天或雪天，太阳光被厚厚的云雾遮挡，形成阴沉的漫射光，完全失去了方向性，光线分部均匀。</p>\r\n<h2 id=\"h2-u5BA4u5185u5916u81EAu7136u5149u7684u533Au522B\"><a name=\"室内外自然光的区别\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>室内外自然光的区别</h2><p>内室自然光与室外自然光有着明显的区别，它看起来像散射光，但有明显的方向性。</p>\r\n<blockquote>\r\n<p>受室外自然光的影响，室外自然光越强，室内越明亮，反之越暗。<br>受室外景物的影响，如果室外有高大的建筑物或者植物等遮挡了门窗，射入室内的光线就少，室内就阴暗，反之则明亮。<br>受门窗的影响，门窗越大，越多，射入室内的自然光就越多，室内就越明亮，反之，则越阴暗。<br>受被摄主体距离门窗远近影响，若被摄主体距离门窗近，则主体受光越多，显得明亮，阴暗反差大，反之则反差小。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u4EBAu5DE5u5149\"><a name=\"人工光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>人工光</h2><p>人工光是摄影常用的光源，其光照强度、照明方向、照片高度和光线色温等都可以由摄影者调控。可以供摄影照明的人工光源有很多，除电子闪光灯以外，常用的还有聚光灯、漫散射灯、照相强光灯、适应碘钨灯、荧光灯、白炽灯以及火光、烛光等。<br>人工光可以弥补自然光源的不足，有些场合甚至完全使用人工光进行拍摄。</p>\r\n', '## 光的概念\r\n在摄影中，光线是形成画面的根本，是构图、造型的重要手段。光线不同，产生的艺术效果就不同，给人的感觉也就不同。摄影其实是对光线的处理和把握，是一个正确选择和表现光线，生动、准确的表达主题思想的过程。\r\n![](/upload/image/dc42390925f7381783259695d566fba21869.png)\r\n## 光的作用\r\n通过对光的选择、调度、控制，逼真的再现被摄对象的形状、颜色、质感和空间位置。运用特定的光线，还可以有选择的突出或者抑制被摄对象的某些内容的表现，以实现作者的创意。同时，光线的运用对于作品主题的表达、环境氛围的渲染，以及思想感情的传递起着重要作用。\r\n因此，认识光线进而利用光线，光与影的关系来构成影像和影调，是摄影创作中一个重要环节，它直接影响到摄影作品的画面效果，影响到作品的感染力。\r\n\r\n![](/upload/image/005b4d483758c420073d6176964e9e9b4253.png)\r\n## 光在摄影作品中的作用\r\n> 表现形状、色彩、质感\r\n> 表现立体感与空间感\r\n> 营造气氛\r\n> 特殊的光影效果\r\n\r\n![](/upload/image/494e35beaf16385da19079ab730629357913.png)\r\n## 光的分类\r\n光线可以分为自然光与人造光两大类。以自然光为例，可分为直射光，散射光，反射光。\r\n\r\n![](/upload/image/c2fab8a93465412cf1e15ec3a8c8bc7f7036.png)\r\n\r\n通常来说摄影外拍时，上午9点到10点左右时段，下午3点到5点左右的光线亮度与角度较为适应，有利展示景物的质感与细节，而且照射的角度能更好的表现出景物的立体感与纵深感。\r\n\r\n## 散射光\r\n散射光的光质柔和，光比小，而且投影浅，阴影少，层次丰富。\r\n天空光：天空光主要是指太阳光在大气层中经过多次反射，形成柔和漫散射光。\r\n薄云遮日：当太阳被薄薄的云雾遮挡时，便失去了直射光的性质，但仍有一定的方向性。\r\n乌云密布：浓云密布的阴天、雨天或雪天，太阳光被厚厚的云雾遮挡，形成阴沉的漫射光，完全失去了方向性，光线分部均匀。\r\n## 室内外自然光的区别\r\n内室自然光与室外自然光有着明显的区别，它看起来像散射光，但有明显的方向性。\r\n> 受室外自然光的影响，室外自然光越强，室内越明亮，反之越暗。\r\n> 受室外景物的影响，如果室外有高大的建筑物或者植物等遮挡了门窗，射入室内的光线就少，室内就阴暗，反之则明亮。\r\n> 受门窗的影响，门窗越大，越多，射入室内的自然光就越多，室内就越明亮，反之，则越阴暗。\r\n> 受被摄主体距离门窗远近影响，若被摄主体距离门窗近，则主体受光越多，显得明亮，阴暗反差大，反之则反差小。\r\n\r\n## 人工光\r\n人工光是摄影常用的光源，其光照强度、照明方向、照片高度和光线色温等都可以由摄影者调控。可以供摄影照明的人工光源有很多，除电子闪光灯以外，常用的还有聚光灯、漫散射灯、照相强光灯、适应碘钨灯、荧光灯、白炽灯以及火光、烛光等。\r\n人工光可以弥补自然光源的不足，有些场合甚至完全使用人工光进行拍摄。'),(125, 125, '<p>11</p>\r\n', '11'),(126, 126, '<h2 id=\"h2-jsr107-\"><a name=\"JSR107规范\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>JSR107规范</h2><p>JSR107规范定义了一组接口：</p>\r\n<blockquote>\r\n<p>CachingProvider：定义了创建、配置、获取、管理和控制多个CacheManager。一个应用可以在运行期访问多个CacheManager。</p>\r\n<p>CacheManager：定义了创建、配置、获取、管理和控制多个唯一命名的Cache，这些Cache存在于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。</p>\r\n<p>Cache：临时存储以Key为索引的值。</p>\r\n<p>Entry：存储在Cache中的Key-value对。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/35d4133cd8d217283fe4855b2ef5d98e9424.png\" alt=\"\"></p>\r\n<h2 id=\"h2-spring-boot-\"><a name=\"spring boot 缓存注解\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>spring boot 缓存注解</h2><p>spring boot 定义了一组注解用于在开发中快速实现缓存功能。</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>注解</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>Cache</td>\r\n<td>缓存接口，定义缓存操作。实现有 RedisCache、EhCacheCache、ConcurrentMapCache 等</td>\r\n</tr>\r\n<tr>\r\n<td>CacheManager</td>\r\n<td>缓存管理器，管理各种缓存（Cache）组件</td>\r\n</tr>\r\n<tr>\r\n<td><a href=\"https://github.com/Cacheable\" title=\"&#64;Cacheable\" class=\"at-link\">@Cacheable</a></td>\r\n<td>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</td>\r\n</tr>\r\n<tr>\r\n<td><a href=\"https://github.com/CacheEvict\" title=\"&#64;CacheEvict\" class=\"at-link\">@CacheEvict</a></td>\r\n<td>清空缓存</td>\r\n</tr>\r\n<tr>\r\n<td><a href=\"https://github.com/CachePut\" title=\"&#64;CachePut\" class=\"at-link\">@CachePut</a></td>\r\n<td>保证方法被调用，又希望被缓存</td>\r\n</tr>\r\n<tr>\r\n<td><a href=\"https://github.com/EnableCaching\" title=\"&#64;EnableCaching\" class=\"at-link\">@EnableCaching</a></td>\r\n<td>开启基于注解的缓存</td>\r\n</tr>\r\n<tr>\r\n<td>keyGenerator</td>\r\n<td>缓存数据时 key 生成策略</td>\r\n</tr>\r\n<tr>\r\n<td>serialize</td>\r\n<td>缓存数据时 value 序列化策略</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"h2--spel-\"><a name=\"缓存注解的 SpEL 表达式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>缓存注解的 SpEL 表达式</h2><table>\r\n<thead>\r\n<tr>\r\n<th>名字</th>\r\n<th>位置</th>\r\n<th>描述</th>\r\n<th>示例</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>methodName</td>\r\n<td>root object</td>\r\n<td>当前被调用的方法名</td>\r\n<td>#root.methodName</td>\r\n</tr>\r\n<tr>\r\n<td>method</td>\r\n<td>root object</td>\r\n<td>当前被调用的方法</td>\r\n<td>#root.method.name</td>\r\n</tr>\r\n<tr>\r\n<td>target</td>\r\n<td>root object</td>\r\n<td>当前被调用的目标对象</td>\r\n<td>#root.target</td>\r\n</tr>\r\n<tr>\r\n<td>targetClass</td>\r\n<td>root object</td>\r\n<td>当前被调用的目标对象类</td>\r\n<td>#root.targetClass</td>\r\n</tr>\r\n<tr>\r\n<td>args</td>\r\n<td>root object</td>\r\n<td>当前被调用的方法的参数列表</td>\r\n<td>#root.args[0]</td>\r\n</tr>\r\n<tr>\r\n<td>caches</td>\r\n<td>root object</td>\r\n<td>当前方法调用使用的缓存列表</td>\r\n<td>#root.caches[0].name</td>\r\n</tr>\r\n<tr>\r\n<td>argument name</td>\r\n<td>evaluation context</td>\r\n<td>方法参数的名称，可以直接 #参数名或者 #索引</td>\r\n<td>#id、#0</td>\r\n</tr>\r\n<tr>\r\n<td>result</td>\r\n<td>evaluation context</td>\r\n<td>方法执行后的返回值</td>\r\n<td>#result</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"h2-u793Au4F8B\"><a name=\"示例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>示例</h2><p>搭建好 spring boot web 项目，在启动类加上注解开启缓存</p>\r\n<pre><code class=\"lang-java\">@SpringBootApplication\r\n@EnableCaching\r\npublic class CacheApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(CacheApplication.class, args);\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<p>在 service 实现类中定义缓存名称，则该类的其它缓存方法将都使用该缓存名称</p>\r\n<pre><code class=\"lang-java\">@CacheConfig(cacheNames = &quot;user&quot;)\r\n@Service\r\npublic class UserServiceImpl implements UserService {\r\n}\r\n</code></pre>\r\n<p>查询结果缓存使用<code><a href=\"https://github.com/Cacheable\" title=\"&#64;Cacheable\" class=\"at-link\">@Cacheable</a></code>，定义 key 的规则和结果判断</p>\r\n<pre><code class=\"lang-java\">    @Cacheable(key = &quot;#id&quot;, unless = &quot;#result == null&quot;)\r\n    @Override\r\n    public User detail(Integer id) {\r\n        log.info(&quot;{}&quot;, &quot;执行查询&quot;);\r\n        return userDao.detail(id);\r\n    }\r\n</code></pre>\r\n<p>更新缓存使用<code><a href=\"https://github.com/CachePut\" title=\"&#64;CachePut\" class=\"at-link\">@CachePut</a></code>，定义要更新的 key ，<a href=\"https://github.com/CachePut\" title=\"&#64;CachePut\" class=\"at-link\">@CachePut</a>在方法后执行，所以被注解的方法一定会执行</p>\r\n<pre><code class=\"lang-java\">    @CachePut(key = &quot;#result.id&quot;)\r\n    @Override\r\n    public User update(User user) {\r\n        log.info(&quot;{}&quot;, &quot;执行更新&quot;);\r\n        userDao.update(user.getNickName(), user.getId());\r\n        return user;\r\n    }\r\n</code></pre>\r\n<p>删除缓存使用<code><a href=\"https://github.com/CacheEvict\" title=\"&#64;CacheEvict\" class=\"at-link\">@CacheEvict</a></code>，定义要删除的 key </p>\r\n<pre><code class=\"lang-java\">    @CacheEvict(key = &quot;#id&quot;)\r\n    @Override\r\n    public void delete(Integer id) {\r\n        log.info(&quot;{}&quot;, &quot;执行删除&quot;);\r\n        userDao.delete(id);\r\n    }\r\n</code></pre>\r\n<h2 id=\"h2-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>github</h2><p><a href=\"https://github.com/365D1/spring-boot-cache.git\" title=\"https://github.com/365D1/spring-boot-cache.git\">https://github.com/365D1/spring-boot-cache.git</a></p>\r\n', '## JSR107规范\r\nJSR107规范定义了一组接口：\r\n> CachingProvider：定义了创建、配置、获取、管理和控制多个CacheManager。一个应用可以在运行期访问多个CacheManager。\r\n\r\n> CacheManager：定义了创建、配置、获取、管理和控制多个唯一命名的Cache，这些Cache存在于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。\r\n\r\n> Cache：临时存储以Key为索引的值。\r\n\r\n> Entry：存储在Cache中的Key-value对。\r\n\r\n![](/upload/image/35d4133cd8d217283fe4855b2ef5d98e9424.png)\r\n\r\n## spring boot 缓存注解\r\nspring boot 定义了一组注解用于在开发中快速实现缓存功能。\r\n\r\n| 注解 | 说明 |\r\n| ------------ | ------------ |\r\n| Cache | 缓存接口，定义缓存操作。实现有 RedisCache、EhCacheCache、ConcurrentMapCache 等 |\r\n| CacheManager | 缓存管理器，管理各种缓存（Cache）组件 |\r\n| @Cacheable | 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存 |\r\n| @CacheEvict | 清空缓存 |\r\n| @CachePut | 保证方法被调用，又希望被缓存 |\r\n| @EnableCaching | 开启基于注解的缓存 |\r\n| keyGenerator | 缓存数据时 key 生成策略 |\r\n| serialize | 缓存数据时 value 序列化策略 |\r\n\r\n## 缓存注解的 SpEL 表达式\r\n| 名字 | 位置 | 描述 | 示例 |\r\n| ------------ | ------------ | ------------ | ------------ |\r\n| methodName | root object | 当前被调用的方法名 | #root.methodName |\r\n| method | root object | 当前被调用的方法 | #root.method.name |\r\n| target | root object | 当前被调用的目标对象 | #root.target |\r\n| targetClass | root object | 当前被调用的目标对象类 | #root.targetClass |\r\n| args | root object | 当前被调用的方法的参数列表 | #root.args[0] |\r\n| caches | root object | 当前方法调用使用的缓存列表 | #root.caches[0].name |\r\n| argument name | evaluation context | 方法参数的名称，可以直接 #参数名或者 #索引 | #id、#0 |\r\n| result | evaluation context | 方法执行后的返回值 | #result |\r\n\r\n## 示例\r\n搭建好 spring boot web 项目，在启动类加上注解开启缓存\r\n```java\r\n@SpringBootApplication\r\n@EnableCaching\r\npublic class CacheApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(CacheApplication.class, args);\r\n    }\r\n\r\n}\r\n```\r\n在 service 实现类中定义缓存名称，则该类的其它缓存方法将都使用该缓存名称\r\n```java\r\n@CacheConfig(cacheNames = \"user\")\r\n@Service\r\npublic class UserServiceImpl implements UserService {\r\n}\r\n```\r\n查询结果缓存使用`@Cacheable`，定义 key 的规则和结果判断\r\n```java\r\n	@Cacheable(key = \"#id\", unless = \"#result == null\")\r\n    @Override\r\n    public User detail(Integer id) {\r\n        log.info(\"{}\", \"执行查询\");\r\n        return userDao.detail(id);\r\n    }\r\n```\r\n更新缓存使用`@CachePut`，定义要更新的 key ，@CachePut在方法后执行，所以被注解的方法一定会执行\r\n```java\r\n    @CachePut(key = \"#result.id\")\r\n    @Override\r\n    public User update(User user) {\r\n        log.info(\"{}\", \"执行更新\");\r\n        userDao.update(user.getNickName(), user.getId());\r\n        return user;\r\n    }\r\n```\r\n删除缓存使用`@CacheEvict`，定义要删除的 key \r\n```java\r\n    @CacheEvict(key = \"#id\")\r\n    @Override\r\n    public void delete(Integer id) {\r\n        log.info(\"{}\", \"执行删除\");\r\n        userDao.delete(id);\r\n    }\r\n```\r\n## github\r\n[https://github.com/365D1/spring-boot-cache.git](https://github.com/365D1/spring-boot-cache.git \"https://github.com/365D1/spring-boot-cache.git\")'),(127, 127, '<h2 id=\"h2-u5F15u5165u4F9Du8D56\"><a name=\"引入依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>引入依赖</h2><pre><code class=\"lang-xml\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n</code></pre>\r\n<h2 id=\"h2--redis-\"><a name=\"配置 Redis 连接\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置 Redis 连接</h2><pre><code class=\"lang-yaml\">spring:\r\n  redis:\r\n    host: 192.168.1.254\r\n    port: 6379\r\n</code></pre>\r\n<h2 id=\"h2--redis-json\"><a name=\"配置 Redis 序列化使用 JSON\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置 Redis 序列化使用 JSON</h2><pre><code class=\"lang-java\">@EnableCaching\r\n@Configuration\r\npublic class RedisConfig extends CachingConfigurerSupport {\r\n\r\n    @Bean\r\n    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) {\r\n\r\n        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();\r\n\r\n        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();\r\n\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper om = new ObjectMapper();\r\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(om);\r\n\r\n        template.setConnectionFactory(factory);\r\n        // key 序列化方式\r\n        template.setKeySerializer(redisSerializer);\r\n        // value 序列化\r\n        template.setValueSerializer(jackson2JsonRedisSerializer);\r\n        // value hashmap 序列化\r\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\r\n\r\n        return template;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\r\n        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n\r\n        //解决查询缓存转换异常的问题\r\n        ObjectMapper om = new ObjectMapper();\r\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(om);\r\n\r\n        // 配置序列化（解决乱码的问题）,过期时间 1 小时\r\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\r\n                .entryTtl(Duration.ofHours(1))\r\n                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))\r\n                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))\r\n                .disableCachingNullValues();\r\n\r\n        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)\r\n                .cacheDefaults(config)\r\n                .build();\r\n        return cacheManager;\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<h2 id=\"h2-u67E5u8BE2u7F13u5B58\"><a name=\"查询缓存\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查询缓存</h2><pre><code class=\"lang-java\">    @Cacheable(key = &quot;#id&quot;, unless = &quot;#result == null&quot;)\r\n    @Override\r\n    public User query(Integer id) {\r\n        log.info(&quot;执行查询&quot;);\r\n        User user = new User();\r\n        user.setId(id);\r\n        user.setName(&quot;蔡徐坤&quot;);\r\n        return user;\r\n    }\r\n</code></pre>\r\n<p>查看 redis 数据</p>\r\n<p><img src=\"/upload/image/ac642f6b7b8678cc8aacad46101791f08778.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4FEEu6539u7F13u5B58\"><a name=\"修改缓存\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>修改缓存</h2><pre><code class=\"lang-java\">    @CachePut(key = &quot;#user.id&quot;)\r\n    @Override\r\n    public User modify(User user) {\r\n        return user;\r\n    }\r\n</code></pre>\r\n<p>查看 redis 数据</p>\r\n<p><img src=\"/upload/image/e7d1ce2d8551e74a61e0b39d6958cbb35294.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5220u9664u7F13u5B58\"><a name=\"删除缓存\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>删除缓存</h2><pre><code class=\"lang-java\">    @CacheEvict(key = &quot;#id&quot;)\r\n    @Override\r\n    public void remove(Integer id) {\r\n\r\n    }\r\n</code></pre>\r\n<p>查看 redis 数据</p>\r\n<p><img src=\"/upload/image/4fabb466e5e77670e85eec8aeb25bbcc9008.png\" alt=\"\"></p>\r\n<h2 id=\"h2-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>github</h2><p><a href=\"https://github.com/365D1/spring-boot-cache-redis.git\" title=\"https://github.com/365D1/spring-boot-cache-redis.git\">https://github.com/365D1/spring-boot-cache-redis.git</a></p>\r\n', '## 引入依赖\r\n```xml\r\n<dependency>\r\n	<groupId>org.springframework.boot</groupId>\r\n	<artifactId>spring-boot-starter-data-redis</artifactId>\r\n</dependency>\r\n```\r\n## 配置 Redis 连接\r\n```yaml\r\nspring:\r\n  redis:\r\n    host: 192.168.1.254\r\n    port: 6379\r\n```\r\n## 配置 Redis 序列化使用 JSON\r\n```java\r\n@EnableCaching\r\n@Configuration\r\npublic class RedisConfig extends CachingConfigurerSupport {\r\n\r\n    @Bean\r\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\r\n\r\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\r\n\r\n        RedisSerializer<String> redisSerializer = new StringRedisSerializer();\r\n\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper om = new ObjectMapper();\r\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(om);\r\n\r\n        template.setConnectionFactory(factory);\r\n        // key 序列化方式\r\n        template.setKeySerializer(redisSerializer);\r\n        // value 序列化\r\n        template.setValueSerializer(jackson2JsonRedisSerializer);\r\n        // value hashmap 序列化\r\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\r\n\r\n        return template;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\r\n        RedisSerializer<String> redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n\r\n        //解决查询缓存转换异常的问题\r\n        ObjectMapper om = new ObjectMapper();\r\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(om);\r\n\r\n        // 配置序列化（解决乱码的问题）,过期时间 1 小时\r\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\r\n                .entryTtl(Duration.ofHours(1))\r\n                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))\r\n                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))\r\n                .disableCachingNullValues();\r\n\r\n        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)\r\n                .cacheDefaults(config)\r\n                .build();\r\n        return cacheManager;\r\n    }\r\n	\r\n}\r\n```\r\n## 查询缓存\r\n```java\r\n	@Cacheable(key = \"#id\", unless = \"#result == null\")\r\n    @Override\r\n    public User query(Integer id) {\r\n        log.info(\"执行查询\");\r\n        User user = new User();\r\n        user.setId(id);\r\n        user.setName(\"蔡徐坤\");\r\n        return user;\r\n    }\r\n```\r\n查看 redis 数据\r\n\r\n![](/upload/image/ac642f6b7b8678cc8aacad46101791f08778.png)\r\n\r\n## 修改缓存\r\n```java\r\n    @CachePut(key = \"#user.id\")\r\n    @Override\r\n    public User modify(User user) {\r\n        return user;\r\n    }\r\n```\r\n查看 redis 数据\r\n\r\n![](/upload/image/e7d1ce2d8551e74a61e0b39d6958cbb35294.png)\r\n\r\n## 删除缓存\r\n```java\r\n    @CacheEvict(key = \"#id\")\r\n    @Override\r\n    public void remove(Integer id) {\r\n\r\n    }\r\n```\r\n查看 redis 数据\r\n\r\n![](/upload/image/4fabb466e5e77670e85eec8aeb25bbcc9008.png)\r\n\r\n## github\r\n[https://github.com/365D1/spring-boot-cache-redis.git](https://github.com/365D1/spring-boot-cache-redis.git \"https://github.com/365D1/spring-boot-cache-redis.git\")'),(128, 128, '<p>在FPS游戏中，每个人物都有在3D世界中的坐标，称为世界坐标，这些坐标一般都是以浮点数存储的，所以不断改变这些数值，再进行内存扫描就可以找到，可以通过不断改变 z 轴的数值来获取 z 轴的数据，而游戏的坐标一般是连续存放的，z 轴附近的数据就是 x y 轴的。</p>\r\n<h2 id=\"h2-u672Cu4EBAu5750u6807\"><a name=\"本人坐标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>本人坐标</h2><p>如下图所示，先找到一个有高度差距的地方。</p>\r\n<p><img src=\"/upload/image/61195d9fc6527802bd950f955356d64a3271.png\" alt=\"\"></p>\r\n<p>以<code>单浮点</code>和<code>未知的初始值</code>搜索一次游戏进程数据。</p>\r\n<p><img src=\"/upload/image/0fc868f16205819a6716f984b3073c005809.png\" alt=\"\"></p>\r\n<p>搜索得出的数据会非常多，然后改变游戏里人物所处位置的高度，使得所在位置高度变大。</p>\r\n<p><img src=\"/upload/image/c6555918b47d63c96dac4b275c7db9e83363.png\" alt=\"\"></p>\r\n<p>再次扫描<code>增加的数值</code>。</p>\r\n<p><img src=\"/upload/image/e446a970d61b6057f58a28c202d81ffd2093.png\" alt=\"\"></p>\r\n<p>搜索得出的数据依然很多，继续改变游戏里人物所处位置的高度，所得所在位置高度变小。</p>\r\n<p><img src=\"/upload/image/5e5735ad6e8f38f7138252d161d105a07914.png\" alt=\"\"></p>\r\n<p>再次扫描<code>减少的数值</code>。</p>\r\n<p><img src=\"/upload/image/5b5b81859c328140d258a3990701441f3163.png\" alt=\"\"></p>\r\n<p>依次重复上述步骤，直到搜索到的数据比较少，或者怎么改变数据搜索出来的数据都不再变少了。</p>\r\n<h2 id=\"h2-u67E5u627Eu57FAu5740\"><a name=\"查找基址\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查找基址</h2><p>经过不断的搜索，得到的数据已经在200多条且不会继续下降了，将这些数据添加到地址列表。</p>\r\n<p><img src=\"/upload/image/93a56214891015e21f0afcfbae3ab5a09337.png\" alt=\"\"></p>\r\n<p>先选中一些数据锁定，地址列表上越靠下的数据，越可能是正确的地址，看看游戏人物是否还可以改变高度(跳一下就知道了)。</p>\r\n<p><img src=\"/upload/image/889e5a927b0e6057b9a08926531dbc0f1109.png\" alt=\"\"></p>\r\n<p>锁定了这些数据，还能跳，说明人物坐标不在这些地址里，右键删除记录。继续锁定其他地址数据，直到发现不能跳了。经过筛选，最终得出一个地址锁定了会影响人物的高度变化。但这个地址不是基址(CE里为绿色的地址)，对该地址右键<code>找出是什么改写了该地址</code>。</p>\r\n<p><img src=\"/upload/image/8d4b00a1e109281d11f7fa3d1cac7f875486.png\" alt=\"\"></p>\r\n<p>在弹出的附加进程窗口中显示一条汇编指令</p>\r\n<p><img src=\"/upload/image/b0757f74749b34baf85c986d9928679e8148.png\" alt=\"\"></p>\r\n<p>汇编 fstp 指令是将寄存器 esi 加上 288 的偏移这个地址的数据出栈，双击该指令查看。</p>\r\n<p><img src=\"/upload/image/5ab9d6c4e38de50fb74a728d4de196f44840.png\" alt=\"\"></p>\r\n<p>寄存器 ESI=33EB3160，搜索一下 33EB3160 看看是哪个地址存放了这个值。</p>\r\n<p><img src=\"/upload/image/d190c29bcab233f87bbb02e034bb71e16872.png\" alt=\"\"></p>\r\n<p>搜索出现一些绿色的地址，显示为模块+偏移的格式。</p>\r\n<p><img src=\"/upload/image/39ea7d8f7fd8c796fbab0ea6befda46e1748.png\" alt=\"\"></p>\r\n<p>验证是否为正确的基址，双击该地址加入到地址列表，在地址列表双击该地址，添加上面找到的偏移值。</p>\r\n<p><img src=\"/upload/image/63b8a6f309e79544b44f695c838eca464674.png\" alt=\"\"></p>\r\n<p>重启游戏，重新附加进程，刚才找到的基址指向的数值依旧正确，确定该地址为正确的基址。</p>\r\n<p><img src=\"/upload/image/3815ab6e795517f8e04bf6a73bf81da33031.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u67E5u627Eu5176u4ED6u5750u6807\"><a name=\"查找其他坐标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查找其他坐标</h2><p>依照上述方法找到坐标 y 发现坐标 y 的偏移为 284 ，推理出 坐标 x 的坐标应该为偏移 280，至此，人物的 xyz 坐标地址已经得出。</p>\r\n<p><img src=\"/upload/image/7417f00d13b772dfa8dc48dae60f29005385.png\" alt=\"\"></p>\r\n', '在FPS游戏中，每个人物都有在3D世界中的坐标，称为世界坐标，这些坐标一般都是以浮点数存储的，所以不断改变这些数值，再进行内存扫描就可以找到，可以通过不断改变 z 轴的数值来获取 z 轴的数据，而游戏的坐标一般是连续存放的，z 轴附近的数据就是 x y 轴的。\r\n## 本人坐标\r\n如下图所示，先找到一个有高度差距的地方。\r\n\r\n![](/upload/image/61195d9fc6527802bd950f955356d64a3271.png)\r\n\r\n以`单浮点`和`未知的初始值`搜索一次游戏进程数据。\r\n\r\n![](/upload/image/0fc868f16205819a6716f984b3073c005809.png)\r\n\r\n搜索得出的数据会非常多，然后改变游戏里人物所处位置的高度，使得所在位置高度变大。\r\n\r\n![](/upload/image/c6555918b47d63c96dac4b275c7db9e83363.png)\r\n\r\n再次扫描`增加的数值`。\r\n\r\n![](/upload/image/e446a970d61b6057f58a28c202d81ffd2093.png)\r\n\r\n搜索得出的数据依然很多，继续改变游戏里人物所处位置的高度，所得所在位置高度变小。\r\n\r\n![](/upload/image/5e5735ad6e8f38f7138252d161d105a07914.png)\r\n\r\n再次扫描`减少的数值`。\r\n\r\n![](/upload/image/5b5b81859c328140d258a3990701441f3163.png)\r\n\r\n依次重复上述步骤，直到搜索到的数据比较少，或者怎么改变数据搜索出来的数据都不再变少了。\r\n\r\n## 查找基址\r\n经过不断的搜索，得到的数据已经在200多条且不会继续下降了，将这些数据添加到地址列表。\r\n\r\n![](/upload/image/93a56214891015e21f0afcfbae3ab5a09337.png)\r\n\r\n先选中一些数据锁定，地址列表上越靠下的数据，越可能是正确的地址，看看游戏人物是否还可以改变高度(跳一下就知道了)。\r\n\r\n![](/upload/image/889e5a927b0e6057b9a08926531dbc0f1109.png)\r\n\r\n锁定了这些数据，还能跳，说明人物坐标不在这些地址里，右键删除记录。继续锁定其他地址数据，直到发现不能跳了。经过筛选，最终得出一个地址锁定了会影响人物的高度变化。但这个地址不是基址(CE里为绿色的地址)，对该地址右键`找出是什么改写了该地址`。\r\n\r\n![](/upload/image/8d4b00a1e109281d11f7fa3d1cac7f875486.png)\r\n\r\n在弹出的附加进程窗口中显示一条汇编指令\r\n\r\n![](/upload/image/b0757f74749b34baf85c986d9928679e8148.png)\r\n\r\n汇编 fstp 指令是将寄存器 esi 加上 288 的偏移这个地址的数据出栈，双击该指令查看。\r\n\r\n![](/upload/image/5ab9d6c4e38de50fb74a728d4de196f44840.png)\r\n\r\n寄存器 ESI=33EB3160，搜索一下 33EB3160 看看是哪个地址存放了这个值。\r\n\r\n![](/upload/image/d190c29bcab233f87bbb02e034bb71e16872.png)\r\n\r\n搜索出现一些绿色的地址，显示为模块+偏移的格式。\r\n\r\n![](/upload/image/39ea7d8f7fd8c796fbab0ea6befda46e1748.png)\r\n\r\n验证是否为正确的基址，双击该地址加入到地址列表，在地址列表双击该地址，添加上面找到的偏移值。\r\n\r\n![](/upload/image/63b8a6f309e79544b44f695c838eca464674.png)\r\n\r\n重启游戏，重新附加进程，刚才找到的基址指向的数值依旧正确，确定该地址为正确的基址。\r\n\r\n![](/upload/image/3815ab6e795517f8e04bf6a73bf81da33031.png)\r\n\r\n## 查找其他坐标\r\n依照上述方法找到坐标 y 发现坐标 y 的偏移为 284 ，推理出 坐标 x 的坐标应该为偏移 280，至此，人物的 xyz 坐标地址已经得出。\r\n\r\n![](/upload/image/7417f00d13b772dfa8dc48dae60f29005385.png)\r\n'),(129, 129, '<p>在游戏的编程设计中，一般都会使用列表或者数组来存放整个地图或者房间的游戏人物，那么，思路就是通过查找下一个游戏人物的地址，用来对比当前角色的地址，得到偏移多少数据，然后就可以通过不断的累加或递减该偏移得出所有人物的地址了。</p>\r\n<h2 id=\"h2-u654Cu4EBAu5750u6807\"><a name=\"敌人坐标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>敌人坐标</h2><p>找敌人的基址，也是从敌人的坐标开始找，已知本人坐标，靠近敌人，那么敌人的坐标也应该在自己的坐标附近。</p>\r\n<p><img src=\"/upload/image/bac6420ab94dc5d8b54c8dd341e5f33a2019.png\" alt=\"\"></p>\r\n<p>可以通过搜索类似区间的值，快速确认敌人的坐标。</p>\r\n<p><img src=\"/upload/image/b8971d3b6f92bbde7108af29e9ba89998926.png\" alt=\"\"></p>\r\n<p>当敌人移动的时候，Z 轴数据发生变化了，再次搜索减少或者增加的数值，重复步骤直到数量比较少的时候。</p>\r\n<p><img src=\"/upload/image/8fa885d750e1bc1bbbe65021b19f186b4463.png\" alt=\"\"></p>\r\n<p>敌人已经移动到比原来低的位置了，此时再次搜索减少的数值。</p>\r\n<p><img src=\"/upload/image/96c9b8abdbbb58609333d0875125b7b84063.png\" alt=\"\"></p>\r\n<p>敌人再次移动，Z 轴数据发生变化了。</p>\r\n<p><img src=\"/upload/image/fdb09190ac208b86f3f421ad473b5d968050.png\" alt=\"\"></p>\r\n<p>位置比原来的高，此时再次搜索增加的数值。</p>\r\n<h2 id=\"h2-u5206u6790u6570u636E\"><a name=\"分析数据\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>分析数据</h2><p>重复搜索到比较少的数据后，分析一下哪些数据可能是敌人的坐标 Z 轴，将搜索到的地址加入到地址列表里，先锁定一部分地址的数值，观察敌人是否还可以改变高度位置，如果还可以，则不是这些地址决定敌人位置的 Z 轴，删除掉后继续锁定其余地址。</p>\r\n<p><img src=\"/upload/image/a580a8d88cc5f97ea5efaef5e35103495227.png\" alt=\"\"></p>\r\n<p>逐渐排除非正确的地址后，发现有一些数据锁定后，敌人无法改变高度位置了，例如人物进入地图里，或者腾空行走，就是锁定到影响 Z 轴的地址了。</p>\r\n<p><img src=\"/upload/image/19f1acf05ad576ed4a86d8bd6817cb397274.png\" alt=\"\"></p>\r\n<p>重复锁定排除，最终确定该地址的数值决定敌人的 Z 轴位置。</p>\r\n<p><img src=\"/upload/image/5f200ceb4a0ebeb87cc598973c08125c3260.png\" alt=\"\"></p>\r\n<p>这个地址并不是基址(CE 里面绿色的)，右键找出是什么访问了该地址。优先查看 mov 指令的代码，这里的偏移 288 和游戏里本人坐标的偏移一样。</p>\r\n<p><img src=\"/upload/image/588c5ae5c9f7752688e8ec55ce6685c67740.png\" alt=\"\"></p>\r\n<p>搜索指针的数值 2BD83270 得出一堆地址，其中就有一个绿色的基址，和本人坐标几乎一样，只有一点点差别。</p>\r\n<p><img src=\"/upload/image/c3f41cc6c4a7bef9fd6c1f40e29c00852249.png\" alt=\"\"></p>\r\n<p>将这个地址添加到地址列表，加上指针偏移。</p>\r\n<p><img src=\"/upload/image/7381f9870f7d19005aaa1cd6637093b73019.png\" alt=\"\"></p>\r\n<p>游戏里面反复跟随敌人跑动，验证数据确实是敌人正确的 Z 轴坐标。</p>\r\n<p><img src=\"/upload/image/d3d17107b1cefc00d7175ad2a0e6d1814440.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u63A8u65ADu6570u636E\"><a name=\"推断数据\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>推断数据</h2><p>本人的 Y Z 轴的数据分别是偏移减十六进制的 4 ，那么敌人的应该也是一样，因为写代码的时候人物对象的数据结构是一样的。</p>\r\n<p><img src=\"/upload/image/4321ab760bd2c0d9b94994b5b139c67c5595.png\" alt=\"\"></p>\r\n<p>再继续推断人物列表数据中，每一个人物对象的地址差是多少，本人的基址是 server.dll+4F2FEC 而敌人的基址是 server.dll+4F2FFC，两个偏移之间相差的是一个十六进制的 10 。因此，再下一个人物的地址偏移就应该是 server.dll+4F300C 了，十六进制运算 4F2FFC + 10 = 4F300C。</p>\r\n<p><img src=\"/upload/image/7e611d1e2676816d2816d708868cc0703372.png\" alt=\"\"></p>\r\n<p>在游戏里继续添加一个敌人，在 CE 里手动添加地址，验证推断数据，得出下一个敌人的坐标也是正确的。</p>\r\n<p><img src=\"/upload/image/67d86fe20e2acb8712027e79a6f96b838121.png\" alt=\"\"></p>\r\n', '在游戏的编程设计中，一般都会使用列表或者数组来存放整个地图或者房间的游戏人物，那么，思路就是通过查找下一个游戏人物的地址，用来对比当前角色的地址，得到偏移多少数据，然后就可以通过不断的累加或递减该偏移得出所有人物的地址了。\r\n\r\n## 敌人坐标\r\n找敌人的基址，也是从敌人的坐标开始找，已知本人坐标，靠近敌人，那么敌人的坐标也应该在自己的坐标附近。\r\n\r\n![](/upload/image/bac6420ab94dc5d8b54c8dd341e5f33a2019.png)\r\n\r\n可以通过搜索类似区间的值，快速确认敌人的坐标。\r\n\r\n![](/upload/image/b8971d3b6f92bbde7108af29e9ba89998926.png)\r\n\r\n当敌人移动的时候，Z 轴数据发生变化了，再次搜索减少或者增加的数值，重复步骤直到数量比较少的时候。\r\n\r\n![](/upload/image/8fa885d750e1bc1bbbe65021b19f186b4463.png)\r\n\r\n敌人已经移动到比原来低的位置了，此时再次搜索减少的数值。\r\n\r\n![](/upload/image/96c9b8abdbbb58609333d0875125b7b84063.png)\r\n\r\n敌人再次移动，Z 轴数据发生变化了。\r\n\r\n![](/upload/image/fdb09190ac208b86f3f421ad473b5d968050.png)\r\n\r\n位置比原来的高，此时再次搜索增加的数值。\r\n\r\n## 分析数据\r\n重复搜索到比较少的数据后，分析一下哪些数据可能是敌人的坐标 Z 轴，将搜索到的地址加入到地址列表里，先锁定一部分地址的数值，观察敌人是否还可以改变高度位置，如果还可以，则不是这些地址决定敌人位置的 Z 轴，删除掉后继续锁定其余地址。\r\n\r\n![](/upload/image/a580a8d88cc5f97ea5efaef5e35103495227.png)\r\n\r\n逐渐排除非正确的地址后，发现有一些数据锁定后，敌人无法改变高度位置了，例如人物进入地图里，或者腾空行走，就是锁定到影响 Z 轴的地址了。\r\n\r\n![](/upload/image/19f1acf05ad576ed4a86d8bd6817cb397274.png)\r\n\r\n重复锁定排除，最终确定该地址的数值决定敌人的 Z 轴位置。\r\n\r\n![](/upload/image/5f200ceb4a0ebeb87cc598973c08125c3260.png)\r\n\r\n这个地址并不是基址(CE 里面绿色的)，右键找出是什么访问了该地址。优先查看 mov 指令的代码，这里的偏移 288 和游戏里本人坐标的偏移一样。\r\n\r\n![](/upload/image/588c5ae5c9f7752688e8ec55ce6685c67740.png)\r\n\r\n搜索指针的数值 2BD83270 得出一堆地址，其中就有一个绿色的基址，和本人坐标几乎一样，只有一点点差别。\r\n\r\n![](/upload/image/c3f41cc6c4a7bef9fd6c1f40e29c00852249.png)\r\n\r\n将这个地址添加到地址列表，加上指针偏移。\r\n\r\n![](/upload/image/7381f9870f7d19005aaa1cd6637093b73019.png)\r\n\r\n游戏里面反复跟随敌人跑动，验证数据确实是敌人正确的 Z 轴坐标。\r\n\r\n![](/upload/image/d3d17107b1cefc00d7175ad2a0e6d1814440.png)\r\n\r\n## 推断数据\r\n本人的 Y Z 轴的数据分别是偏移减十六进制的 4 ，那么敌人的应该也是一样，因为写代码的时候人物对象的数据结构是一样的。\r\n\r\n![](/upload/image/4321ab760bd2c0d9b94994b5b139c67c5595.png)\r\n\r\n再继续推断人物列表数据中，每一个人物对象的地址差是多少，本人的基址是 server.dll+4F2FEC 而敌人的基址是 server.dll+4F2FFC，两个偏移之间相差的是一个十六进制的 10 。因此，再下一个人物的地址偏移就应该是 server.dll+4F300C 了，十六进制运算 4F2FFC + 10 = 4F300C。\r\n\r\n![](/upload/image/7e611d1e2676816d2816d708868cc0703372.png)\r\n\r\n在游戏里继续添加一个敌人，在 CE 里手动添加地址，验证推断数据，得出下一个敌人的坐标也是正确的。\r\n\r\n![](/upload/image/67d86fe20e2acb8712027e79a6f96b838121.png)'),(130, 130, '<h2 id=\"h2-write-once-run-anywhere\"><a name=\"Write once run anywhere\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Write once run anywhere</h2><p>Java 之所以能成为跨平台的语言，其主要依赖与 JVM，只要在操作系统上安装有 JVM，通过 JVM 即可运行 Java 语言编译出来的字节码文件。一处编写，到处运行，完全依赖与 JVM 的支持，所以，也许 Java 并不是世界上最好的编程语言（不含 PHP ），但是 JVM 应该是世界上最好的虚拟机。</p>\n<p><img src=\"http://new.365d1.com/upload/3089636571959a8dabbf4bc3db011a6c4537.png\" alt=\"\"></p>\n<h2 id=\"h2-u8DE8u8BEDu8A00u7684u865Au62DFu673A\"><a name=\"跨语言的虚拟机\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>跨语言的虚拟机</h2><p>JVM 运行的字节码文件都遵循着相应的 JVM 规范，如果有合适的编译器，遵循相应的 JVM 规范生成对应的字节码文件，JVM 是一样可以运行的，这也使得 JVM 成为一个跨语言的虚拟机成为可能。</p>\n<p><img src=\"/upload/image/f4f6fc6c418f746287b3a5e2dc4619c82246.png\" alt=\"\"></p>\n<h2 id=\"h2-jvm-\"><a name=\"JVM 整体结构\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>JVM 整体结构</h2><p><img src=\"/upload/image/627565a214337fa5b984f6348a778bf66193.png\" alt=\"\"></p>\n<p><strong>Class loader</strong> 最基本的功能就是将 Class 加载到 JVM 中，在加载过程中，Class loader 能够审查每个类应该由哪个 Class loader 加载，采用双亲委派模型来实现，除了加载外，class loader也负责将加载后的字节码重新解析成JVM同一要求的对象格式。</p>\n<p><strong>Runtime Data area</strong> 在执行的过程中，总会创建很多对象 必须有地方存放这些对象；还需要保存一些执行的状态，所以，必须有一个地方来保持执行的状态。 “地方” 指的就是内存区域， 程序运行起来之后， 就是一个动态的过程， 必须合理的划分内存区域， 来存放各种数据。</p>\n<p><strong>Execution Engine</strong> 执行引擎是 Java 虚拟机最核心的组成部分之一，“虚拟机”是一个相对于“物理机”的概念，这两种机器都具有执行代码的能力。其区别是物理机的执行引擎是直接建立在处理器、硬件、指令集和操作系统层面上的，而虚拟机的执行引擎则是由自己实现的，因此可以自行制定指令集和执行引擎的结构体系，并且能够执行那些不被硬件直接支持的指令集格式。</p>\n<h2 id=\"h2-java-\"><a name=\"Java 代码执行流程\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Java 代码执行流程</h2><p><img src=\"/upload/image/7d40aecf648f93f8e742593c900d7dff7017.png\" alt=\"\"></p>\n<p>编写一个 Hello.java 文件</p>\n<pre><code class=\"lang-java\">public class Hello {\n\n    public static void main(String[] args) {\n        int a = 1;\n        int b = 2;\n        int c = a + b;\n    }\n\n}\n</code></pre>\n<p>通过命令行输入编译命令，生成 Hello.class 文件</p>\n<pre><code class=\"lang-shell\">javac Hello.java\n</code></pre>\n<p>通过命令行输入查看 Hello.class 的 jvm 指令</p>\n<pre><code class=\"lang-shell\">javap -v Hello.class\n</code></pre>\n<p>输出代码如下，其中 code 部分就是 jvm 执行时候的指令</p>\n<pre><code class=\"lang-java\">Classfile /F:/demo/out/production/demo01/com/_365d1/demo/Hello.class\n  Last modified 2020-8-5; size 456 bytes\n  MD5 checksum 2dba3366c299bd16497e4b547eca4902\n  Compiled from &quot;Hello.java&quot;\npublic class com._365d1.demo.Hello\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #3.#21         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V\n   #2 = Class              #22            // com/_365d1/demo/Hello\n   #3 = Class              #23            // java/lang/Object\n   #4 = Utf8               &lt;init&gt;\n   #5 = Utf8               ()V\n   #6 = Utf8               Code\n   #7 = Utf8               LineNumberTable\n   #8 = Utf8               LocalVariableTable\n   #9 = Utf8               this\n  #10 = Utf8               Lcom/_365d1/demo/Hello;\n  #11 = Utf8               main\n  #12 = Utf8               ([Ljava/lang/String;)V\n  #13 = Utf8               args\n  #14 = Utf8               [Ljava/lang/String;\n  #15 = Utf8               a\n  #16 = Utf8               I\n  #17 = Utf8               b\n  #18 = Utf8               c\n  #19 = Utf8               SourceFile\n  #20 = Utf8               Hello.java\n  #21 = NameAndType        #4:#5          // &quot;&lt;init&gt;&quot;:()V\n  #22 = Utf8               com/_365d1/demo/Hello\n  #23 = Utf8               java/lang/Object\n{\n  public com._365d1.demo.Hello();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V\n         4: return\n      LineNumberTable:\n        line 3: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/_365d1/demo/Hello;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=4, args_size=1\n         0: iconst_1\n         1: istore_1\n         2: iconst_2\n         3: istore_2\n         4: iload_1\n         5: iload_2\n         6: iadd\n         7: istore_3\n         8: return\n      LineNumberTable:\n        line 6: 0\n        line 7: 2\n        line 8: 4\n        line 9: 8\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       9     0  args   [Ljava/lang/String;\n            2       7     1     a   I\n            4       5     2     b   I\n            8       1     3     c   I\n}\nSourceFile: &quot;Hello.java&quot;\n</code></pre>\n<p>Code 部分代码看起来很像汇编，这就很有意思了哈~~</p>\n', '## Write once run anywhere\nJava 之所以能成为跨平台的语言，其主要依赖与 JVM，只要在操作系统上安装有 JVM，通过 JVM 即可运行 Java 语言编译出来的字节码文件。一处编写，到处运行，完全依赖与 JVM 的支持，所以，也许 Java 并不是世界上最好的编程语言（不含 PHP ），但是 JVM 应该是世界上最好的虚拟机。\n\n![](http://new.365d1.com/upload/3089636571959a8dabbf4bc3db011a6c4537.png)\n\n## 跨语言的虚拟机\nJVM 运行的字节码文件都遵循着相应的 JVM 规范，如果有合适的编译器，遵循相应的 JVM 规范生成对应的字节码文件，JVM 是一样可以运行的，这也使得 JVM 成为一个跨语言的虚拟机成为可能。\n\n![](/upload/image/f4f6fc6c418f746287b3a5e2dc4619c82246.png)\n\n## JVM 整体结构\n\n![](/upload/image/627565a214337fa5b984f6348a778bf66193.png)\n\n**Class loader** 最基本的功能就是将 Class 加载到 JVM 中，在加载过程中，Class loader 能够审查每个类应该由哪个 Class loader 加载，采用双亲委派模型来实现，除了加载外，class loader也负责将加载后的字节码重新解析成JVM同一要求的对象格式。\n\n**Runtime Data area** 在执行的过程中，总会创建很多对象 必须有地方存放这些对象；还需要保存一些执行的状态，所以，必须有一个地方来保持执行的状态。 “地方” 指的就是内存区域， 程序运行起来之后， 就是一个动态的过程， 必须合理的划分内存区域， 来存放各种数据。\n\n**Execution Engine** 执行引擎是 Java 虚拟机最核心的组成部分之一，“虚拟机”是一个相对于“物理机”的概念，这两种机器都具有执行代码的能力。其区别是物理机的执行引擎是直接建立在处理器、硬件、指令集和操作系统层面上的，而虚拟机的执行引擎则是由自己实现的，因此可以自行制定指令集和执行引擎的结构体系，并且能够执行那些不被硬件直接支持的指令集格式。\n\n## Java 代码执行流程\n\n![](/upload/image/7d40aecf648f93f8e742593c900d7dff7017.png)\n\n编写一个 Hello.java 文件\n```java\npublic class Hello {\n\n    public static void main(String[] args) {\n        int a = 1;\n        int b = 2;\n        int c = a + b;\n    }\n\n}\n```\n通过命令行输入编译命令，生成 Hello.class 文件\n```shell\njavac Hello.java\n```\n通过命令行输入查看 Hello.class 的 jvm 指令\n```shell\njavap -v Hello.class\n```\n输出代码如下，其中 code 部分就是 jvm 执行时候的指令\n```java\nClassfile /F:/demo/out/production/demo01/com/_365d1/demo/Hello.class\n  Last modified 2020-8-5; size 456 bytes\n  MD5 checksum 2dba3366c299bd16497e4b547eca4902\n  Compiled from \"Hello.java\"\npublic class com._365d1.demo.Hello\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #3.#21         // java/lang/Object.\"<init>\":()V\n   #2 = Class              #22            // com/_365d1/demo/Hello\n   #3 = Class              #23            // java/lang/Object\n   #4 = Utf8               <init>\n   #5 = Utf8               ()V\n   #6 = Utf8               Code\n   #7 = Utf8               LineNumberTable\n   #8 = Utf8               LocalVariableTable\n   #9 = Utf8               this\n  #10 = Utf8               Lcom/_365d1/demo/Hello;\n  #11 = Utf8               main\n  #12 = Utf8               ([Ljava/lang/String;)V\n  #13 = Utf8               args\n  #14 = Utf8               [Ljava/lang/String;\n  #15 = Utf8               a\n  #16 = Utf8               I\n  #17 = Utf8               b\n  #18 = Utf8               c\n  #19 = Utf8               SourceFile\n  #20 = Utf8               Hello.java\n  #21 = NameAndType        #4:#5          // \"<init>\":()V\n  #22 = Utf8               com/_365d1/demo/Hello\n  #23 = Utf8               java/lang/Object\n{\n  public com._365d1.demo.Hello();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 3: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/_365d1/demo/Hello;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=4, args_size=1\n         0: iconst_1\n         1: istore_1\n         2: iconst_2\n         3: istore_2\n         4: iload_1\n         5: iload_2\n         6: iadd\n         7: istore_3\n         8: return\n      LineNumberTable:\n        line 6: 0\n        line 7: 2\n        line 8: 4\n        line 9: 8\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       9     0  args   [Ljava/lang/String;\n            2       7     1     a   I\n            4       5     2     b   I\n            8       1     3     c   I\n}\nSourceFile: \"Hello.java\"\n```\nCode 部分代码看起来很像汇编，这就很有意思了哈~~'),(131, 131, '<h2 id=\"h2-u6808u7684u6307u4EE4u96C6u67B6u6784\"><a name=\"栈的指令集架构\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>栈的指令集架构</h2><p>Java编译器输入的指令流基本上是基于<code>栈的指令集架构</code>，另外一种指令集架构则是基于<code>寄存器的指令集架构</code>。</p>\r\n<p><strong>基于栈式架构的特点</strong></p>\r\n<blockquote>\r\n<p>设计和实现更简单，适用于资源受限的系统<br>避开了寄存器的分配难题，使用零地址指令方式分配<br>指令流中的指令大部分是零地址指令，执行过程依赖于操作栈，指令集更小，编译器容易实现<br>不需要硬件支持，可移植性更好，更好实现跨平台</p>\r\n</blockquote>\r\n<p><strong>基于寄存器架构的特点</strong></p>\r\n<blockquote>\r\n<p>典型的应用是x86的二进制指令集，比如传统的 PC 以及 Android 的 Davlik 虚拟机<br>指令集架构完全依赖硬件，可移植性差<br>性能优秀和执行更高效<br>花费更少的指令去完成一项操作<br>大部分情况下指令集都以一地址指令、二地址指令和三地址指令为主。</p>\r\n</blockquote>\r\n<h2 id=\"h2-jvm-\"><a name=\"JVM 的生命周期\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>JVM 的生命周期</h2><p>JVM 生命周期一共分为<code>虚拟机启动</code>、<code>虚拟机执行</code>、<code>虚拟机退出</code>。</p>\r\n<p><strong>虚拟机启动</strong></p>\r\n<p>Java虚拟机的启动是通过引导类加载器（ bootstap class loader ）创建一个初始类（ initial class ）来完成的，这个类是由虚拟机的具体实现指定的。</p>\r\n<p><strong>虚拟机执行</strong></p>\r\n<p>1.一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。<br>2.程序开始执行时它才运行，程序结束时它就停止。<br>3.执行一个Java程序的时候，执行的是一个Java虚拟机进程。</p>\r\n<p><strong>虚拟机退出</strong></p>\r\n<p>1.程序正常执行结束。<br>2.程序在执行过程中遇到了异常或错误而异常终止。<br>3.由操作系统出现错误而导致Java虚拟机进程终止。<br>4.某线程调用 Runtime 类或 System 类的 exit 方法，或 Runtime 类的 halt 方法，并且 Java 安全管理器也允许这次 exit 或 halt 操作。<br>5.JNI（ Java Native Interface ）规范描述了 JNI Invocation Api 来加载或卸载 Java 虚拟机时。</p>\r\n', '## 栈的指令集架构\r\nJava编译器输入的指令流基本上是基于`栈的指令集架构`，另外一种指令集架构则是基于`寄存器的指令集架构`。\r\n\r\n**基于栈式架构的特点**\r\n> 设计和实现更简单，适用于资源受限的系统\r\n> 避开了寄存器的分配难题，使用零地址指令方式分配\r\n> 指令流中的指令大部分是零地址指令，执行过程依赖于操作栈，指令集更小，编译器容易实现\r\n> 不需要硬件支持，可移植性更好，更好实现跨平台\r\n\r\n**基于寄存器架构的特点**\r\n> 典型的应用是x86的二进制指令集，比如传统的 PC 以及 Android 的 Davlik 虚拟机\r\n> 指令集架构完全依赖硬件，可移植性差\r\n> 性能优秀和执行更高效\r\n> 花费更少的指令去完成一项操作\r\n> 大部分情况下指令集都以一地址指令、二地址指令和三地址指令为主。\r\n\r\n## JVM 的生命周期\r\nJVM 生命周期一共分为`虚拟机启动`、`虚拟机执行`、`虚拟机退出`。\r\n\r\n**虚拟机启动**\r\n\r\nJava虚拟机的启动是通过引导类加载器（ bootstap class loader ）创建一个初始类（ initial class ）来完成的，这个类是由虚拟机的具体实现指定的。\r\n\r\n**虚拟机执行**\r\n\r\n1.一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。\r\n2.程序开始执行时它才运行，程序结束时它就停止。\r\n3.执行一个Java程序的时候，执行的是一个Java虚拟机进程。\r\n\r\n**虚拟机退出**\r\n\r\n1.程序正常执行结束。\r\n2.程序在执行过程中遇到了异常或错误而异常终止。\r\n3.由操作系统出现错误而导致Java虚拟机进程终止。\r\n4.某线程调用 Runtime 类或 System 类的 exit 方法，或 Runtime 类的 halt 方法，并且 Java 安全管理器也允许这次 exit 或 halt 操作。\r\n5.JNI（ Java Native Interface ）规范描述了 JNI Invocation Api 来加载或卸载 Java 虚拟机时。'),(132, 132, '<h2 id=\"h2-u7C7Bu52A0u8F7Du5668u5B50u7CFBu7EDFu4F5Cu7528\"><a name=\"类加载器子系统作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>类加载器子系统作用</h2><p><img src=\"/upload/image/9be8b591a67d8ed6e581f02e933d55fe3151.png\" alt=\"\"></p>\r\n<p>类加载器子系统负责从文件系统或者网络中加载 Class 文件，Class 文件在文件开头有特定的文件标识。</p>\r\n<p>ClassLoader 只负责 class 文件的加载，至于是否运行，则由 ExecutionEngine决定。</p>\r\n<p>加载的类信息存放在一块称为方法区的内存空间。除了类的信息外，方法区还会存放运行时常量池信息，可能还包括字符串字面量和数字常量。</p>\r\n<h2 id=\"h2-class-\"><a name=\"Class 文件特定的文件标识\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Class 文件特定的文件标识</h2><p>使用二进制方式查看 Class 文件，会看到开头是以 ca fe ba be (咖啡宝贝)。</p>\r\n<p><img src=\"/upload/image/d5875f585551651a40a85e45156fdcf96452.png\" alt=\"\"></p>\r\n<h2 id=\"h2-loading-\"><a name=\"Loading 加载阶段\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Loading 加载阶段</h2><p>1.通过一个类的全限定名获取定义此类的二进制字节流。</p>\r\n<p>2.将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>\r\n<p>3.在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据访问入口。</p>\r\n<p>加载 .class 的方式</p>\r\n<blockquote>\r\n<p>从本地系统直接加载<br>通过网络获取<br>从zip包中读取，jar war 格式的基础<br>运行时候计算生成，动态代理技术<br>由其他文件生成，例如 JSP<br>从专有的数据库中读取<br>从加密文件中获取，典型的防 Class 文件被反编译</p>\r\n</blockquote>\r\n<h2 id=\"h2-linking-\"><a name=\"Linking 链接阶段\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Linking 链接阶段</h2><p>链接阶段主要做了三个事情，分别是验证、准备、解析。</p>\r\n<p><strong>验证( Verify )</strong></p>\r\n<ul>\r\n<li><p>确保 Class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</p>\r\n</li><li><p>主要包括四种验证，文件格式验证、元数据验证、字节码验证、符合引用验证。</p>\r\n</li></ul>\r\n<p><strong>准备( Prepare )</strong></p>\r\n<ul>\r\n<li><p>为类变量分配内存并且设置该类的默认初始值，即零值。</p>\r\n</li><li><p>不包含用 final 修饰的 static，final 在编译的时候就分配了，准备阶段会显式初始化</p>\r\n</li><li><p>不会为实例变量分配初始化，类变量会分配在方法区中，实例变量是会随着对象一起分配到 Java 堆中。</p>\r\n</li></ul>\r\n<p><strong>解析( Resolve )</strong></p>\r\n<ul>\r\n<li><p>将常量池内的符号引用转换为直接引用的过程。</p>\r\n</li><li><p>解析操作往往会伴随着 JVM 在执行完初始化之后再执行。</p>\r\n</li><li><p>符号引用就是一组符号来描述引用的目标。符合引用的字面量定义在《JAVA虚拟机规范》的 Class 文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p>\r\n</li><li><p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对常量池中的 CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info 等。</p>\r\n</li></ul>\r\n<h2 id=\"h2-initialization-\"><a name=\"Initialization 初始化阶段\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Initialization 初始化阶段</h2><ul>\r\n<li><p>初始化阶段就是执行类构造器方法 &lt;clinit&gt;() 的过程。</p>\r\n</li><li><p>此方法不需定义，是 javac 编译器自动收集类中的所有类变量赋值动作和静态代码块中的语句合并而来。</p>\r\n</li><li><p>构造器方法中指令按语句在源文件中出现的顺序执行。</p>\r\n</li><li><p>&lt;clinit&gt;() 不同于类的构造器。( 关联：构造器是虚拟机视角下的 &lt;init&gt;() )</p>\r\n</li><li><p>若该类具有父类，JVM 会保证子类的 &lt;clinit&gt;() 执行前，父类的 &lt;clinit&gt;() 已经执行完毕。</p>\r\n</li><li><p>虚拟机必须保证一个类的 &lt;clinit&gt;() 方法在多线程下被同步加锁。</p>\r\n</li></ul>\r\n<h2 id=\"h2-u5C0Fu6280u5DE7\"><a name=\"小技巧\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>小技巧</h2><p>IDEA 可以安装插件 jclasslib 来快速查看 .class 的内容。</p>\r\n<p><img src=\"/upload/image/a3b97e5c3e7f44e13ea9e6cd9cc453d44763.png\" alt=\"\"></p>\r\n', '## 类加载器子系统作用\r\n\r\n![](/upload/image/9be8b591a67d8ed6e581f02e933d55fe3151.png)\r\n\r\n类加载器子系统负责从文件系统或者网络中加载 Class 文件，Class 文件在文件开头有特定的文件标识。\r\n\r\nClassLoader 只负责 class 文件的加载，至于是否运行，则由 ExecutionEngine决定。\r\n\r\n加载的类信息存放在一块称为方法区的内存空间。除了类的信息外，方法区还会存放运行时常量池信息，可能还包括字符串字面量和数字常量。\r\n\r\n## Class 文件特定的文件标识\r\n使用二进制方式查看 Class 文件，会看到开头是以 ca fe ba be (咖啡宝贝)。\r\n\r\n![](/upload/image/d5875f585551651a40a85e45156fdcf96452.png)\r\n\r\n## Loading 加载阶段\r\n1.通过一个类的全限定名获取定义此类的二进制字节流。\r\n\r\n2.将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\r\n\r\n3.在内存中生成一个代表这个类的`java.lang.Class`对象，作为方法区这个类的各种数据访问入口。\r\n\r\n加载 .class 的方式\r\n> 从本地系统直接加载\r\n> 通过网络获取\r\n> 从zip包中读取，jar war 格式的基础\r\n> 运行时候计算生成，动态代理技术\r\n> 由其他文件生成，例如 JSP\r\n> 从专有的数据库中读取\r\n> 从加密文件中获取，典型的防 Class 文件被反编译\r\n\r\n## Linking 链接阶段\r\n链接阶段主要做了三个事情，分别是验证、准备、解析。\r\n\r\n**验证( Verify )**\r\n- 确保 Class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。\r\n\r\n- 主要包括四种验证，文件格式验证、元数据验证、字节码验证、符合引用验证。\r\n\r\n**准备( Prepare )**\r\n- 为类变量分配内存并且设置该类的默认初始值，即零值。\r\n\r\n- 不包含用 final 修饰的 static，final 在编译的时候就分配了，准备阶段会显式初始化\r\n\r\n- 不会为实例变量分配初始化，类变量会分配在方法区中，实例变量是会随着对象一起分配到 Java 堆中。\r\n\r\n**解析( Resolve )**\r\n- 将常量池内的符号引用转换为直接引用的过程。\r\n\r\n- 解析操作往往会伴随着 JVM 在执行完初始化之后再执行。\r\n\r\n- 符号引用就是一组符号来描述引用的目标。符合引用的字面量定义在《JAVA虚拟机规范》的 Class 文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。\r\n\r\n- 解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对常量池中的 CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info 等。\r\n\r\n## Initialization 初始化阶段\r\n- 初始化阶段就是执行类构造器方法 <clinit>() 的过程。\r\n\r\n- 此方法不需定义，是 javac 编译器自动收集类中的所有类变量赋值动作和静态代码块中的语句合并而来。\r\n\r\n- 构造器方法中指令按语句在源文件中出现的顺序执行。\r\n\r\n- <clinit>() 不同于类的构造器。( 关联：构造器是虚拟机视角下的 <init>() )\r\n\r\n- 若该类具有父类，JVM 会保证子类的 <clinit>() 执行前，父类的 <clinit>() 已经执行完毕。\r\n\r\n- 虚拟机必须保证一个类的 <clinit>() 方法在多线程下被同步加锁。\r\n\r\n## 小技巧\r\nIDEA 可以安装插件 jclasslib 来快速查看 .class 的内容。\r\n\r\n![](/upload/image/a3b97e5c3e7f44e13ea9e6cd9cc453d44763.png)\r\n'),(133, 133, '<h2 id=\"h2-u52A0u8F7Du5668u7684u5206u7C7B\"><a name=\"加载器的分类\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>加载器的分类</h2><p>JVM 支持两种类型的类加载器，分别为<strong>引导类加载器</strong> (BootStrap ClassLoader) 和 <strong>自定义类加载器</strong> (User-Defined ClassLoader)，所有派生于抽象类 ClassLoader 的类加载器都划分为自定义类加载器。</p>\r\n<p><img src=\"/upload/image/5e5ba88bd825e6eed0c718264ad9e9bd9458.png\" alt=\"\"></p>\r\n<h2 id=\"h2--bootstrap-classloader-\"><a name=\"引导类加载器（BootStrap ClassLoader）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>引导类加载器（BootStrap ClassLoader）</h2><p>1.这个类加载器使用 C/C++ 语言实现的，嵌套在 JVM 内部。</p>\r\n<p>2.它用来加载 Java 的核心库（ JAVA_HOME/jre/lib/rt.jar 、resource.jar 或 sun.boot.class.path 路径下的内容 ），用于提供 JVM 自身需要的类</p>\r\n<p>3.并不继承 java.lang.ClassLoader ，没有父加载器</p>\r\n<p>4.出于安全考虑，BootStrap 启动类加载器只加载包名为 java、javax、sun 等开头的类</p>\r\n<h2 id=\"h2--extension-classloader-\"><a name=\"扩展类加载器（Extension ClassLoader）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>扩展类加载器（Extension ClassLoader）</h2><p>1.Java 语言编写，由 sun.misc.Launcher$ExtClassLoader 实现</p>\r\n<p>2.派生于 ClassLoader 类</p>\r\n<p>3.父类加载器为启动类加载器</p>\r\n<p>4.从 java.ext.dirs 系统属性所指定的目录中加载类库，或从 JDK 安装目录的 jre/lib/ext 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会自动由扩展类加载器加载</p>\r\n<h2 id=\"h2--\"><a name=\"用户自定义类加载器（用途）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>用户自定义类加载器（用途）</h2><p>1.隔离加载类</p>\r\n<p>2.修改类的加载方式</p>\r\n<p>3.扩展加载源</p>\r\n<p>4.防止源码泄漏</p>\r\n', '## 加载器的分类\r\nJVM 支持两种类型的类加载器，分别为**引导类加载器** (BootStrap ClassLoader) 和 **自定义类加载器** (User-Defined ClassLoader)，所有派生于抽象类 ClassLoader 的类加载器都划分为自定义类加载器。\r\n\r\n![](/upload/image/5e5ba88bd825e6eed0c718264ad9e9bd9458.png)\r\n\r\n## 引导类加载器（BootStrap ClassLoader）\r\n1.这个类加载器使用 C/C++ 语言实现的，嵌套在 JVM 内部。\r\n\r\n2.它用来加载 Java 的核心库（ JAVA_HOME/jre/lib/rt.jar 、resource.jar 或 sun.boot.class.path 路径下的内容 ），用于提供 JVM 自身需要的类\r\n\r\n3.并不继承 java.lang.ClassLoader ，没有父加载器\r\n\r\n4.出于安全考虑，BootStrap 启动类加载器只加载包名为 java、javax、sun 等开头的类\r\n\r\n## 扩展类加载器（Extension ClassLoader）\r\n1.Java 语言编写，由 sun.misc.Launcher$ExtClassLoader 实现\r\n\r\n2.派生于 ClassLoader 类\r\n\r\n3.父类加载器为启动类加载器\r\n\r\n4.从 java.ext.dirs 系统属性所指定的目录中加载类库，或从 JDK 安装目录的 jre/lib/ext 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会自动由扩展类加载器加载\r\n\r\n## 用户自定义类加载器（用途）\r\n1.隔离加载类\r\n\r\n2.修改类的加载方式\r\n\r\n3.扩展加载源\r\n\r\n4.防止源码泄漏'),(134, 134, '<h2 id=\"h2-u6C47u7F16u4EE3u7801u7684u7EC4u6210\"><a name=\"汇编代码的组成\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>汇编代码的组成</h2><blockquote>\r\n<p>汇编指令（机器码的助记符）<br>伪指令（由编译器执行）<br>其他符号（由编译器识别）</p>\r\n</blockquote>\r\n<p>汇编语言的核心就是汇编指令，决定了汇编语言的特性。</p>\r\n<h2 id=\"h2-u6307u4EE4u548Cu6570u636E\"><a name=\"指令和数据\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>指令和数据</h2><p>1.指令和数据是应用上的概念。</p>\r\n<p>2.在内存或硬盘上，指令和数据没有任何区别，都是二进制信息</p>\r\n<h2 id=\"h2-u5B58u50A8u5668\"><a name=\"存储器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>存储器</h2><p>存储器被划分为若干个存储单元，每个存储单元从 0 开始顺序编号</p>\r\n<h2 id=\"h2-cpu-\"><a name=\"CPU 对存储器的读写\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>CPU 对存储器的读写</h2><p>CPU想要进行数据的读写，必须和存储器进行三类通信交互：</p>\r\n<blockquote>\r\n<p>存储单元的地址（地址信息）<br>存储器的选择，读或写命令（控制信息）<br>读或写的数据（数据信息）</p>\r\n</blockquote>\r\n<h2 id=\"h2-u603Bu7EBF\"><a name=\"总线\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总线</h2><p>在计算机中专门有连接 CPU 和其它芯片的导线，通常称为总线。</p>\r\n<p><img src=\"/upload/image/1ceec6a75f9de3f4e413f21b9e9325195860.png\" alt=\"\"></p>\r\n<p><strong>地址总线</strong><br>一个 CPU 有 N 根地址总线，则 CPU 的地址总线宽度为 N，CPU 最多可以寻找 2 的 N 次方个内存单元。</p>\r\n<p><strong>数据总线</strong><br>CPU 与内存或其它器件之间的数据传送是通过数据总线进行的，数据总线的宽度决定了 CPU 和外界的数据传输速度。</p>\r\n<p><strong>控制总线</strong><br>CPU 对外部器件的控制是通过控制总线进行的，控制总线是一些不同的控制线的集合，有多少根控制总线，就意味着 CPU 提供了对外部器件的多少种控制。</p>\r\n<h2 id=\"h2-u5185u5B58u5730u5740u7A7Au95F4\"><a name=\"内存地址空间\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内存地址空间</h2><p>一个 CPU 的地址总线宽度为 10，那么可以寻找 1024 个内存地址单元，这 1024 个内存单元就构成这个 CPU 的内存地址空间。</p>\r\n<h2 id=\"h2-u5B58u50A8u5668u82AFu7247\"><a name=\"存储器芯片\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>存储器芯片</h2><p>按读写属性分类</p>\r\n<blockquote>\r\n<p>随机存储器（RAM）<br>只读存储器（ROM）</p>\r\n</blockquote>\r\n<p>按功能和连接上分类</p>\r\n<blockquote>\r\n<p>随机存储器 RAM<br>装有 BIOS 的 ROM<br>接口卡上的 RAM</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/66bdeee4374b2dfdc816aa8df60dc5998505.png\" alt=\"\"></p>\r\n<p>这些存储器在物理上是独立的器件，但是以下两点相同：</p>\r\n<p>1.都是和 CPU 总线相连</p>\r\n<p>2.CPU 它们进行读或写都是通过控制总线发出内存读写命令</p>\r\n<p>在 CPU 中所有的物理存储器被看作一个由若干个存储单元组成的逻辑存储器，每个物理存储器在逻辑存储器中占有一个地址段空间，CPU 在这段地址空间中读写，实际上就是对相应的物理存储器进行读写。</p>\r\n<p><img src=\"/upload/image/c2a8dd0510d48fef73fd56311f7549039720.png\" alt=\"\"></p>\r\n', '## 汇编代码的组成\r\n> 汇编指令（机器码的助记符）\r\n> 伪指令（由编译器执行）\r\n> 其他符号（由编译器识别）\r\n\r\n汇编语言的核心就是汇编指令，决定了汇编语言的特性。\r\n\r\n## 指令和数据\r\n1.指令和数据是应用上的概念。\r\n\r\n2.在内存或硬盘上，指令和数据没有任何区别，都是二进制信息\r\n\r\n## 存储器\r\n存储器被划分为若干个存储单元，每个存储单元从 0 开始顺序编号\r\n\r\n## CPU 对存储器的读写\r\nCPU想要进行数据的读写，必须和存储器进行三类通信交互：\r\n> 存储单元的地址（地址信息）\r\n> 存储器的选择，读或写命令（控制信息）\r\n> 读或写的数据（数据信息）\r\n\r\n## 总线\r\n在计算机中专门有连接 CPU 和其它芯片的导线，通常称为总线。\r\n\r\n![](/upload/image/1ceec6a75f9de3f4e413f21b9e9325195860.png)\r\n\r\n**地址总线**\r\n一个 CPU 有 N 根地址总线，则 CPU 的地址总线宽度为 N，CPU 最多可以寻找 2 的 N 次方个内存单元。\r\n\r\n**数据总线**\r\nCPU 与内存或其它器件之间的数据传送是通过数据总线进行的，数据总线的宽度决定了 CPU 和外界的数据传输速度。\r\n\r\n**控制总线**\r\nCPU 对外部器件的控制是通过控制总线进行的，控制总线是一些不同的控制线的集合，有多少根控制总线，就意味着 CPU 提供了对外部器件的多少种控制。\r\n\r\n## 内存地址空间\r\n一个 CPU 的地址总线宽度为 10，那么可以寻找 1024 个内存地址单元，这 1024 个内存单元就构成这个 CPU 的内存地址空间。\r\n\r\n## 存储器芯片\r\n按读写属性分类\r\n> 随机存储器（RAM）\r\n> 只读存储器（ROM）\r\n\r\n按功能和连接上分类\r\n> 随机存储器 RAM\r\n> 装有 BIOS 的 ROM\r\n> 接口卡上的 RAM\r\n\r\n![](/upload/image/66bdeee4374b2dfdc816aa8df60dc5998505.png)\r\n\r\n这些存储器在物理上是独立的器件，但是以下两点相同：\r\n\r\n1.都是和 CPU 总线相连\r\n\r\n2.CPU 它们进行读或写都是通过控制总线发出内存读写命令\r\n\r\n在 CPU 中所有的物理存储器被看作一个由若干个存储单元组成的逻辑存储器，每个物理存储器在逻辑存储器中占有一个地址段空间，CPU 在这段地址空间中读写，实际上就是对相应的物理存储器进行读写。\r\n\r\n![](/upload/image/c2a8dd0510d48fef73fd56311f7549039720.png)'),(135, 135, '<h2 id=\"h2-u53CCu4EB2u59D4u6D3Eu673Au5236\"><a name=\"双亲委派机制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>双亲委派机制</h2><p>1.如果一个类加载器收到了一个类加载请求，并不会先自己去加载，而是把这个请求委托给父类的加载器去执行。</p>\r\n<p>2.如果父类加载器还存在其他父类加载器，则进一步向上委托，依次递归，请求最终达到顶层的启动类加载器。</p>\r\n<p>3.如果父类加载器可以完成类加载任务，就返回成功，若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载。</p>\r\n<p><img src=\"/upload/image/a1ea22e0e94b3571710c71a3010b74584843.png\" alt=\"\"></p>\r\n<p>双亲委派机制的优势：</p>\r\n<blockquote>\r\n<p>避免类重复加载<br>保护程序安全，防止核心 API 被随意修改</p>\r\n</blockquote>\r\n<h2 id=\"h2-u6C99u7BB1u5B89u5168u673Au5236\"><a name=\"沙箱安全机制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>沙箱安全机制</h2><p>例如，在程序中自己定义了一个 String 类，但是加载自定义 String 类的时候会先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载 JDK 自带的文件（rt.jar 包中的 java\\lang\\String.class），这样可以保证对 java 核心源代码的保护，这就是沙箱安全机制。</p>\r\n<h2 id=\"h2-u7C7Bu7684u4E3Bu52A8u4F7Fu7528\"><a name=\"类的主动使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>类的主动使用</h2><blockquote>\r\n<p>创建类的实例<br>访问某个类或接口的静态变量，或者对该静态类变量赋值<br>调用类的静态方法<br>反射<br>初始化一个类的子类<br>Java 虚拟机启动时被表明为启动类的类<br>JDK 7 开始提供的动态语言支持:<br>java.lang.invoke.MethodHandle 实例的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应类没有初始化、则初始化</p>\r\n</blockquote>\r\n<p>除了以上情况，其他方式都将被看作是类的被动使用，都不会导致类的初始化。</p>\r\n<blockquote>\r\n</blockquote>\r\n', '## 双亲委派机制\r\n1.如果一个类加载器收到了一个类加载请求，并不会先自己去加载，而是把这个请求委托给父类的加载器去执行。\r\n\r\n2.如果父类加载器还存在其他父类加载器，则进一步向上委托，依次递归，请求最终达到顶层的启动类加载器。\r\n\r\n3.如果父类加载器可以完成类加载任务，就返回成功，若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载。\r\n\r\n![](/upload/image/a1ea22e0e94b3571710c71a3010b74584843.png)\r\n\r\n双亲委派机制的优势：\r\n> 避免类重复加载\r\n> 保护程序安全，防止核心 API 被随意修改\r\n\r\n## 沙箱安全机制\r\n例如，在程序中自己定义了一个 String 类，但是加载自定义 String 类的时候会先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载 JDK 自带的文件（rt.jar 包中的 java\\lang\\String.class），这样可以保证对 java 核心源代码的保护，这就是沙箱安全机制。\r\n\r\n## 类的主动使用\r\n> 创建类的实例\r\n> 访问某个类或接口的静态变量，或者对该静态类变量赋值\r\n> 调用类的静态方法\r\n> 反射\r\n> 初始化一个类的子类\r\n> Java 虚拟机启动时被表明为启动类的类\r\n> JDK 7 开始提供的动态语言支持:\r\n> java.lang.invoke.MethodHandle 实例的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应类没有初始化、则初始化\r\n\r\n除了以上情况，其他方式都将被看作是类的被动使用，都不会导致类的初始化。\r\n> '),(136, 136, '<p>如何获得最初的 xxx 个用户，可以说是一个永恒的问题，一直萦绕在产品经理、运营人员，甚至创始人脑中。而现实中，大多数产品还没有积累到足够多的用户就已经失败了，这里面有产品的问题，也有运营的问题。</p>\r\n<h2 id=\"h2-u5173u6CE8u6BCFu4E00u4E2Au65E9u671Fu8FDBu5165u8005\"><a name=\"关注每一个早期进入者\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>关注每一个早期进入者</h2><p>每个创始人都会与一些活跃度高的用户进行积极的互动，这在形成早期的社区氛围的过程中，非常重要。</p>\r\n<h2 id=\"h2-u60C5u611Fu7EF4u7CFB\"><a name=\"情感维系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>情感维系</h2><p>与高活跃度、高质量的用户积极进行私信互动，赠送小礼品，邀请他们参加线下活动、公司参观。任何关联都比情感关联弱，情感关联让早期用户更加愿意贡献内容，以及自发分享邀请自己的朋友进入。</p>\r\n<h2 id=\"h2-u79CDu5B50u7528u6237u7684u4E24u4E2Au7EF4u5EA6\"><a name=\"种子用户的两个维度\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>种子用户的两个维度</h2><p><strong>数量</strong>，其实少量的用户就够了，前提这些用户是种子用户，而不仅仅是初始用户。<br><strong>质量</strong>，种子用户不仅仅是传播产品最积极的用户，更是为产品出谋划策、提出建议的用户。正是因为这种既能帮助产品成长、协助优化运营策略，又能活跃分享产品的特性，才能让用户对产品具有重大价值。</p>\r\n<h2 id=\"h2-u9762u5BF9u79CDu5B50u7528u6237u505Au6709u4EF7u503Cu7684u8FD0u8425\"><a name=\"面对种子用户做有价值的运营\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>面对种子用户做有价值的运营</h2><p><strong>倾听种子用户的声音</strong>，种子用户通常很乐于沟通，而运营人员因为工作繁杂，有时无暇顾及与用户之间的沟通，其实沟通并不是简单的反馈，而是用户提了一个修改意见，你回复用户一些反馈信息，沟通的核心在于准确倾听后给予有价值的回应。</p>\r\n<p><strong>与种子用户的关系尽量保持亲密</strong>，在不破坏运营规则的前提下，通过一些小的运营策略，让用户感觉到社区的温暖气氛，因此更容易沉浸其中。</p>\r\n<p><strong>真诚的对待所有种子用户</strong>，由于每个人的个性不同，但种子用户的价值是相同的，所以运营人员应该摒弃个人偏见，不管是否喜欢某个种子用户，都要真诚的对待，因为这些种子用户，是产品可能爆发的源动力。</p>\r\n', '如何获得最初的 xxx 个用户，可以说是一个永恒的问题，一直萦绕在产品经理、运营人员，甚至创始人脑中。而现实中，大多数产品还没有积累到足够多的用户就已经失败了，这里面有产品的问题，也有运营的问题。\r\n## 关注每一个早期进入者\r\n每个创始人都会与一些活跃度高的用户进行积极的互动，这在形成早期的社区氛围的过程中，非常重要。\r\n## 情感维系\r\n与高活跃度、高质量的用户积极进行私信互动，赠送小礼品，邀请他们参加线下活动、公司参观。任何关联都比情感关联弱，情感关联让早期用户更加愿意贡献内容，以及自发分享邀请自己的朋友进入。\r\n## 种子用户的两个维度\r\n**数量**，其实少量的用户就够了，前提这些用户是种子用户，而不仅仅是初始用户。\r\n**质量**，种子用户不仅仅是传播产品最积极的用户，更是为产品出谋划策、提出建议的用户。正是因为这种既能帮助产品成长、协助优化运营策略，又能活跃分享产品的特性，才能让用户对产品具有重大价值。\r\n## 面对种子用户做有价值的运营\r\n**倾听种子用户的声音**，种子用户通常很乐于沟通，而运营人员因为工作繁杂，有时无暇顾及与用户之间的沟通，其实沟通并不是简单的反馈，而是用户提了一个修改意见，你回复用户一些反馈信息，沟通的核心在于准确倾听后给予有价值的回应。\r\n\r\n**与种子用户的关系尽量保持亲密**，在不破坏运营规则的前提下，通过一些小的运营策略，让用户感觉到社区的温暖气氛，因此更容易沉浸其中。\r\n\r\n**真诚的对待所有种子用户**，由于每个人的个性不同，但种子用户的价值是相同的，所以运营人员应该摒弃个人偏见，不管是否喜欢某个种子用户，都要真诚的对待，因为这些种子用户，是产品可能爆发的源动力。\r\n'),(137, 137, '<h2 id=\"h2-jvm-class-\"><a name=\"JVM 中 Class 是否为同一个类的判断\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>JVM 中 Class 是否为同一个类的判断</h2><blockquote>\r\n<p>类的完整名称必须一致</p>\r\n<p>加载类的 ClassLoader(实例对象)必须相同</p>\r\n</blockquote>\r\n<h2 id=\"h2-u7C7Bu7684u4E3Bu52A8u4F7Fu7528\"><a name=\"类的主动使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>类的主动使用</h2><blockquote>\r\n<p>创建类的实例</p>\r\n<p>访问类或接口的静态变量，或对静态变量赋值</p>\r\n<p>调用类的静态方法</p>\r\n<p>反射</p>\r\n<p>初始化一个类的子类</p>\r\n<p>Java虚拟机启动时候被标明为启动类的类</p>\r\n<p>JDK 7 开始提供的动态语言支持：<br>java.lang.invoke.MethodHandle 实例的解析结果<br>REF_getStatic、REF_putStatic、REF_invokeStatic 句柄对应的类没有初始化则初始化</p>\r\n</blockquote>\r\n<h2 id=\"h2-u7C7Bu7684u88ABu52A8u4F7Fu7528\"><a name=\"类的被动使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>类的被动使用</h2><blockquote>\r\n<p>除了以上主动情况，其他方式使用都被当作为被动使用</p>\r\n</blockquote>\r\n', '## JVM 中 Class 是否为同一个类的判断\r\n> 类的完整名称必须一致\r\n\r\n> 加载类的 ClassLoader(实例对象)必须相同\r\n\r\n## 类的主动使用\r\n> 创建类的实例\r\n\r\n> 访问类或接口的静态变量，或对静态变量赋值\r\n\r\n> 调用类的静态方法\r\n\r\n> 反射\r\n\r\n> 初始化一个类的子类\r\n\r\n> Java虚拟机启动时候被标明为启动类的类\r\n\r\n> JDK 7 开始提供的动态语言支持：\r\njava.lang.invoke.MethodHandle 实例的解析结果\r\nREF_getStatic、REF_putStatic、REF_invokeStatic 句柄对应的类没有初始化则初始化\r\n\r\n## 类的被动使用\r\n> 除了以上主动情况，其他方式使用都被当作为被动使用'),(138, 138, '<p>在 Kibana 中的 Dev Tools 可以实现对 Elasticsearch 的增删改查等操作。</p>\r\n<h2 id=\"h2-u7D22u5F15\"><a name=\"索引\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>索引</h2>', '在 Kibana 中的 Dev Tools 可以实现对 Elasticsearch 的增删改查等操作。\r\n\r\n## 索引\r\n'),(139, 139, '<h2 id=\"h2-u6982u8FF0\"><a name=\"概述\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>概述</h2><p><img src=\"/upload/image/21e6ec549bbffbefb844b9b36412e3a94596.png\" alt=\"\"></p>\r\n<p>JVM中的程序计数器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能运行。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。</p>\r\n<h2 id=\"h2-u4F5Cu7528\"><a name=\"作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>作用</h2><p><img src=\"/upload/image/882623eaa5128a43f24f6dfce28a691c3735.png\" alt=\"\"></p>\r\n<p>PC寄存器用来存储指向下一条指令的地址，也就是即将要指向的指令代码，由执行引擎读取下一条指令。</p>\r\n<blockquote>\r\n<p>1.PC寄存器是一块很小的内存空间，也是运行速度最快的存储区域。<br>2.在JVM规范中，每个线程都有自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。<br>3.任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的JAVA方法的JVM指令地址，如果是在执行native方法，则未指定值（undefined）。<br>4.PC寄存器是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器完成。<br>5.字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。<br>6.PC寄存器是唯一一个在JAVA虚拟机规范中没有任何OutOtMemoryError情况的区域。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u4E3Eu4F8B\"><a name=\"举例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>举例</h2><p><img src=\"/upload/image/db65cd92166c1a8511d16e69f788934c8546.png\" alt=\"\"></p>\r\n', '## 概述\r\n![](/upload/image/21e6ec549bbffbefb844b9b36412e3a94596.png)\r\n\r\nJVM中的程序计数器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能运行。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。\r\n## 作用\r\n![](/upload/image/882623eaa5128a43f24f6dfce28a691c3735.png)\r\n\r\nPC寄存器用来存储指向下一条指令的地址，也就是即将要指向的指令代码，由执行引擎读取下一条指令。\r\n\r\n> 1.PC寄存器是一块很小的内存空间，也是运行速度最快的存储区域。\r\n> 2.在JVM规范中，每个线程都有自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。\r\n> 3.任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的JAVA方法的JVM指令地址，如果是在执行native方法，则未指定值（undefined）。\r\n> 4.PC寄存器是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器完成。\r\n> 5.字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。\r\n> 6.PC寄存器是唯一一个在JAVA虚拟机规范中没有任何OutOtMemoryError情况的区域。\r\n\r\n## 举例\r\n![](/upload/image/db65cd92166c1a8511d16e69f788934c8546.png)'),(140, 140, '<h2 id=\"h2-u76F8u5173u4F9Du8D56\"><a name=\"相关依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>相关依赖</h2><pre><code class=\"lang-xml\">&lt;!-- redis --&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n&lt;!-- redis 连接池 --&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\r\n    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;\r\n    &lt;version&gt;2.9.0&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n</code></pre>\r\n<h2 id=\"h2-redis-\"><a name=\"Redis 配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 配置</h2><pre><code class=\"lang-java\">@EnableCaching\r\n@Configuration\r\npublic class RedisConfig extends CachingConfigurerSupport {\r\n\r\n    @Bean\r\n    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) {\r\n        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();\r\n        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\r\n        template.setConnectionFactory(factory);\r\n        template.setKeySerializer(redisSerializer);\r\n        template.setValueSerializer(jackson2JsonRedisSerializer);\r\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\r\n        return template;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\r\n        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\r\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\r\n                .entryTtl(Duration.ofSeconds(600))\r\n                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))\r\n                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))\r\n                .disableCachingNullValues();\r\n        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)\r\n                .cacheDefaults(config)\r\n                .build();\r\n        return cacheManager;\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<pre><code class=\"lang-yaml\">spring:\r\n  redis:\r\n    host: 192.168.1.254\r\n</code></pre>\r\n<h2 id=\"h2-u793Au4F8B\"><a name=\"示例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>示例</h2><pre><code class=\"lang-java\">@Autowired\r\nprivate RedisTemplate redisTemplate;\r\n\r\n@ApiOperation(value = &quot;设置&quot;)\r\n    @RequestMapping(value = &quot;test&quot;, method = RequestMethod.POST)\r\n    public Object test() {\r\n    redisTemplate.opsForValue().set(&quot;test&quot;, &quot;111111&quot;);\r\n    return ResultFormat.success(&quot;成功&quot;, &quot;&quot;);\r\n}\r\n\r\n@ApiOperation(value = &quot;获取&quot;)\r\n    @RequestMapping(value = &quot;detail&quot;, method = RequestMethod.GET)\r\n    public Object detail() {\r\n    String v = (String) redisTemplate.opsForValue().get(&quot;test&quot;);\r\n    return ResultFormat.success(&quot;查询成功&quot;, v);\r\n}\r\n</code></pre>\r\n', '## 相关依赖\r\n```xml\r\n<!-- redis -->\r\n<dependency>\r\n	<groupId>org.springframework.boot</groupId>\r\n	<artifactId>spring-boot-starter-data-redis</artifactId>\r\n</dependency>\r\n<!-- redis 连接池 -->\r\n<dependency>\r\n	<groupId>org.apache.commons</groupId>\r\n	<artifactId>commons-pool2</artifactId>\r\n	<version>2.9.0</version>\r\n</dependency>\r\n```\r\n\r\n## Redis 配置\r\n```java\r\n@EnableCaching\r\n@Configuration\r\npublic class RedisConfig extends CachingConfigurerSupport {\r\n\r\n    @Bean\r\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\r\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\r\n        RedisSerializer<String> redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\r\n        template.setConnectionFactory(factory);\r\n        template.setKeySerializer(redisSerializer);\r\n        template.setValueSerializer(jackson2JsonRedisSerializer);\r\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\r\n        return template;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\r\n        RedisSerializer<String> redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\r\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\r\n                .entryTtl(Duration.ofSeconds(600))\r\n                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))\r\n                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))\r\n                .disableCachingNullValues();\r\n        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)\r\n                .cacheDefaults(config)\r\n                .build();\r\n        return cacheManager;\r\n    }\r\n\r\n}\r\n```\r\n\r\n```yaml\r\nspring:\r\n  redis:\r\n    host: 192.168.1.254\r\n```\r\n\r\n## 示例\r\n```java\r\n@Autowired\r\nprivate RedisTemplate redisTemplate;\r\n\r\n@ApiOperation(value = \"设置\")\r\n	@RequestMapping(value = \"test\", method = RequestMethod.POST)\r\n	public Object test() {\r\n	redisTemplate.opsForValue().set(\"test\", \"111111\");\r\n	return ResultFormat.success(\"成功\", \"\");\r\n}\r\n\r\n@ApiOperation(value = \"获取\")\r\n	@RequestMapping(value = \"detail\", method = RequestMethod.GET)\r\n	public Object detail() {\r\n	String v = (String) redisTemplate.opsForValue().get(\"test\");\r\n	return ResultFormat.success(\"查询成功\", v);\r\n}\r\n```'),(141, 141, '<h2 id=\"h2-schema-xml-\"><a name=\"schema.xml 配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>schema.xml 配置</h2><pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot;?&gt;\r\n&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;\r\n&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;\r\n\r\n    &lt;schema name=&quot;mysql&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn_mysql&quot;&gt;&lt;/schema&gt;\r\n    &lt;schema name=&quot;cloud_advert&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn_advert&quot;&gt;&lt;/schema&gt;\r\n    &lt;schema name=&quot;cloud_hotel&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn_hotel&quot;&gt;&lt;/schema&gt;\r\n    &lt;schema name=&quot;cloud_scenic&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn_scenic&quot;&gt;&lt;/schema&gt;\r\n\r\n    &lt;dataNode name=&quot;dn_mysql&quot; dataHost=&quot;host_mysql&quot; database=&quot;mysql&quot; /&gt;\r\n    &lt;dataNode name=&quot;dn_advert&quot; dataHost=&quot;host_mysql&quot; database=&quot;cloud_advert&quot; /&gt;\r\n    &lt;dataNode name=&quot;dn_hotel&quot; dataHost=&quot;host_mysql&quot; database=&quot;cloud_hotel&quot; /&gt;\r\n    &lt;dataNode name=&quot;dn_scenic&quot; dataHost=&quot;host_mysql&quot; database=&quot;cloud_scenic&quot; /&gt;\r\n\r\n\r\n    &lt;dataHost name=&quot;host_mysql&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;3&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\r\n        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\r\n        &lt;writeHost host=&quot;hostM1&quot; url=&quot;10.249.1.251:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt;\r\n            &lt;readHost host=&quot;hostS1&quot; url=&quot;10.249.1.254:3306&quot; user=&quot;root&quot; password=&quot;123456&quot; /&gt;\r\n        &lt;/writeHost&gt;\r\n    &lt;/dataHost&gt;\r\n\r\n\r\n\r\n&lt;/mycat:schema&gt;\r\n</code></pre>\r\n<p>注意: schema dataNode dataHost 多个必须按照顺序写在一起，读写分离需要提前配置好 MySQL 的主从模式，balance=”3” 适用单主单从模式。</p>\r\n<h2 id=\"h2-server-xml-\"><a name=\"server.xml 配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>server.xml 配置</h2><pre><code class=\"lang-xml\">&lt;user name=&quot;root&quot; defaultAccount=&quot;true&quot;&gt;\r\n        &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;\r\n        &lt;property name=&quot;schemas&quot;&gt;mysql,cloud_advert,cloud_hotel,cloud_scenic&lt;/property&gt;        \r\n        &lt;property name=&quot;defaultSchema&quot;&gt;mysql&lt;/property&gt;\r\n&lt;/user&gt;\r\n</code></pre>\r\n<p>注意：多个 schemas 使用逗号分隔</p>\r\n', '## schema.xml 配置\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<!DOCTYPE mycat:schema SYSTEM \"schema.dtd\">\r\n<mycat:schema xmlns:mycat=\"http://io.mycat/\">\r\n	\r\n	<schema name=\"mysql\" checkSQLschema=\"true\" sqlMaxLimit=\"100\" dataNode=\"dn_mysql\"></schema>\r\n	<schema name=\"cloud_advert\" checkSQLschema=\"true\" sqlMaxLimit=\"100\" dataNode=\"dn_advert\"></schema>\r\n	<schema name=\"cloud_hotel\" checkSQLschema=\"true\" sqlMaxLimit=\"100\" dataNode=\"dn_hotel\"></schema>\r\n	<schema name=\"cloud_scenic\" checkSQLschema=\"true\" sqlMaxLimit=\"100\" dataNode=\"dn_scenic\"></schema>\r\n	\r\n	<dataNode name=\"dn_mysql\" dataHost=\"host_mysql\" database=\"mysql\" />\r\n	<dataNode name=\"dn_advert\" dataHost=\"host_mysql\" database=\"cloud_advert\" />\r\n	<dataNode name=\"dn_hotel\" dataHost=\"host_mysql\" database=\"cloud_hotel\" />\r\n	<dataNode name=\"dn_scenic\" dataHost=\"host_mysql\" database=\"cloud_scenic\" />\r\n	\r\n	\r\n	<dataHost name=\"host_mysql\" maxCon=\"1000\" minCon=\"10\" balance=\"3\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\" switchType=\"1\"  slaveThreshold=\"100\">\r\n		<heartbeat>select user()</heartbeat>\r\n		<writeHost host=\"hostM1\" url=\"10.249.1.251:3306\" user=\"root\" password=\"123456\">\r\n			<readHost host=\"hostS1\" url=\"10.249.1.254:3306\" user=\"root\" password=\"123456\" />\r\n		</writeHost>\r\n	</dataHost>\r\n\r\n	\r\n	\r\n</mycat:schema>\r\n\r\n```\r\n\r\n注意: schema dataNode dataHost 多个必须按照顺序写在一起，读写分离需要提前配置好 MySQL 的主从模式，balance=\"3\" 适用单主单从模式。\r\n\r\n## server.xml 配置\r\n```xml\r\n<user name=\"root\" defaultAccount=\"true\">\r\n		<property name=\"password\">123456</property>\r\n		<property name=\"schemas\">mysql,cloud_advert,cloud_hotel,cloud_scenic</property>		\r\n		<property name=\"defaultSchema\">mysql</property>\r\n</user>\r\n```\r\n注意：多个 schemas 使用逗号分隔'),(142, 142, '<h2 id=\"h2-u5F15u5165u4F9Du8D56\"><a name=\"引入依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>引入依赖</h2><pre><code class=\"lang-xml\">&lt;dependency&gt;\r\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n</code></pre>\r\n<h2 id=\"h2-u914Du7F6E\"><a name=\"配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置</h2><pre><code class=\"lang-yaml\">spring:\r\n  cloud:\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        dashboard: 10.249.1.254:9080\r\n</code></pre>\r\n<p>port 为服务公布给 sentinel 访问的端口<br>dashboard sentinel监控控制台地址</p>\r\n<h2 id=\"h2-u6CE8u89E3u8D44u6E90\"><a name=\"注解资源\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注解资源</h2><pre><code class=\"lang-java\">@SentinelResource(value = &quot;detail&quot;)\r\n</code></pre>\r\n<p>注解一般在方法上添加</p>\r\n<h2 id=\"h2-u63A7u5236u53F0\"><a name=\"控制台\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>控制台</h2><p><img src=\"/upload/image/4c1ad7ffd3ed10a43e253dee41965c019136.png\" alt=\"\"><br>访问一下相关资源，控制台才会显示</p>\r\n', '## 引入依赖\r\n```xml\r\n<dependency>\r\n	<groupId>com.alibaba.cloud</groupId>\r\n	<artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\r\n</dependency>\r\n```\r\n## 配置\r\n```yaml\r\nspring:\r\n  cloud:\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        dashboard: 10.249.1.254:9080\r\n```\r\nport 为服务公布给 sentinel 访问的端口\r\ndashboard sentinel监控控制台地址\r\n## 注解资源\r\n```java\r\n@SentinelResource(value = \"detail\")\r\n```\r\n注解一般在方法上添加\r\n## 控制台\r\n![](/upload/image/4c1ad7ffd3ed10a43e253dee41965c019136.png)\r\n访问一下相关资源，控制台才会显示'),(143, 143, '<p>拍摄对象的脊背必须保持端正，脊背端正是任何拍摄姿势取得理想效果的基础。</p>\r\n<h2 id=\"h2-u9888u690E\"><a name=\"颈椎\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>颈椎</h2><p>拍摄个人肖像时，使拍摄对象颈椎挺直、头部后仰，使锁骨露出；当拍摄两个人，如情侣，可以使其中一方的颈椎向另一方倾斜，从而创造一种浪漫、富有情趣的图像效果。<br><strong>身体的颈椎后仰或者倾斜时，必须以颈脖底部为轴点</strong>。假设颈脖和肩部的交接处是一个圆点，头部则是围绕着这个圆点旋转。而除枢轴点之外，颈脖应尽可能的保持修长。头部上仰或低垂时，只有下巴需要挪动。</p>\r\n<h2 id=\"h2-u80F8u690E\"><a name=\"胸椎\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>胸椎</h2><p>处理胸椎姿势时，往往容易遇到更多问题，因为弯腰、弓背与脊椎这一部分相连，拍摄对象的姿势看起来别扭不自然，往往是胸椎姿势不得体造成的。</p>\r\n<blockquote>\r\n<p>让拍摄对象将头的顶部向上提，使其尽可能接近天花板或者接近天空。强调上仰头顶的后部，而不是前额，因为强调后者，拍摄对象往往容易翘起下巴。期望的是挺直头部的同时，并不影响下巴的摆放，这一技巧能很好的延长颈椎线条。</p>\r\n</blockquote>\r\n<hr>\r\n<blockquote>\r\n<p>尽可能的吸气收腹，让人感觉浑身通透、舒展，通常让拍摄对象深吸气，吸到一半的时候按下快门，从而拍摄出自信满满、精神充沛的人像。</p>\r\n</blockquote>\r\n<hr>\r\n<blockquote>\r\n<p>让拍摄者将肩膀向下、向后微微下垂几厘米，对于延展颈部的线条有很好的效果。这不仅能突显人像头部、面部特点，还能使拍摄对象看起来更加自信、有力。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u8170u690E\"><a name=\"腰椎\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>腰椎</h2><p>腰椎位于人体臀部上方，从摄影的角度来说，由于腰椎具有明显的弧度，是脊椎中最吸引人的部分，在处理人物姿势时，应该特别值得关注。<br>人物腰椎部分有明显的弯曲度，看似一个侧置的微笑，拍摄时腰椎看似在微笑，是迷人的、性感的；反之如果完全没有微笑的弧度，则不好看。</p>\r\n', '拍摄对象的脊背必须保持端正，脊背端正是任何拍摄姿势取得理想效果的基础。\r\n\r\n## 颈椎\r\n拍摄个人肖像时，使拍摄对象颈椎挺直、头部后仰，使锁骨露出；当拍摄两个人，如情侣，可以使其中一方的颈椎向另一方倾斜，从而创造一种浪漫、富有情趣的图像效果。\r\n**身体的颈椎后仰或者倾斜时，必须以颈脖底部为轴点**。假设颈脖和肩部的交接处是一个圆点，头部则是围绕着这个圆点旋转。而除枢轴点之外，颈脖应尽可能的保持修长。头部上仰或低垂时，只有下巴需要挪动。\r\n\r\n## 胸椎\r\n处理胸椎姿势时，往往容易遇到更多问题，因为弯腰、弓背与脊椎这一部分相连，拍摄对象的姿势看起来别扭不自然，往往是胸椎姿势不得体造成的。\r\n> 让拍摄对象将头的顶部向上提，使其尽可能接近天花板或者接近天空。强调上仰头顶的后部，而不是前额，因为强调后者，拍摄对象往往容易翘起下巴。期望的是挺直头部的同时，并不影响下巴的摆放，这一技巧能很好的延长颈椎线条。\r\n\r\n------------\r\n\r\n> 尽可能的吸气收腹，让人感觉浑身通透、舒展，通常让拍摄对象深吸气，吸到一半的时候按下快门，从而拍摄出自信满满、精神充沛的人像。\r\n\r\n------------\r\n\r\n> 让拍摄者将肩膀向下、向后微微下垂几厘米，对于延展颈部的线条有很好的效果。这不仅能突显人像头部、面部特点，还能使拍摄对象看起来更加自信、有力。\r\n\r\n## 腰椎\r\n腰椎位于人体臀部上方，从摄影的角度来说，由于腰椎具有明显的弧度，是脊椎中最吸引人的部分，在处理人物姿势时，应该特别值得关注。\r\n人物腰椎部分有明显的弯曲度，看似一个侧置的微笑，拍摄时腰椎看似在微笑，是迷人的、性感的；反之如果完全没有微笑的弧度，则不好看。\r\n\r\n'),(144, 144, '<h2 id=\"h2-u6613u7ECFu8BB2u7684u662Fu4EC0u4E48\"><a name=\"易经讲的是什么\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>易经讲的是什么</h2><p>世界上的文明都是从神话开始发展的，但是神话是虚无缥缈的，人不可能生活在神话的世界里，因此则需要一种与人类生活环境贴近的，那就是哲学，每个民族的哲学都是从神话里提升出来的，神话和哲学的目的都是为了解答宇宙和人生的问题。</p>\r\n<blockquote>\r\n<p>神话-&gt;哲学-&gt;智慧</p>\r\n</blockquote>\r\n<p>易经并不是讲知识的书，否则长时间的时代变迁，很多知识都改变了，相反的已经是讲智慧的书。</p>\r\n<blockquote>\r\n<p>一切都是人想出来的。</p>\r\n</blockquote>\r\n<p>人类正是因为有了想象，才有了大千世界，林林总总的发明和创造，才出现了各种各样的意识形态和思想流派。</p>\r\n<h2 id=\"h2-u4F0Fu7FB2u4E00u753Bu5F00u5929u5730\"><a name=\"伏羲一画开天地\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>伏羲一画开天地</h2><p>伏羲时常盘坐卦台山巅，苦思宇宙的奥秘。仰观日月星辰的变化，俯察山川风物的法则，不断地反省自己，追年逐月，风雨无阻，终于参悟天地竟是如此的简单明了，唯阴阳而已。在那个没有文字的年代，伏羲想将他的思想通过画来表示出来，于是就画了一个符号<code>—</code>，也就是伏羲用眼睛去观察宇宙万象，然后根据自己的想象构建出一套系统来，这套系统的总根源就是<code>—</code>，叫做太极。</p>\r\n<h2 id=\"h2-u592Au6781u751Fu4E24u4EEA\"><a name=\"太极生两仪\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>太极生两仪</h2><p>伏羲认为有一个阳，就有一个阴，有一个正的力量，就有一个反的力量；如果把太极<code>—</code>从中折断就成了<code>--</code>，把<code>--</code>连起来就是<code>—</code>，所谓阴中有阳，阳中有阴。祸兮福所倚，福兮祸所伏，世间很多事情都是有两面性的。</p>\r\n<h2 id=\"h2-u4E24u4EEAu751Fu56DBu8C61\"><a name=\"两仪生四象\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>两仪生四象</h2><p>而阴阳的互动、变化则产生了四象。<br><img src=\"/upload/image/b01e0700e1a0a59c3c844f42ee1415d57613.png\" alt=\"\"></p>\r\n<blockquote>\r\n<p>少阳：清晨刚开始，太阳刚出来，阳光还没有完全照射到地上，上面热下面凉。<br>老阳：到了中午，上下都很热，全都热。<br>少阴：黄昏时候，太阳已经落山了，上面已经开始凉了，地上还是热的。<br>老阴：深夜的时候，哪里都凉，全都凉了。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u603Bu7ED3\"><a name=\"总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总结</h2><p><img src=\"/upload/image/658a470ec0b181334152ca93af6630ba6143.png\" alt=\"\"></p>\r\n', '## 易经讲的是什么\r\n世界上的文明都是从神话开始发展的，但是神话是虚无缥缈的，人不可能生活在神话的世界里，因此则需要一种与人类生活环境贴近的，那就是哲学，每个民族的哲学都是从神话里提升出来的，神话和哲学的目的都是为了解答宇宙和人生的问题。\r\n\r\n> 神话->哲学->智慧\r\n\r\n易经并不是讲知识的书，否则长时间的时代变迁，很多知识都改变了，相反的已经是讲智慧的书。\r\n\r\n> 一切都是人想出来的。\r\n\r\n人类正是因为有了想象，才有了大千世界，林林总总的发明和创造，才出现了各种各样的意识形态和思想流派。\r\n\r\n## 伏羲一画开天地\r\n伏羲时常盘坐卦台山巅，苦思宇宙的奥秘。仰观日月星辰的变化，俯察山川风物的法则，不断地反省自己，追年逐月，风雨无阻，终于参悟天地竟是如此的简单明了，唯阴阳而已。在那个没有文字的年代，伏羲想将他的思想通过画来表示出来，于是就画了一个符号`—`，也就是伏羲用眼睛去观察宇宙万象，然后根据自己的想象构建出一套系统来，这套系统的总根源就是`—`，叫做太极。\r\n## 太极生两仪\r\n伏羲认为有一个阳，就有一个阴，有一个正的力量，就有一个反的力量；如果把太极`—`从中折断就成了`--`，把`--`连起来就是`—`，所谓阴中有阳，阳中有阴。祸兮福所倚，福兮祸所伏，世间很多事情都是有两面性的。\r\n## 两仪生四象\r\n而阴阳的互动、变化则产生了四象。\r\n![](/upload/image/b01e0700e1a0a59c3c844f42ee1415d57613.png)\r\n> 少阳：清晨刚开始，太阳刚出来，阳光还没有完全照射到地上，上面热下面凉。\r\n> 老阳：到了中午，上下都很热，全都热。\r\n> 少阴：黄昏时候，太阳已经落山了，上面已经开始凉了，地上还是热的。\r\n> 老阴：深夜的时候，哪里都凉，全都凉了。\r\n\r\n## 总结\r\n![](/upload/image/658a470ec0b181334152ca93af6630ba6143.png)');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`cms_category` WRITE;
DELETE FROM `nunumao`.`cms_category`;
INSERT INTO `nunumao`.`cms_category` (`id`,`site_id`,`parent_id`,`root_id`,`model_id`,`name`,`count`,`alias`,`intro`,`template`,`log_template`,`meta`,`sort`) VALUES (1, 1, 0, '0', 1, '学习笔记', 0, '', NULL, '', '', NULL, 0),(2, 1, 0, '0', 1, '前端开发', 0, '', NULL, '', '', NULL, 0),(3, 1, 0, '0', 1, '后端开发', 0, '', NULL, '', '', NULL, 0),(4, 1, 0, '0', 1, '移动端开发', 0, '', NULL, '', '', NULL, 0),(5, 1, 0, '0', 1, '产品&运营', 0, '', NULL, '', '', NULL, 0),(6, 1, 0, '0', 1, '服务器', 0, '', NULL, '', '', NULL, 0),(7, 1, 1, '0', 1, '日常学习', 0, '', NULL, '', '', NULL, 0),(8, 1, 1, '0', 1, '语言学习', 0, '', NULL, '', '', NULL, 0),(9, 1, 1, '0', 1, '游戏辅助', 0, '', NULL, '', '', NULL, 0),(10, 1, 1, '0', 1, '摄影学习', 0, '', NULL, '', '', NULL, 0),(11, 1, 2, '0', 1, 'JavaScript', 0, '', NULL, '', '', NULL, 0),(12, 1, 2, '0', 1, 'TypeScript', 0, '', NULL, '', '', NULL, 0),(13, 1, 2, '0', 1, 'NodeJS', 0, '', NULL, '', '', NULL, 0),(14, 1, 2, '0', 1, 'CSS', 0, '', NULL, '', '', NULL, 0),(15, 1, 3, '0', 1, 'JAVA', 0, '', NULL, '', '', NULL, 0),(16, 1, 3, '0', 1, 'SpringBoot', 0, '', NULL, '', '', NULL, 0),(17, 1, 3, '0', 1, 'SpringCloud', 0, '', NULL, '', '', NULL, 0),(18, 1, 3, '0', 1, '设计模式', 0, '', NULL, '', '', NULL, 0),(19, 1, 4, '0', 1, 'Android', 0, '', NULL, '', '', NULL, 0),(20, 1, 4, '0', 1, 'IOS', 0, '', NULL, '', '', NULL, 0),(21, 1, 4, '0', 1, '微信小程序', 0, '', NULL, '', '', NULL, 0),(22, 1, 5, '0', 1, '互联网运营', 0, '', NULL, '', '', NULL, 0),(23, 1, 6, '0', 1, 'Ubuntu', 0, '', NULL, '', '', NULL, 0),(24, 1, 6, '0', 1, 'MySQL', 0, '', NULL, '', '', NULL, 0),(25, 1, 6, '0', 1, 'Redis', 0, '', NULL, '', '', NULL, 0),(26, 1, 6, '0', 1, 'Elasticsearch', 0, '', NULL, '', '', NULL, 0),(27, 1, 6, '0', 1, 'Docker', 0, '', NULL, '', '', NULL, 0);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`cms_model` WRITE;
DELETE FROM `nunumao`.`cms_model`;
INSERT INTO `nunumao`.`cms_model` (`id`,`name`,`table_name`,`create_time`) VALUES (1, '文章模型', 'article', '2021-08-05 01:43:26');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`cms_model_field` WRITE;
DELETE FROM `nunumao`.`cms_model_field`;
INSERT INTO `nunumao`.`cms_model_field` (`id`,`model_id`,`type`,`name`,`field`,`tips`,`css`,`min_length`,`max_length`,`pattern`,`error`,`is_core`,`is_system`,`is_unique`,`is_hidden`) VALUES (1, '1', 'category', '栏目', 'category_id', NULL, NULL, 0, 11, NULL, NULL, 0, 1, 1, 0),(2, '1', 'title', '标题', 'title', NULL, NULL, 0, 255, NULL, NULL, 0, 1, 1, 0),(3, '1', 'thumb', '缩略图', 'thumb', NULL, NULL, 0, 500, NULL, NULL, 0, 1, 1, 0),(4, '1', 'keywords', '关键词', 'keywords', NULL, NULL, 0, 255, NULL, NULL, 0, 1, 1, 0),(5, '1', 'description', '简介', 'description', NULL, NULL, 0, 255, NULL, NULL, 0, 1, 1, 0),(6, '1', 'editor', '内容', 'content', NULL, NULL, 0, 0, NULL, NULL, 1, 1, 1, 0),(7, '1', 'view_num', '浏览', 'view_num', NULL, NULL, 0, 11, NULL, NULL, 0, 1, 1, 1),(8, '1', 'is_top', '推荐', 'is_top', NULL, NULL, 0, 1, NULL, NULL, 0, 1, 1, 0),(9, '1', 'create_time', '创建时间', 'create_time', NULL, NULL, 0, 0, NULL, NULL, 0, 1, 1, 0),(10, '1', 'status', '状态', 'status', NULL, NULL, 0, 1, NULL, NULL, 0, 1, 1, 0),(11, '1', 'origin', '源内容', 'origin', NULL, NULL, 0, 0, NULL, NULL, 1, 1, 1, 1);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`cms_news` WRITE;
DELETE FROM `nunumao`.`cms_news`;
INSERT INTO `nunumao`.`cms_news` (`id`,`cate_id`,`author_id`,`tag`,`type`,`alias`,`is_top`,`is_lock`,`title`,`thumb`,`intro`,`content`,`markdown`,`comm_nums`,`view_nums`,`like_nums`,`template`,`meta`,`create_time`,`status`) VALUES (2, 0, 1, '', 1, '', 0, 0, '留言本', NULL, '', '这是一个留言本，是由程序自动生成的页面，您可以对其进行任意操作。', NULL, 0, 18, 0, '', '', '2019-04-21 22:23:53', 0),(5, 0, 1, '', 1, '', 0, 1, '关于我', NULL, '', '<p>365D1</p>', NULL, 0, 1993, 111, '', '', '2019-04-21 22:23:53', 0),(6, 16, 1, '', 0, '', 0, 0, 'VirtualBox+Ubuntu18.04 安装图解', '/upload/image/2018/05/201805181526587353746788.png', '', '<!--more--><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587353746788.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587398250256.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587527620743.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587590846359.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587610346172.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587622739377.png\" alt=\"blob.png\"/>&nbsp;&nbsp;&nbsp;&nbsp;</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587697409883.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587772846724.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587834896557.png\" alt=\"blob.png\"/></p><p>下面进入Ubuntu18.04的安装</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526587966313011.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588049331972.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588100816305.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588170796674.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588230551582.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588372194977.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588436423985.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588491298205.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588553587152.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526588758135533.png\" alt=\"blob.png\"/></p><p><img src=\"/upload/image/2018/05/201805181526588817111157.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526589060731249.png\" alt=\"blob.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805181526589108190672.png\" alt=\"blob.png\"/></p><p><br/></p><p><br/></p><p style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; left: -1000px; white-space: nowrap; top: 10473px;\"><img class=\"loadingclass\" id=\"loading_jhazjufz\" src=\"{#ZC_BLOG_HOST#}zb_users/plugin/UEditor/themes/default/images/spacer.gif\"/></p><p style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; left: -1000px; white-space: nowrap; top: 10473px;\"><br/></p>', NULL, 0, 763, 0, '', '', '2019-04-21 22:23:53', 0),(7, 16, 1, '', 0, '', 0, 0, '阿里云免费CA证书配置Nginx HTTPS', '/upload/image/2018/05/201805201526824382136021.png', '<p><br/></p><p><br/></p><p><br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824360553096.png\" title=\"1.png\" alt=\"1.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824373680568.png\" title=\"2.png\" alt=\"2.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824382136021.png\" title=\"3.png\" alt=\"3.png\"/></p><pre class=\"prism-highlight prism-language-c\">server&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;443;\r\n&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;localhost;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl&nbsp;on;\r\n&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_certificate&nbsp;&nbsp;&nbsp;证书.pem;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_certificate_key&nbsp;&nbsp;证书.key;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_session_timeout&nbsp;5m;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_ciphers&nbsp;ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_protocols&nbsp;TLSv1&nbsp;TLSv1.1&nbsp;TLSv1.2;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_prefer_server_ciphers&nbsp;on;\r\n&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824625339867.png\" alt=\"blob.png\"/></p>', '<p><br/></p><p><br/></p><p><br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824360553096.png\" title=\"1.png\" alt=\"1.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824373680568.png\" title=\"2.png\" alt=\"2.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824382136021.png\" title=\"3.png\" alt=\"3.png\"/></p><pre class=\"prism-highlight prism-language-c\">server&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;443;\r\n&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;localhost;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl&nbsp;on;\r\n&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_certificate&nbsp;&nbsp;&nbsp;证书.pem;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_certificate_key&nbsp;&nbsp;证书.key;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_session_timeout&nbsp;5m;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_ciphers&nbsp;ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_protocols&nbsp;TLSv1&nbsp;TLSv1.1&nbsp;TLSv1.2;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ssl_prefer_server_ciphers&nbsp;on;\r\n&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805201526824625339867.png\" alt=\"blob.png\"/></p><!--more--><p>OK 打开网站测试 正常。。。。<br/></p>', NULL, 0, 1108, 0, '', '', '2019-04-21 22:23:53', 0),(8, 16, 1, '', 0, '', 0, 0, 'Ubuntu 18.04 开启root ssh远程登录', '/upload/image/2018/05/201805201526827489460066.png', '新安装的ubuntu系统默认是没有打开SSH服务，需要手动配置SSH服务，从而实现远程管理。', '<h1>一、检查是否开启ssh服务<br/></h1><pre class=\"prism-highlight prism-language-c\">ps&nbsp;-e&nbsp;|&nbsp;grep&nbsp;ssh</pre><p><img src=\"/upload/image/2018/05/201805201526827489460066.png\" alt=\"blob.png\"/></p><p>如果有sshd进程，则说明已经开启了服务</p><p><br/></p><h1>二、编辑ssh配置<br/></h1><pre class=\"prism-highlight prism-language-c\">vim&nbsp;/etc/ssh/sshd_config</pre><p>修改</p><p>PermitRootLogin yes （默认为#PermitRootLogin prohibit-password）</p><p><br/></p><h1>三、重启ssh服务<br/></h1><pre class=\"prism-highlight prism-language-c\">service&nbsp;ssh&nbsp;restart</pre><p><br/></p>', NULL, 0, 2549, 0, '', '', '2019-04-21 22:23:53', 0),(9, 16, 1, '{1}{2}', 0, '', 0, 0, 'Ubuntu 18.04 搭建 GitLab 服务器', '/upload/image/2018/05/201805231527008614100486.png', '<p>随着公司人员不断增加，原有的手动创建代码仓库和手动添加Git SSH Key的方式已经难以满足版本控制的需求，因此寻求一款方便快捷的Git管理工具是非常迫切的。</p><p>决定采用GitLab，优点如下：</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>和GitHub非常相似，使用起来学习成本低</p></li><li><p>安装方便（配置简单）</p></li><li><p>安装在自己的服务器上，可以自由建立多个私有仓库</p></li><li><p>仓库和人员管理都很容易</p></li><li><p>我只学习了这个东西，其它的不懂</p></li></ul>', '<p>随着公司人员不断增加，原有的手动创建代码仓库和手动添加Git SSH Key的方式已经难以满足版本控制的需求，因此寻求一款方便快捷的Git管理工具是非常迫切的。</p><p>决定采用GitLab，优点如下：</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>和GitHub非常相似，使用起来学习成本低</p></li><li><p>安装方便（配置简单）</p></li><li><p>安装在自己的服务器上，可以自由建立多个私有仓库</p></li><li><p>仓库和人员管理都很容易</p></li><li><p>我只学习了这个东西，其它的不懂</p></li></ul><!--more--><p>这篇文章将分为三个部分，因为我有三个服务器要装，分别为Ubuntu18.04（台式电脑的虚拟机）在这上面尝试安装，Ubuntu16.04（我自己的服务器）装来自己用，Ubuntu14.04（公司内网服务器）给小伙伴们用。<br/></p><h1>一、Ubuntu18.04 安装 GitLab</h1><p><span style=\"color: #FF0000;\">*我是在VirtualBox虚拟机里安装的Ubuntu18.04，所有一下命令全部是在root用户下执行的，如果非root用户需要加上sudo。</span></p><p>首先将apt源更新到最新，然后安装所需要的依赖，apt参数 -y 的意思是所有询问 [Y/n]的地方全部默认自动选 Y，安装了3个依赖 curl和openssh的服务端还有ca证书。</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;update\r\napt-get&nbsp;install&nbsp;-y&nbsp;curl&nbsp;openssh-server&nbsp;ca-certificates</pre><p>安装postfix用来做邮件服务器（如有有需要）</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;install&nbsp;-y&nbsp;postfix</pre><p>添加GitLab的源到apt里<br/></p><pre class=\"prism-highlight prism-language-c\">curl&nbsp;https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh&nbsp;|&nbsp;sudo&nbsp;bash</pre><p>GitLab有两个版本，一个是社区版一个是企业版，企业版需要收费。我使用的是社区版，如果需要企业版则URL改成以下</p><pre class=\"prism-highlight prism-language-c\">curl&nbsp;https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh&nbsp;|&nbsp;sudo&nbsp;bash</pre><p>开始安装</p><pre class=\"prism-highlight prism-language-c\">EXTERNAL_URL=&quot;http://gitlab.local.com&quot;&nbsp;apt-get&nbsp;install&nbsp;gitlab-ce</pre><p>这里EXTERNAL_URL的地址将写入到&nbsp;/etc/gitlab/gitlab.rb 的配置中，也可以直接执行 apt-get install gitlab-ce 然后再去配置gitlab.rb</p><p>installing...</p><p>installing...</p><p>installing...</p><p>喝茶...洗澡...</p><p>installing...</p><p>installing...</p><p>installed...</p><p>安装完成之后，启动服务</p><pre class=\"prism-highlight prism-language-c\">gitlab-ctl&nbsp;start</pre><p>出现如下图<br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526922112263684.png\" alt=\"blob.png\"/></p><p>就是成功启动了。</p><p><br/></p><p>修改本地hosts文件，添加如下</p><pre class=\"prism-highlight prism-language-c\">192.168.1.104&nbsp;&nbsp;gitlab.local.com</pre><p>在浏览器输入地址 gitlab.local.com ,成功访问页面</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526922344795859.png\" alt=\"blob.png\" width=\"598\" height=\"314\" style=\"width: 598px; height: 314px;\"/></p><p><span style=\"color: #FF0000;\">*首次访问会要求输入管理员密码，很简单看页面提示</span></p><p><span style=\"color: #FF0000;\"><br/></span></p><p>点击Register注册一个新用户</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526922655503332.png\" alt=\"blob.png\" width=\"614\" height=\"416\" style=\"width: 614px; height: 416px;\"/></p><p>登录我们注册好的用户并进入个人设置（点击右上角头像图标-&gt;settings-&gt;左侧菜单 SSH Keys）,将我们自己的key添加到如下图地方</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526922970455105.png\" alt=\"blob.png\" width=\"606\" height=\"316\" style=\"width: 606px; height: 316px;\"/></p><p>创建一个新的空仓库<br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526923065116613.png\" alt=\"blob.png\" width=\"639\" height=\"416\" style=\"width: 639px; height: 416px;\"/></p><p>复制仓库地址在本地clone一下，成功！创建一个文件测试是否可以推送。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526923170102822.png\" alt=\"blob.png\"/></p><p>成功推送到服务器上，在GitLab里查看我们刚才添加的文件。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805221526923292144211.png\" alt=\"blob.png\" width=\"613\" height=\"457\" style=\"width: 613px; height: 457px;\"/></p><p>并且文件的内容也是我们改成创建时候写进去的，那么到这里就基本完成了。</p><p><br/></p><p><br/></p><p>更多配置与使用请参考官网网站：<a href=\"https://about.gitlab.com/\" _src=\"https://about.gitlab.com/\">https://about.gitlab.com/</a> </p><p><br/></p><h1>二、Ubuntu16.04 安装 GitLab<br/></h1><p>安装与18.04一致，安装过程中遇到两个问题</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>下载速度超慢</p></li><li><p>系统上原来安装有Nginx，与GitLab自带的Nginx冲突</p></li></ul><p>解决网络慢的问题，使用清华大学的源，首先信任 GitLab 的 GPG 公钥</p><pre class=\"prism-highlight prism-language-c\">curl&nbsp;https://packages.gitlab.com/gpg.key&nbsp;2&gt;&nbsp;/dev/null&nbsp;|&nbsp;sudo&nbsp;apt-key&nbsp;add&nbsp;-&nbsp;&amp;&gt;/dev/null</pre><p>修改源地址<br/></p><pre class=\"prism-highlight prism-language-c\">vim&nbsp;/etc/apt/sources.list.d/gitlab_gitlab-ce.list</pre><p>修改如下</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805231527007672309638.png\" alt=\"blob.png\"/></p><p>更新，然后安装</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;update\r\nEXTERNAL_URL=&quot;http://gitlab.local.com&quot;&nbsp;apt-get&nbsp;install&nbsp;gitlab-ce</pre><p>参考：<a href=\"https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/\" _src=\"https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/\">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</a> </p><p><br/></p><p>安装完毕，解决与系统安装的Nginx冲突问题，编辑GitLab配置文件</p><pre class=\"prism-highlight prism-language-c\">vim&nbsp;/etc/gitlab/gitlab.rb</pre><p>添加nginx默认端口配置<br/></p><pre class=\"prism-highlight prism-language-c\">nginx[&#39;listen_port&#39;]&nbsp;=&nbsp;82</pre><p>修改unicorn端口与地址</p><pre class=\"prism-highlight prism-language-c\">unicorn[&#39;listen&#39;]&nbsp;=&nbsp;&#39;127.0.0.1&#39;\r\nunicorn[&#39;port&#39;]&nbsp;=&nbsp;8082</pre><p>修改sidekiq端口</p><pre class=\"prism-highlight prism-language-c\">sidekiq[&#39;listen_port&#39;]&nbsp;=&nbsp;8083</pre><p>重新配置GitLab并且重启</p><pre class=\"prism-highlight prism-language-c\">gitlab-ctl&nbsp;reconfigure\r\ngitlab-ctl&nbsp;restart</pre><p><br/></p><p>使用原有的Nginx对GitLab的Nginx进行反向代理，配置如下</p><pre class=\"prism-highlight prism-language-c\">upstream&nbsp;gitlab{\r\n&nbsp;&nbsp;&nbsp;server&nbsp;127.0.0.1:82&nbsp;weight=1;\r\n}\r\n\r\nserver&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;80;\r\n&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;&nbsp;域名;\r\n&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{\r\n	proxy_pass&nbsp;http://gitlab;\r\n	client_max_body_size&nbsp;1024m;\r\n	proxy_redirect&nbsp;off;\r\n	proxy_set_header&nbsp;Host&nbsp;$host;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;REMOTE-HOST&nbsp;$remote_addr;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>是配置生效并重启Nginx<br/></p><pre class=\"prism-highlight prism-language-c\">nginx&nbsp;-s&nbsp;reload\r\nservice&nbsp;nginx&nbsp;restart</pre><p>测试访问，OK 正常</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805231527008614100486.png\" alt=\"blob.png\" width=\"581\" height=\"343\" style=\"width: 581px; height: 343px;\"/></p><p><br/></p><h1>三、Ubuntu14.04 安装 GitLab<br/></h1><p>与16.04安装一致，不再复述...<br/></p>', NULL, 0, 2374, 0, '', '', '2019-04-21 22:23:53', 0),(10, 16, 1, '', 0, '', 0, 0, 'Ubuntu替换阿里云软件源', '/upload/image/ab3ce8fc2bcb1a9c9f4f427439489b4a7874.png', 'Ubuntu18.04 修改阿里云镜像源', '<h2 id=\"h2-u5907u4EFDu539Fu6765u7684u6E90u6587u4EF6\"><a name=\"备份原来的源文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>备份原来的源文件</h2><pre><code class=\"lang-shell\">cd /etc/apt\r\ncp sources.list sources.list.bak\r\n</code></pre>\r\n<h2 id=\"h2-u4FEEu6539u6E90u6587u4EF6\"><a name=\"修改源文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>修改源文件</h2><pre><code class=\"lang-shell\">vim sources.list\r\n</code></pre>\r\n<p>修改为以下内容</p>\r\n<pre><code class=\"lang-shell\">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\r\n</code></pre>\r\n', '## 备份原来的源文件\r\n```shell\r\ncd /etc/apt\r\ncp sources.list sources.list.bak\r\n```\r\n## 修改源文件\r\n```shell\r\nvim sources.list\r\n```\r\n修改为以下内容\r\n```shell\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\r\n```\r\n', 0, 860, 1, '', '', '2019-04-21 22:23:53', 0),(11, 16, 1, '', 0, '', 0, 0, 'Ubuntu 18.04 server 配置静态IP', '/upload/image/2018/05/201805231527009341115373.png', '新安装的ubuntu系统需要配置静态IP', '<p>查看当前网卡</p>\r\n<pre><code class=\"lang-shell\">ifconfig\r\n</code></pre>\r\n<p><img src=\"/upload/2018/05/201805231527009165982861.png\" alt=\"\"></p>\r\n<p>Ubuntu 16.04以后的版本网络配置文件存放在 /etc/netplan/ 里</p>\r\n<pre><code class=\"lang-shell\">ll /etc/netplan/\r\n</code></pre>\r\n<p><img src=\"/upload/2018/05/201805231527009341115373.png\" alt=\"\"></p>\r\n<p>编辑 50-cloud-init.yaml 文件，修改内容如下</p>\r\n<p><img src=\"/upload/2018/05/201805231527009857409260.png\" alt=\"\"></p>\r\n<p>执行命令使配置生效</p>\r\n<pre><code class=\"lang-shell\">netplan apply\r\n</code></pre>\r\n<p>这样静态IP就设置好了</p>\r\n', '查看当前网卡\r\n```shell\r\nifconfig\r\n```\r\n![](/upload/2018/05/201805231527009165982861.png)\r\n\r\nUbuntu 16.04以后的版本网络配置文件存放在 /etc/netplan/ 里\r\n\r\n```shell\r\nll /etc/netplan/\r\n```\r\n![](/upload/2018/05/201805231527009341115373.png)\r\n\r\n编辑 50-cloud-init.yaml 文件，修改内容如下\r\n\r\n![](/upload/2018/05/201805231527009857409260.png)\r\n\r\n执行命令使配置生效\r\n```shell\r\nnetplan apply\r\n```\r\n这样静态IP就设置好了', 0, 1004, 0, '', '', '2019-04-21 22:23:53', 0),(12, 8, 1, '', 0, '', 0, 0, 'Ubuntu18.04 安装 docker-ce', NULL, '移除旧版本dockerapt-get&nbsp;remove&nbsp;docker&nbsp;docker-engine&nbsp;docker.io安装软件包来允许apt通过HTTPS使用存储库&nbsp;apt-get&nbsp;install&nbsp;apt-transport-https&nbsp;ca-certificates&nbsp;curl&nbsp;software-properties-common添加Docker的官方GPG密钥&nbsp;curl&nbsp;-fsSL<!--autointro-->', '<p>移除旧版本docker</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;remove&nbsp;docker&nbsp;docker-engine&nbsp;docker.io</pre><p>安装软件包来允许apt通过HTTPS使用存储库&nbsp;</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;install&nbsp;apt-transport-https&nbsp;ca-certificates&nbsp;curl&nbsp;software-properties-common</pre><p>添加Docker的官方GPG密钥&nbsp;</p><pre class=\"prism-highlight prism-language-c\">curl&nbsp;-fsSL&nbsp;https://download.docker.com/linux/ubuntu/gpg&nbsp;|&nbsp;sudo&nbsp;apt-key&nbsp;add&nbsp;-</pre><p>添加docker的下载源，因为官方还没有ubuntu18的下载源，所以先用ubuntu17（zesty）的&nbsp;</p><p>ubuntu14.04把zesty换成trusty，ubuntu16.04换成xenial&nbsp;</p><pre class=\"prism-highlight prism-language-c\">add-apt-repository&nbsp;&quot;deb&nbsp;[arch=amd64]&nbsp;https://download.docker.com/linux/ubuntu&nbsp;zesty&nbsp;stable&quot;</pre><p>安装docker-ce</p><pre class=\"prism-highlight prism-language-c\">apt-get&nbsp;update&nbsp;\r\napt-get&nbsp;install&nbsp;docker-ce</pre><p><br/></p>', NULL, 0, 750, 1, '', '', '2019-04-21 22:23:53', 0),(13, 16, 1, '', 0, '', 0, 0, 'GitLab+Walle实现PHP项目持续集成', NULL, '一、CI框架对比jenkins作为老牌的持续集成框架，在这么多年的发展中，积累很多优秀的plugin工具，对进行持续集成工作带来很大的便利。gitlab-cigitlab-ci作为gitlab提供的一个持续集成的套件，完美和gitlab进行集成，gitlab-ci已经集成进gitlab服务器中，在使用的时候只需要安装配置gitlab-runner即可。&nbsp;gitlab-runner基本上提供了一个可以进行编译的环境，负责从gitlab中拉取代码，根据工程中配置的gitlab-ci.yml<!--autointro-->', '<h1>一、CI框架对比<br/></h1><p><span style=\"font-size: 24px;\">jenkins</span></p><p>作为老牌的持续集成框架，在这么多年的发展中，积累很多优秀的plugin工具，对进行持续集成工作带来很大的便利。</p><p><br/></p><p id=\"gitlab-ci\" style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin: 8px 0px 16px; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;;\">gitlab-ci</span></p><p>gitlab-ci作为gitlab提供的一个持续集成的套件，完美和gitlab进行集成，gitlab-ci已经集成进gitlab服务器中，在使用的时候只需要安装配置gitlab-runner即可。&nbsp;<br/>gitlab-runner基本上提供了一个可以进行编译的环境，负责从gitlab中拉取代码，根据工程中配置的gitlab-ci.yml，执行相应的命令进行编译。</p><p><br/></p><p><span style=\"font-size: 24px;\">walle</span></p><p><span style=\"font-size: 14px;\">轻量级，容易上手，适合初创团队或者项目初期（今天写的是这个）。</span></p><p><span style=\"font-size: 14px;\"><br/></span></p><p><span style=\"font-size: 14px;\"></span></p><h1 style=\"white-space: normal;\">二、开始安装</h1><p><span style=\"font-size: 14px;\"></span>walle是一个Yii2写的应用，所以，应该先安装好lnmp/lamp环境，我安装的是lnamp，我的服务器上有很多其他应用，所以通过nginx反向代理不同的域名到不同的应用上。</p><p><br/></p>', NULL, 0, 1, 0, '', '', '2019-04-21 22:23:53', 1),(14, 10, 1, '', 0, '', 0, 0, '从零开始搭建Vue2.x项目', '/upload/image/2018/05/201805261527315311522670.png', '一、准备需要开发的软件安装nodejs请自行百度nodejs官网，下载最新稳定版本，根据自己的系统环境下载对应版本，我下载的是window版本。下载完成后，双击开始安装。请不要安装到C盘（后果严重）,选择其他路径安装。剩下的一直Next直到安装完成。打开CMD，输入node&nbsp;-v如果看到输入版本信息，则说明安装正确了。安装webpack和安装vue脚手架在安装之前建议先安装淘宝镜像，避免NPM的源比较慢。npm&nbsp;install&nbsp;-g&nbsp;cnpm&nbsp;-<!--autointro-->', '<h1>一、准备需要开发的软件</h1><p><strong>安装nodejs</strong></p><p>请自行百度nodejs官网，下载最新稳定版本，根据自己的系统环境下载对应版本，我下载的是window版本。</p><p>下载完成后，双击开始安装。<br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527309591162518.png\" alt=\"image.png\"/></p><p>请不要安装到C盘（后果严重）,选择其他路径安装。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527309673458793.png\" title=\"1.png\" alt=\"1.png\" width=\"407\" height=\"312\" style=\"width: 407px; height: 312px;\"/></p><p>剩下的一直Next直到安装完成。打开CMD，输入</p><pre class=\"prism-highlight prism-language-c\">node&nbsp;-v</pre><p>如果看到输入版本信息，则说明安装正确了。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527309766509712.png\" alt=\"image.png\"/></p><p><br/></p><p><strong>安装webpack和安装vue脚手架</strong></p><p>在安装之前建议先安装淘宝镜像，避免NPM的源比较慢。</p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;install&nbsp;-g&nbsp;cnpm&nbsp;--registry=https://registry.npm.taobao.org</pre><p><br/></p><p>安装完成后，开始安装webpack</p><pre class=\"prism-highlight prism-language-c\">cnpm&nbsp;install&nbsp;webpack&nbsp;-g</pre><p>-g参数表示全局安装<br/></p><p><br/></p><p>安装vue-cli</p><pre class=\"prism-highlight prism-language-c\">cnpm&nbsp;install&nbsp;vue-cli&nbsp;-g</pre><p>到这里需要安装的软件就完成了。</p><p><br/></p><h1>二、创建项目<br/></h1><p>我们新建一个项目来测试一下我们安装的开发环境是否可以正常使用了，在磁盘上任意目录新建一个文件夹VueProject，CD进入该目录。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527313457657371.png\" alt=\"image.png\"/></p><p>在该目录下根据VUE提供的项目模板创建一个项目。<br/></p><pre class=\"prism-highlight prism-language-c\">vue&nbsp;init&nbsp;webpack-simple&nbsp;hello</pre><p>这个命令的格式是&nbsp;vue init webpack-simple <span style=\"color: #FF0000;\">[项目名称]</span>&nbsp;。</p><p>等待模板下载完成后，vue-cli会询问我们一下几个设置:<br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527315473679864.png\" alt=\"image.png\"/></p><p>项目名称，直接回车保持默认。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527314619899669.png\" alt=\"image.png\"/></p><p>项目描述，直接回车保持默认。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527314671212367.png\" alt=\"image.png\"/></p><p>作者，直接回车保持默认。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527314828782606.png\" alt=\"image.png\"/></p><p>许可证，直接回车保持默认。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527314880546171.png\" alt=\"image.png\"/></p><p>是否使用SASS，根据项目情况选择，这里只是为了测试安装是否正常，所以不使用，输入N，回车。</p><p><span style=\"color: #FF0000;\">*如果在以上过程回车了但是卡住，假死，很有可能是node版本太高了导致，降级node版本即可解决。</span></p><p><br/></p><p>完成设置后，会输出如下</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527314996317303.png\" alt=\"image.png\"/></p><p>按照提示，先CD 进入 hello目录</p><pre class=\"prism-highlight prism-language-c\">cd&nbsp;hello</pre><p>安装项目依赖</p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;install</pre><p>如果下载速度慢的话，可以使用cnpm（已安装了淘宝镜像）<br/></p><pre class=\"prism-highlight prism-language-c\">cnpm&nbsp;install</pre><p>最后，运行项目<br/></p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;run&nbsp;dev</pre><p>成功运行项目时，会自动用默认浏览器打开 <a href=\"http://localhost:8080/\" _src=\"http://localhost:8080/\">http://localhost:8080/</a>&nbsp;，页面如下</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/05/201805261527315311522670.png\" alt=\"image.png\" width=\"372\" height=\"307\" style=\"width: 372px; height: 307px;\"/></p>', NULL, 0, 943, 0, '', '', '2019-04-21 22:23:53', 0),(15, 13, 1, '', 0, '', 0, 0, 'MySQL 主从同步（单主单从）', '/upload/image/2018/06/201806021527879920211198.png', 'MySQL 一主一从配置。', '<h2 id=\"h2-u73AFu5883u51C6u5907\"><a name=\"环境准备\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>环境准备</h2><p>准备两台设备，分别装上MySQL。<br>master网络地址：192.168.1.104，<br>slave网络地址：192.168.1.103。</p>\r\n<h2 id=\"h2-u914Du7F6Eu4E3Bu670Du52A1u5668\"><a name=\"配置主服务器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置主服务器</h2><p>1.修改MySQL的配置文件my.cnf</p>\r\n<pre><code class=\"lang-shell\">vim /etc/mysql/mysql.conf.d/mysqld.cnf\r\n</code></pre>\r\n<p>在 [mysqld] 项中添加 server-id 和 log-bin </p>\r\n<pre><code class=\"lang-shell\">[mysqld]\r\nserver-id = 1\r\nlog_bin = /var/log/mysql/mysql-bin.log\r\n</code></pre>\r\n<p>然后重启MySQL服务。</p>\r\n<p>2.创建用户，每一个从服务器都需要用到一个账户名和密码来连接主服务器，可以为每一个从服务器都创建一个账户，也可以让全部服务器使用同一个账户。下面就为同一个ip网段的所有从服务器创建一个只能进行主从同步的账户。</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; grant replication slave on *.* to ‘rep’@‘192.168.1.%’ identified by ‘123456’;\r\n</code></pre>\r\n<p>也可以通过可视化工具Navicat来创建，创建的时候勾选相应的权限。<br><img src=\"/upload/image/2018/06/201806021527877568621985.png\" alt=\"\"></p>\r\n<p>3.获取二进制日志并导出数据，先给数据库加锁，阻止对数据库进行任何的写操作</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; flush tables with read lock;\r\n</code></pre>\r\n<p>查看二进制日志</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; show master status;\r\n</code></pre>\r\n<p><img src=\"/upload/image/2018/06/201806021527878513314674.png\" alt=\"\"><br>这里需要记录一下file文件名称和position数值，稍后的从服务器配置有用。</p>\r\n<p>备份数据库（如果是数据库是空的可以不需要备份）</p>\r\n<pre><code class=\"lang-shell\"># mysqldump -uroot -p&#39;123456&#39; -S /data/3306/data/mysql.sock --all-databases &gt; /server/backup/mysql_bak.$(date +%F).sql\r\n</code></pre>\r\n<p>如果数据量很大，可以使用gzip压缩</p>\r\n<pre><code class=\"lang-shell\"># mysqldump -uroot -p&#39;123456&#39; -S /data/3306/data/mysql.sock --all-databases | gzip &gt; /server/backup/mysql_bak.$(date +%F).sql.gz\r\n</code></pre>\r\n<p>备份完成后，解锁数据库</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; unlock tables;\r\n</code></pre>\r\n<h2 id=\"h2-u914Du7F6Eu4ECEu670Du52A1u5668\"><a name=\"配置从服务器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置从服务器</h2><p>1.修改从服务器mysqld.cnf配置文件</p>\r\n<pre><code class=\"lang-shell\">[mysqld]\r\nserver-id=2\r\n</code></pre>\r\n<p>server-id的值可以是任意数字，但必须必主服务器的server-id的值大，修改完毕重启MySQL服务。</p>\r\n<p>如果有多个从服务器上，那么每个服务器上配置的server-id都必须不一致。从服务器上没必要配置log-bin，当然也可以配置log-bin选项，因为可以在从服务器上进行数据备份和灾难恢复，或者某一天让这个从服务器变成一个主服务器。</p>\r\n<p>如果在主服务器有备份数据，可以将备份导入，没有则跳过。</p>\r\n<p>2.登录MySQL，配置同步</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; change master to\r\n    -&gt; master_host=&#39;192.168.1.104&#39;,\r\n    -&gt; master_port=3306,\r\n    -&gt; master_user=&#39;rep&#39;,\r\n    -&gt; master_password=&#39;123456&#39;,\r\n    -&gt; master_log_file=&#39;mysql-bin.000001&#39;,\r\n    -&gt; master_log_pos=2042;\r\n</code></pre>\r\n<p><img src=\"/upload/image/2018/06/201806021527879920211198.png\" alt=\"\"></p>\r\n<p>启动主从同步进程</p>\r\n<pre><code class=\"lang-shell\">mysql&gt; start slave;\r\n</code></pre>\r\n<p>检查状态</p>\r\n<pre><code class=\"lang-shell\">show slave status \\G\r\n</code></pre>\r\n<p><img src=\"/upload/image/2018/06/201806021527880118426859.png\" alt=\"\"></p>\r\n<p>如图所示则表示配置成功。如配置错误，可以使用 stop slave; 停止主从同步进程，重新配置，再 start slave;</p>\r\n<p>可以用 show slave status \\G 查看Last_Error同步过程中是否发生错误。</p>\r\n<h2 id=\"h2-u4E00u4E9Bu7ECFu9A8C\"><a name=\"一些经验\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>一些经验</h2><ul>\r\n<li>重启数据库不需要重新配置主从，主从关系依旧存在，但是日志文件名称发生了变化。</li></ul>\r\n', '## 环境准备\r\n准备两台设备，分别装上MySQL。\r\nmaster网络地址：192.168.1.104，\r\nslave网络地址：192.168.1.103。\r\n## 配置主服务器\r\n1.修改MySQL的配置文件my.cnf\r\n```shell\r\nvim /etc/mysql/mysql.conf.d/mysqld.cnf\r\n```\r\n在 [mysqld] 项中添加 server-id 和 log-bin \r\n```shell\r\n[mysqld]\r\nserver-id = 1\r\nlog_bin = /var/log/mysql/mysql-bin.log\r\n```\r\n然后重启MySQL服务。\r\n\r\n2.创建用户，每一个从服务器都需要用到一个账户名和密码来连接主服务器，可以为每一个从服务器都创建一个账户，也可以让全部服务器使用同一个账户。下面就为同一个ip网段的所有从服务器创建一个只能进行主从同步的账户。\r\n```shell\r\nmysql> grant replication slave on *.* to ‘rep’@‘192.168.1.%’ identified by ‘123456’;\r\n```\r\n也可以通过可视化工具Navicat来创建，创建的时候勾选相应的权限。\r\n![](/upload/image/2018/06/201806021527877568621985.png)\r\n\r\n3.获取二进制日志并导出数据，先给数据库加锁，阻止对数据库进行任何的写操作\r\n```shell\r\nmysql> flush tables with read lock;\r\n```\r\n查看二进制日志\r\n```shell\r\nmysql> show master status;\r\n```\r\n![](/upload/image/2018/06/201806021527878513314674.png)\r\n这里需要记录一下file文件名称和position数值，稍后的从服务器配置有用。\r\n\r\n备份数据库（如果是数据库是空的可以不需要备份）\r\n```shell\r\n# mysqldump -uroot -p\'123456\' -S /data/3306/data/mysql.sock --all-databases > /server/backup/mysql_bak.$(date +%F).sql\r\n```\r\n如果数据量很大，可以使用gzip压缩\r\n```shell\r\n# mysqldump -uroot -p\'123456\' -S /data/3306/data/mysql.sock --all-databases | gzip > /server/backup/mysql_bak.$(date +%F).sql.gz\r\n```\r\n备份完成后，解锁数据库\r\n```shell\r\nmysql> unlock tables;\r\n```\r\n\r\n## 配置从服务器\r\n1.修改从服务器mysqld.cnf配置文件\r\n```shell\r\n[mysqld]\r\nserver-id=2\r\n```\r\nserver-id的值可以是任意数字，但必须必主服务器的server-id的值大，修改完毕重启MySQL服务。\r\n\r\n如果有多个从服务器上，那么每个服务器上配置的server-id都必须不一致。从服务器上没必要配置log-bin，当然也可以配置log-bin选项，因为可以在从服务器上进行数据备份和灾难恢复，或者某一天让这个从服务器变成一个主服务器。\r\n\r\n如果在主服务器有备份数据，可以将备份导入，没有则跳过。\r\n\r\n2.登录MySQL，配置同步\r\n```shell\r\nmysql> change master to\r\n    -> master_host=\'192.168.1.104\',\r\n    -> master_port=3306,\r\n    -> master_user=\'rep\',\r\n    -> master_password=\'123456\',\r\n    -> master_log_file=\'mysql-bin.000001\',\r\n    -> master_log_pos=2042;\r\n```\r\n![](/upload/image/2018/06/201806021527879920211198.png)\r\n\r\n启动主从同步进程\r\n```shell\r\nmysql> start slave;\r\n```\r\n检查状态\r\n```shell\r\nshow slave status \\G\r\n```\r\n![](/upload/image/2018/06/201806021527880118426859.png)\r\n\r\n如图所示则表示配置成功。如配置错误，可以使用 stop slave; 停止主从同步进程，重新配置，再 start slave;\r\n\r\n可以用 show slave status \\G 查看Last_Error同步过程中是否发生错误。\r\n\r\n## 一些经验\r\n- 重启数据库不需要重新配置主从，主从关系依旧存在，但是日志文件名称发生了变化。', 0, 810, 0, '', '', '2019-04-21 22:23:53', 0),(16, 8, 1, '', 0, '', 0, 0, 'Docker 安装Ubuntu容器 及 一些常用命令', NULL, 'docker port [name]<!--autointro-->', '<p>docker port [name]</p>', NULL, 0, 0, 0, '', '', '2019-04-21 22:23:53', 1),(17, 15, 1, '', 0, '', 0, 0, 'Sinopia搭建私有的NPM服务', NULL, 'Node.js开发本地项目，有时不同项目之间存在依赖，如果不想把项目发布到npm社区的仓库，则需要有自己本地的仓库环境准备Ubuntu18.04安装NodeJS安装NPM安装CNPM服务器配置安装sinopiacnpm&nbsp;install&nbsp;-g&nbsp;sinopia安装完毕后运行sinopia运行会输出如下，显示出当前配置文件和连接地址修改配置文件#\r\n#&nbsp;This&nbsp;is&nbsp;the&nbsp;default&nbsp;config&nbsp;fil<!--autointro-->', '<p>Node.js开发本地项目，有时不同项目之间存在依赖，如果不想把项目发布到npm社区的仓库，则需要有自己本地的仓库</p><p><strong>环境准备</strong></p><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>Ubuntu18.04</p></li><li><p>安装NodeJS</p></li><li><p>安装NPM</p></li><li><p>安装CNPM</p></li></ol><p><br/></p><p><strong>服务器配置</strong></p><p>安装sinopia</p><pre class=\"prism-highlight prism-language-c\">cnpm&nbsp;install&nbsp;-g&nbsp;sinopia</pre><p>安装完毕后运行</p><pre class=\"prism-highlight prism-language-c\">sinopia</pre><p>运行会输出如下，显示出当前配置文件和连接地址<br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/06/201806071528305683760100.png\" alt=\"image.png\"/></p><p>修改配置文件</p><pre class=\"prism-highlight prism-language-c\">#\r\n#&nbsp;This&nbsp;is&nbsp;the&nbsp;default&nbsp;config&nbsp;file.&nbsp;It&nbsp;allows&nbsp;all&nbsp;users&nbsp;to&nbsp;do&nbsp;anything,\r\n#&nbsp;so&nbsp;don&#39;t&nbsp;use&nbsp;it&nbsp;on&nbsp;production&nbsp;systems.\r\n#\r\n#&nbsp;Look&nbsp;here&nbsp;for&nbsp;more&nbsp;config&nbsp;file&nbsp;examples:\r\n#&nbsp;https://github.com/rlidwka/sinopia/tree/master/conf\r\n#\r\n\r\n#&nbsp;path&nbsp;to&nbsp;a&nbsp;directory&nbsp;with&nbsp;all&nbsp;packages\r\nstorage:&nbsp;./storage&nbsp;&nbsp;#npm包存放的路径\r\n\r\nauth:\r\n&nbsp;&nbsp;htpasswd:\r\n&nbsp;&nbsp;&nbsp;&nbsp;file:&nbsp;./htpasswd&nbsp;&nbsp;&nbsp;#保存用户的账号密码等信息\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Maximum&nbsp;amount&nbsp;of&nbsp;users&nbsp;allowed&nbsp;to&nbsp;register,&nbsp;defaults&nbsp;to&nbsp;&quot;+inf&quot;.\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;You&nbsp;can&nbsp;set&nbsp;this&nbsp;to&nbsp;-1&nbsp;to&nbsp;disable&nbsp;registration.\r\n&nbsp;&nbsp;&nbsp;&nbsp;max_users:&nbsp;-1&nbsp;&nbsp;#默认为1000，改为-1，禁止注册\r\n\r\n#&nbsp;a&nbsp;list&nbsp;of&nbsp;other&nbsp;known&nbsp;repositories&nbsp;we&nbsp;can&nbsp;talk&nbsp;to\r\nuplinks:\r\n&nbsp;&nbsp;npmjs:\r\n&nbsp;&nbsp;&nbsp;&nbsp;url:&nbsp;http://registry.npm.taobao.org/&nbsp;&nbsp;#默认为npm的官网，由于国情，修改&nbsp;url&nbsp;让sinopia使用&nbsp;淘宝的npm镜像地址\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\npackages:&nbsp;&nbsp;#配置权限管理\r\n&nbsp;&nbsp;&#39;@*/*&#39;:\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;scoped&nbsp;packages\r\n&nbsp;&nbsp;&nbsp;&nbsp;access:&nbsp;$all&nbsp;&nbsp;#&nbsp;表示哪一类用户可以对匹配的项目进行安装&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;$all&nbsp;表示所有人都可以执行对应的操作，\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;$authenticated&nbsp;表示只有通过验证的人可以执行对应操作，\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;$anonymous&nbsp;表示只有匿名者可以进行对应操作（通常无用）\r\n&nbsp;&nbsp;&nbsp;&nbsp;publish:&nbsp;$authenticated&nbsp;&nbsp;#表示哪一类用户可以对匹配的项目进行发布\r\n\r\n&nbsp;&nbsp;&#39;*&#39;:\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;allow&nbsp;all&nbsp;users&nbsp;(including&nbsp;non-authenticated&nbsp;users)&nbsp;to&nbsp;read&nbsp;and\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;publish&nbsp;all&nbsp;packages\r\n&nbsp;&nbsp;&nbsp;&nbsp;#\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;you&nbsp;can&nbsp;specify&nbsp;usernames/groupnames&nbsp;(depending&nbsp;on&nbsp;your&nbsp;auth&nbsp;plugin)\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;and&nbsp;three&nbsp;keywords:&nbsp;&quot;$all&quot;,&nbsp;&quot;$anonymous&quot;,&nbsp;&quot;$authenticated&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;access:&nbsp;$all&nbsp;&nbsp;#表示哪一类用户可以对匹配的项目进行安装\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;allow&nbsp;all&nbsp;known&nbsp;users&nbsp;to&nbsp;publish&nbsp;packages\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;(anyone&nbsp;can&nbsp;register&nbsp;by&nbsp;default,&nbsp;remember?)\r\n&nbsp;&nbsp;&nbsp;&nbsp;publish:&nbsp;$authenticated&nbsp;&nbsp;#表示哪一类用户可以对匹配的项目进行发布\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;if&nbsp;package&nbsp;is&nbsp;not&nbsp;available&nbsp;locally,&nbsp;proxy&nbsp;requests&nbsp;to&nbsp;&#39;npmjs&#39;&nbsp;registry\r\n&nbsp;&nbsp;&nbsp;&nbsp;proxy:&nbsp;npmjs&nbsp;&nbsp;#如其名，这里的值是对应于&nbsp;uplinks\r\n\r\n#&nbsp;log&nbsp;settings\r\nlogs:\r\n&nbsp;&nbsp;-&nbsp;{type:&nbsp;stdout,&nbsp;format:&nbsp;pretty,&nbsp;level:&nbsp;http}\r\n&nbsp;&nbsp;#-&nbsp;{type:&nbsp;file,&nbsp;path:&nbsp;sinopia.log,&nbsp;level:&nbsp;info}\r\n\r\n#&nbsp;you&nbsp;can&nbsp;specify&nbsp;listen&nbsp;address&nbsp;(or&nbsp;simply&nbsp;a&nbsp;port)&nbsp;\r\nlisten:&nbsp;0.0.0.0:4873&nbsp;&nbsp;#默认没有，只能在本机访问，添加后可以通过外网访问</pre><p>使用pm2运行sinopia （守护进程）</p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;install&nbsp;-g&nbsp;pm2&nbsp;\r\nnpm&nbsp;install&nbsp;-g&nbsp;sinopia-pm2-starter</pre><p>开启服务<br/></p><pre class=\"prism-highlight prism-language-c\">sinopia-pm2-starter&nbsp;--help&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;查看帮助命令\r\nsinopia-pm2-starter&nbsp;config:host&nbsp;&#39;0.0.0.0&#39;&nbsp;&nbsp;&nbsp;#&nbsp;设置允许远程连接\r\nsinopia-pm2-starter&nbsp;config:post&nbsp;${port}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;不设置则默认4873\r\nsinopia-pm2-starter&nbsp;start&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;启动服务</pre><p><br/></p><p><strong>客户端配置</strong></p><p><span style=\"background-color: #FFFFFF; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 16px;\">使用nrm管理源（nrm是NPM的源切换利器）</span></p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;install&nbsp;-g&nbsp;nrm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;安装nrm\r\nnrm&nbsp;add&nbsp;[name]&nbsp;http://XXXXXX:4873&nbsp;&nbsp;#&nbsp;添加本地的npm镜像地址\r\nnrm&nbsp;use&nbsp;[name]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;使用本址的镜像地址&nbsp;&nbsp;name为你要增加的地址</pre><p><span style=\"background-color: #FFFFFF; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 16px;\"></span>添加用户</p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;adduser\r\nUsername:&nbsp;test\r\nPassword:&nbsp;test\r\nEmail:&nbsp;(this&nbsp;IS&nbsp;public)&nbsp;xxx@xxxx</pre><p>发布项目<br/></p><pre class=\"prism-highlight prism-language-c\">npm&nbsp;publish</pre><p><br/></p><p><br/></p><p>---------------后记---------------</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/06/201806071528307894146289.png\" alt=\"image.png\" width=\"413\" height=\"175\" style=\"width: 413px; height: 175px;\"/></p><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>如果不需要某个发布包了，可以进入服务器的NPM包存放目录直接删除即可。</p></li><li><p>暂时木有。<br/></p></li></ol>', NULL, 0, 1029, 0, '', '', '2019-04-21 22:23:53', 0),(18, 16, 1, '', 0, '', 0, 0, 'Ubuntu18.04实验Keepalived+Nginx高可用Web负载均衡（主备模式）', '/upload/image/31c7dc2c149b1ee4bcd1a0b29511145c4595.png', 'Keepalived 是一种高性能的服务器高可用或热备解决方案,Keepalived 可以用来防止服务器单点故障的发生,通过配合 Nginx 可以实现 web 前端服务的高可用。Keepalived 以 VRRP 协议为实现基础,用 VRRP 协议来实现高可用性(HA)。', '<p>Keepalived 是一种高性能的服务器高可用或热备解决方案,Keepalived 可以用来防止服务器单点故障的发生,通过配合 Nginx 可以实现 web 前端服务的高可用。</p>\r\n<p>Keepalived 以 VRRP 协议为实现基础,用 VRRP 协议来实现高可用性(HA)。VRRP(Virtual RouterRedundancy Protocol)协议是用于实现路由器冗余的协议,</p>\r\n<p>VRRP 协议将两台或多台路由器设备虚拟成一个 设备,对外提供虚拟路由器 IP(一个或多个),而在路由器组内部,如果实际拥有这个对外 IP 的路由器如果工作正常的话就是 MASTER,</p>\r\n<p>或者是通过算法选举产生,MASTER 实现针对虚拟路由器 IP 的各种网络功能, 如 ARP 请求,ICMP,以及数据的转发等;其他设备不拥有该虚拟 IP,状态是 BACKUP,</p>\r\n<p>除了接收 MASTER 的 VRRP 状态通告信息外,不执行对外的网络功能。当主机失效时,BACKUP 将接管原先 MASTER 的网络功能。</p>\r\n<p>VRRP 协议使用多播数据来传输 VRRP 数据,VRRP 数据使用特殊的虚拟源 MAC 地址发送数据而不是自身 网卡的 MAC 地址,VRRP 运行时只有 MASTER 路由器定时发送 VRRP 通告信息,</p>\r\n<p>表示 MASTER 工作正常以及虚 拟路由器 IP(组),BACKUP 只接收 VRRP 数据,不发送数据,如果一定时间内没有接收到 MASTER 的通告信 息,各 BACKUP 将宣告自己成为 MASTER,</p>\r\n<p>发送通告信息,重新进行 MASTER 选举状态。</p>\r\n<h2 id=\"h2-u73AFu5883u51C6u5907\"><a name=\"环境准备\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>环境准备</h2><p>虚拟机安装两台Ubuntu18.04</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>服务器名称</th>\r\n<th>IP地址</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>ubuntu01</td>\r\n<td>192.168.1.104</td>\r\n<td>master</td>\r\n</tr>\r\n<tr>\r\n<td>ubuntu02</td>\r\n<td>192.168.1.105</td>\r\n<td>backup</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"h2-u5B89u88C5u8F6Fu4EF6\"><a name=\"安装软件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装软件</h2><p>两台设备分别安装Nginx和Keepalived</p>\r\n<h3 id=\"h3--nginx\"><a name=\"安装Nginx\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装Nginx</h3><pre><code>apt install nginx\r\n</code></pre><p><img src=\"/upload/image/1aa331c217097263221ebe26922038bb6388.png\" alt=\"\"></p>\r\n<p><img src=\"/upload/image/5ab08afe2e227f210f7c405076ad8be39230.png\" alt=\"\"></p>\r\n<h3 id=\"h3--keepalived\"><a name=\"安装Keepalived\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装Keepalived</h3><pre><code>apt install keepalived\r\n</code></pre><h2 id=\"h2--keepalived\"><a name=\"配置Keepalived\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置Keepalived</h2><table>\r\n<thead>\r\n<tr>\r\n<th>虚拟IP</th>\r\n<th>真实IP</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>192.168.1.200</td>\r\n<td>192.168.1.104</td>\r\n<td>master</td>\r\n</tr>\r\n<tr>\r\n<td>192.168.1.200</td>\r\n<td>192.168.1.105</td>\r\n<td>backup</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>在安装完成软件后，并没有生成默认的配置文件，需要自己手动创建</p>\r\n<pre><code>touch /etc/keepalived/keepalived.conf\r\n</code></pre><h3 id=\"h3-master-\"><a name=\"master设备的配置文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>master设备的配置文件</h3><pre><code># 检测nginx的脚本\r\n# keepalived会定时执行脚本并对脚本执行的结果进行分析,动态调整vrrp_instance的优先级。\r\n# 如果脚本执行结果为0,并且weight配置的值大于0,则优先级相应的增加。如果脚本执行结果非0,\r\n# 并且weight配置的值小于 0,则优先级相应的减少。其他情况,维持原本配置的优先级,即配置文件中priority对应的值\r\nvrrp_script chk_nginx {\r\n  script &quot;/etc/keepalived/check_nginx.sh&quot;\r\n  interval 2 # 每2秒检测一次nginx的运行状态\r\n  weight -5  # 失败一次，将自己的优先级减5\r\n}\r\n\r\nglobal_defs {\r\n    router_id ubuntu01 #标识本节点的名称，通常为hostname\r\n}\r\n\r\nvrrp_instance VI_1 {\r\n    state MASTER                # 状态，主节点为MASTER，备份节点为BACKUP\r\n    interface enp0s3            # 绑定VIP的网络接口，通过ifconfig查看自己的网络接口\r\n    virtual_router_id 200    # 虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址\r\n    mcast_src_ip 192.168.1.104    # 本机IP地址\r\n    priority 100        # 节点优先级，值范围0～254，MASTER要比BACKUP高\r\n    advert_int 1        # 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒\r\n    nopreempt            # 表示不争抢vip\r\n\r\n    # 设置验证信息，两个节点必须一致\r\n    authentication {\r\n        auth_type PASS\r\n        auth_pass 123456\r\n    }\r\n\r\n    # nginx存活状态检测脚本\r\n    track_script {\r\n        chk_nginx\r\n    }\r\n\r\n    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个\r\n    virtual_ipaddress {\r\n        192.168.1.200/24\r\n    }\r\n}\r\n</code></pre><h3 id=\"h3-backup-\"><a name=\"backup设备配置文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>backup设备配置文件</h3><pre><code># 检测nginx的脚本\r\n# keepalived会定时执行脚本并对脚本执行的结果进行分析,动态调整vrrp_instance的优先级。\r\n# 如果脚本执行结果为0,并且weight配置的值大于0,则优先级相应的增加。如果脚本执行结果非0,\r\n# 并且weight配置的值小于 0,则优先级相应的减少。其他情况,维持原本配置的优先级,即配置文件中priority对应的值\r\nvrrp_script chk_nginx {\r\n  script &quot;/etc/keepalived/check_nginx.sh&quot;\r\n  interval 2 # 每2秒检测一次nginx的运行状态\r\n  weight -5  # 失败一次，将自己的优先级减5\r\n}\r\n\r\nglobal_defs {\r\n    router_id ubuntu01 #标识本节点的名称，通常为hostname\r\n}\r\n\r\nvrrp_instance VI_1 {\r\n    state MASTER                # 状态，主节点为MASTER，备份节点为BACKUP\r\n    interface enp0s3            # 绑定VIP的网络接口，通过ifconfig查看自己的网络接口\r\n    virtual_router_id 200    # 虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址\r\n    mcast_src_ip 192.168.1.104    # 本机IP地址\r\n    priority 100        # 节点优先级，值范围0～254，MASTER要比BACKUP高\r\n    advert_int 1        # 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒\r\n    nopreempt            # 表示不争抢vip\r\n\r\n    # 设置验证信息，两个节点必须一致\r\n    authentication {\r\n        auth_type PASS\r\n        auth_pass 123456\r\n    }\r\n\r\n    # nginx存活状态检测脚本\r\n    track_script {\r\n        chk_nginx\r\n    }\r\n\r\n    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个\r\n    virtual_ipaddress {\r\n        192.168.1.200/24\r\n    }\r\n}\r\n</code></pre><p>分别创建检查nginx是否存活的脚本，并给予执行权限</p>\r\n<pre><code>touch /etc/keepalived/check_nginx.sh\r\nchmod +x /etc/keepalived/check_nginx.sh\r\n</code></pre><p>脚本代码</p>\r\n<pre><code>#!/bin/bash\r\nA=`ps -C nginx --no-header |wc -l`\r\nif [ $A -eq 0 ];then\r\n    /usr/local/nginx/sbin/nginx   #尝试重启nginx\r\n    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then    #nginx重启失败，则停掉keepalived服务\r\n        killall keepalived\r\n    fi\r\nfi\r\n</code></pre><p>配置完成后，分别启动keepalived</p>\r\n<pre><code>service keepalived start\r\n</code></pre><p>启动成功，查看两台服务器的网络状况</p>\r\n<pre><code>ip a\r\n</code></pre><p>master机器的网络<br><img src=\"/upload/image/7542c355c21cb8e81cd4bdad84e652a66106.png\" alt=\"\"><br>backup机器的网络<br><img src=\"/upload/image/2fc974df4ae382bb97f3f03c32d184769666.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>打开浏览器，访问192.168.1.200<br><img src=\"/upload/image/48f3dd02e0b44ade3ff8772906896a965736.png\" alt=\"\"><br>输出nginx01，说明master上的nginx正常运行，然后，停止master机器上的nginx模拟发生故障，刷新页面<br><img src=\"/upload/image/df2ad6eb2b41a3f7b58f076dbf043cb33057.png\" alt=\"\"><br>输出nginx02，backup机器上的nginx开始接管请求，查看backup机器上的网络状态<br><img src=\"/upload/image/260d47d412cb270215d47c7c0fe24f618926.png\" alt=\"\"><br>虚拟IP飘到了backup机器上了</p>\r\n<h2 id=\"h2-u603Bu7ED3\"><a name=\"总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总结</h2><p>主从模式会造成backup机器的浪费，可以使用主主模式充分利用硬件资源。</p>\r\n', 'Keepalived 是一种高性能的服务器高可用或热备解决方案,Keepalived 可以用来防止服务器单点故障的发生,通过配合 Nginx 可以实现 web 前端服务的高可用。\r\n\r\nKeepalived 以 VRRP 协议为实现基础,用 VRRP 协议来实现高可用性(HA)。VRRP(Virtual RouterRedundancy Protocol)协议是用于实现路由器冗余的协议,\r\n\r\nVRRP 协议将两台或多台路由器设备虚拟成一个 设备,对外提供虚拟路由器 IP(一个或多个),而在路由器组内部,如果实际拥有这个对外 IP 的路由器如果工作正常的话就是 MASTER,\r\n\r\n或者是通过算法选举产生,MASTER 实现针对虚拟路由器 IP 的各种网络功能, 如 ARP 请求,ICMP,以及数据的转发等;其他设备不拥有该虚拟 IP,状态是 BACKUP,\r\n\r\n除了接收 MASTER 的 VRRP 状态通告信息外,不执行对外的网络功能。当主机失效时,BACKUP 将接管原先 MASTER 的网络功能。\r\n\r\nVRRP 协议使用多播数据来传输 VRRP 数据,VRRP 数据使用特殊的虚拟源 MAC 地址发送数据而不是自身 网卡的 MAC 地址,VRRP 运行时只有 MASTER 路由器定时发送 VRRP 通告信息,\r\n\r\n表示 MASTER 工作正常以及虚 拟路由器 IP(组),BACKUP 只接收 VRRP 数据,不发送数据,如果一定时间内没有接收到 MASTER 的通告信 息,各 BACKUP 将宣告自己成为 MASTER,\r\n\r\n发送通告信息,重新进行 MASTER 选举状态。\r\n## 环境准备\r\n虚拟机安装两台Ubuntu18.04\r\n\r\n| 服务器名称 | IP地址 | 说明 |\r\n| ------------ | ------------ | ------------ |\r\n| ubuntu01  | 192.168.1.104  |  master |\r\n| ubuntu02  | 192.168.1.105  |  backup |\r\n\r\n## 安装软件\r\n两台设备分别安装Nginx和Keepalived\r\n### 安装Nginx\r\n```\r\napt install nginx\r\n```\r\n![](/upload/image/1aa331c217097263221ebe26922038bb6388.png)\r\n\r\n![](/upload/image/5ab08afe2e227f210f7c405076ad8be39230.png)\r\n### 安装Keepalived\r\n```\r\napt install keepalived\r\n```\r\n## 配置Keepalived\r\n\r\n| 虚拟IP  |  真实IP | 说明 |\r\n| ------------ | ------------ | ------------ |\r\n| 192.168.1.200 | 192.168.1.104 | master |\r\n| 192.168.1.200 | 192.168.1.105 | backup |\r\n\r\n在安装完成软件后，并没有生成默认的配置文件，需要自己手动创建\r\n```\r\ntouch /etc/keepalived/keepalived.conf\r\n```\r\n### master设备的配置文件\r\n```\r\n# 检测nginx的脚本\r\n# keepalived会定时执行脚本并对脚本执行的结果进行分析,动态调整vrrp_instance的优先级。\r\n# 如果脚本执行结果为0,并且weight配置的值大于0,则优先级相应的增加。如果脚本执行结果非0,\r\n# 并且weight配置的值小于 0,则优先级相应的减少。其他情况,维持原本配置的优先级,即配置文件中priority对应的值\r\nvrrp_script chk_nginx {\r\n  script \"/etc/keepalived/check_nginx.sh\"\r\n  interval 2 # 每2秒检测一次nginx的运行状态\r\n  weight -5  # 失败一次，将自己的优先级减5\r\n}\r\n \r\nglobal_defs {\r\n    router_id ubuntu01 #标识本节点的名称，通常为hostname\r\n}\r\n \r\nvrrp_instance VI_1 {\r\n    state MASTER                # 状态，主节点为MASTER，备份节点为BACKUP\r\n    interface enp0s3	        # 绑定VIP的网络接口，通过ifconfig查看自己的网络接口\r\n    virtual_router_id 200	# 虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址\r\n    mcast_src_ip 192.168.1.104	# 本机IP地址\r\n    priority 100		# 节点优先级，值范围0～254，MASTER要比BACKUP高\r\n    advert_int 1		# 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒\r\n    nopreempt			# 表示不争抢vip\r\n    \r\n    # 设置验证信息，两个节点必须一致\r\n    authentication {\r\n        auth_type PASS\r\n        auth_pass 123456\r\n    }\r\n    \r\n    # nginx存活状态检测脚本\r\n    track_script {\r\n        chk_nginx\r\n    }\r\n    \r\n    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个\r\n    virtual_ipaddress {\r\n        192.168.1.200/24\r\n    }\r\n}\r\n```\r\n### backup设备配置文件\r\n```\r\n# 检测nginx的脚本\r\n# keepalived会定时执行脚本并对脚本执行的结果进行分析,动态调整vrrp_instance的优先级。\r\n# 如果脚本执行结果为0,并且weight配置的值大于0,则优先级相应的增加。如果脚本执行结果非0,\r\n# 并且weight配置的值小于 0,则优先级相应的减少。其他情况,维持原本配置的优先级,即配置文件中priority对应的值\r\nvrrp_script chk_nginx {\r\n  script \"/etc/keepalived/check_nginx.sh\"\r\n  interval 2 # 每2秒检测一次nginx的运行状态\r\n  weight -5  # 失败一次，将自己的优先级减5\r\n}\r\n \r\nglobal_defs {\r\n    router_id ubuntu01 #标识本节点的名称，通常为hostname\r\n}\r\n \r\nvrrp_instance VI_1 {\r\n    state MASTER                # 状态，主节点为MASTER，备份节点为BACKUP\r\n    interface enp0s3	        # 绑定VIP的网络接口，通过ifconfig查看自己的网络接口\r\n    virtual_router_id 200	# 虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址\r\n    mcast_src_ip 192.168.1.104	# 本机IP地址\r\n    priority 100		# 节点优先级，值范围0～254，MASTER要比BACKUP高\r\n    advert_int 1		# 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒\r\n    nopreempt			# 表示不争抢vip\r\n    \r\n    # 设置验证信息，两个节点必须一致\r\n    authentication {\r\n        auth_type PASS\r\n        auth_pass 123456\r\n    }\r\n    \r\n    # nginx存活状态检测脚本\r\n    track_script {\r\n        chk_nginx\r\n    }\r\n    \r\n    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个\r\n    virtual_ipaddress {\r\n        192.168.1.200/24\r\n    }\r\n}\r\n```\r\n分别创建检查nginx是否存活的脚本，并给予执行权限\r\n```\r\ntouch /etc/keepalived/check_nginx.sh\r\nchmod +x /etc/keepalived/check_nginx.sh\r\n```\r\n脚本代码\r\n```\r\n#!/bin/bash\r\nA=`ps -C nginx --no-header |wc -l`\r\nif [ $A -eq 0 ];then\r\n    /usr/local/nginx/sbin/nginx   #尝试重启nginx\r\n    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then    #nginx重启失败，则停掉keepalived服务\r\n        killall keepalived\r\n    fi\r\nfi\r\n```\r\n配置完成后，分别启动keepalived\r\n```\r\nservice keepalived start\r\n```\r\n启动成功，查看两台服务器的网络状况\r\n```\r\nip a\r\n```\r\nmaster机器的网络\r\n![](/upload/image/7542c355c21cb8e81cd4bdad84e652a66106.png)\r\nbackup机器的网络\r\n![](/upload/image/2fc974df4ae382bb97f3f03c32d184769666.png)\r\n## 测试\r\n打开浏览器，访问192.168.1.200\r\n![](/upload/image/48f3dd02e0b44ade3ff8772906896a965736.png)\r\n输出nginx01，说明master上的nginx正常运行，然后，停止master机器上的nginx模拟发生故障，刷新页面\r\n![](/upload/image/df2ad6eb2b41a3f7b58f076dbf043cb33057.png)\r\n输出nginx02，backup机器上的nginx开始接管请求，查看backup机器上的网络状态\r\n![](/upload/image/260d47d412cb270215d47c7c0fe24f618926.png)\r\n虚拟IP飘到了backup机器上了\r\n## 总结\r\n主从模式会造成backup机器的浪费，可以使用主主模式充分利用硬件资源。', 0, 2319, 1, '', '', '2019-04-21 22:23:53', 0),(19, 17, 1, '', 0, '', 0, 0, 'SpringCloud（一）| eureka 服务注册和发现', '/upload/image/2018/07/201807021530544735649571.png', '一、创建Maven主项目在磁盘任意位置新建文件夹 cloud 用做项目目录。打开IDEA，点击File --&gt; new --&gt; Project 新建一个maven主项目。创建完毕后，删除自动生成的src目录。二、创建并启动Eureka服务项目选中主maven项目，点击File --&gt; new --&gt; Module。通过向导新建 eureka-server 项目配置server，编辑eureka-server项目application.properties文件。server<!--autointro-->', '<h1>一、创建Maven主项目</h1><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>在磁盘任意位置新建文件夹 cloud 用做项目目录。</p></li><li><p>打开IDEA，点击File --&gt; new --&gt; Project 新建一个maven主项目。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530469518865535.png\" alt=\"image.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530469769488575.png\" alt=\"image.png\"/></p></li><li><p>创建完毕后，删除自动生成的src目录。<br/></p></li></ol><h1>二、创建并启动Eureka服务项目</h1><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>选中主maven项目，点击File --&gt; new --&gt; Module。</p></li><li><p>通过向导新建 eureka-server 项目</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530470428111000.png\" alt=\"image.png\"/><br/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530470554273951.png\" alt=\"image.png\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530470675134964.png\" alt=\"image.png\"/><br/></p></li><li><p>配置server，编辑eureka-server项目application.properties文件。</p></li><li><pre class=\"prism-highlight prism-language-c\">server.port=8761\r\neureka.instance.hostname=localhost\r\neureka.client.register-with-eureka=false\r\neureka.client.fetch-registry=false\r\neureka.client.service-url.defaultZone=&nbsp;http://${eureka.instance.hostname}:${server.port}/eureka</pre><p>通过eureka.client.registerWithEureka：false和fetchRegistry：false来表明自己是一个eureka server。</p></li><li><p>编辑启动application类，只需要加上注解@EnableEurekaServer既可。</p></li><li><pre class=\"prism-highlight prism-language-c\">@SpringBootApplication\r\n@EnableEurekaServer\r\npublic&nbsp;class&nbsp;EurekaServerApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(EurekaServerApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre></li><li><p>启动项目，eureka-server自带界面，通过浏览器访问 <a href=\"http://localhost:8761\" _src=\"http://localhost:8761\">http://localhost:8761</a>&nbsp;可以查看 eureka 服务页面。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530471548247436.png\" alt=\"image.png\"/><br/></p><p><br/></p></li></ol><h1>三、创建eureka服务提供者</h1><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>选择maven主项目，新建module，命名为eureka-client。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530543819703699.png\" alt=\"image.png\"/><br/></p></li><li><p>编辑eureka-client项目的application.properties文件。</p></li><li><pre class=\"prism-highlight prism-language-java\">server.port=8762\r\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/\r\nspring.application.name=service-hi</pre><p><span style=\"font-family:monospace\"><span style=\"white-space: pre;\"></span></span></p></li><li><p>编辑项目的EurekaClientApplication启动类。</p></li><li><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableEurekaClient\r\n@RestController\r\npublic&nbsp;class&nbsp;EurekaClientApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(EurekaClientApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${server.port}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;port;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(&quot;/hi&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;home(@RequestParam&nbsp;String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;hi&nbsp;&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;&quot;&nbsp;+&nbsp;port;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre></li><li><p>启动两个Client项目，端口分别为8762,8763，编辑启动Configurations。</p><p><img src=\"/upload/image/2018/07/201807021530544735649571.png\" alt=\"image.png\"/><br/></p></li><li><p>使用Run Dashboard 查看项目运行。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530544989848108.png\" alt=\"image.png\"/><br/></p></li></ol><p><br/></p><h1>四、测试</h1><p>浏览器访问<a href=\"http://localhost:8761。\" _src=\"http://localhost:8761。\">http://localhost:8761。</a> </p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807021530545140241717.png\" alt=\"image.png\"/></p><div id=\"baidu_pastebin\" style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; left: -1000px; white-space: nowrap; top: 8462px;\"><img class=\"loadingclass\" id=\"loading_jj4e4woz\" src=\"{#ZC_BLOG_HOST#}zb_users/plugin/UEditor/themes/default/images/spacer.gif\"/></div>', NULL, 0, 937, 0, '', '', '2019-04-21 22:23:53', 0),(20, 17, 1, '', 0, '', 0, 0, 'SpringCloud（二）| rest+ribbon 服务消费者', 'http://upload-images.jianshu.io/upload_images/2279594-9f10b702188a129d.png', '选中maven主项目，新建module，命名为service-ribbon。编辑项目配置文件application.properties。server.port=8764\r\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/\r\nspring.application.name=service-ribbon编辑项目启动类ServiceRibbonApplication。@SpringBootApplication\r\n<!--autointro-->', '<p>选中maven主项目，新建module，命名为service-ribbon。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807031530547927500601.png\" alt=\"image.png\"/></p><p>编辑项目配置文件application.properties。</p><pre class=\"prism-highlight prism-language-java\">server.port=8764\r\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/\r\nspring.application.name=service-ribbon</pre><p>编辑项目启动类ServiceRibbonApplication。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableDiscoveryClient\r\npublic&nbsp;class&nbsp;ServiceRibbonApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ServiceRibbonApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;@LoadBalanced\r\n&nbsp;&nbsp;&nbsp;&nbsp;RestTemplate&nbsp;restTemplate(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;RestTemplate();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>通过@EnableDiscoveryClient向服务中心注册；并且向程序的ioc注入一个bean: restTemplate;并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。</p><p><br/></p><p>新建一个类HelloService，编写代码</p><pre class=\"prism-highlight prism-language-java\">@Service\r\npublic&nbsp;class&nbsp;HelloService&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\r\n&nbsp;&nbsp;&nbsp;&nbsp;RestTemplate&nbsp;restTemplate;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hiService(String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;restTemplate.getForObject(&quot;http://SERVICE-HI/hi?name=&quot;&nbsp;+&nbsp;name,&nbsp;String.class);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>通过之前注入ioc容器的restTemplate来消费service-hi服务的“/hi”接口，在这里我们直接用的程序名替代了具体的url地址，在ribbon中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的url替换掉服务名。</p><p><br/></p><p>新建一个类HelloControler，编写代码</p><pre class=\"prism-highlight prism-language-java\">@RestController\r\npublic&nbsp;class&nbsp;HelloControler&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\r\n&nbsp;&nbsp;&nbsp;&nbsp;HelloService&nbsp;helloService;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hi(@RequestParam&nbsp;String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;helloService.hiService(name);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><br/></p><p><br/></p><p>启动项目，查看eureka页面，此时ribbon项目已经注册进来了。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807031530549152352160.png\" alt=\"image.png\"/></p><p>打开浏览器，多次访问&nbsp;<a href=\"http://localhost:8764/hi?name=365d1\" _src=\"http://localhost:8764/hi?name=365d1\">http://localhost:8764/hi?name=365d1</a>&nbsp;测试</p><p>浏览器交替输出</p><pre class=\"prism-highlight prism-language-markup\">hi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8762\r\nhi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8763</pre><p>这说明Ribbon自带了负载均衡。</p><p><br/></p><p>此时的架构图</p><p><br/><img src=\"http://upload-images.jianshu.io/upload_images/2279594-9f10b702188a129d.png\"/></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>一个服务注册中心，eureka server,端口为8761</p></li><li><p>service-hi工程跑了两个实例，端口分别为8762,8763，分别向服务注册中心注册</p></li><li><p>sercvice-ribbon端口为8764,向服务注册中心注册</p></li><li><p>当sercvice-ribbon通过restTemplate调用service-hi的hi接口时，因为用ribbon进行了负载均衡，会轮流的调用service-hi：8762和8763 两个端口的hi接口<br/></p></li></ul><p><br/></p>', NULL, 0, 865, 0, '', '', '2019-04-21 22:23:53', 0),(21, 17, 1, '', 0, '', 0, 0, 'SpringCloud（三）| Feign 服务消费者', NULL, 'Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。选中maven主项目，添加一个module，命名为service-feign&nbsp;编辑项目application.properties文件server.port=8765\r\neureka.c<!--autointro-->', '<p>Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。</p><p><br/></p><p>选中maven主项目，添加一个module，命名为service-feign&nbsp;<img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807031530630294414363.png\" alt=\"image.png\"/></p><p>编辑项目application.properties文件</p><pre class=\"prism-highlight prism-language-java\">server.port=8765\r\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/\r\nspring.application.name=service-feign</pre><p>编辑项目启动类ServiceFeignApplication ，加上@EnableFeignClients注解开启Feign的功能。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableDiscoveryClient\r\n@EnableFeignClients\r\npublic&nbsp;class&nbsp;ServiceFeignApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ServiceFeignApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>新建service层，新建接口SchedualServiceHi，通过@ FeignClient（“服务名”），来指定调用哪个服务。</p><pre class=\"prism-highlight prism-language-java\">@FeignClient(value&nbsp;=&nbsp;&quot;service-hi&quot;)\r\npublic&nbsp;interface&nbsp;SchedualServiceHi&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;,method&nbsp;=&nbsp;RequestMethod.GET)\r\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;sayHiFromClientOne(@RequestParam(value&nbsp;=&nbsp;&quot;name&quot;)&nbsp;String&nbsp;name);\r\n\r\n}</pre><p>新建web层，新建HiContorller，对外暴露一个”/hi”的API接口，通过上面定义的Feign客户端SchedualServiceHi 来消费服务。</p><pre class=\"prism-highlight prism-language-java\">@RestController\r\npublic&nbsp;class&nbsp;HiController&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\r\n&nbsp;&nbsp;&nbsp;&nbsp;SchedualServiceHi&nbsp;schedualServiceHi;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;,method&nbsp;=&nbsp;RequestMethod.GET)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;sayHi(@RequestParam&nbsp;String&nbsp;name){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;schedualServiceHi.sayHiFromClientOne(name);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>注意，这里@Autowired可能会报could not autowire错误，原因是IDEA的问题，可以如下设置解决该问题，降低Autowired检测的级别，将Severity的级别由之前的error改成warning或其它可以忽略的级别。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807041530635977643831.png\" title=\"721070-201.png\" alt=\"721070-201.png\"/></p><p>运行项目测试，浏览器多次访问 <a href=\"http://localhost:8765/hi?name=365d1\" _src=\"http://localhost:8765/hi?name=365d1\">http://localhost:8765/hi?name=365d1</a>&nbsp;，依次输出</p><pre class=\"prism-highlight prism-language-java\">hi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8762\r\nhi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8763</pre><p><br/></p>', NULL, 0, 844, 0, '', '', '2019-04-21 22:23:53', 0),(22, 17, 1, '', 0, '', 0, 0, 'SpringCloud（四）| Hystrix 断路器', NULL, '在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪<!--autointro-->', '<p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。</p><p>为了解决这个问题，业界提出了断路器模型。<br/></p><p>Netflix开源了Hystrix组件，实现了断路器模式，SpringCloud对这一组件进行了整合。 在微服务架构中，一个请求需要调用多个服务是非常常见的，如下图：</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807041530719260642786.png\" title=\"1.png\" alt=\"1.png\"/></p><p>较底层的服务如果出现故障，会导致连锁故障。当对特定的服务的调用的不可用达到一个阀值（Hystric 是5秒20次） 断路器将会被打开。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807041530719394665533.png\" title=\"2.png\" alt=\"2.png\"/></p><p>断路打开后，可用避免连锁故障，fallback方法可以直接返回一个固定值。</p><p><br/></p><p><strong>改造service-ribbon项目</strong><br/></p><p>修改项目的pom.xml，加入spring-cloud-starter-netflix-hystrix依赖。</p><pre class=\"prism-highlight prism-language-markup\">&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</pre><p>在程序的启动类ServiceRibbonApplication 加@EnableHystrix注解开启Hystrix。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableDiscoveryClient\r\n@EnableHystrix\r\npublic&nbsp;class&nbsp;ServiceRibbonApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ServiceRibbonApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;@LoadBalanced\r\n&nbsp;&nbsp;&nbsp;&nbsp;RestTemplate&nbsp;restTemplate(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;RestTemplate();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>改造HelloService类，在hiService方法上加上@HystrixCommand注解。该注解对该方法创建了熔断器的功能，并指定了fallbackMethod熔断方法，熔断方法直接返回了一个字符串，字符串为”hi,”+name+”,sorry,error!”。</p><pre class=\"prism-highlight prism-language-java\">@Service\r\npublic&nbsp;class&nbsp;HelloService&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\r\n&nbsp;&nbsp;&nbsp;&nbsp;RestTemplate&nbsp;restTemplate;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@HystrixCommand(fallbackMethod&nbsp;=&nbsp;&quot;hiError&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hiService(String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;restTemplate.getForObject(&quot;http://SERVICE-HI/hi?name=&quot;&nbsp;+&nbsp;name,&nbsp;String.class);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hiError(String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;hi,&quot;+name+&quot;,sorry,error!&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>启动：service-ribbon 工程，当我们访问<a href=\"http://localhost:8764/hi?name=forezp,浏览器显示。\" _src=\"http://localhost:8764/hi?name=forezp,浏览器显示。\">http://localhost:8764/hi?name=</a>365D1&nbsp;浏览器显示。</p><pre class=\"prism-highlight prism-language-java\">hi&nbsp;365D1,i&nbsp;am&nbsp;from&nbsp;port:8762</pre><p>此时关闭 service-hi 工程，当我们再访问<a href=\"http://localhost:8764/hi?name=365D1\" _src=\"http://localhost:8764/hi?name=365D1\">http://localhost:8764/hi?name=365D1</a>&nbsp; 浏览器会显示。</p><pre class=\"prism-highlight prism-language-java\">hi,365D1,sorry,error!</pre><p><br/></p><p><strong>改造service-feign工程</strong></p><p>Feign是自带断路器的，在Spring Cloud中，它没有默认打开。需要在配置文件中配置打开它，在配置文件加以下代码：</p><pre class=\"prism-highlight prism-language-java\">feign.hystrix.enabled=true</pre><p>基于service-feign工程进行改造，只需要在FeignClient的SchedualServiceHi接口的注解中加上fallback的指定类就行了</p><pre class=\"prism-highlight prism-language-java\">@FeignClient(value&nbsp;=&nbsp;&quot;service-hi&quot;,fallback&nbsp;=&nbsp;SchedualServiceHiHystric.class)\r\npublic&nbsp;interface&nbsp;SchedualServiceHi&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;,method&nbsp;=&nbsp;RequestMethod.GET)\r\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;sayHiFromClientOne(@RequestParam(value&nbsp;=&nbsp;&quot;name&quot;)&nbsp;String&nbsp;name);\r\n\r\n}</pre><p>SchedualServiceHiHystric需要实现SchedualServiceHi 接口，并注入到Ioc容器中</p><pre class=\"prism-highlight prism-language-java\">@Component\r\npublic&nbsp;class&nbsp;SchedualServiceHiHystric&nbsp;implements&nbsp;SchedualServiceHi&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;sayHiFromClientOne(String&nbsp;name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;sorry&nbsp;&quot;&nbsp;+&nbsp;name;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>启动四servcie-feign工程，浏览器打开<a href=\"http://localhost:8765/hi?name=365D1,注意此时service-hi工程没有启动，网页显示\" _src=\"http://localhost:8765/hi?name=365D1,注意此时service-hi工程没有启动，网页显示\">http://localhost:8765/hi?name=365D1</a>&nbsp;注意此时service-hi工程没有启动</p><pre class=\"prism-highlight prism-language-java\">sorry&nbsp;365D1</pre><p>打开service-hi工程，再次访问，浏览器显示</p><pre class=\"prism-highlight prism-language-java\">hi&nbsp;365D1,i&nbsp;am&nbsp;from&nbsp;port:8762</pre>这证明断路器起到作用了', NULL, 0, 799, 2, '', '', '2019-04-21 22:23:53', 0),(23, 17, 1, '', 0, '', 0, 0, 'SpringCloud（五）| Hystrix Dashboard 断路器Hystrix仪表盘', NULL, 'ribbon项目和feign项目方式一致，以feign项目为例，编辑service-ribbon和service-feign项目的pom.xml，加入依赖&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-cloud-starter-netflix-<!--autointro-->', '<p>ribbon项目和feign项目方式一致，以feign项目为例，编辑service-ribbon和service-feign项目的pom.xml，加入依赖</p><pre class=\"prism-highlight prism-language-markup\">&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</pre><p>在主程序启动类中加入@EnableHystrixDashboard注解，开启hystrixDashboard，加入getServlet方法</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableDiscoveryClient\r\n@EnableFeignClients\r\n@EnableHystrixDashboard\r\npublic&nbsp;class&nbsp;ServiceFeignApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ServiceFeignApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ServletRegistrationBean&nbsp;getServlet()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HystrixMetricsStreamServlet&nbsp;streamServlet&nbsp;=&nbsp;new&nbsp;HystrixMetricsStreamServlet();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServletRegistrationBean&nbsp;registrationBean&nbsp;=&nbsp;new&nbsp;ServletRegistrationBean(streamServlet);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.setLoadOnStartup(1);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.addUrlMappings(&quot;/hystrix.stream&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.setName(&quot;HystrixMetricsStreamServlet&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;registrationBean;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>浏览器访问&nbsp;<a href=\"http://localhost:8765/hystrix\" _src=\"http://localhost:8765/hystrix\">http://localhost:8765/hystrix</a>&nbsp;</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807061530814464242664.png\" alt=\"image.png\"/></p><p>浏览器访问&nbsp;<a href=\"http://localhost:8765/hi?name=365D2\" _src=\"http://localhost:8765/hi?name=365D2\">http://localhost:8765/hi?name=365D2</a> </p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807061530814554344675.png\" alt=\"image.png\"/></p>', NULL, 1, 950, 0, '', '', '2019-04-21 22:23:53', 0),(24, 17, 1, '', 0, '', 0, 0, 'SpringCloud（六）| zuul 路由网关', NULL, 'Zuul简介Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如／api/user转发到到user服务，/api/shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能。AuthenticationInsightsStress TestingCanary TestingDynamic RoutingService MigrationLoad SheddingSecurityStatic Response handlingActive/Active tra<!--autointro-->', '<h1>Zuul简介</h1><p>Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如／api/user转发到到user服务，/api/shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能。</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>Authentication</p></li><li><p>Insights</p></li><li><p>Stress Testing</p></li><li><p>Canary Testing</p></li><li><p>Dynamic Routing</p></li><li><p>Service Migration</p></li><li><p>Load Shedding</p></li><li><p>Security</p></li><li><p>Static Response handling</p></li><li><p>Active/Active traffic management</p></li></ul><h1>动手实践</h1><p>选中maven主项目，新建service-zuul模块。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807111531319057707109.png\" alt=\"image.png\"/></p><p>编辑项目ServiceZuulApplication启动类，加上注解@EnableZuulProxy，开启zuul的功能</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableEurekaClient\r\n@EnableZuulProxy\r\npublic&nbsp;class&nbsp;ServiceZuulApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ServiceZuulApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><br/></p><p>编辑项目application.properties文件</p><pre class=\"prism-highlight prism-language-java\">server.port=8769\r\neureka.client.service-url.defualtZone=http://localhost:8761/eureka/\r\nspring.application.name=service-zuul\r\nzuul.routes.api-a.path=/api-a/**\r\nzuul.routes.api-a.service-id=service-ribbon\r\nzuul.routes.api-b.path=/api-b/**\r\nzuul.routes.api-b.service-id=service-feign</pre><p>首先指定服务注册中心的地址为http://localhost:8761/eureka/，服务的端口为8769，服务名为service-zuul；以/api-a/ 开头的请求都转发给service-ribbon服务；以/api-b/开头的请求都转发给service-feign服务。</p><p>打开浏览器访问：http://localhost:8769/api-a/hi?name=365D1 浏览器显示</p><pre class=\"prism-highlight prism-language-java\">hi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8763</pre><p>打开浏览器访问：http://localhost:8769/api-b/hi?name=365D1 浏览器显示</p><pre class=\"prism-highlight prism-language-java\">hi&nbsp;365D1&nbsp;,i&nbsp;am&nbsp;from&nbsp;port:&nbsp;8763</pre><p>这说明zuul起到了路由的作用。</p>', NULL, 0, 841, 0, '', '', '2019-04-21 22:23:53', 0),(25, 17, 1, '', 0, '', 0, 0, 'SpringCloud（七）| Spring Cloud Config 分布式配置中心', NULL, '在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。在spring cloud config 组件中，分两个角色，一是config server，二是config client。构建服务端选中maven主工程，添加module，命名为 config-server。在程序的入口Appl<!--autointro-->', '<p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。在spring cloud config 组件中，分两个角色，一是config server，二是config client。</p><p><strong>构建服务端</strong><br/></p><p>选中maven主工程，添加module，命名为 config-server。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807191531932216148950.png\" alt=\"image.png\"/></p><p>在程序的入口Application类加上@EnableConfigServer注解开启配置服务器的功能。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableConfigServer\r\npublic&nbsp;class&nbsp;ConfigServerApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ConfigServerApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>需要在程序的配置文件application.properties文件配置以下。</p><pre class=\"prism-highlight prism-language-java\">server.port=8888\r\nspring.application.name=config-server\r\n\r\nspring.cloud.config.server.git.uri=https://github.com/365D1/SpringcloudConfig.git\r\nspring.cloud.config.server.git.search-paths=respo\r\nspring.cloud.config.label=master\r\nspring.cloud.config.server.git.username=\r\nspring.cloud.config.server.git.password=</pre><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>spring.cloud.config.server.git.uri：配置git仓库地址</p></li><li><p>spring.cloud.config.server.git.searchPaths：配置仓库路径</p></li><li><p>spring.cloud.config.label：配置仓库的分支</p></li><li><p>spring.cloud.config.server.git.username：访问git仓库的用户名</p></li><li><p>spring.cloud.config.server.git.password：访问git仓库的用户密码</p></li></ul><p>如果Git仓库为公开仓库，可以不填写用户名和密码，如果是私有仓库需要填写，本例子是公开仓库，放心使用。</p><p>远程仓库中有个文件config-client-dev.properties文件中有一个属性</p><pre class=\"prism-highlight prism-language-java\">foo&nbsp;=&nbsp;foo&nbsp;version&nbsp;3</pre><p>启动程序：访问<a href=\"http://localhost:8888/foo/dev\" _src=\"http://localhost:8888/foo/dev\">http://localhost:8888/foo/dev</a></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807191531932701281210.png\" title=\"微信截图_20180719005123.png\" alt=\"微信截图_20180719005123.png\"/></p><p>证明配置服务中心可以从远程程序获取配置信息。</p><p><br/></p><p>http请求地址和资源文件映射如下:</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>/{application}/{profile}[/{label}]</p></li><li><p>/{application}-{profile}.yml</p></li><li><p>/{label}/{application}-{profile}.yml</p></li><li><p>/{application}-{profile}.properties</p></li><li><p>/{label}/{application}-{profile}.properties</p></li></ul><p><br/></p><p><strong>构建客户端</strong></p><p>选中maven，新建module，命名为&nbsp;config-client 。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807191531932964546340.png\" alt=\"image.png\"/></p><p>其配置文件application.properties。</p><pre class=\"prism-highlight prism-language-java\">server.port=8881\r\nspring.application.name=config-client\r\nspring.cloud.config.label=master\r\nspring.cloud.config.profile=dev\r\nspring.cloud.config.uri=&nbsp;http://localhost:8888/</pre><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>spring.cloud.config.label 指明远程仓库的分支</p></li><li><p>spring.cloud.config.profile</p></li><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><p>dev开发环境配置文件</p></li><li><p>test测试环境</p></li><li><p>pro正式环境</p></li></ul><li><p>spring.cloud.config.uri= http://localhost:8888/ 指明配置服务中心的网址。</p></li></ul><p>程序的入口类，写一个API接口“／hi”，返回从配置中心读取的foo变量的值。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@RestController\r\npublic&nbsp;class&nbsp;ConfigClientApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ConfigClientApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${foo}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;foo;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hi(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;foo;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>打开网址访问：<a href=\"http://localhost:8881/hi，网页显示。\" _src=\"http://localhost:8881/hi，网页显示。\">http://localhost:8881/hi，网页显示。</a> </p><pre class=\"prism-highlight prism-language-java\">foo&nbsp;version&nbsp;3</pre><p>这就说明，config-client从config-server获取了foo的属性，而config-server是从git仓库读取的,如图：</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807191531933384820277.png\" title=\"2279594-40ecbed6d38573d9.png\" alt=\"2279594-40ecbed6d38573d9.png\"/></p>', NULL, 0, 897, 0, '', '', '2019-04-21 22:23:53', 0),(26, 17, 1, '', 0, '', 0, 0, 'SpringCloud（八）| Spring Cloud Config 高可用的分布式配置中心', NULL, '一个服务如何从配置中心读取文件，配置中心如何从远程git读取配置文件，当服务实例很多时，都从配置中心读取文件，这时可以考虑将配置中心做成一个微服务，将其集群化，从而达到高可用，架构图如下选中maven主项目，添加module，命名为eureka-server-config。配置项目application.properties。server.port=8889\r\neureka.instance.hostname=localhost\r\neureka.server.renewal-percent-th<!--autointro-->', '<p>一个服务如何从配置中心读取文件，配置中心如何从远程git读取配置文件，当服务实例很多时，都从配置中心读取文件，这时可以考虑将配置中心做成一个微服务，将其集群化，从而达到高可用，架构图如下</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532534407903085.png\" title=\"2279594-babe706075d72c58.png\" alt=\"2279594-babe706075d72c58.png\"/></p><p>选中maven主项目，添加module，命名为eureka-server-config。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532534849640780.png\" alt=\"image.png\"/></p><p>配置项目application.properties。</p><pre class=\"prism-highlight prism-language-java\">server.port=8889\r\neureka.instance.hostname=localhost\r\neureka.server.renewal-percent-threshold=0.49\r\neureka.client.fetch-registry=false\r\neureka.client.register-with-eureka=false\r\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/</pre><p>编辑项目启动类EurekaServerConfigApplication。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableEurekaServer\r\npublic&nbsp;class&nbsp;EurekaServerConfigApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(EurekaServerConfigApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>运行项目，浏览器访问<a href=\"http://localhost:8889/\" _src=\"http://localhost:8889/\">http://localhost:8889/</a> </p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532535119724983.png\" alt=\"image.png\" width=\"1055\" height=\"654\" style=\"width: 1055px; height: 654px;\"/></p><p>修改原来的config-server工程，加入EurekaClient依赖。</p><pre class=\"prism-highlight prism-language-java\">&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</pre><p>修改配置文件application.properties，指定服务注册地址为http://localhost:8889/eureka/。</p><pre class=\"prism-highlight prism-language-java\">server.port=8888\r\nspring.application.name=config-server\r\n\r\nspring.cloud.config.server.git.uri=https://github.com/365D1/SpringcloudConfig.git\r\nspring.cloud.config.server.git.search-paths=respo\r\nspring.cloud.config.label=master\r\nspring.cloud.config.server.git.username=\r\nspring.cloud.config.server.git.password=\r\n\r\neureka.client.serviceUrl.defaultZone=http://localhost:8889/eureka/</pre><p>修改启动类文件ConfigServerApplication，加入@EnableEurekaClient。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@EnableConfigServer\r\n@EnableEurekaClient\r\npublic&nbsp;class&nbsp;ConfigServerApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ConfigServerApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>运行项目。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532536321574064.png\" alt=\"image.png\" width=\"1\" height=\"1\" style=\"width: 1px; height: 1px;\"/><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532536344913450.png\" alt=\"image.png\" width=\"1069\" height=\"542\" style=\"width: 1069px; height: 542px;\"/></p><p><br/></p><p>修改工程config-client，添加EurekaClient依赖。<br/></p><pre class=\"prism-highlight prism-language-java\">&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</pre><p>修改配置文件application.properties。</p><pre class=\"prism-highlight prism-language-java\">server.port=8881\r\nspring.application.name=config-client\r\nspring.cloud.config.label=master\r\nspring.cloud.config.profile=dev\r\n#spring.cloud.config.uri=&nbsp;http://localhost:8888/\r\n\r\neureka.client.serviceUrl.defaultZone=http://localhost:8889/eureka/\r\nspring.cloud.config.discovery.enabled=true\r\nspring.cloud.config.discovery.service-id=config-server</pre><p>修改启动类文件ConfigClientApplication，加入@EnableEurekaClient。</p><pre class=\"prism-highlight prism-language-java\">@SpringBootApplication\r\n@RestController\r\n@EnableEurekaClient\r\npublic&nbsp;class&nbsp;ConfigClientApplication&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(ConfigClientApplication.class,&nbsp;args);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${foo}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;foo;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value&nbsp;=&nbsp;&quot;/hi&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hi(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;foo;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>spring.cloud.config.discovery.enabled 是从配置中心读取文件。</p></li><li><p>spring.cloud.config.discovery.serviceId 配置中心的servieId，即服务名。</p></li></ul><p>这时发现，在读取配置文件不再写ip地址，而是服务名，这时如果配置服务部署多份，通过负载均衡，从而高可用。</p><p>运行工程。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/07/201807261532537153827123.png\" alt=\"image.png\" width=\"1052\" height=\"536\" style=\"width: 1052px; height: 536px;\"/></p><p>访问<a href=\"http://localhost:8881/hi，浏览器显示：\" _src=\"http://localhost:8881/hi，浏览器显示：\">http://localhost:8881/h</a>i 显示</p><pre class=\"prism-highlight prism-language-java\">foo&nbsp;version&nbsp;3</pre><p><br/></p>', NULL, 0, 1705, 0, '', '', '2019-04-21 22:23:53', 0),(27, 18, 1, '', 0, '', 0, 0, 'SoftEther VPN 搭建远程办公环境', NULL, 'VPN作用SoftEther VPN的官网下载被墙。。。所有需要用的软件已传百度网盘链接: https://pan.baidu.com/s/171ibsu4a-bZa2pXmXjq90Q 密码: 3nsm从网盘中下载&nbsp;softether-vpnserver-v4.27-9668-beta-2018.05.29-linux-x64-64bit.tar.gz 并上传到作为VPN SERVER的服务器（内网服务器）。在服务器上解压文件。tar&nbsp;-xzvf&nbsp;softethe<!--autointro-->', '<p>VPN作用</p><p><img src=\"/upload/image/2018/08/201808151534266755267261.png\" title=\"20171124154935725.png\" alt=\"20171124154935725.png\" width=\"594\" height=\"331\" style=\"width: 594px; height: 331px;\"/></p><p>SoftEther VPN的官网下载被墙。。。</p><p>所有需要用的软件已传百度网盘</p><p>链接: https://pan.baidu.com/s/171ibsu4a-bZa2pXmXjq90Q 密码: 3nsm</p><p>从网盘中下载&nbsp;softether-vpnserver-v4.27-9668-beta-2018.05.29-linux-x64-64bit.tar.gz 并上传到作为VPN SERVER的服务器（内网服务器）。</p><p>在服务器上解压文件。</p><pre class=\"prism-highlight prism-language-java\">tar&nbsp;-xzvf&nbsp;softether-vpnserver-v4.27-9668-beta-2018.05.29-linux-x64-64bit.tar.gz</pre><p><img src=\"/upload/image/2018/08/201808151534263660848778.png\" alt=\"image.png\"/></p><p>进入vpnserver目录，结构如下</p><p><img src=\"/upload/image/2018/08/201808151534263718485236.png\" alt=\"image.png\"/></p><p><strong>开始安装</strong></p><pre class=\"prism-highlight prism-language-java\">make</pre><p>出现3次询问，都输入1并回车即可。<br/></p><p><img src=\"/upload/image/2018/08/201808151534264063297484.png\" alt=\"image.png\"/></p><p><img src=\"/upload/image/2018/08/201808151534264090746116.png\" alt=\"image.png\" width=\"831\" height=\"378\" style=\"width: 831px; height: 378px;\"/></p><p><img src=\"/upload/image/2018/08/201808151534264113430438.png\" alt=\"image.png\"/></p><p>然后等待软件安装一下。<br/></p><p><img src=\"/upload/image/2018/08/201808151534264287291307.png\" alt=\"image.png\" width=\"836\" height=\"442\" style=\"width: 836px; height: 442px;\"/></p><p>安装完成后，可以设置一下显示的语言，在这里毫不犹豫的设置为英文。</p><p>然后就可以启动vpnserver了。</p><pre class=\"prism-highlight prism-language-java\">./vpnserver&nbsp;start</pre><p>然后还需要设置一波。。。</p><pre class=\"prism-highlight prism-language-java\">./vpncmd</pre><p><img src=\"/upload/image/2018/08/201808151534264917692281.png\" alt=\"image.png\"/></p><p>输入1，设置VPN Server</p><p><img src=\"/upload/image/2018/08/201808151534264961468533.png\" alt=\"image.png\"/></p><p>这里直接回车使用当前的机器的IP和443端口。</p><p><img src=\"/upload/image/2018/08/201808151534265009351947.png\" alt=\"image.png\"/></p><p>这里需要建立一个HUB，可以输入任意英文，例如365d1，然后会提示输入管理密码，例如设置一个国际密码。</p><p>然后就设置完成了。<br/></p><p><strong>管理VPN Server</strong></p><p>下载&nbsp;softether-vpnserver_vpnbridge-v4.27-9668-beta-2018.05.29-windows-x86_x64-intel.exe 安装。</p><p><img src=\"/upload/image/2018/08/201808151534265459513351.png\" alt=\"image.png\"/></p><p>只安装管理工具即可。</p><p><img src=\"/upload/image/2018/08/201808151534265528856991.png\" alt=\"image.png\"/></p><p>新建一个HUB连接。</p><p><img src=\"/upload/image/2018/08/201808151534265650758987.png\" alt=\"image.png\"/></p><p>双击HUB进行设置，添加一个用户。</p><p><img src=\"/upload/image/2018/08/201808151534265787295915.png\" alt=\"image.png\"/></p><p><br/></p><p>设置mac/iphone/android支持</p><p><img src=\"/upload/image/2018/08/201808151534265878522676.png\" alt=\"image.png\"/></p><p>如下配置</p><p><img src=\"/upload/image/2018/08/201808151534266130535057.png\" alt=\"image.png\"/></p><p>然后，回到HUB设置。<br/></p><p><img src=\"/upload/image/2018/08/201808151534266175385791.png\" alt=\"image.png\"/></p><p>开启虚拟SecureNAT<br/></p><p><img src=\"/upload/image/2018/08/201808151534266229333622.png\" alt=\"image.png\"/></p><p>SecureNAT设置。</p><p><img src=\"/upload/image/2018/08/201808151534266278612532.png\" alt=\"image.png\"/></p><p>配置完成。</p><p>注意:</p><p>如需内网穿透，需要映射到VPN Server的443端口。</p><p>开启L2TP/IPsec（mac使用这个连接）需要映射 UDP 500 和 4500 端口。</p>', NULL, 0, 3627, 3, '', '', '2019-04-21 22:23:53', 0),(28, 19, 1, '', 0, '', 0, 0, 'redis (一) | 安装与配置', '/upload/image/10f18a876aef928234e3b93d64a1160f6031.png', 'Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。', '<h2 id=\"h2--redis\"><a name=\"安装 Redis\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装 Redis</h2><p>在Ubuntu下可以使用apt安装，比较简单</p>\r\n<pre><code>apt update\r\napt install redis-server\r\n</code></pre><h2 id=\"h2--redis\"><a name=\"启动 Redis\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动 Redis</h2><pre><code>redis-server &amp;\r\n</code></pre><p>使用&amp;将redis以守护进程方式启动</p>\r\n<h2 id=\"h2--redis-\"><a name=\"查看 Redis 是否启动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看 Redis 是否启动</h2><pre><code>redis-cli\r\n127.0.0.1:6379&gt; ping\r\nPONG\r\n</code></pre><h2 id=\"h2-redis-\"><a name=\"Redis 配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 配置</h2><p>配置文件位于安装目录，Ubuntu Apt安装位置/etc/redis中的redis.conf文件。</p>\r\n<h3 id=\"h3-u67E5u770Bu6307u5B9Au914Du7F6E\"><a name=\"查看指定配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看指定配置</h3><pre><code>127.0.0.1:6379&gt; CONFIG GET loglevel\r\n1) &quot;loglevel&quot;\r\n2) &quot;notice&quot;\r\n</code></pre><p>也可以使用 <code>CONFIG GET *</code> 获取全部配置</p>\r\n<h3 id=\"h3-u7F16u8F91u6307u5B9Au914Du7F6E\"><a name=\"编辑指定配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>编辑指定配置</h3><p>可以通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置。</p>\r\n<pre><code>redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;\r\nOK\r\nredis 127.0.0.1:6379&gt; CONFIG GET loglevel\r\n\r\n1) &quot;loglevel&quot;\r\n2) &quot;notice&quot;\r\n</code></pre><h3 id=\"h3-u53C2u6570u8BF4u660E\"><a name=\"参数说明\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>参数说明</h3><p>redis.conf 配置项说明如下：</p>\r\n<blockquote>\r\n<p>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</p>\r\n<p><code>daemonize no</code></p>\r\n<p>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</p>\r\n<p><code>pidfile /var/run/redis.pid</code></p>\r\n<p>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</p>\r\n<p><code>port 6379</code></p>\r\n<p>绑定的主机地址</p>\r\n<p><code>bind 127.0.0.1</code></p>\r\n<p>当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</p>\r\n<p><code>timeout 300</code></p>\r\n<p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</p>\r\n<p><code>loglevel verbose</code></p>\r\n<p>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</p>\r\n<p><code>logfile stdout</code></p>\r\n<p>设置数据库的数量，默认数据库为0，可以使用<code>SELECT &lt;dbid&gt;</code>命令在连接上指定数据库id&gt;命令在连接上指定数据库id</p>\r\n<p><code>databases 16</code></p>\r\n<p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p>\r\n<p><code>save &lt;seconds&gt; &lt;changes&gt;</code></p>\r\n<p>Redis默认配置文件中提供了三个条件：</p>\r\n<p><code>save 900 1</code></p>\r\n<p><code>save 300 10</code></p>\r\n<p><code>save 60 10000</code></p>\r\n<p>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p>\r\n<p>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</p>\r\n<p><code>rdbcompression yes</code></p>\r\n<p>指定本地数据库文件名，默认值为dump.rdb</p>\r\n<p><code>dbfilename dump.rdb</code></p>\r\n<p>指定本地数据库存放目录</p>\r\n<p><code>dir ./</code></p>\r\n<p>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</p>\r\n<p><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></p>\r\n<p>当master服务设置了密码保护时，slav服务连接master的密码</p>\r\n<p><code>masterauth &lt;master-password&gt;</code></p>\r\n<p>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过<code>AUTH &lt;password&gt;</code>命令提供密码，默认关闭</p>\r\n<p><code>requirepass foobared</code></p>\r\n<p>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p>\r\n<p><code>maxclients 128</code></p>\r\n<p>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</p>\r\n<p><code>maxmemory &lt;bytes&gt;</code></p>\r\n<p>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</p>\r\n<p><code>appendonly no</code></p>\r\n<p>指定更新日志文件名，默认为appendonly.aof</p>\r\n<p><code>appendfilename appendonly.aof</code></p>\r\n<p>指定更新日志条件，共有3个可选值： </p>\r\n<p><code>no：表示等操作系统进行数据缓存同步到磁盘（快）</code></p>\r\n<p><code>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</code></p>\r\n<p><code>everysec：表示每秒同步一次（折衷，默认值）</code></p>\r\n<p><code>appendfsync everysec</code></p>\r\n<p>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</p>\r\n<p><code>vm-enabled no</code></p>\r\n<p>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</p>\r\n<p><code>vm-swap-file /tmp/redis.swap</code></p>\r\n<p>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</p>\r\n<p><code>vm-max-memory 0</code></p>\r\n<p>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</p>\r\n<p><code>vm-page-size 32</code></p>\r\n<p>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</p>\r\n<p><code>vm-pages 134217728</code></p>\r\n<p>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</p>\r\n<p><code>vm-max-threads 4</code></p>\r\n<p>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</p>\r\n<p><code>glueoutputbuf yes</code></p>\r\n<p>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</p>\r\n<p><code>hash-max-zipmap-entries 64</code></p>\r\n<p><code>hash-max-zipmap-value 512</code></p>\r\n<p>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</p>\r\n<p><code>activerehashing yes</code></p>\r\n<p>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</p>\r\n<p><code>include /path/to/local.conf</code></p>\r\n</blockquote>\r\n', '## 安装 Redis\r\n在Ubuntu下可以使用apt安装，比较简单\r\n```\r\napt update\r\napt install redis-server\r\n```\r\n## 启动 Redis\r\n```\r\nredis-server &\r\n```\r\n使用&将redis以守护进程方式启动\r\n## 查看 Redis 是否启动\r\n```\r\nredis-cli\r\n127.0.0.1:6379> ping\r\nPONG\r\n```\r\n## Redis 配置\r\n配置文件位于安装目录，Ubuntu Apt安装位置/etc/redis中的redis.conf文件。\r\n### 查看指定配置\r\n```\r\n127.0.0.1:6379> CONFIG GET loglevel\r\n1) \"loglevel\"\r\n2) \"notice\"\r\n```\r\n也可以使用 `CONFIG GET * ` 获取全部配置\r\n### 编辑指定配置\r\n可以通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置。\r\n```\r\nredis 127.0.0.1:6379> CONFIG SET loglevel \"notice\"\r\nOK\r\nredis 127.0.0.1:6379> CONFIG GET loglevel\r\n \r\n1) \"loglevel\"\r\n2) \"notice\"\r\n```\r\n### 参数说明\r\nredis.conf 配置项说明如下：\r\n> Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程\r\n> \r\n> `daemonize no`\r\n> \r\n> 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\r\n> \r\n> `pidfile /var/run/redis.pid`\r\n> \r\n> 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字\r\n> \r\n> `port 6379`\r\n> \r\n> 绑定的主机地址\r\n> \r\n> `bind 127.0.0.1`\r\n> \r\n> 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\r\n> \r\n> `timeout 300`\r\n> \r\n> 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose\r\n> \r\n> `loglevel verbose`\r\n> \r\n> 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null\r\n> \r\n> `logfile stdout`\r\n> \r\n> 设置数据库的数量，默认数据库为0，可以使用`SELECT <dbid>`命令在连接上指定数据库id>命令在连接上指定数据库id\r\n> \r\n> `databases 16`\r\n> \r\n> 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\r\n> \r\n> `save <seconds> <changes>`\r\n> \r\n> Redis默认配置文件中提供了三个条件：\r\n> \r\n> `save 900 1`\r\n> \r\n> `save 300 10`\r\n> \r\n> `save 60 10000`\r\n> \r\n> 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。\r\n> \r\n> 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大\r\n> \r\n> `rdbcompression yes`\r\n> \r\n> 指定本地数据库文件名，默认值为dump.rdb\r\n> \r\n> `dbfilename dump.rdb`\r\n> \r\n> 指定本地数据库存放目录\r\n> \r\n> `dir ./`\r\n> \r\n> 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步\r\n> \r\n> `slaveof <masterip> <masterport>`\r\n> \r\n> 当master服务设置了密码保护时，slav服务连接master的密码\r\n> \r\n> `masterauth <master-password>`\r\n> \r\n> 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过`AUTH <password>`命令提供密码，默认关闭\r\n> \r\n> `requirepass foobared`\r\n> \r\n> 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息\r\n> \r\n> `maxclients 128`\r\n> \r\n> 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区\r\n> \r\n> `maxmemory <bytes>`\r\n> \r\n> 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no\r\n> \r\n> `appendonly no`\r\n> \r\n> 指定更新日志文件名，默认为appendonly.aof\r\n> \r\n> `appendfilename appendonly.aof`\r\n> \r\n> 指定更新日志条件，共有3个可选值： \r\n> \r\n> `no：表示等操作系统进行数据缓存同步到磁盘（快） `\r\n> \r\n> `always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） `\r\n> \r\n> `everysec：表示每秒同步一次（折衷，默认值）`\r\n> \r\n> `appendfsync everysec`\r\n> \r\n> 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）\r\n> \r\n> `vm-enabled no`\r\n> \r\n> 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享\r\n> \r\n> `vm-swap-file /tmp/redis.swap`\r\n> \r\n> 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0\r\n> \r\n> `vm-max-memory 0`\r\n> \r\n> Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值\r\n> \r\n> `vm-page-size 32`\r\n> \r\n> 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。\r\n> \r\n> `vm-pages 134217728`\r\n> \r\n> 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4\r\n> \r\n> `vm-max-threads 4`\r\n> \r\n> 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启\r\n> \r\n> `glueoutputbuf yes`\r\n> \r\n> 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法\r\n> \r\n> `hash-max-zipmap-entries 64`\r\n> \r\n> `hash-max-zipmap-value 512`\r\n> \r\n> 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）\r\n> \r\n> `activerehashing yes`\r\n> \r\n> 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件\r\n> \r\n> `include /path/to/local.conf`', 0, 649, 0, '', '', '2019-04-21 22:23:53', 0),(29, 19, 1, '', 0, '', 1, 0, 'redis (二) | 键（KEY）', '/upload/image/e14e60b8fbd6c15fbd6743b67dc2c3235440.png', 'Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。', '<p>Redis 键命令用于管理 redis 的键。</p>\r\n<h2 id=\"h2-u8BEDu6CD5\"><a name=\"语法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>语法</h2><pre><code>redis 127.0.0.1:6379&gt; COMMAND KEY_NAME\r\n</code></pre><h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><p>设置一个键 hello 其值为 redis</p>\r\n<pre><code>127.0.0.1:6379 &gt; SET hello redis\r\nOK\r\n</code></pre><p>删除键 hello</p>\r\n<pre><code>127.0.0.1:6379 &gt; DEL hello\r\n(integer) 1\r\n</code></pre><h2 id=\"h2-redis-keys-\"><a name=\"Redis keys 命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis keys 命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>DEL key</td>\r\n<td>该命令用于在 key 存在时删除 key。</td>\r\n</tr>\r\n<tr>\r\n<td>DUMP key</td>\r\n<td>序列化给定 key ，并返回被序列化的值。</td>\r\n</tr>\r\n<tr>\r\n<td>EXISTS key</td>\r\n<td>检查给定 key 是否存在。</td>\r\n</tr>\r\n<tr>\r\n<td>EXPIRE key seconds</td>\r\n<td>为给定 key 设置过期时间，以秒计。</td>\r\n</tr>\r\n<tr>\r\n<td>EXPIREAT key timestamp</td>\r\n<td>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td>\r\n</tr>\r\n<tr>\r\n<td>PEXPIRE key milliseconds</td>\r\n<td>设置 key 的过期时间以毫秒计。</td>\r\n</tr>\r\n<tr>\r\n<td>PEXPIREAT key milliseconds-timestamp</td>\r\n<td>设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td>\r\n</tr>\r\n<tr>\r\n<td>KEYS pattern</td>\r\n<td>查找所有符合给定模式( pattern)的 key 。</td>\r\n</tr>\r\n<tr>\r\n<td>MOVE key db</td>\r\n<td>将当前数据库的 key 移动到给定的数据库 db 当中。</td>\r\n</tr>\r\n<tr>\r\n<td>PERSIST key</td>\r\n<td>移除 key 的过期时间，key 将持久保持。</td>\r\n</tr>\r\n<tr>\r\n<td>PTTL key</td>\r\n<td>以毫秒为单位返回 key 的剩余的过期时间。</td>\r\n</tr>\r\n<tr>\r\n<td>TTL key</td>\r\n<td>以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td>\r\n</tr>\r\n<tr>\r\n<td>RANDOMKEY</td>\r\n<td>从当前数据库中随机返回一个 key 。</td>\r\n</tr>\r\n<tr>\r\n<td>RENAME key newkey</td>\r\n<td>修改 key 的名称</td>\r\n</tr>\r\n<tr>\r\n<td>RENAMENX key newkey</td>\r\n<td>仅当 newkey 不存在时，将 key 改名为 newkey 。</td>\r\n</tr>\r\n<tr>\r\n<td>TYPE key</td>\r\n<td>返回 key 所储存的值的类型。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis 键命令用于管理 redis 的键。\r\n## 语法\r\n```\r\nredis 127.0.0.1:6379> COMMAND KEY_NAME\r\n```\r\n## 实例\r\n设置一个键 hello 其值为 redis\r\n```\r\n127.0.0.1:6379 > SET hello redis\r\nOK\r\n```\r\n删除键 hello\r\n```\r\n127.0.0.1:6379 > DEL hello\r\n(integer) 1\r\n```\r\n## Redis keys 命令\r\n|  命令 |  描述 |\r\n| ------------ | ------------ |\r\n| DEL key  | 该命令用于在 key 存在时删除 key。  |\r\n| DUMP key  | 序列化给定 key ，并返回被序列化的值。 |\r\n| EXISTS key  | 检查给定 key 是否存在。 |\r\n| EXPIRE key seconds | 为给定 key 设置过期时间，以秒计。 |\r\n| EXPIREAT key timestamp  | EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。 |\r\n| PEXPIRE key milliseconds  | 设置 key 的过期时间以毫秒计。 |\r\n| PEXPIREAT key milliseconds-timestamp  | 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计 |\r\n| KEYS pattern  | 查找所有符合给定模式( pattern)的 key 。 |\r\n| MOVE key db  | 将当前数据库的 key 移动到给定的数据库 db 当中。 |\r\n| PERSIST key  | 移除 key 的过期时间，key 将持久保持。 |\r\n| PTTL key  | 以毫秒为单位返回 key 的剩余的过期时间。 |\r\n| TTL key  | 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。 |\r\n| RANDOMKEY  | 从当前数据库中随机返回一个 key 。 |\r\n| RENAME key newkey  | 修改 key 的名称 |\r\n| RENAMENX key newkey  | 仅当 newkey 不存在时，将 key 改名为 newkey 。 |\r\n| TYPE key  | 返回 key 所储存的值的类型。 |', 0, 417, 0, '', '', '2019-09-03 00:52:08', 0),(30, 5, 1, '', 0, '', 0, 0, 'swift (一) | 基础语法', NULL, '//&nbsp;swift&nbsp;中使用import来引入相应的库\r\nimport&nbsp;UIKit\r\n\r\n//&nbsp;swift&nbsp;不需用使用&nbsp;；&nbsp;来结尾&nbsp;但是加上&nbsp;;&nbsp;也可以&nbsp;比如有java等其他语言习惯的话\r\n\r\n//&nbsp;----------&nbsp;1.1&nbsp;变量&nbsp;----------\r\n//&nbsp;变量需用使用&nbsp;var&nbsp;来声明\r\nvar&nbsp;vari<!--autointro-->', '<pre class=\"prism-highlight prism-language-swift\">//&nbsp;swift&nbsp;中使用import来引入相应的库\r\nimport&nbsp;UIKit\r\n\r\n//&nbsp;swift&nbsp;不需用使用&nbsp;；&nbsp;来结尾&nbsp;但是加上&nbsp;;&nbsp;也可以&nbsp;比如有java等其他语言习惯的话\r\n\r\n//&nbsp;----------&nbsp;1.1&nbsp;变量&nbsp;----------\r\n//&nbsp;变量需用使用&nbsp;var&nbsp;来声明\r\nvar&nbsp;variable&nbsp;=&nbsp;&quot;变量值&quot;\r\nprint(variable)\r\n\r\n//&nbsp;----------&nbsp;1.2&nbsp;常量&nbsp;----------\r\n//&nbsp;变量需用使用&nbsp;var&nbsp;来声明\r\nlet&nbsp;constant&nbsp;=&nbsp;&quot;常量值&quot;\r\nprint(constant)\r\n\r\n//&nbsp;----------&nbsp;1.3&nbsp;可选型&nbsp;----------\r\nvar&nbsp;optional:String?&nbsp;=&nbsp;&quot;666&quot;\r\nprint(optional!)\r\n\r\n//&nbsp;----------&nbsp;1.4&nbsp;运算符&nbsp;----------\r\n\r\n\r\n//&nbsp;----------&nbsp;1.4.1&nbsp;区间运算符&nbsp;----------\r\n\r\n//&nbsp;闭区间运算符\r\nfor&nbsp;i&nbsp;in&nbsp;1...5&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;print(i)\r\n}\r\n\r\n//&nbsp;半开区间运算符\r\nfor&nbsp;j&nbsp;in&nbsp;1..&lt;5&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;print(j)\r\n}</pre><p><br/></p>', NULL, 0, 652, 0, '', '', '2019-04-21 22:23:53', 0),(31, 20, 1, '', 0, '', 0, 0, '自然拼读（一）| 概述', NULL, '什么是自然拼读？&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;英语国家的孩子，记单词不是靠“背”，而是靠“拼读”，这就是所谓的“自然拼读”法。自然拼读法，又称“英语自然拼读法”，自然拼读法是目前国际主流的英语教学法，它不仅是以英语为母语国家的孩子学习英语读音与拼字，增进阅读能力与理解力的教学法，更是以英语为第二语言的英语初学者学习发音规则与拼读技巧的教学方法。这种教学法简单高效，符合小朋友学习语言的规律，且让他们在玩中学习，在学习中玩，这样不仅改<!--autointro-->', '<p><strong>什么是自然拼读？</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;英语国家的孩子，记单词不是靠“背”，而是靠“拼读”，这就是所谓的“自然拼读”法。自然拼读法，又称“英语自然拼读法”，自然拼读法是目前国际主流的英语教学法，它不仅是以英语为母语国家的孩子学习英语读音与拼字，增进阅读能力与理解力的教学法，更是以英语为第二语言的英语初学者学习发音规则与拼读技巧的教学方法。这种教学法简单高效，符合小朋友学习语言的规律，且让他们在玩中学习，在学习中玩，这样不仅改变了学习英语时的枯燥氛围，还大大提高了学习效率，总之是一种效果显著的英语教学法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于大多数英语初学者，自然拼读法是一门实用的工具与方法，如能掌握，不需要借助音标，就都能够读出80%的英语单词，把枯燥无味的背单词变成一件简单的事，从而达到事半功倍的效果。</p><p><br/></p><p><strong>自然拼读的目的？</strong></p><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p>见词能读，见词敢读</p></li><li><p>听到读音，就能拼写</p></li></ol><p><br/></p><p><strong>自然拼读学什么？</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;<img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/11/201811271543253275581230.jpg\" title=\"3ac79f3df8dcd10013d6d95f748b4710b9122f01.jpg\" alt=\"3ac79f3df8dcd10013d6d95f748b4710b9122f01.jpg\" width=\"300\" height=\"200\" border=\"0\" vspace=\"0\" style=\"width: 300px; height: 200px;\"/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一只 [羊] 羊是它的名称，而它发出的声音并不是[yang]，而是[咩]<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类比，[H]是一个英文字母，它的名字是/<span style=\"color: #222222; font-family: Menlo, monospace; font-size: 11px; white-space: pre-wrap; background-color: #FFFFFF;\">eɪ</span><span style=\"color: #222222; font-family: Menlo, monospace; font-size: 11px; white-space: pre-wrap; background-color: #FFFFFF;\">tʃ</span>/，而它在单词中的发音则是/<span style=\"color: #222222; font-family: Menlo, monospace; font-size: 11px; white-space: pre-wrap; background-color: #FFFFFF;\">h</span>/<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以，自然拼读是学习英文字母在单词中发音的规律</p><p><br/></p><p><strong>学习音标的几个方法</strong><br/></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/11/201811271543253965370543.png\" title=\"WX20181127-013818@2x.png\" alt=\"WX20181127-013818@2x.png\" width=\"700\" height=\"350\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 350px;\"/></strong></p>', NULL, 0, 653, 0, '', '', '2019-04-21 22:23:53', 0),(32, 20, 1, '', 0, '', 0, 0, '自然拼读（二）| 辅音字母的基础发音（掐头法）', NULL, '所谓掐头法就是将发音中的/e/去掉只留下结尾的发音<!--autointro-->', '<p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/11/201811271543254216869088.png\" title=\"WX20181127-014216@2x.png\" alt=\"WX20181127-014216@2x.png\" width=\"700\" height=\"200\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 200px;\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/11/201811271543254341382739.png\" title=\"WX20181127-014520@2x.png\" alt=\"WX20181127-014520@2x.png\" width=\"700\" height=\"200\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 200px;\"/></p><p>所谓掐头法就是将发音中的/e/去掉只留下结尾的发音</p>', NULL, 0, 734, 0, '', '', '2019-04-21 22:23:53', 0),(33, 20, 1, '', 0, '', 0, 0, '自然拼读（三）| 辅音字母的基础发音（去尾法）', '/upload/image/2018/11/201811271543254708427852.png', '去尾法就是将结尾的发音去掉，只留前面的发音<!--autointro-->', '<p><br/><img src=\"/upload/image/2018/11/201811271543254708427852.png\" title=\"WX20181127-015052@2x.png\" alt=\"WX20181127-015052@2x.png\" width=\"700\" height=\"200\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 200px;\"/></p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2018/11/201811271543254851760838.png\" title=\"WX20181127-015345@2x.png\" alt=\"WX20181127-015345@2x.png\" width=\"700\" height=\"200\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 200px;\"/></p><p>去尾法就是将结尾的发音去掉，只留前面的发音</p>', NULL, 1, 755, 0, '', '', '2019-04-21 22:23:53', 0),(34, 5, 1, '', 0, '', 0, 0, 'swift (二) | 可选型', NULL, '可选型Swift 的可选（Optional）类型，用于处理值缺失的情况。可选表示&quot;那儿有一个值，并且它等于 x &quot;或者&quot;那儿没有值&quot;。简单理解：就是一个变量，它的值可能是具体某个值或者为nil&nbsp;可选型的声明var&nbsp;optionalInteger:Int?\r\nvar&nbsp;optionalString:Optional&lt;String&gt;以上两种方式都是可以声明可选型的声明一个可选变量或者可选属性的时候没有提供初始值，它的值会<!--autointro-->', '<p><strong>可选型</strong></p><p>Swift 的可选（Optional）类型，用于处理值缺失的情况。可选表示&quot;那儿有一个值，并且它等于 x &quot;或者&quot;那儿没有值&quot;。</p><p><span style=\"color: #FF0000;\">简单理解：就是一个变量，它的值可能是具体某个值或者为nil&nbsp;</span></p><p><span style=\"color: #000000;\">可选型的声明</span></p><pre class=\"prism-highlight prism-language-swift\">var&nbsp;optionalInteger:Int?\r\nvar&nbsp;optionalString:Optional&lt;String&gt;</pre><p><span style=\"color: #000000;\"></span>以上两种方式都是可以声明可选型的</p><p>声明一个可选变量或者可选属性的时候没有提供初始值，它的值会默认为 nil。</p><p><br/></p><p><strong>强制解析</strong><br/></p><p>当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（!）来获取值。这个感叹号表示&quot;我知道这个可选有值，请使用它。&quot;这被称为可选值的强制解析（forced unwrapping）。</p><pre class=\"prism-highlight prism-language-swift\">//&nbsp;声明变量没有赋值，此时变量为nil\r\nvar&nbsp;a:String?\r\n//&nbsp;强制解析可选型会报错\r\nprint(a!)</pre><p><span style=\"color: #FF0000;\"></span><span style=\"color: #FF0000;\">使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。</span></p><p><span style=\"color: #FF0000;\"><br/></span></p><p><strong>自动解析</strong></p><p>你可以在声明可选变量时使用感叹号（!）替换问号（?）。这样可选变量在使用时就不需要再加一个感叹号（!）来获取值，它会自动解析。</p><pre class=\"prism-highlight prism-language-swift\">var&nbsp;a:String!&nbsp;=&nbsp;&quot;abc&quot;\r\nprint(a)</pre><p>输出</p><p>Optional(&quot;abc&quot;)</p><p><span style=\"color: #FF0000;\">实测并没有自动解析，不懂原因。。。</span></p><p><span style=\"color: #FF0000;\"><br/></span></p><p><strong><span style=\"color: #000000;\">可选绑定</span></strong><span style=\"color: #000000;\"><br/></span></p><p><span style=\"color: #000000;\">使用可选绑定（optional binding）来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量。</span></p><pre class=\"prism-highlight prism-language-swift\">var&nbsp;a:String!&nbsp;=&nbsp;&quot;abc&quot;\r\nif&nbsp;let&nbsp;b&nbsp;=&nbsp;a&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;print(b)\r\n}</pre><p>输出</p><p>abc</p>', NULL, 0, 552, 0, '', '', '2019-04-21 22:23:53', 0),(35, 20, 1, '', 0, '', 0, 0, '自然拼读（四）| 辅音字母的基础发音（对比法）', '/upload/image/2018/12/201812051543942407578180.png', '对比法就是将英语发音与汉语拼音进行对比，使用其类似于汉语拼音发音来加深记忆。<!--autointro-->', '<p><img src=\"/upload/image/2018/12/201812051543942407578180.png\" title=\"QQ浏览器截图20181205004908.png\" alt=\"QQ浏览器截图20181205004908.png\" width=\"700\" height=\"350\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 350px;\"/></p><p>对比法就是将英语发音与汉语拼音进行对比，使用其类似于汉语拼音发音来加深记忆。</p>', NULL, 0, 629, 0, '', '', '2019-04-21 22:23:53', 0),(36, 20, 1, '', 0, '', 0, 0, '自然拼读（五）| 辅音字母的基础发音（其它法）', '/upload/image/2018/12/201812051543942474421337.png', '其它法则是没有什么好的规律与方法记忆，所以采取强制记忆的方式将其记忆。<!--autointro-->', '<p><img src=\"/upload/image/2018/12/201812051543942474421337.png\" alt=\"image.png\" width=\"700\" height=\"350\" border=\"0\" vspace=\"0\" title=\"image.png\" style=\"width: 700px; height: 350px;\"/></p><p>其它法则是没有什么好的规律与方法记忆，所以采取强制记忆的方式将其记忆。</p>', NULL, 0, 551, 0, '', '', '2019-04-21 22:23:53', 0),(37, 21, 1, '', 0, '', 0, 0, '设计模式（一）| UML类图', '/upload/image/2018/12/201812111544461502828555.png', '<!--autointro-->', '<p><img src=\"/upload/image/2018/12/201812111544461502828555.png\" title=\"WX20181211-010437@2x.png\" alt=\"WX20181211-010437@2x.png\" width=\"700\" height=\"605\" border=\"0\" vspace=\"0\" style=\"width: 700px; height: 605px;\"/></p>', NULL, 0, 812, 0, '', '', '2019-04-21 22:23:53', 0),(38, 21, 1, '', 0, '', 0, 0, '设计模式（二）| 工厂模式', NULL, '11<!--autointro-->', '<p>11<br/></p>', NULL, 0, 0, 0, '', '', '2019-04-21 22:23:53', 1),(39, 14, 1, '', 0, '', 0, 0, 'spring boot + mybatis + mybatis plus + druid', NULL, '一、什么是数据库连接池数据库连接是一种关键的、有限的、昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正是针对这个问题提出来的。数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。数据库连接池在初始化时将创建<!--autointro-->', '<h3>一、什么是数据库连接池</h3><p style=\"text-indent: 2em;\">数据库连接是一种关键的、有限的、昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正是针对这个问题提出来的。</p><p style=\"text-indent: 2em;\">数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。</p><p style=\"text-indent: 2em;\">数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数制约。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。数据库连接池的最小连接数和最大连接数的设置要考虑到下列几个因素：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp;1. 最小连接数</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是连接池一直保持的数据库连接，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp;2. 最大连接数</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是连接池能申请的最大连接数，如果数据库连接请求超过此数，后面的数据库连接请求将被加入到等待队列中，这会影响之后的数据库操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>3. 最小连接数与最大连接数差距</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最小连接数与最大连接数相差太大，那么最先的连接请求将会获利，之后超过最小连接数量的连接请求等价于建立一个新的数据库连接。不过，这些大于最小连接数的数据库连接在使用完不会马上被释放，它将被放到连接池中等待重复使用或是空闲超时后被释放。</p><p><br/></p><h3>二、动手干</h3><p>添加依赖 pom.xml</p><pre class=\"prism-highlight prism-language-markup\">&lt;!--&nbsp;数据库驱动&nbsp;--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;mysql&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;scope&gt;runtime&lt;/scope&gt;\r\n&lt;/dependency&gt;\r\n&lt;!--&nbsp;数据库连接池&nbsp;--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;1.1.10&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;!--&nbsp;mybatis&nbsp;--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;1.3.2&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;!--&nbsp;mybatis&nbsp;plus&nbsp;扩展&nbsp;--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;3.0.6&lt;/version&gt;\r\n&lt;/dependency&gt;</pre><p>编写数据库连接配置 application-mysql.yml</p><pre class=\"prism-highlight prism-language-java\">spring:\r\n&nbsp;&nbsp;datasource:\r\n&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;com.alibaba.druid.pool.DruidDataSource\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;这里不能使用druid的驱动&nbsp;否则mybatis&nbsp;plus报错\r\n&nbsp;&nbsp;&nbsp;&nbsp;driver-class-name:&nbsp;com.mysql.cj.jdbc.Driver\r\n&nbsp;&nbsp;&nbsp;&nbsp;url:&nbsp;jdbc:mysql://localhost:3306/database?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false\r\n&nbsp;&nbsp;&nbsp;&nbsp;username:&nbsp;root\r\n&nbsp;&nbsp;&nbsp;&nbsp;password:&nbsp;123456</pre><p>编写druid配置 application.yml</p><pre class=\"prism-highlight prism-language-java\">#-----------------------------\r\n#|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;druid配置&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\r\n#-----------------------------\r\ndruid:\r\n&nbsp;&nbsp;#&nbsp;&nbsp;初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\r\n&nbsp;&nbsp;initial-size:&nbsp;1\r\n&nbsp;&nbsp;#&nbsp;&nbsp;最小连接池数量\r\n&nbsp;&nbsp;min-idle:&nbsp;1\r\n&nbsp;&nbsp;#&nbsp;&nbsp;最大连接池数量\r\n&nbsp;&nbsp;max-active:&nbsp;10\r\n&nbsp;&nbsp;#&nbsp;&nbsp;配置获取连接等待超时的时间\r\n&nbsp;&nbsp;max-wait:&nbsp;10000\r\n&nbsp;&nbsp;#&nbsp;&nbsp;配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\r\n&nbsp;&nbsp;time-between-eviction-runs-millis:&nbsp;60000\r\n&nbsp;&nbsp;#&nbsp;&nbsp;配置一个连接在池中最小生存的时间，单位是毫秒\r\n&nbsp;&nbsp;min-evictable-idle-time-millis:&nbsp;300000\r\n&nbsp;&nbsp;#&nbsp;&nbsp;验证连接有效与否的SQL，不同的数据配置不同\r\n&nbsp;&nbsp;validation-query:&nbsp;select&nbsp;1\r\n&nbsp;&nbsp;#&nbsp;&nbsp;建议配置为true，不影响性能，并且保证安全性。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;申请连接的时候检测，如果空闲时间大于\r\n&nbsp;&nbsp;#&nbsp;&nbsp;timeBetweenEvictionRunsMillis，\r\n&nbsp;&nbsp;#&nbsp;&nbsp;执行validationQuery检测连接是否有效。\r\n&nbsp;&nbsp;test-while-idle:&nbsp;true\r\n&nbsp;&nbsp;#&nbsp;&nbsp;申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;这里建议配置为TRUE，防止取到的连接不可用\r\n&nbsp;&nbsp;test-on-borrow:&nbsp;true\r\n&nbsp;&nbsp;#&nbsp;&nbsp;归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能\r\n&nbsp;&nbsp;test-on-return:&nbsp;false\r\n&nbsp;&nbsp;#&nbsp;&nbsp;是否缓存preparedStatement，也就是PSCache。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;PSCache对支持游标的数据库性能提升巨大，比如说oracle。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;作者在5.5版本中使用PSCache，通过监控界面发现PSCache有缓存命中率记录，\r\n&nbsp;&nbsp;#&nbsp;&nbsp;该应该是支持PSCache。\r\n&nbsp;&nbsp;#&nbsp;&nbsp;打开PSCache，并且指定每个连接上PSCache的大小\r\n&nbsp;&nbsp;pool-prepared-statements:&nbsp;true\r\n&nbsp;&nbsp;max-pool-prepared-statement-per-connection-size:&nbsp;20\r\n&nbsp;&nbsp;#&nbsp;&nbsp;属性类型是字符串，通过别名的方式配置扩展插件，\r\n&nbsp;&nbsp;#&nbsp;&nbsp;常用的插件有：\r\n&nbsp;&nbsp;#&nbsp;&nbsp;监控统计用的filter:stat\r\n&nbsp;&nbsp;#&nbsp;&nbsp;日志用的filter:log4j\r\n&nbsp;&nbsp;#&nbsp;&nbsp;防御sql注入的filter:wall\r\n&nbsp;&nbsp;filters:&nbsp;stat\r\n&nbsp;&nbsp;#&nbsp;&nbsp;登录用户名称\r\n&nbsp;&nbsp;username:&nbsp;root\r\n&nbsp;&nbsp;#&nbsp;&nbsp;登录密码\r\n&nbsp;&nbsp;password:&nbsp;123456</pre><p>编写数据源配置 config/druid/DruidDataSourceConfiguration.java</p><pre class=\"prism-highlight prism-language-java\">@Configuration\r\npublic&nbsp;class&nbsp;DruidDataSourceConfiguration&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${spring.datasource.driver-class-name}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;jdbcDriver;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${spring.datasource.url}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;jdbcUrl;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${spring.datasource.username}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;jdbcUsername;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${spring.datasource.password}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;jdbcPassword;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.initial-size}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;initialSize;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.min-idle}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;minIdle;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.max-active}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;maxActive;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.max-wait}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;maxWait;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.time-between-eviction-runs-millis}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;timeBetweenEvictionRunsMillis;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.min-evictable-idle-time-millis}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;minEvictableIdleTimeMillis;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.validation-query}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;validationQuery;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.test-while-idle}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Boolean&nbsp;testWhileIdle;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.test-on-borrow}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Boolean&nbsp;testOnBorrow;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.test-on-return}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Boolean&nbsp;testOnReturn;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.pool-prepared-statements}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Boolean&nbsp;poolPreparedStatements;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.max-pool-prepared-statement-per-connection-size}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;maxPoolPreparedStatementPerConnectionSize;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.filters}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;filters;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Primary\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name&nbsp;=&nbsp;&quot;druidDataSource&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;DruidDataSource&nbsp;createDataSource()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DruidDataSource&nbsp;dataSource&nbsp;=&nbsp;new&nbsp;DruidDataSource();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setDriverClassName(jdbcDriver);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setUrl(jdbcUrl);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setUsername(jdbcUsername);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setPassword(jdbcPassword);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setInitialSize(initialSize);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setMinIdle(minIdle);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setMaxActive(maxActive);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setMaxWait(maxWait);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setValidationQuery(validationQuery);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setTestWhileIdle(testWhileIdle);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setTestOnBorrow(testOnBorrow);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setTestOnReturn(testOnReturn);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setPoolPreparedStatements(poolPreparedStatements);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource.setFilters(filters);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(SQLException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;dataSource;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>编写Druid配置config/druid/DruidConfiguration.java</p><pre class=\"prism-highlight prism-language-java\">@Configuration\r\npublic&nbsp;class&nbsp;DruidConfiguration&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.username}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;username;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${druid.password}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;password;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Druid&nbsp;Web&nbsp;配置&nbsp;添加用于登录监控的用户\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;ServletRegistrationBean\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ServletRegistrationBean&nbsp;servletRegistrationBean()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServletRegistrationBean&nbsp;registrationBean&nbsp;=&nbsp;new&nbsp;ServletRegistrationBean(new&nbsp;StatViewServlet(),&nbsp;&quot;/druid/*&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.addInitParameter(&quot;loginUsername&quot;,&nbsp;username);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.addInitParameter(&quot;loginPassword&quot;,&nbsp;password);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;registrationBean;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Druid&nbsp;过滤器\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;FilterRegistrationBean\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;FilterRegistrationBean&nbsp;filterRegistrationBean()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilterRegistrationBean&nbsp;registrationBean&nbsp;=&nbsp;new&nbsp;FilterRegistrationBean();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.setFilter(new&nbsp;WebStatFilter());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.addUrlPatterns(&quot;/*&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registrationBean.addInitParameter(&quot;exclusions&quot;,&nbsp;&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;registrationBean;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>编写MyBatis配置resources/mybatis-config.xml</p><pre class=\"prism-highlight prism-language-markup\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;utf-8&quot;&nbsp;?&gt;\r\n&lt;!DOCTYPE&nbsp;configuration&nbsp;PUBLIC&nbsp;&quot;-//mybatis.org//DTD&nbsp;Config&nbsp;3.0//EN&quot;&nbsp;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\r\n&lt;configuration&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;全局配置属性&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;settings&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;使用jdbc的useGeneratedKeys获取数据库自增主键值&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;setting&nbsp;name=&quot;useGeneratedKeys&quot;&nbsp;value=&quot;true&quot;/&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;使用列标签替换列别名&nbsp;默认:true&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;setting&nbsp;name=&quot;useColumnLabel&quot;&nbsp;value=&quot;true&quot;/&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;开启驼峰命名转换:Table{create_time}&nbsp;-&gt;&nbsp;Entity{createTime}&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;setting&nbsp;name=&quot;mapUnderscoreToCamelCase&quot;&nbsp;value=&quot;true&quot;/&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;SQL语句控制台打印&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;setting&nbsp;name=&quot;logImpl&quot;&nbsp;value=&quot;STDOUT_LOGGING&quot;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/settings&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugins&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--mybatis&nbsp;plus&nbsp;分页插件--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugin&nbsp;interceptor=&quot;com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor&quot;&gt;&lt;/plugin&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugins&gt;\r\n&lt;/configuration&gt;</pre><p>编写MyBatis Plus配置config/mybatis/MyBatisPlusConfiguration.java</p><pre class=\"prism-highlight prism-language-java\">@Configuration\r\npublic&nbsp;class&nbsp;MyBatisPlusConfiguration&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;mybatis-config.xml配置文件的路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;String&nbsp;mybatisConfigFile;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${mybatis-plus.mybatis-config-file}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setMybatisConfigFile(String&nbsp;mybatisConfigFile)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyBatisPlusConfiguration.mybatisConfigFile&nbsp;=&nbsp;mybatisConfigFile;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;mybatis&nbsp;mapper文件所在路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;String&nbsp;mapperPath;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${mybatis-plus.mapper-path}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setMapperPath(String&nbsp;mapperPath)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyBatisPlusConfiguration.mapperPath&nbsp;=&nbsp;mapperPath;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;实体类所在的package\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Value(&quot;${mybatis-plus.type-aliasa-package}&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;typeAliasPackage;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Qualifier(value&nbsp;=&nbsp;&quot;druidDataSource&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;DataSource&nbsp;dataSource;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name&nbsp;=&nbsp;&quot;sqlSessionFactory&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;MybatisSqlSessionFactoryBean&nbsp;createSqlSessionFactoryBean()&nbsp;throws&nbsp;IOException&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MybatisSqlSessionFactoryBean&nbsp;bean&nbsp;=&nbsp;new&nbsp;MybatisSqlSessionFactoryBean();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置mybatis&nbsp;configuration&nbsp;扫描路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bean.setConfigLocation(new&nbsp;ClassPathResource(mybatisConfigFile));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;添加mapper&nbsp;扫描路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PathMatchingResourcePatternResolver&nbsp;resolver&nbsp;=&nbsp;new&nbsp;PathMatchingResourcePatternResolver();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;packageSearchPath&nbsp;=&nbsp;ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX&nbsp;+&nbsp;mapperPath;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bean.setMapperLocations(resolver.getResources(packageSearchPath));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置dataSource\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bean.setDataSource(dataSource);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置typeAlias&nbsp;包扫描路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bean.setTypeAliasesPackage(typeAliasPackage);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;bean;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>三、测试</p><p>运行项目，浏览器输入localhost:8081/druid 输入账号密码，进入SQL监控，访问相应数据库操作功能，查看SQL监控。</p><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/01/201901021546442778642141.png\" alt=\"image.png\" width=\"700\" height=\"152\" border=\"0\" vspace=\"0\" title=\"image.png\" style=\"width: 700px; height: 152px;\"/></p><p><br/></p>', NULL, 0, 911, 0, '', '', '2019-04-21 22:23:53', 0),(41, 11, 1, '', 0, '', 0, 0, 'SCSS (一) | 环境安装与IDE配置', NULL, '<h1>Sass简介</h1>\n<p>Sass 是一个 CSS 的扩展，它在 CSS 语法的基础上，允许您使用变量 (variables), 嵌套规则 (nested rules), 混合 (mixins), 导入 (inline imports) 等功能，令 CSS 更加强大与优雅。使用 Sass 以及 Compass 样式库 有助于更好地组织管理样式文件，以及更高效地开发项目。</p>\n<h1>node-sass 安装</h1>\n<p>首先安装NodeJS，然后使用NPM安装node-sass</p>\n<pre><code>\nnpm install&lt;!--autointro--&gt;</code></pre><!--autointro-->', '<h1 id=\"h1-sass-\"><a name=\"Sass简介\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Sass简介</h1><p>Sass 是一个 CSS 的扩展，它在 CSS 语法的基础上，允许您使用变量 (variables), 嵌套规则 (nested rules), 混合 (mixins), 导入 (inline imports) 等功能，令 CSS 更加强大与优雅。使用 Sass 以及 Compass 样式库 有助于更好地组织管理样式文件，以及更高效地开发项目。</p>\r\n<h1 id=\"h1-node-sass-\"><a name=\"node-sass 安装\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>node-sass 安装</h1><p>首先安装NodeJS，然后使用NPM安装node-sass</p>\r\n<pre><code>npm install -g node-sass</code></pre><p>测试编译，新建style.scss文件，进入CMD</p>\r\n<pre><code>node-sass style.scss style.css</code></pre><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903120010548470551.png\" alt=\"\"></p>\r\n<h2 id=\"h2-node-sass-\"><a name=\"node-sass 常用命令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>node-sass 常用命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody><tr>\r\n<td>--output-style</td>\r\n<td>输出风格 (nested | expanded | compact | compressed) 使用compressed压缩输出的css代码</td>\r\n</tr>\r\n<tr>\r\n<td>-o, --output</td>\r\n<td>输出目录</td>\r\n</tr>\r\n</tbody></table>\r\n<h1 id=\"h1-atom-ide-\"><a name=\"Atom IDE插件安装\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Atom IDE插件安装</h1><p>打开 Atom-&gt;File-&gt;Settings-&gt;install<br>搜索 sass-autocompile 并安装<br>设置如下<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903120031209593977.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u6D4Bu8BD5u63D2u4EF6u7F16u8BD1\"><a name=\"测试插件编译\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>测试插件编译</h2><p>在项目目录下新建 scss 目录和 css 目录<br>在scss目录下新建文件 style.scss 并写入代码</p>\r\n<pre><code>body{\r\n  margin: 0;\r\n  padding: 0;\r\n}</code></pre><p>保存文件，激活插件自动编译，在css目录中自动生成编译后文件 style.min.css，查看该文件</p>\r\n<pre><code>body{margin:0;padding:0}</code></pre><p>scss代码成功编译，并压缩为一行</p>\r\n', NULL, 0, 603, 0, '', 'a:2:{s:10:\"md_content\";s:1429:\"# Sass简介\r\nSass 是一个 CSS 的扩展，它在 CSS 语法的基础上，允许您使用变量 (variables), 嵌套规则 (nested rules), 混合 (mixins), 导入 (inline imports) 等功能，令 CSS 更加强大与优雅。使用 Sass 以及 Compass 样式库 有助于更好地组织管理样式文件，以及更高效地开发项目。\r\n\r\n# node-sass 安装\r\n首先安装NodeJS，然后使用NPM安装node-sass\r\n```\r\nnpm install -g node-sass\r\n```\r\n测试编译，新建style.scss文件，进入CMD\r\n```\r\nnode-sass style.scss style.css\r\n```\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903120010548470551.png)\r\n\r\n## node-sass 常用命令\r\n| 命令  | 描述  |\r\n| ------------ | ------------ |\r\n| \\--output-style  | 输出风格 (nested \\| expanded \\| compact \\| compressed) 使用compressed压缩输出的css代码 |\r\n| -o, \\--output  | 输出目录  |\r\n\r\n# Atom IDE插件安装\r\n打开 Atom->File->Settings->install\r\n搜索 sass-autocompile 并安装\r\n设置如下\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903120031209593977.png)\r\n\r\n## 测试插件编译\r\n在项目目录下新建 scss 目录和 css 目录\r\n在scss目录下新建文件 style.scss 并写入代码\r\n```\r\nbody{\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n```\r\n保存文件，激活插件自动编译，在css目录中自动生成编译后文件 style.min.css，查看该文件\r\n```\r\nbody{margin:0;padding:0}\r\n```\r\nscss代码成功编译，并压缩为一行\";s:8:\"md_intro\";s:450:\"# Sass简介\r\nSass 是一个 CSS 的扩展，它在 CSS 语法的基础上，允许您使用变量 (variables), 嵌套规则 (nested rules), 混合 (mixins), 导入 (inline imports) 等功能，令 CSS 更加强大与优雅。使用 Sass 以及 Compass 样式库 有助于更好地组织管理样式文件，以及更高效地开发项目。\r\n\r\n# node-sass 安装\r\n首先安装NodeJS，然后使用NPM安装node-sass\r\n```\r\nnpm install<!--autointro-->\";}', '2019-04-21 22:23:53', 0),(42, 11, 1, '', 0, '', 0, 0, 'SCSS (二) | 嵌套规则与引用父选择器:&amp;', NULL, '<h1>嵌套规则</h1>\n<p>CSS中有一些属性遵循相同的“命名空间”，在CSS中，如果你想在同一个命名空间中设置一串属性，你必须每次都输出来。Sass为此提供了一个快捷方式：只需要输入一次命名空间，然后在其内部嵌套子属性。</p>\n<pre><code>#main p {\n  color: #00ff00;\n  width: 97%;\n\n  .redbox {\n    background-color: #ff0000;\n    color: #000000;\n  }\n}</code></pre>\n<p>编译为</p>\n<pre><code>\n#m&lt;!--autointro--&gt;</code></pre><!--autointro-->', '<h1 id=\"h1-u5D4Cu5957u89C4u5219\"><a name=\"嵌套规则\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>嵌套规则</h1><p>CSS中有一些属性遵循相同的“命名空间”，在CSS中，如果你想在同一个命名空间中设置一串属性，你必须每次都输出来。Sass为此提供了一个快捷方式：只需要输入一次命名空间，然后在其内部嵌套子属性。</p>\r\n<pre><code>#main p {\r\n  color: #00ff00;\r\n  width: 97%;\r\n\r\n  .redbox {\r\n    background-color: #ff0000;\r\n    color: #000000;\r\n  }\r\n}</code></pre><p>编译为</p>\r\n<pre><code>#main p {color: #00ff00;width: 97%;}\r\n#main p .redbox {background-color: #ff0000;color: #000000;}</code></pre><p>这有助于避免父选择器重复，相对于复杂的CSS布局中多层嵌套的选择器 要简单得多。</p>\r\n<h1 id=\"h1--amp-\"><a name=\"引用父选择器:&amp;\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>引用父选择器:&amp;</h1><p>有些时候需要直接使用嵌套外层的父选择器，可以 &amp; 字符来明确地表示插入指定父选择器。</p>\r\n<pre><code>a {\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n  &amp;:hover { text-decoration: underline; }\r\n  body.firefox &amp; { font-weight: normal; }\r\n}</code></pre><p>编译为</p>\r\n<pre><code>a {font-weight: bold;text-decoration: none;}\r\na:hover {text-decoration: underline;}\r\nbody.firefox a {font-weight: normal;}</code></pre><p>&amp;将替换为呈现在CSS文件中的父选择器</p>\r\n<p>使用&amp;作为选择器前缀<br>&amp; 必须出现在的选择器的开头位置，但可以跟随后缀，将被添加到父选择的后面。</p>\r\n<pre><code>#main {\r\n  color: black;\r\n  &amp;-sidebar { border: 1px solid; }\r\n}</code></pre><p>编译为</p>\r\n<pre><code>#main {color: black;}\r\n#main-sidebar {border: 1px solid;}</code></pre>', NULL, 0, 623, 0, '', 'a:2:{s:10:\"md_content\";s:1444:\"# 嵌套规则\r\nCSS中有一些属性遵循相同的“命名空间”，在CSS中，如果你想在同一个命名空间中设置一串属性，你必须每次都输出来。Sass为此提供了一个快捷方式：只需要输入一次命名空间，然后在其内部嵌套子属性。\r\n```\r\n#main p {\r\n  color: #00ff00;\r\n  width: 97%;\r\n\r\n  .redbox {\r\n    background-color: #ff0000;\r\n    color: #000000;\r\n  }\r\n}\r\n```\r\n编译为\r\n```\r\n#main p {color: #00ff00;width: 97%;}\r\n#main p .redbox {background-color: #ff0000;color: #000000;}\r\n```\r\n这有助于避免父选择器重复，相对于复杂的CSS布局中多层嵌套的选择器 要简单得多。\r\n\r\n# 引用父选择器:&\r\n有些时候需要直接使用嵌套外层的父选择器，可以 & 字符来明确地表示插入指定父选择器。\r\n```\r\na {\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n  &:hover { text-decoration: underline; }\r\n  body.firefox & { font-weight: normal; }\r\n}\r\n```\r\n编译为\r\n```\r\na {font-weight: bold;text-decoration: none;}\r\na:hover {text-decoration: underline;}\r\nbody.firefox a {font-weight: normal;}\r\n```\r\n&将替换为呈现在CSS文件中的父选择器\r\n\r\n使用&作为选择器前缀\r\n& 必须出现在的选择器的开头位置，但可以跟随后缀，将被添加到父选择的后面。\r\n```\r\n#main {\r\n  color: black;\r\n  &-sidebar { border: 1px solid; }\r\n}\r\n```\r\n编译为\r\n```\r\n#main {color: black;}\r\n#main-sidebar {border: 1px solid;}\r\n```\";s:8:\"md_intro\";s:454:\"# 嵌套规则\r\nCSS中有一些属性遵循相同的“命名空间”，在CSS中，如果你想在同一个命名空间中设置一串属性，你必须每次都输出来。Sass为此提供了一个快捷方式：只需要输入一次命名空间，然后在其内部嵌套子属性。\r\n```\r\n#main p {\r\n  color: #00ff00;\r\n  width: 97%;\r\n\r\n  .redbox {\r\n    background-color: #ff0000;\r\n    color: #000000;\r\n  }\r\n}\r\n```\r\n编译为\r\n```\r\n#m<!--autointro-->\";}', '2019-04-21 22:23:53', 0),(43, 11, 1, '', 0, '', 0, 0, 'SCSS (三) | 变量与数据类型', NULL, '<h1>变量</h1>\n<p>使用SassScript最直截了当的方法是使用变量。变量以美元符号开始，赋值像设置CSS属性那样</p>\n<pre><code>$width:5em;\n#main {\n  width: $width;\n}</code></pre>\n<p>编译为</p>\n<pre><code>#main {\n  width: 5em;\n}</code></pre>\n<p>作用域:不在任何嵌套选择器内定义的变量则在可任何地方使用，相当于全局变量，使用!global可以使一个变量成为全局变量</p>\n<pre><code>$width:5em !global;</code></pre>\n<p>嵌套在{}里的</p><!--autointro-->', '<h1 id=\"h1-u53D8u91CF\"><a name=\"变量\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>变量</h1><p>使用SassScript最直截了当的方法是使用变量。变量以美元符号开始，赋值像设置CSS属性那样</p>\r\n<pre><code>$width:5em;\r\n#main {\r\n  width: $width;\r\n}</code></pre><p>编译为</p>\r\n<pre><code>#main {\r\n  width: 5em;\r\n}</code></pre><p>作用域:不在任何嵌套选择器内定义的变量则在可任何地方使用，相当于全局变量，使用!global可以使一个变量成为全局变量</p>\r\n<pre><code>$width:5em !global;</code></pre><p>嵌套在{}里的变量，仅在它定义的选择器嵌套层级的范围内可用。</p>\r\n<pre><code>#main {\r\n    $width:5em;\r\n    #box {\r\n        width:$width;\r\n    }\r\n}</code></pre><p>编译为</p>\r\n<pre><code>#main #box {\r\n    width:5em;\r\n}</code></pre><p>由于历史原因，变量名（以及其他所有Sass标识符）可以互换连字符 - 和下划线_ 。例如，如果你定义了一个名为 $main-width，您可以使用 $main_width访问它，反之亦然。</p>\r\n<h1 id=\"h1-u6570u636Eu7C7Bu578B\"><a name=\"数据类型\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>数据类型</h1><p>SassScript 支持 7 种主要的数据类型：</p>\r\n<ul>\r\n<li>数字 (例如： 1.2, 13, 10px)</li><li>文本字符串，带引号字符串和不带引号字符串(例如：”foo”, ‘bar’, baz)</li><li>颜色 (例如：blue, #04a3f9, rgba(255, 0, 0, 0.5))</li><li>布尔值 (例如： true, false)</li><li>空值 (例如： null)</li><li>值列表 (list)，用空格或逗号分隔 (例如： 1.5em 1em 0 2em, Helvetica, Arial, sans-serif)</li><li>maps ，从一个值映射到另一个 (例如： (key1: value1, key2: value2))<h2 id=\"h2--strings-\"><a name=\"字符串（Strings）\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>字符串（Strings）</h2>CSS指定两种字符串类型：带引号的字符串,包括双引号和单引号<h2 id=\"h2--lists-\"><a name=\"列表（Lists）\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>列表（Lists）</h2>列表(lists) 是指 Sass 如何表示在CSS声明的，类似margin: 10px 15px 0 0 或  font-face: Helvetica, Arial, sans-serif这样的值，列表只是一串其他值，无论是用空格还是用逗号隔开。事实上，独立的值也被视为列表：只包含一个值的列表。<br>列表本身没有太多的功能，但是 SassScript list functions 使它们非常有用。nth 函数可以直接访问列表中的某一项；join 函数可以将多个列表拼接在一起；append 函数可以将某项添加到列表中；<a href=\"https://github.com/each\" title=\"&#64;each\" class=\"at-link\">@each</a> 指令可以将添加样式到列表中的每一项。<h2 id=\"h2-maps\"><a name=\"Maps\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Maps</h2>Maps代表一个键和值对集合，其中键用于查找值。他们可以很容易地将值收集到命名组中，并且可以动态地访问这些组。和列表（Lists）不同，Maps必须始终使用括号括起来，并且必须用逗号分隔。Maps中的键和值可以是任意的SassScript对象。一个Maps可能只有一个值与给定的键关联（尽管该值可以是一个列表）。一个给定的值可能与许多键关联。<h2 id=\"h2--colors-\"><a name=\"颜色（Colors）\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>颜色（Colors）</h2>任何CSS颜色表达式返回SassScript颜色值。</li></ul>\r\n', NULL, 0, 592, 0, '', 'a:2:{s:10:\"md_content\";s:2622:\"# 变量\r\n使用SassScript最直截了当的方法是使用变量。变量以美元符号开始，赋值像设置CSS属性那样\r\n```\r\n$width:5em;\r\n#main {\r\n  width: $width;\r\n}\r\n```\r\n编译为\r\n```\r\n#main {\r\n  width: 5em;\r\n}\r\n```\r\n作用域:不在任何嵌套选择器内定义的变量则在可任何地方使用，相当于全局变量，使用!global可以使一个变量成为全局变量\r\n```\r\n$width:5em !global;\r\n```\r\n嵌套在{}里的变量，仅在它定义的选择器嵌套层级的范围内可用。\r\n```\r\n#main {\r\n	$width:5em;\r\n	#box {\r\n		width:$width;\r\n	}\r\n}\r\n```\r\n编译为\r\n```\r\n#main #box {\r\n	width:5em;\r\n}\r\n```\r\n由于历史原因，变量名（以及其他所有Sass标识符）可以互换连字符 - 和下划线\\_ 。例如，如果你定义了一个名为 $main-width，您可以使用 $main_width访问它，反之亦然。\r\n\r\n# 数据类型\r\nSassScript 支持 7 种主要的数据类型：\r\n- 数字 (例如： 1.2, 13, 10px)\r\n- 文本字符串，带引号字符串和不带引号字符串(例如：\"foo\", \'bar\', baz)\r\n- 颜色 (例如：blue, #04a3f9, rgba(255, 0, 0, 0.5))\r\n- 布尔值 (例如： true, false)\r\n- 空值 (例如： null)\r\n- 值列表 (list)，用空格或逗号分隔 (例如： 1.5em 1em 0 2em, Helvetica, Arial, sans-serif)\r\n- maps ，从一个值映射到另一个 (例如： (key1: value1, key2: value2))\r\n## 字符串（Strings）\r\nCSS指定两种字符串类型：带引号的字符串,包括双引号和单引号\r\n## 列表（Lists）\r\n列表(lists) 是指 Sass 如何表示在CSS声明的，类似margin: 10px 15px 0 0 或  font-face: Helvetica, Arial, sans-serif这样的值，列表只是一串其他值，无论是用空格还是用逗号隔开。事实上，独立的值也被视为列表：只包含一个值的列表。\r\n列表本身没有太多的功能，但是 SassScript list functions 使它们非常有用。nth 函数可以直接访问列表中的某一项；join 函数可以将多个列表拼接在一起；append 函数可以将某项添加到列表中；@each 指令可以将添加样式到列表中的每一项。\r\n## Maps \r\nMaps代表一个键和值对集合，其中键用于查找值。他们可以很容易地将值收集到命名组中，并且可以动态地访问这些组。和列表（Lists）不同，Maps必须始终使用括号括起来，并且必须用逗号分隔。Maps中的键和值可以是任意的SassScript对象。一个Maps可能只有一个值与给定的键关联（尽管该值可以是一个列表）。一个给定的值可能与许多键关联。\r\n## 颜色（Colors）\r\n任何CSS颜色表达式返回SassScript颜色值。\";s:8:\"md_intro\";s:458:\"# 变量\r\n使用SassScript最直截了当的方法是使用变量。变量以美元符号开始，赋值像设置CSS属性那样\r\n```\r\n$width:5em;\r\n#main {\r\n  width: $width;\r\n}\r\n```\r\n编译为\r\n```\r\n#main {\r\n  width: 5em;\r\n}\r\n```\r\n作用域:不在任何嵌套选择器内定义的变量则在可任何地方使用，相当于全局变量，使用!global可以使一个变量成为全局变量\r\n```\r\n$width:5em !global;\r\n```\r\n嵌套在{}里的<!--autointro-->\";}', '2019-04-21 22:23:53', 0),(44, 18, 1, '', 0, '', 0, 0, '自制操作系统（一）|  环境搭建与HelloWorld', '/upload/image/2019/03/201903190008084419766.png', '<h1>环境准备</h1>\n<p>安装 nodepad++\n安装 nodepad++ 二进制编辑插件\n安装 virtualbox</p>\n<h1>开发步骤</h1>\n<p>在Windows（或其他系统）上编写源代码 --˃ 用C语言编译器编译源代码，生成机器语言文件 --˃ 对机器语言文件进行加工，生成磁盘映像文件 --˃ 将映像文件写入磁盘，做成含操作系统的启动盘</p>\n<h1>Hello World</h1>\n<p>使用nodepad++新建一个文件，命名为os.img，选择工具栏上的View in HEX，使用十六进制方式编辑文件\n![](htt</p><!--autointro-->', '<h1 id=\"h1-u73AFu5883u51C6u5907\"><a name=\"环境准备\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>环境准备</h1><p>安装 nodepad++<br>安装 nodepad++ 二进制编辑插件<br>安装 virtualbox</p>\r\n<h1 id=\"h1-u5F00u53D1u6B65u9AA4\"><a name=\"开发步骤\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>开发步骤</h1><p>在Windows（或其他系统）上编写源代码 –&gt; 用C语言编译器编译源代码，生成机器语言文件 –&gt; 对机器语言文件进行加工，生成磁盘映像文件 –&gt; 将映像文件写入磁盘，做成含操作系统的启动盘</p>\r\n<h1 id=\"h1-hello-world\"><a name=\"Hello World\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Hello World</h1><p>使用nodepad++新建一个文件，命名为os.img，选择工具栏上的View in HEX，使用十六进制方式编辑文件<br><img src=\"/upload/image/2019/03/201903190008084419766.png\" alt=\"\"><br>从地址00000000开始键入如下值<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190010591535566.png\" alt=\"\"><br>注意在000001f0和00000200处不全是0x00<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190012119810387.png\" alt=\"\"><br>剩下的全部填充0x00<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190014006768618.png\" alt=\"\"><br>编写完保存文件，使用virtualbox运行刚才编写的磁盘映像文件(os.img)<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190016492043572.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190018202873188.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190019001228698.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190021242219992.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190022236807115.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190023306415272.png\" alt=\"\"><br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190025082315379.png\" alt=\"\"><br>源码地址 <a href=\"https://github.com/365D1/30OS.git\">https://github.com/365D1/30OS.git</a></p>\r\n', NULL, 0, 485, 0, '', 'a:4:{s:10:\"md_content\";s:1541:\"# 环境准备\r\n安装 nodepad++\r\n安装 nodepad++ 二进制编辑插件\r\n安装 virtualbox\r\n# 开发步骤\r\n在Windows（或其他系统）上编写源代码 --> 用C语言编译器编译源代码，生成机器语言文件 --> 对机器语言文件进行加工，生成磁盘映像文件 --> 将映像文件写入磁盘，做成含操作系统的启动盘\r\n# Hello World\r\n使用nodepad++新建一个文件，命名为os.img，选择工具栏上的View in HEX，使用十六进制方式编辑文件\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190008084419766.png)\r\n从地址00000000开始键入如下值\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190010591535566.png)\r\n注意在000001f0和00000200处不全是0x00\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190012119810387.png)\r\n剩下的全部填充0x00\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190014006768618.png)\r\n编写完保存文件，使用virtualbox运行刚才编写的磁盘映像文件(os.img)\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190016492043572.png)\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190018202873188.png)\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190019001228698.png)\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190021242219992.png)\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190022236807115.png)\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190023306415272.png)\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190025082315379.png)\r\n源码地址 https://github.com/365D1/30OS.git\";s:8:\"md_intro\";s:527:\"# 环境准备\r\n安装 nodepad++\r\n安装 nodepad++ 二进制编辑插件\r\n安装 virtualbox\r\n# 开发步骤\r\n在Windows（或其他系统）上编写源代码 --˃ 用C语言编译器编译源代码，生成机器语言文件 --˃ 对机器语言文件进行加工，生成磁盘映像文件 --˃ 将映像文件写入磁盘，做成含操作系统的启动盘\r\n# Hello World\r\n使用nodepad++新建一个文件，命名为os.img，选择工具栏上的View in HEX，使用十六进制方式编辑文件\r\n![](htt<!--autointro-->\";s:15:\"os_wxapp_images\";s:725:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190008084419766.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190010591535566.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190012119810387.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190014006768618.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190016492043572.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190018202873188.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190019001228698.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190021242219992.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190022236807115.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190023306415272.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903190025082315379.png\";s:21:\"os_wxapp_images_count\";i:11;}', '2019-04-21 22:23:53', 0),(45, 5, 1, '', 0, '', 0, 0, 'swift (三) | 字典', NULL, '<h1>swfit字典</h1>\n<p>Swift 字典用来存储无序的相同类型数据的集合，Swift 数组会强制检测元素的类型，如果类型不同则会报错。</p>\n<p>Swift 字典每个值（value）都关联唯一的键（key），键作为字典中的这个值数据的标识符。</p>\n<p>和数组中的数据项不同，字典中的数据项并没有具体顺序。我们在需要通过标识符（键）访问数据的时候使用字典，这种方法很大程度上和我们在现实世界中使用字典查字义的方法一样。</p>\n<p>Swift 字典的key没有类型限制可以是整型或字符串，但必须是唯一的。</p>\n<p>如果</p><!--autointro-->', '<h1 id=\"h1-swfit-\"><a name=\"swfit字典\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>swfit字典</h1><p>Swift 字典用来存储无序的相同类型数据的集合，Swift 数组会强制检测元素的类型，如果类型不同则会报错。</p>\r\n<p>Swift 字典每个值（value）都关联唯一的键（key），键作为字典中的这个值数据的标识符。</p>\r\n<p>和数组中的数据项不同，字典中的数据项并没有具体顺序。我们在需要通过标识符（键）访问数据的时候使用字典，这种方法很大程度上和我们在现实世界中使用字典查字义的方法一样。</p>\r\n<p>Swift 字典的key没有类型限制可以是整型或字符串，但必须是唯一的。</p>\r\n<p>如果创建一个字典，并赋值给一个变量，则创建的字典就是可以修改的。这意味着在创建字典后，可以通过添加、删除、修改的方式改变字典里的项目。如果将一个字典赋值给常量，字典就不可修改，并且字典的大小和内容都不可以修改。</p>\r\n<h1 id=\"h1-u521Bu5EFAu5B57u5178\"><a name=\"创建字典\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>创建字典</h1><p>可以使用如下格式创建字典</p>\r\n<pre><code>var someDict =  [KeyType: ValueType]()\r\nvar someDict:[Int:String] = [0:&quot;New York&quot;,1:&quot;Washington&quot;,2:&quot;Philadelphia&quot;]</code></pre><p>判断是否为字典是否为空</p>\r\n<pre><code>var emptyDict = [Int:String]()\r\nprint(emptyDict)\r\nvar isEmpty = emptyDict.isEmpty\r\nif isEmpty {\r\n    print(&quot;The dictionary is empty&quot;)\r\n}else{\r\n    print(&quot;The dictionary is not empty&quot;)\r\n}</code></pre><h1 id=\"h1-u8BBFu95EEu5B57u5178\"><a name=\"访问字典\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>访问字典</h1><p>指定字典key可以获取字典key对应的值</p>\r\n<pre><code>var someVar = someDict[0]!\r\nprint(&quot;key = 0 value is \\(someVar)&quot;)</code></pre><h1 id=\"h1-u4FEEu6539u5B57u5178\"><a name=\"修改字典\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>修改字典</h1><p>我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 <strong>key 不存在，则添加值</strong>，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值。</p>\r\n<pre><code>var oldVar = someDict.updateValue(&quot;San Francisco&quot;, forKey: 0)!\r\nvar newVar = someDict[0]!\r\nprint(&quot;key = 0 old value is \\(oldVar)&quot;)\r\nprint(&quot;key = 0 new value is \\(newVar)&quot;)</code></pre><p>也可以直接指定key索引来修改，相比updateValue，如果key不存在则会抛异常</p>\r\n<pre><code>var oldVar = someDict[0]!\r\nprint(&quot;key = 0 old value is \\(oldVar)&quot;)\r\nsomeDict[0] = &quot;San Francisco&quot;\r\nvar newVar = someDict[0]!\r\nprint(&quot;key = 0 new value is \\(newVar)&quot;)</code></pre><h1 id=\"h1--key-value-\"><a name=\"移除 Key-Value 对\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>移除 Key-Value 对</h1><p>我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil 。也可以通过指定key索引设置value为nil。</p>\r\n<pre><code>someDict.removeValue(forKey: 2)\r\nprint(someDict)\r\n\r\nsomeDict[1] = nil\r\nprint(someDict)\r\n</code></pre><h1 id=\"h1-u904Du5386u5B57u5178\"><a name=\"遍历字典\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>遍历字典</h1><pre><code>for (key,value) in someDict {\r\n    print(&quot;key is \\(key),value is \\(value)&quot;)\r\n}</code></pre>', NULL, 0, 558, 0, '', 'a:2:{s:10:\"md_content\";s:2610:\"# swfit字典\r\nSwift 字典用来存储无序的相同类型数据的集合，Swift 数组会强制检测元素的类型，如果类型不同则会报错。\r\n\r\nSwift 字典每个值（value）都关联唯一的键（key），键作为字典中的这个值数据的标识符。\r\n\r\n和数组中的数据项不同，字典中的数据项并没有具体顺序。我们在需要通过标识符（键）访问数据的时候使用字典，这种方法很大程度上和我们在现实世界中使用字典查字义的方法一样。\r\n\r\nSwift 字典的key没有类型限制可以是整型或字符串，但必须是唯一的。\r\n\r\n如果创建一个字典，并赋值给一个变量，则创建的字典就是可以修改的。这意味着在创建字典后，可以通过添加、删除、修改的方式改变字典里的项目。如果将一个字典赋值给常量，字典就不可修改，并且字典的大小和内容都不可以修改。\r\n# 创建字典\r\n可以使用如下格式创建字典\r\n```\r\nvar someDict =  [KeyType: ValueType]()\r\nvar someDict:[Int:String] = [0:\"New York\",1:\"Washington\",2:\"Philadelphia\"]\r\n```\r\n判断是否为字典是否为空\r\n```\r\nvar emptyDict = [Int:String]()\r\nprint(emptyDict)\r\nvar isEmpty = emptyDict.isEmpty\r\nif isEmpty {\r\n    print(\"The dictionary is empty\")\r\n}else{\r\n    print(\"The dictionary is not empty\")\r\n}\r\n```\r\n# 访问字典\r\n指定字典key可以获取字典key对应的值\r\n```\r\nvar someVar = someDict[0]!\r\nprint(\"key = 0 value is \\(someVar)\")\r\n```\r\n# 修改字典\r\n我们可以使用 updateValue(forKey:) 增加或更新字典的内容。如果 **key 不存在，则添加值**，如果存在则修改 key 对应的值。updateValue(_:forKey:)方法返回Optional值。\r\n```\r\nvar oldVar = someDict.updateValue(\"San Francisco\", forKey: 0)!\r\nvar newVar = someDict[0]!\r\nprint(\"key = 0 old value is \\(oldVar)\")\r\nprint(\"key = 0 new value is \\(newVar)\")\r\n```\r\n也可以直接指定key索引来修改，相比updateValue，如果key不存在则会抛异常\r\n```\r\nvar oldVar = someDict[0]!\r\nprint(\"key = 0 old value is \\(oldVar)\")\r\nsomeDict[0] = \"San Francisco\"\r\nvar newVar = someDict[0]!\r\nprint(\"key = 0 new value is \\(newVar)\")\r\n```\r\n# 移除 Key-Value 对\r\n我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil 。也可以通过指定key索引设置value为nil。\r\n```\r\nsomeDict.removeValue(forKey: 2)\r\nprint(someDict)\r\n\r\nsomeDict[1] = nil\r\nprint(someDict)\r\n\r\n```\r\n# 遍历字典\r\n```\r\nfor (key,value) in someDict {\r\n    print(\"key is \\(key),value is \\(value)\")\r\n}\r\n```\r\n\";s:8:\"md_intro\";s:646:\"# swfit字典\r\nSwift 字典用来存储无序的相同类型数据的集合，Swift 数组会强制检测元素的类型，如果类型不同则会报错。\r\n\r\nSwift 字典每个值（value）都关联唯一的键（key），键作为字典中的这个值数据的标识符。\r\n\r\n和数组中的数据项不同，字典中的数据项并没有具体顺序。我们在需要通过标识符（键）访问数据的时候使用字典，这种方法很大程度上和我们在现实世界中使用字典查字义的方法一样。\r\n\r\nSwift 字典的key没有类型限制可以是整型或字符串，但必须是唯一的。\r\n\r\n如果<!--autointro-->\";}', '2019-04-21 22:23:53', 0),(46, 18, 1, '', 0, '', 0, 0, '自制操作系统（二）| 用汇编写一个操作系统.img', NULL, '<h1>什么是NASM</h1>\n<p>NASM全称The Netwide Assembler，是一款基于80x86和x86-64平台的汇编语言编译程序，其设计初衷是为了实现编译器程序跨平台和模块化的特性。NASM支持大量的文件格式，包括Linux，*BSD，a.out，ELF，COFF，Mach−O，Microsoft 16−bit OBJ，Win32以及Win64，同时也支持简单的二进制文件生成。它的语法被设计的简单易懂，相较Intel的语法更为简单，支持目前已知的所有x86架构之上的扩展语法，同时也拥有对宏</p><!--autointro-->', '<h1 id=\"h1--nasm\"><a name=\"什么是NASM\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>什么是NASM</h1><p>NASM全称The Netwide Assembler，是一款基于80x86和x86-64平台的汇编语言编译程序，其设计初衷是为了实现编译器程序跨平台和模块化的特性。NASM支持大量的文件格式，包括Linux，*BSD，a.out，ELF，COFF，Mach−O，Microsoft 16−bit OBJ，Win32以及Win64，同时也支持简单的二进制文件生成。它的语法被设计的简单易懂，相较Intel的语法更为简单，支持目前已知的所有x86架构之上的扩展语法，同时也拥有对宏命令的良好支持。<br>也就是稍后我们的汇编代码要用这个编译器编译。</p>\r\n<h1 id=\"h1--db-resb\"><a name=\"学两个简单的汇编指令 DB 和 RESB\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>学两个简单的汇编指令 DB 和 RESB</h1><p>DB指令是”data byte”的缩写，也就是直接往文件里写入1个字节的指令。<br>简单练习一下，新建文件 demo.nas 写入代码</p>\r\n<pre><code>DB 0xff, 0x00, 0xf0</code></pre><p>使用编译器在CMD编译文件</p>\r\n<pre><code>..\\..\\tools\\nask.exe demo.nas demo</code></pre><p>其中....\\tools\\nask.exe是编译器存放的位置 demo.nas 是源文件 demo 是生成的文件，以上命令将在源文件所在目录生成一个编译后的文件，使用二进制查看生成的文件<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202255192680500.png\" alt=\"\"></p>\r\n<p>RESB指令是”reserve byte”的缩写，如果想要从现在的地址开始空出10个字节来，可以写成 RESB 10 (这里的10是十进制)</p>\r\n<pre><code>DB 0xff, 0x00, 0xf0\r\nRESB 10</code></pre><p>这里使用的NASM汇编器是《30天自制操作系统》书里提供的改版，所以RESB指定会不仅会空出字节，还会自动填充0x00数据<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202305279752467.png\" alt=\"\"></p>\r\n<h1 id=\"h1--img\"><a name=\"开始用汇编写操作系统.img\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>开始用汇编写操作系统.img</h1><p>新建 os.nas 文件，写入代码</p>\r\n<pre><code>; 这里和用二进制写的时候是一样的，都是往文件里面写入数据，从00000000开始\r\n    DB    0xeb, 0x4e, 0x90, 0x48, 0x45, 0x4c, 0x4c, 0x4f\r\n    DB    0x49, 0x50, 0x4c, 0x00, 0x02, 0x01, 0x01, 0x00\r\n    DB    0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00\r\n    DB    0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    DB    0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x29, 0xff\r\n    DB    0xff, 0xff, 0xff, 0x48, 0x45, 0x4c, 0x4c, 0x4f\r\n    DB    0x2d, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x46, 0x41\r\n    DB    0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x00, 0x00\r\n; 填充16个字节的0x00\r\n    RESB    16\r\n    DB    0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c\r\n    DB    0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a\r\n    DB    0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09\r\n    DB    0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb\r\n    DB    0xee, 0xf4, 0xeb, 0xfd, 0x0a, 0x0a, 0x68, 0x65\r\n    DB    0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72\r\n    DB    0x6c, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00\r\n; 填充368个字节的0x00\r\n    RESB    368\r\n    DB    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa\r\n    DB    0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n; 填充4600个字节的0x00\r\n    RESB    4600\r\n    DB    0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n; 填充1469432个字节的0x00\r\n    RESB    1469432</code></pre><p>和直接编译二进制文件一样，都是往指定的地址写入指定的数据，使用以上代码可以便捷的使用RESB指令填充0x00，编译源文件</p>\r\n<pre><code>..\\..\\tools\\nask.exe os.nas os.img</code></pre><p>查看编译生成的os.img文件<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202314336398719.png\" alt=\"\"><br>和用直接编辑二进制文件的数据是一样的，使用虚拟机测试运行编译生成的img文件。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202316322912822.png\" alt=\"\"><br>运行效果是一样。<br>源码地址 <a href=\"https://github.com/365D1/30OS.git\">https://github.com/365D1/30OS.git</a></p>\r\n', NULL, 0, 965, 0, '', 'a:4:{s:10:\"md_content\";s:3503:\"# 什么是NASM\r\nNASM全称The Netwide Assembler，是一款基于80x86和x86-64平台的汇编语言编译程序，其设计初衷是为了实现编译器程序跨平台和模块化的特性。NASM支持大量的文件格式，包括Linux，*BSD，a.out，ELF，COFF，Mach−O，Microsoft 16−bit OBJ，Win32以及Win64，同时也支持简单的二进制文件生成。它的语法被设计的简单易懂，相较Intel的语法更为简单，支持目前已知的所有x86架构之上的扩展语法，同时也拥有对宏命令的良好支持。\r\n也就是稍后我们的汇编代码要用这个编译器编译。\r\n# 学两个简单的汇编指令 DB 和 RESB\r\nDB指令是\"data byte\"的缩写，也就是直接往文件里写入1个字节的指令。\r\n简单练习一下，新建文件 demo.nas 写入代码\r\n```\r\nDB 0xff, 0x00, 0xf0\r\n```\r\n使用编译器在CMD编译文件\r\n```\r\n..\\..\\tools\\nask.exe demo.nas demo\r\n```\r\n其中..\\..\\tools\\nask.exe是编译器存放的位置 demo.nas 是源文件 demo 是生成的文件，以上命令将在源文件所在目录生成一个编译后的文件，使用二进制查看生成的文件\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202255192680500.png)\r\n\r\n\r\nRESB指令是\"reserve byte\"的缩写，如果想要从现在的地址开始空出10个字节来，可以写成 RESB 10 (这里的10是十进制)\r\n```\r\nDB 0xff, 0x00, 0xf0\r\nRESB 10\r\n```\r\n这里使用的NASM汇编器是《30天自制操作系统》书里提供的改版，所以RESB指定会不仅会空出字节，还会自动填充0x00数据\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202305279752467.png)\r\n\r\n# 开始用汇编写操作系统.img\r\n新建 os.nas 文件，写入代码\r\n```\r\n; 这里和用二进制写的时候是一样的，都是往文件里面写入数据，从00000000开始\r\n	DB	0xeb, 0x4e, 0x90, 0x48, 0x45, 0x4c, 0x4c, 0x4f\r\n	DB	0x49, 0x50, 0x4c, 0x00, 0x02, 0x01, 0x01, 0x00\r\n	DB	0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00\r\n	DB	0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00\r\n	DB	0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x29, 0xff\r\n	DB	0xff, 0xff, 0xff, 0x48, 0x45, 0x4c, 0x4c, 0x4f\r\n	DB	0x2d, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x46, 0x41\r\n	DB	0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x00, 0x00\r\n; 填充16个字节的0x00\r\n	RESB	16\r\n	DB	0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c\r\n	DB	0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a\r\n	DB	0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09\r\n	DB	0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb\r\n	DB	0xee, 0xf4, 0xeb, 0xfd, 0x0a, 0x0a, 0x68, 0x65\r\n	DB	0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72\r\n	DB	0x6c, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00\r\n; 填充368个字节的0x00\r\n	RESB	368\r\n	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa\r\n	DB	0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n; 填充4600个字节的0x00\r\n	RESB	4600\r\n	DB	0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n; 填充1469432个字节的0x00\r\n	RESB	1469432\r\n```\r\n和直接编译二进制文件一样，都是往指定的地址写入指定的数据，使用以上代码可以便捷的使用RESB指令填充0x00，编译源文件\r\n```\r\n..\\..\\tools\\nask.exe os.nas os.img\r\n```\r\n查看编译生成的os.img文件\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202314336398719.png)\r\n和用直接编辑二进制文件的数据是一样的，使用虚拟机测试运行编译生成的img文件。\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202316322912822.png)\r\n运行效果是一样。\r\n源码地址 https://github.com/365D1/30OS.git\";s:8:\"md_intro\";s:544:\"# 什么是NASM\r\nNASM全称The Netwide Assembler，是一款基于80x86和x86-64平台的汇编语言编译程序，其设计初衷是为了实现编译器程序跨平台和模块化的特性。NASM支持大量的文件格式，包括Linux，*BSD，a.out，ELF，COFF，Mach−O，Microsoft 16−bit OBJ，Win32以及Win64，同时也支持简单的二进制文件生成。它的语法被设计的简单易懂，相较Intel的语法更为简单，支持目前已知的所有x86架构之上的扩展语法，同时也拥有对宏<!--autointro-->\";s:15:\"os_wxapp_images\";s:263:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202255192680500.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202305279752467.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202314336398719.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903202316322912822.png\";s:21:\"os_wxapp_images_count\";i:4;}', '2019-04-21 22:23:53', 0),(47, 11, 1, '', 0, '', 0, 0, 'SCSS (四) | 运算', NULL, '<h1>111</h1><!--autointro-->', '<p>#111</p>\r\n', NULL, 0, 0, 0, '', 'a:2:{s:10:\"md_content\";s:4:\"#111\";s:8:\"md_intro\";s:20:\"#111<!--autointro-->\";}', '2019-04-21 22:23:53', 1),(48, 18, 1, '', 0, '', 0, 0, '自制操作系统（三）| 又用汇编写操作系统.img（稍微能阅读的版本）', NULL, '<h1>改写上次的代码</h1>\n<p>上次的代码几乎和用二进制的方式写IMG文件差不多，今天将把代码改写得稍微能阅读一点，先测试几个指令</p>\n<h2>DB指令写入字符串测试</h2>\n<pre><code>DB \"HELLOIPL\"</code></pre>\n<p>DB指令将字符串一个一个按字节写入文件，字符串8个字节，通过二进制查看48，45，4c...\n<img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222207122282692.png\" alt=\"\" />\n扩展一下，试着写一个中文字符串&quot;你好，世界</p><!--autointro-->', '<h1 id=\"h1-u6539u5199u4E0Au6B21u7684u4EE3u7801\"><a name=\"改写上次的代码\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>改写上次的代码</h1><p>上次的代码几乎和用二进制的方式写IMG文件差不多，今天将把代码改写得稍微能阅读一点，先测试几个指令</p>\r\n<h2 id=\"h2-db-\"><a name=\"DB指令写入字符串测试\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>DB指令写入字符串测试</h2><pre><code>DB &quot;HELLOIPL&quot;</code></pre><p>DB指令将字符串一个一个按字节写入文件，字符串8个字节，通过二进制查看48，45，4c…<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222207122282692.png\" alt=\"\"><br>扩展一下，试着写一个中文字符串”你好，世界”</p>\r\n<pre><code>DB &quot;你好&quot;</code></pre><p>一个中文文字占2个字节(ASCII码)，二进制查看，没毛病<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222215329728224.png\" alt=\"\"><br>一个中文文字占3个字节(UTF-8编码)，二进制查看，没毛病<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222218012641737.png\" alt=\"\"><br>一个中文文字占3个字节(Unicode编码)，不试了，notepad++没有Unicode编码，没毛病</p>\r\n<h2 id=\"h2-db-\"><a name=\"DB指令写入十进制数\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>DB指令写入十进制数</h2><pre><code>DB 1</code></pre><p>成功写入<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222254254712157.png\" alt=\"\"><br>尝试写入更大一点十进制数</p>\r\n<pre><code>DB 512</code></pre><p>!成功写入<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222255338169564.png\" alt=\"\"><br>DB是写入一个字节的，一个字节占8位，即使所有位都是1，11111111也就是十进制的255而已，如果有负数，范围就是十进制的-128~127，所以DB指令不能写入十进制的512，于是得使用另外的指令。</p>\r\n<h2 id=\"h2-dw-dd-\"><a name=\"DW指令和DD指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>DW指令和DD指令</h2><p><strong>DW指令是”data word”的缩写，word本意是”单词”，在汇编里word是2个字节，也就是16位的意思，DD指令是”data double-word”的缩写，”double-word”是32位的意思，也就是4个字节。</strong><br>使用DW指令写入十进制数512</p>\r\n<pre><code>DW 512</code></pre><p>成功写入<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222308276627394.png\" alt=\"\"><br>使用DD指令写入2880</p>\r\n<pre><code>DD 2880</code></pre><p>成功写入<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222310193459296.png\" alt=\"\"></p>\r\n<h2 id=\"h2--\"><a name=\"$ 符号\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>$ 符号</h2><p>最后，还有一个东西要尝试，<strong>符号 $ ，它是一个变量，它的值是当前的字节数</strong>，比如前面DD 2880，在文件写入了两个字节，这个时候$应该是2，测试一下</p>\r\n<pre><code>DD 2880\r\nRESB 16-$</code></pre><p>第一行指令DD 2880已经写入了两个字节，16-$，相当于16减去2，而RESB 14将空出14个字节，并自动填充0x00。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222320402232156.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u53EFu4EE5u5199u4EE3u7801u4E86\"><a name=\"可以写代码了\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>可以写代码了</h2><pre><code>; hello-os\r\n; TAB=4\r\n\r\n; 以下这段是标准FAT12格式软件专用的代码\r\n\r\n        DB        0xeb, 0x4e, 0x90\r\n        DB        &quot;HELLOIPL&quot;        ; 启动扇区的名称可以是任意的字符串（8字节）\r\n        DW        512                ; 每个扇区（sector）的大小（必须为512字节）\r\n        DB        1                ; 簇（cluster）的大小（必须为1个扇区）\r\n        DW        1                ; FAT的起始位置（一般从第一个扇区开始）\r\n        DB        2                ; FAT的个数（必须为2）\r\n        DW        224                ; 根目录的大小（一般设成224项）\r\n        DW        2880            ; 读磁盘的大小（必须是2880扇区）\r\n        DB        0xf0            ; 磁盘的种类（必须是0xf0）\r\n        DW        9                ; FAT的长度（必须是9扇区）\r\n        DW        18                ; 1个磁道（track）有几个扇区（必须是18）\r\n        DW        2                ; 磁头数（必须是2）\r\n        DD        0                ; 不使用分区，必须为\r\n        DD        2880            ; 重写一次磁盘大小\r\n        DB        0,0,0x29        ; 意义不明，固定\r\n        DD        0xffffffff        ; （可能是）卷标号码\r\n        DB        &quot;HELLO-OS   &quot;    ; 磁盘的名称（11字节）\r\n        DB        &quot;FAT12   &quot;        ; 磁盘格式名称（8字节）\r\n        RESB    18                ; 先空出18字节\r\n\r\n; 程序主体\r\n\r\n        DB        0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c\r\n        DB        0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a\r\n        DB        0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09\r\n        DB        0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb\r\n        DB        0xee, 0xf4, 0xeb, 0xfd\r\n\r\n; 信息显示部分\r\n\r\n        DB        0x0a, 0x0a        ; 2个换行\r\n        DB        &quot;hello, 365D1 OS&quot;\r\n        DB        0x0a            ; 换行\r\n        DB        0\r\n\r\n        RESB    0x1fe-$            ; 填写0x00,直到 0x001fe\r\n        DB        0x55, 0xaa\r\n\r\n; 以下是启动区以外部分的输出\r\n\r\n        DB        0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n        RESB    4600\r\n        DB        0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n        RESB    1469432</code></pre><p>这个编辑器显示有点乱，事实上是这样的<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222326437523081.png\" alt=\"\"><br><strong>启动区（boot sector）</strong><br>磁盘的第一个扇区成为启动区，计算机读写磁盘的时候，并不是一字节一字节的读写的，而是以512字节为一个单位进行读写的。因此，磁盘的512字节就是称为一个扇区。一张软盘的空间共有1440KB，也就是1474560字节，除以512得2880，这也就是说一张软盘共有2880个扇区。如何确定第一个扇区为启动区？计算机首先读入一个扇区的字节（512字节），然后去检查这个扇区<strong>最后2个字节</strong>的内容，如果最后两个字节不是 <strong>55 AA</strong>，则计算机会认为这张盘上没有启动程序，就会报不能启动的错误。如果最后两个字节正好是 55 AA，那么它就认为这个扇区的开头是启动程序，并开始执行这个程序。<br><strong>IPL</strong><br>initial program loader的缩写。启动程序加载器。启动区只有512字节，操作系统不会那么小，也不会装在启动区里，所以几乎所有的操作系统，都把<strong>加载操作系统本身的程序</strong>放在启动区里。有鉴于此，有时也将启动区称为IPL。启动区的名称一定要是<strong>8个字节</strong>。</p>\r\n', NULL, 0, 769, 0, '', 'a:4:{s:10:\"md_content\";s:5426:\"# 改写上次的代码\r\n上次的代码几乎和用二进制的方式写IMG文件差不多，今天将把代码改写得稍微能阅读一点，先测试几个指令\r\n## DB指令写入字符串测试\r\n```\r\nDB \"HELLOIPL\"\r\n```\r\nDB指令将字符串一个一个按字节写入文件，字符串8个字节，通过二进制查看48，45，4c...\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222207122282692.png)\r\n扩展一下，试着写一个中文字符串\"你好，世界\"\r\n```\r\nDB \"你好\"\r\n```\r\n一个中文文字占2个字节(ASCII码)，二进制查看，没毛病\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222215329728224.png)\r\n一个中文文字占3个字节(UTF-8编码)，二进制查看，没毛病\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222218012641737.png)\r\n一个中文文字占3个字节(Unicode编码)，不试了，notepad++没有Unicode编码，没毛病\r\n\r\n## DB指令写入十进制数\r\n```\r\nDB 1\r\n```\r\n成功写入\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222254254712157.png)\r\n尝试写入更大一点十进制数\r\n```\r\nDB 512\r\n```\r\n!成功写入\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222255338169564.png)\r\nDB是写入一个字节的，一个字节占8位，即使所有位都是1，11111111也就是十进制的255而已，如果有负数，范围就是十进制的-128~127，所以DB指令不能写入十进制的512，于是得使用另外的指令。\r\n## DW指令和DD指令\r\n**DW指令是\"data word\"的缩写，word本意是\"单词\"，在汇编里word是2个字节，也就是16位的意思，DD指令是\"data double-word\"的缩写，\"double-word\"是32位的意思，也就是4个字节。**\r\n使用DW指令写入十进制数512\r\n```\r\nDW 512\r\n```\r\n成功写入\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222308276627394.png)\r\n使用DD指令写入2880\r\n```\r\nDD 2880\r\n```\r\n成功写入\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222310193459296.png)\r\n## $ 符号\r\n最后，还有一个东西要尝试，**符号 $ ，它是一个变量，它的值是当前的字节数**，比如前面DD 2880，在文件写入了两个字节，这个时候$应该是2，测试一下\r\n```\r\nDD 2880\r\nRESB 16-$\r\n```\r\n第一行指令DD 2880已经写入了两个字节，16-$，相当于16减去2，而RESB 14将空出14个字节，并自动填充0x00。\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222320402232156.png)\r\n## 可以写代码了\r\n```\r\n; hello-os\r\n; TAB=4\r\n\r\n; 以下这段是标准FAT12格式软件专用的代码\r\n\r\n		DB		0xeb, 0x4e, 0x90\r\n		DB		\"HELLOIPL\"		; 启动扇区的名称可以是任意的字符串（8字节）\r\n		DW		512				; 每个扇区（sector）的大小（必须为512字节）\r\n		DB		1				; 簇（cluster）的大小（必须为1个扇区）\r\n		DW		1				; FAT的起始位置（一般从第一个扇区开始）\r\n		DB		2				; FAT的个数（必须为2）\r\n		DW		224				; 根目录的大小（一般设成224项）\r\n		DW		2880			; 读磁盘的大小（必须是2880扇区）\r\n		DB		0xf0			; 磁盘的种类（必须是0xf0）\r\n		DW		9				; FAT的长度（必须是9扇区）\r\n		DW		18				; 1个磁道（track）有几个扇区（必须是18）\r\n		DW		2				; 磁头数（必须是2）\r\n		DD		0				; 不使用分区，必须为\r\n		DD		2880			; 重写一次磁盘大小\r\n		DB		0,0,0x29		; 意义不明，固定\r\n		DD		0xffffffff		; （可能是）卷标号码\r\n		DB		\"HELLO-OS   \"	; 磁盘的名称（11字节）\r\n		DB		\"FAT12   \"		; 磁盘格式名称（8字节）\r\n		RESB	18				; 先空出18字节\r\n\r\n; 程序主体\r\n\r\n		DB		0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c\r\n		DB		0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a\r\n		DB		0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09\r\n		DB		0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb\r\n		DB		0xee, 0xf4, 0xeb, 0xfd\r\n		\r\n; 信息显示部分\r\n\r\n		DB		0x0a, 0x0a		; 2个换行\r\n		DB		\"hello, 365D1 OS\"\r\n		DB		0x0a			; 换行\r\n		DB		0\r\n		\r\n		RESB	0x1fe-$			; 填写0x00,直到 0x001fe\r\n		DB		0x55, 0xaa\r\n\r\n; 以下是启动区以外部分的输出\r\n\r\n		DB		0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n		RESB	4600\r\n		DB		0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n		RESB	1469432\r\n```\r\n这个编辑器显示有点乱，事实上是这样的\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222326437523081.png)\r\n**启动区（boot sector）**\r\n磁盘的第一个扇区成为启动区，计算机读写磁盘的时候，并不是一字节一字节的读写的，而是以512字节为一个单位进行读写的。因此，磁盘的512字节就是称为一个扇区。一张软盘的空间共有1440KB，也就是1474560字节，除以512得2880，这也就是说一张软盘共有2880个扇区。如何确定第一个扇区为启动区？计算机首先读入一个扇区的字节（512字节），然后去检查这个扇区**最后2个字节**的内容，如果最后两个字节不是 **55 AA**，则计算机会认为这张盘上没有启动程序，就会报不能启动的错误。如果最后两个字节正好是 55 AA，那么它就认为这个扇区的开头是启动程序，并开始执行这个程序。\r\n**IPL**\r\ninitial program loader的缩写。启动程序加载器。启动区只有512字节，操作系统不会那么小，也不会装在启动区里，所以几乎所有的操作系统，都把**加载操作系统本身的程序**放在启动区里。有鉴于此，有时也将启动区称为IPL。启动区的名称一定要是**8个字节**。\";s:8:\"md_intro\";s:492:\"# 改写上次的代码\r\n上次的代码几乎和用二进制的方式写IMG文件差不多，今天将把代码改写得稍微能阅读一点，先测试几个指令\r\n## DB指令写入字符串测试\r\n```\r\nDB \"HELLOIPL\"\r\n```\r\nDB指令将字符串一个一个按字节写入文件，字符串8个字节，通过二进制查看48，45，4c...\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222207122282692.png)\r\n扩展一下，试着写一个中文字符串\"你好，世界<!--autointro-->\";s:15:\"os_wxapp_images\";s:593:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222207122282692.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222215329728224.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222218012641737.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222254254712157.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222255338169564.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222308276627394.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222310193459296.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222320402232156.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903222326437523081.png\";s:21:\"os_wxapp_images_count\";i:9;}', '2019-04-21 22:23:53', 0),(49, 18, 1, '', 0, '', 0, 0, '自制操作系统（四）| 双用汇编写操作系统（代码注释讲解）', NULL, '<h1>先写代码</h1>\n<pre><code>\n; hello-os\n; TAB=4\n\n        ORG     0x7c00          ; 指明程序的装载地址\n\n; 以下这段是标准FAT12格式软件专用的代码 \n\n        JMP     entry\n        DB      0x90\n        DB      \"HELLOIPL\"      ; 启动扇区的名称可以是任意的字符串（8字节）\n        DW      512             ; 每个扇区（sector）的大小（必须为512字节）\n        DB      1               ; 簇（cluster）的大小（必须为1个扇区）\n        DW  &lt;!--autointro--&gt;</code></pre><!--autointro-->', '<h1 id=\"h1-u5148u5199u4EE3u7801\"><a name=\"先写代码\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>先写代码</h1><pre><code>; hello-os\r\n; TAB=4\r\n\r\n        ORG     0x7c00            ; 指明程序的装载地址\r\n\r\n; 以下这段是标准FAT12格式软件专用的代码    \r\n\r\n        JMP        entry\r\n        DB        0x90\r\n        DB        &quot;HELLOIPL&quot;        ; 启动扇区的名称可以是任意的字符串（8字节）\r\n        DW        512                ; 每个扇区（sector）的大小（必须为512字节）\r\n        DB        1                ; 簇（cluster）的大小（必须为1个扇区）\r\n        DW        1                ; FAT的起始位置（一般从第一个扇区开始）\r\n        DB        2                ; FAT的个数（必须为2）\r\n        DW        224                ; 根目录的大小（一般设成224项）\r\n        DW        2880            ; 读磁盘的大小（必须是2880扇区）\r\n        DB        0xf0            ; 磁盘的种类（必须是0xf0）\r\n        DW        9                ; FAT的长度（必须是9扇区）\r\n        DW        18                ; 1个磁道（track）有几个扇区（必须是18）\r\n        DW        2                ; 磁头数（必须是2）\r\n        DD        0                ; 不使用分区，必须为\r\n        DD        2880            ; 重写一次磁盘大小\r\n        DB        0,0,0x29        ; 意义不明，固定\r\n        DD        0xffffffff        ; （可能是）卷标号码\r\n        DB        &quot;HELLO-OS   &quot;    ; 磁盘的名称（11字节）\r\n        DB        &quot;FAT12   &quot;        ; 磁盘格式名称（8字节）\r\n        RESB    18                ; 先空出18字节\r\n\r\n; 程序核心\r\n\r\nentry:\r\n        MOV        AX,0            ; 初始化寄存器\r\n        MOV        SS,AX\r\n        MOV        SP,0x7c00\r\n        MOV        DS,AX\r\n        MOV        ES,AX\r\n        MOV        SI,msg\r\nputloop:\r\n        MOV        AL,[SI]\r\n        ADD        SI,1            ; 给SI加1\r\n        CMP        AL,0\r\n        JE        fin\r\n        MOV        AH,0x0e            ; 显示一个文字\r\n        MOV        BX,15            ; 指定字符颜色\r\n        INT        0X10            ; 调用显卡BIOS\r\n        JMP        putloop\r\nfin:\r\n        HLT                        ; 让CPU停止，等待指令\r\n        JMP        fin                ; 无限循环\r\nmsg:\r\n        DB        0x0a,0x0a        ; 换行两次\r\n        DB        &quot;hello,world&quot;\r\n        DB        0x0a            ; 换行\r\n        DB        0\r\n        RESB    0x7dfe-$\r\n        DB        0x55,0xaa\r\n\r\n; 以下是启动区以外部分的输出\r\n\r\n        DB        0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n        RESB    4600\r\n        DB        0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n        RESB    1469432</code></pre><p>国际惯例，编译并运行</p>\r\n<pre><code>..\\..\\tools\\nask.exe os.nas os.img\r\ncopy os.img ..\\..\\tools\\qemu\\fdimage0.bin\r\n..\\..\\tools\\make.exe -C ../../tools/qemu</code></pre><p>成功输出<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903262309186724587.png\" alt=\"\"></p>\r\n<h1 id=\"h1-u77E5u8BC6u70B9u8BB2u89E3\"><a name=\"知识点讲解\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>知识点讲解</h1><h2 id=\"h2-org-\"><a name=\"ORG指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>ORG指令</h2><p>汇编语言源程序中若没有ORG伪指令，则程序执行时，指令代码被放到自由内存空间的CS:0处；若有ORG伪指令，编译器则把其后的指令代码放到ORG伪指令指定的偏移地址。两个ORG伪指令之间，除了指令代码，若有自由空间，则用0填充。</p>\r\n<h2 id=\"h2-jmp-\"><a name=\"JMP指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JMP指令</h2><p>相当于C语言的goto语句。</p>\r\n<h2 id=\"h2-u6807u7B7Eu58F0u660E\"><a name=\"标签声明\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>标签声明</h2><p>用于JMP指令跳转的目的地等。</p>\r\n<h2 id=\"h2-mov-\"><a name=\"MOV指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>MOV指令</h2><p>相当于C语言里的赋值，例如 MOV AX,0 相当于寄存器AX赋值0；MOV BX，AX 将AX寄存器的值赋值给BX寄存器，但是AX的值还是存在的依旧是0，不会因为MOV就没有了；MOV AL,[SI] MOV指令的数据传送源和传送目的不仅可以是常数或寄存器，也可以是内存地址，内存地址用[]括起来；MOV BYTE [678],123 例如我们指定了数据大小BYTE，那么使用的存储单元就是地址所指定的字节，如果我们使用WORD，则相邻的一个字节也会成为这个指令的操作对象。MOV指令有一个规则，就是源数据和目的数据必须位数相同，也就是说，能向AL里带入的就只有BYTE,可以省略不写BYTE，例如 MOV AL,[SI]。</p>\r\n<h2 id=\"h2-u4EC0u4E48u662Fu5BC4u5B58u5668\"><a name=\"什么是寄存器\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>什么是寄存器</h2><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903262310107647379.png\" alt=\"\"><br>寄存器是一种存储电路，是CPU计算的重要部件。寄存器的名称：</p>\r\n<ul>\r\n<li>AX accumulator，累加寄存器</li><li>CX counter，计数寄存器</li><li>DX data，数据寄存器</li><li>BX base，基址寄存器</li><li>SP stack pointer，栈指针寄存器</li><li>BP base pointer，基址指针寄存器</li><li>SI source index，源变址寄存器</li><li>DI destination index，目的变址寄存器</li></ul>\r\n<p>这些寄存器都是<strong>16位</strong>的，因此可以存储16位的二进制数。其中AX，CX，DX，BX有可以分为两个8位寄存器组成，称为高8位和低8位。</p>\r\n<ul>\r\n<li>AL 累加寄存器低位</li><li>CL 计数寄存器低位</li><li>DL 数据寄存器低位</li><li>BL 基址寄存器低位</li><li>AH 累加寄存器高位</li><li>CH 计数寄存器高位</li><li>DH 数据寄存器高位</li><li>BH 基址寄存器高位</li></ul>\r\n<h2 id=\"h2-add-\"><a name=\"ADD指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>ADD指令</h2><p>加法指令。ADD SI,1 类似C语言的 SI = SI + 1 。</p>\r\n<h2 id=\"h2-cmp-\"><a name=\"CMP指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>CMP指令</h2><p>CMP是对比指令，CMP AL,0 意思是用AL中的值和0比较。</p>\r\n<h2 id=\"h2-je-\"><a name=\"JE指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JE指令</h2><p>JE指令是条件跳转指令之一。所谓条件跳转指令，就是根据比较的结果决定跳转或不跳转。如不跳转就继续执行下一条指令。</p>\r\n<pre><code>CMP AL,0\r\nJE fin</code></pre><p>相当于</p>\r\n<pre><code>if(AL == 0){\r\n    goto fin;\r\n}</code></pre><h2 id=\"h2-bios-\"><a name=\"BIOS程序\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>BIOS程序</h2><p>出厂时候就组装在电脑主板上的ROM单元里。在BIOS中预先写入了一些指令，提供程序猿调用，调用的使用使用INT指令调用，例如INT 0x10。</p>\r\n<h2 id=\"h2-u663Eu793Au4E00u4E2Au5B57u7B26\"><a name=\"显示一个字符\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>显示一个字符</h2><p>AH=0x0e<br>AL=character code<br>BH=0<br>BL=color code<br>需要显示一个字符的时候，先将以上寄存器存入相应的值，在调用INT 0x10，就可以在屏幕上显示出一个字符来了。</p>\r\n<h2 id=\"h2-hlt-\"><a name=\"HLT指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>HLT指令</h2><p>HLT是让CPU停止动作的指令，进入待机状态，只要外部发送变化，例如移动鼠标，键盘输入等，CPU就会醒过来，继续执行指令，如果没有HLT指令，CPU就会不停的全力执行JMP指令，这会使得CPU的负荷达到100%，浪费资源。</p>\r\n', NULL, 0, 459, 0, '', 'a:4:{s:10:\"md_content\";s:5345:\"# 先写代码\r\n```\r\n; hello-os\r\n; TAB=4\r\n\r\n		ORG 	0x7c00			; 指明程序的装载地址\r\n		\r\n; 以下这段是标准FAT12格式软件专用的代码	\r\n\r\n		JMP		entry\r\n		DB		0x90\r\n		DB		\"HELLOIPL\"		; 启动扇区的名称可以是任意的字符串（8字节）\r\n		DW		512				; 每个扇区（sector）的大小（必须为512字节）\r\n		DB		1				; 簇（cluster）的大小（必须为1个扇区）\r\n		DW		1				; FAT的起始位置（一般从第一个扇区开始）\r\n		DB		2				; FAT的个数（必须为2）\r\n		DW		224				; 根目录的大小（一般设成224项）\r\n		DW		2880			; 读磁盘的大小（必须是2880扇区）\r\n		DB		0xf0			; 磁盘的种类（必须是0xf0）\r\n		DW		9				; FAT的长度（必须是9扇区）\r\n		DW		18				; 1个磁道（track）有几个扇区（必须是18）\r\n		DW		2				; 磁头数（必须是2）\r\n		DD		0				; 不使用分区，必须为\r\n		DD		2880			; 重写一次磁盘大小\r\n		DB		0,0,0x29		; 意义不明，固定\r\n		DD		0xffffffff		; （可能是）卷标号码\r\n		DB		\"HELLO-OS   \"	; 磁盘的名称（11字节）\r\n		DB		\"FAT12   \"		; 磁盘格式名称（8字节）\r\n		RESB	18				; 先空出18字节\r\n		\r\n; 程序核心\r\n	\r\nentry:\r\n		MOV		AX,0			; 初始化寄存器\r\n		MOV		SS,AX\r\n		MOV		SP,0x7c00\r\n		MOV		DS,AX\r\n		MOV		ES,AX\r\n		MOV		SI,msg\r\nputloop:\r\n		MOV		AL,[SI]\r\n		ADD		SI,1			; 给SI加1\r\n		CMP		AL,0\r\n		JE		fin\r\n		MOV		AH,0x0e			; 显示一个文字\r\n		MOV		BX,15			; 指定字符颜色\r\n		INT		0X10			; 调用显卡BIOS\r\n		JMP		putloop\r\nfin:\r\n		HLT						; 让CPU停止，等待指令\r\n		JMP		fin				; 无限循环\r\nmsg:\r\n		DB		0x0a,0x0a		; 换行两次\r\n		DB		\"hello,world\"\r\n		DB		0x0a			; 换行\r\n		DB		0\r\n		RESB	0x7dfe-$\r\n		DB		0x55,0xaa\r\n		\r\n; 以下是启动区以外部分的输出\r\n\r\n		DB		0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n		RESB	4600\r\n		DB		0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00\r\n		RESB	1469432\r\n```\r\n国际惯例，编译并运行\r\n```\r\n..\\..\\tools\\nask.exe os.nas os.img\r\ncopy os.img ..\\..\\tools\\qemu\\fdimage0.bin\r\n..\\..\\tools\\make.exe -C ../../tools/qemu\r\n```\r\n成功输出\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903262309186724587.png)\r\n# 知识点讲解\r\n## ORG指令\r\n汇编语言源程序中若没有ORG伪指令，则程序执行时，指令代码被放到自由内存空间的CS:0处；若有ORG伪指令，编译器则把其后的指令代码放到ORG伪指令指定的偏移地址。两个ORG伪指令之间，除了指令代码，若有自由空间，则用0填充。\r\n## JMP指令\r\n相当于C语言的goto语句。\r\n## 标签声明\r\n用于JMP指令跳转的目的地等。\r\n## MOV指令\r\n相当于C语言里的赋值，例如 MOV AX,0 相当于寄存器AX赋值0；MOV BX，AX 将AX寄存器的值赋值给BX寄存器，但是AX的值还是存在的依旧是0，不会因为MOV就没有了；MOV AL,[SI] MOV指令的数据传送源和传送目的不仅可以是常数或寄存器，也可以是内存地址，内存地址用[]括起来；MOV BYTE [678],123 例如我们指定了数据大小BYTE，那么使用的存储单元就是地址所指定的字节，如果我们使用WORD，则相邻的一个字节也会成为这个指令的操作对象。MOV指令有一个规则，就是源数据和目的数据必须位数相同，也就是说，能向AL里带入的就只有BYTE,可以省略不写BYTE，例如 MOV AL,[SI]。\r\n## 什么是寄存器\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903262310107647379.png)\r\n寄存器是一种存储电路，是CPU计算的重要部件。寄存器的名称：\r\n- AX accumulator，累加寄存器\r\n- CX counter，计数寄存器\r\n- DX data，数据寄存器\r\n- BX base，基址寄存器\r\n- SP stack pointer，栈指针寄存器\r\n- BP base pointer，基址指针寄存器\r\n- SI source index，源变址寄存器\r\n- DI destination index，目的变址寄存器\r\n\r\n这些寄存器都是**16位**的，因此可以存储16位的二进制数。其中AX，CX，DX，BX有可以分为两个8位寄存器组成，称为高8位和低8位。\r\n\r\n- AL 累加寄存器低位\r\n- CL 计数寄存器低位\r\n- DL 数据寄存器低位\r\n- BL 基址寄存器低位\r\n- AH 累加寄存器高位\r\n- CH 计数寄存器高位\r\n- DH 数据寄存器高位\r\n- BH 基址寄存器高位\r\n\r\n## ADD指令\r\n加法指令。ADD SI,1 类似C语言的 SI = SI + 1 。\r\n## CMP指令\r\nCMP是对比指令，CMP AL,0 意思是用AL中的值和0比较。\r\n## JE指令\r\nJE指令是条件跳转指令之一。所谓条件跳转指令，就是根据比较的结果决定跳转或不跳转。如不跳转就继续执行下一条指令。\r\n```\r\nCMP AL,0\r\nJE fin\r\n```\r\n相当于\r\n```\r\nif(AL == 0){\r\n	goto fin;\r\n}\r\n```\r\n## BIOS程序\r\n出厂时候就组装在电脑主板上的ROM单元里。在BIOS中预先写入了一些指令，提供程序猿调用，调用的使用使用INT指令调用，例如INT 0x10。\r\n## 显示一个字符\r\nAH=0x0e\r\nAL=character code\r\nBH=0\r\nBL=color code\r\n需要显示一个字符的时候，先将以上寄存器存入相应的值，在调用INT 0x10，就可以在屏幕上显示出一个字符来了。\r\n## HLT指令\r\nHLT是让CPU停止动作的指令，进入待机状态，只要外部发送变化，例如移动鼠标，键盘输入等，CPU就会醒过来，继续执行指令，如果没有HLT指令，CPU就会不停的全力执行JMP指令，这会使得CPU的负荷达到100%，浪费资源。\";s:8:\"md_intro\";s:424:\"# 先写代码\r\n```\r\n; hello-os\r\n; TAB=4\r\n\r\n		ORG 	0x7c00			; 指明程序的装载地址\r\n		\r\n; 以下这段是标准FAT12格式软件专用的代码	\r\n\r\n		JMP		entry\r\n		DB		0x90\r\n		DB		\"HELLOIPL\"		; 启动扇区的名称可以是任意的字符串（8字节）\r\n		DW		512				; 每个扇区（sector）的大小（必须为512字节）\r\n		DB		1				; 簇（cluster）的大小（必须为1个扇区）\r\n		DW	<!--autointro-->\";s:15:\"os_wxapp_images\";s:131:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903262309186724587.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903262310107647379.png\";s:21:\"os_wxapp_images_count\";i:2;}', '2019-04-21 22:23:53', 0),(50, 18, 1, '', 0, '', 0, 0, '自制操作系统（五）| 先制作启动区', NULL, '<p>首先我们把代码后半部分删掉，因为启动区只需要512字节，代码如下</p>\n<pre><code>\n; hello-os\n; TAB=4\n\n        ORG     0x7c00          ; 指明程序的装载地址\n\n; 以下这段是标准FAT12格式软件专用的代码 \n\n        JMP     entry\n        DB      0x90\n        DB      \"HELLOIPL\"      ; 启动扇区的名称可以是任意的字符串（8字节）\n        DW      512             ; 每个扇区（sector）的大小（必须为512字节）\n        DB      1               ; 簇（c&lt;!--autointro--&gt;</code></pre><!--autointro-->', '<p>首先我们把代码后半部分删掉，因为启动区只需要512字节，代码如下</p>\r\n<pre><code>; hello-os\r\n; TAB=4\r\n\r\n        ORG     0x7c00            ; 指明程序的装载地址\r\n\r\n; 以下这段是标准FAT12格式软件专用的代码    \r\n\r\n        JMP        entry\r\n        DB        0x90\r\n        DB        &quot;HELLOIPL&quot;        ; 启动扇区的名称可以是任意的字符串（8字节）\r\n        DW        512                ; 每个扇区（sector）的大小（必须为512字节）\r\n        DB        1                ; 簇（cluster）的大小（必须为1个扇区）\r\n        DW        1                ; FAT的起始位置（一般从第一个扇区开始）\r\n        DB        2                ; FAT的个数（必须为2）\r\n        DW        224                ; 根目录的大小（一般设成224项）\r\n        DW        2880            ; 读磁盘的大小（必须是2880扇区）\r\n        DB        0xf0            ; 磁盘的种类（必须是0xf0）\r\n        DW        9                ; FAT的长度（必须是9扇区）\r\n        DW        18                ; 1个磁道（track）有几个扇区（必须是18）\r\n        DW        2                ; 磁头数（必须是2）\r\n        DD        0                ; 不使用分区，必须为\r\n        DD        2880            ; 重写一次磁盘大小\r\n        DB        0,0,0x29        ; 意义不明，固定\r\n        DD        0xffffffff        ; （可能是）卷标号码\r\n        DB        &quot;HELLO-OS   &quot;    ; 磁盘的名称（11字节）\r\n        DB        &quot;FAT12   &quot;        ; 磁盘格式名称（8字节）\r\n        RESB    18                ; 先空出18字节\r\n\r\n; 程序核心\r\n\r\nentry:\r\n        MOV        AX,0            ; 初始化寄存器\r\n        MOV        SS,AX\r\n        MOV        SP,0x7c00\r\n        MOV        DS,AX\r\n        MOV        ES,AX\r\n        MOV        SI,msg\r\nputloop:\r\n        MOV        AL,[SI]\r\n        ADD        SI,1            ; 给SI加1\r\n        CMP        AL,0\r\n        JE        fin\r\n        MOV        AH,0x0e            ; 显示一个文字\r\n        MOV        BX,15            ; 指定字符颜色\r\n        INT        0X10            ; 调用显卡BIOS\r\n        JMP        putloop\r\nfin:\r\n        HLT                        ; 让CPU停止，等待指令\r\n        JMP        fin                ; 无限循环\r\nmsg:\r\n        DB        0x0a,0x0a        ; 换行两次\r\n        DB        &quot;hello,world&quot;\r\n        DB        0x0a            ; 换行\r\n        DB        0\r\n        RESB    0x7dfe-$\r\n        DB        0x55,0xaa</code></pre><p>在编译过程中直接编译成磁盘映像文件，之前过程中没有输出任何文件，现在将输出.lst（列表文件）和.bin文件（二进制），修改编译的（asm.bat）批处理命令为</p>\r\n<pre><code>..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst</code></pre><p>增加输出ipl.bin和ipl.lst，测试编译<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311942549224815.png\" alt=\"\"><br>关于ipl.lst的内容，lst列表文件可以用来简单的确认每个指令是怎样翻译成机器语言的。使用文本编辑器打开查看它的内容<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311946425878014.png\" alt=\"\"><br>关于ipl.bin的内容，bin二进制文件就是编译后的二进制文件了。可以使用二进制编辑器查看他的内容<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311948168818411.png\" alt=\"\"></p>\r\n', NULL, 0, 403, 0, '', 'a:4:{s:10:\"md_content\";s:2614:\"首先我们把代码后半部分删掉，因为启动区只需要512字节，代码如下\r\n```\r\n; hello-os\r\n; TAB=4\r\n\r\n		ORG 	0x7c00			; 指明程序的装载地址\r\n		\r\n; 以下这段是标准FAT12格式软件专用的代码	\r\n\r\n		JMP		entry\r\n		DB		0x90\r\n		DB		\"HELLOIPL\"		; 启动扇区的名称可以是任意的字符串（8字节）\r\n		DW		512				; 每个扇区（sector）的大小（必须为512字节）\r\n		DB		1				; 簇（cluster）的大小（必须为1个扇区）\r\n		DW		1				; FAT的起始位置（一般从第一个扇区开始）\r\n		DB		2				; FAT的个数（必须为2）\r\n		DW		224				; 根目录的大小（一般设成224项）\r\n		DW		2880			; 读磁盘的大小（必须是2880扇区）\r\n		DB		0xf0			; 磁盘的种类（必须是0xf0）\r\n		DW		9				; FAT的长度（必须是9扇区）\r\n		DW		18				; 1个磁道（track）有几个扇区（必须是18）\r\n		DW		2				; 磁头数（必须是2）\r\n		DD		0				; 不使用分区，必须为\r\n		DD		2880			; 重写一次磁盘大小\r\n		DB		0,0,0x29		; 意义不明，固定\r\n		DD		0xffffffff		; （可能是）卷标号码\r\n		DB		\"HELLO-OS   \"	; 磁盘的名称（11字节）\r\n		DB		\"FAT12   \"		; 磁盘格式名称（8字节）\r\n		RESB	18				; 先空出18字节\r\n		\r\n; 程序核心\r\n	\r\nentry:\r\n		MOV		AX,0			; 初始化寄存器\r\n		MOV		SS,AX\r\n		MOV		SP,0x7c00\r\n		MOV		DS,AX\r\n		MOV		ES,AX\r\n		MOV		SI,msg\r\nputloop:\r\n		MOV		AL,[SI]\r\n		ADD		SI,1			; 给SI加1\r\n		CMP		AL,0\r\n		JE		fin\r\n		MOV		AH,0x0e			; 显示一个文字\r\n		MOV		BX,15			; 指定字符颜色\r\n		INT		0X10			; 调用显卡BIOS\r\n		JMP		putloop\r\nfin:\r\n		HLT						; 让CPU停止，等待指令\r\n		JMP		fin				; 无限循环\r\nmsg:\r\n		DB		0x0a,0x0a		; 换行两次\r\n		DB		\"hello,world\"\r\n		DB		0x0a			; 换行\r\n		DB		0\r\n		RESB	0x7dfe-$\r\n		DB		0x55,0xaa\r\n```\r\n在编译过程中直接编译成磁盘映像文件，之前过程中没有输出任何文件，现在将输出.lst（列表文件）和.bin文件（二进制），修改编译的（asm.bat）批处理命令为\r\n```\r\n..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst\r\n```\r\n增加输出ipl.bin和ipl.lst，测试编译\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311942549224815.png)\r\n关于ipl.lst的内容，lst列表文件可以用来简单的确认每个指令是怎样翻译成机器语言的。使用文本编辑器打开查看它的内容\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311946425878014.png)\r\n关于ipl.bin的内容，bin二进制文件就是编译后的二进制文件了。可以使用二进制编辑器查看他的内容\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311948168818411.png)\r\n\r\n\r\n\";s:8:\"md_intro\";s:450:\"首先我们把代码后半部分删掉，因为启动区只需要512字节，代码如下\r\n```\r\n; hello-os\r\n; TAB=4\r\n\r\n		ORG 	0x7c00			; 指明程序的装载地址\r\n		\r\n; 以下这段是标准FAT12格式软件专用的代码	\r\n\r\n		JMP		entry\r\n		DB		0x90\r\n		DB		\"HELLOIPL\"		; 启动扇区的名称可以是任意的字符串（8字节）\r\n		DW		512				; 每个扇区（sector）的大小（必须为512字节）\r\n		DB		1				; 簇（c<!--autointro-->\";s:15:\"os_wxapp_images\";s:197:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311942549224815.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311946425878014.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903311948168818411.png\";s:21:\"os_wxapp_images_count\";i:3;}', '2019-04-21 22:23:53', 0),(51, 18, 1, '', 0, '', 0, 0, '自制操作系统（六）| 使用Makefile执行编译计划', NULL, '<h1>Makefile基本入门</h1>\n<p>要新建Makefile很简单，直接新建一个不带任何后缀的文件，命名为Makefile即可，写入如下代码</p>\n<pre><code>ipl.bin : ipl.nas Makefile\n    ..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst</code></pre>\n<p>第一行代码的意思是，如果想要制作ipl.bin文件，就检查ipl.nas和Makefile文件是否存在，因为ipl.bin文件是基于这两个文件生成的，如果两个文件都准备好了，Make工具就会执</p><!--autointro-->', '<h1 id=\"h1-makefile-\"><a name=\"Makefile基本入门\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Makefile基本入门</h1><p>要新建Makefile很简单，直接新建一个不带任何后缀的文件，命名为Makefile即可，写入如下代码</p>\r\n<pre><code>ipl.bin : ipl.nas Makefile\r\n    ..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst</code></pre><p>第一行代码的意思是，如果想要制作ipl.bin文件，就检查ipl.nas和Makefile文件是否存在，因为ipl.bin文件是基于这两个文件生成的，如果两个文件都准备好了，Make工具就会执行下一行代码。</p>\r\n<h2 id=\"h2-makefile-\"><a name=\"Makefile默认规则\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>Makefile默认规则</h2><pre><code>default :\r\n    ..\\..\\tools\\make.exe -r ipl.bin\r\nipl.bin : ipl.nas Makefile\r\n    ..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst</code></pre><p>配置默认指令，在使用控制台中不必要输入指定的规则，直接执行make即可。</p>\r\n<h2 id=\"h2--makefile-\"><a name=\"完整的Makefile文件\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>完整的Makefile文件</h2><pre><code>default :\r\n    ../../tools/make.exe run\r\n\r\n# 生成二进制文件和列表文件\r\nipl.bin : ipl.nas Makefile\r\n    ../../tools/nask.exe ipl.nas ipl.bin ipl.lst\r\n\r\n# 生成磁盘映像文件\r\nos.img : ipl.bin Makefile\r\n    ../../tools/edimg.exe imgin:../../tools/fdimg0at.tek \\\r\n    wbinimg src:ipl.bin len:512 from:0 to:0 imgout:os.img\r\n\r\n# 命令\r\n\r\nasm : \r\n    ../../tools/make.exe -r ipl.bin\r\n\r\nimg :\r\n    ../../tools/make.exe -r os.img\r\n\r\nrun :\r\n    ../../tools/make.exe img\r\n    copy os.img ..\\..\\tools\\qemu\\fdimage0.bin\r\n    ../../tools/make.exe -C ../../tools/qemu\r\n\r\ninstall :\r\n    ../../tools/make.exe img\r\n    ../../tools/imgtol.com w a: os.img\r\n\r\nclean :\r\n    -del ipl.bin\r\n    -del ipl.lst</code></pre><h2 id=\"h2--makefile\"><a name=\"测试Makefile\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>测试Makefile</h2><p>写一个make.bat文件，Makefile中一共写了9个指令，这里需要写9个%X对应相应的指令</p>\r\n<pre><code>..\\..\\tools\\make.exe %1 %2 %3 %4 %5 %6 %7 %8 %9</code></pre><p>在打开CMD控制台，执行批处理文件。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903312119447404022.png\" alt=\"\"></p>\r\n', NULL, 0, 537, 0, '', 'a:4:{s:10:\"md_content\";s:1752:\"# Makefile基本入门\r\n要新建Makefile很简单，直接新建一个不带任何后缀的文件，命名为Makefile即可，写入如下代码\r\n```\r\nipl.bin : ipl.nas Makefile\r\n	..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst\r\n```\r\n第一行代码的意思是，如果想要制作ipl.bin文件，就检查ipl.nas和Makefile文件是否存在，因为ipl.bin文件是基于这两个文件生成的，如果两个文件都准备好了，Make工具就会执行下一行代码。\r\n\r\n## Makefile默认规则\r\n```\r\ndefault :\r\n	..\\..\\tools\\make.exe -r ipl.bin\r\nipl.bin : ipl.nas Makefile\r\n	..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst\r\n```\r\n配置默认指令，在使用控制台中不必要输入指定的规则，直接执行make即可。\r\n\r\n## 完整的Makefile文件\r\n```\r\ndefault :\r\n	../../tools/make.exe run\r\n\r\n# 生成二进制文件和列表文件\r\nipl.bin : ipl.nas Makefile\r\n	../../tools/nask.exe ipl.nas ipl.bin ipl.lst\r\n\r\n# 生成磁盘映像文件\r\nos.img : ipl.bin Makefile\r\n	../../tools/edimg.exe imgin:../../tools/fdimg0at.tek \\\r\n	wbinimg src:ipl.bin len:512 from:0 to:0 imgout:os.img\r\n\r\n# 命令\r\n\r\nasm : \r\n	../../tools/make.exe -r ipl.bin\r\n	\r\nimg :\r\n	../../tools/make.exe -r os.img\r\n	\r\nrun :\r\n	../../tools/make.exe img\r\n	copy os.img ..\\..\\tools\\qemu\\fdimage0.bin\r\n	../../tools/make.exe -C ../../tools/qemu\r\n	\r\ninstall :\r\n	../../tools/make.exe img\r\n	../../tools/imgtol.com w a: os.img\r\n	\r\nclean :\r\n	-del ipl.bin\r\n	-del ipl.lst\r\n```\r\n\r\n## 测试Makefile\r\n写一个make.bat文件，Makefile中一共写了9个指令，这里需要写9个%X对应相应的指令\r\n```\r\n..\\..\\tools\\make.exe %1 %2 %3 %4 %5 %6 %7 %8 %9\r\n```\r\n在打开CMD控制台，执行批处理文件。\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903312119447404022.png)\r\n\";s:8:\"md_intro\";s:470:\"# Makefile基本入门\r\n要新建Makefile很简单，直接新建一个不带任何后缀的文件，命名为Makefile即可，写入如下代码\r\n```\r\nipl.bin : ipl.nas Makefile\r\n	..\\..\\tools\\nask.exe ipl.nas ipl.bin ipl.lst\r\n```\r\n第一行代码的意思是，如果想要制作ipl.bin文件，就检查ipl.nas和Makefile文件是否存在，因为ipl.bin文件是基于这两个文件生成的，如果两个文件都准备好了，Make工具就会执<!--autointro-->\";s:15:\"os_wxapp_images\";s:65:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/03/201903312119447404022.png\";s:21:\"os_wxapp_images_count\";i:1;}', '2019-04-21 22:23:53', 0),(52, 18, 1, '', 0, '', 0, 0, '自制操作系统（七）| 制作真正的IPL', NULL, '<p>到目前为止，计算机读取了磁盘的第一个扇区（引导扇区），但是，我们的操作系统不可能小到可以存在在启动扇区里，于是我们则需要让计算机从磁盘上多读取一些数据（扇区）到内存中。</p>\n<h1>尝试多读取一个扇区</h1>\n<p>修改上次的代码，加入如图代码，这些代码主要为了调用BIOS函数读盘。\n<img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020208219939216.png\" alt=\"\" />\n调用BIOS INT 0x13函数读取磁盘的1个区（第二个扇区），如果读取</p><!--autointro-->', '<p>到目前为止，计算机读取了磁盘的第一个扇区（引导扇区），但是，我们的操作系统不可能小到可以存在在启动扇区里，于是我们则需要让计算机从磁盘上多读取一些数据（扇区）到内存中。</p>\r\n<h1 id=\"h1-u5C1Du8BD5u591Au8BFBu53D6u4E00u4E2Au6247u533A\"><a name=\"尝试多读取一个扇区\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>尝试多读取一个扇区</h1><p>修改上次的代码，加入如图代码，这些代码主要为了调用BIOS函数读盘。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020208219939216.png\" alt=\"\"><br>调用BIOS INT 0x13函数读取磁盘的1个区（第二个扇区），如果读取错误，则跳转到error。<br>含有IPL的启动区，位于C0-H0-S1（柱面0，磁头0，扇区1的缩写），下一个扇区是C0-H0-S2，这个是我们这次要装载的扇区。</p>\r\n<h2 id=\"h2-jc-\"><a name=\"JC指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JC指令</h2><p>是jump if carry的缩写，意思是如果进位标志（carry flag）是1的话，就跳转。</p>\r\n<h2 id=\"h2-u8FDBu4F4Du6807u5FD7\"><a name=\"进位标志\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>进位标志</h2><p>是一个只能存储1位二进制数的寄存器。它位于EFLAGS寄存器的第0位。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020214294622212.png\" alt=\"\"></p>\r\n<h2 id=\"h2-bios-13-int-0x13\"><a name=\"BIOS第13号函数 INT 0x13\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>BIOS第13号函数 INT 0x13</h2><p>磁盘读、写，扇区效验（verify），以及寻道（seek）</p>\r\n<ul>\r\n<li>AH=0x02; (读盘)</li><li>AH=0x03;（写盘）</li><li>AH=0x04;（效验）</li><li>AH=0x0c;（寻道）</li><li>AL=处理对象的扇区数;（只能同时处理连续的扇区）</li><li>CH=柱面号 &0xff;</li><li>CL=扇区号（0-5位）|（柱面号&amp;0x300）&gt;&gt; 2</li><li>DH=磁头号;</li><li>DL=驱动器号;</li><li>ES:BX=缓存区地址;（效验及寻道不使用）</li><li>返回值</li><li>FLAGS.CF=0;没有错误，AH=0</li><li>FLAGS.CF=1;有错误，错误号码存入AH内（与重置’rest’功能一样）</li></ul>\r\n<h2 id=\"h2-u7F13u51B2u533Au5730u5740\"><a name=\"缓冲区地址\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>缓冲区地址</h2><p>这是一个内存地址，表示我们从磁盘上读取的数据装载到内存的哪一个位置。在指定内存地址的时候，可以使用段寄存器，我们使用段寄存器时，以ES:BX这种方式表示地址，写成MOV AL,[ES:BX]，它代表ES<em>16+BX的内存地址。我们可以把它理解成先用ES寄存器指定一个大概的位置，然后再用BX来指定其中一个具体的位置。但实际上不管我们*</em>指定什么地址<strong>，都</strong>必须同时指定段寄存器**，这是规定。<br>例如，MOV AL,[SI]其实是MOV AL,[DS:SI]，DS:可以省略，省略的话就是使用DS段寄存器。</p>\r\n', NULL, 0, 508, 0, '', 'a:4:{s:10:\"md_content\";s:2232:\"到目前为止，计算机读取了磁盘的第一个扇区（引导扇区），但是，我们的操作系统不可能小到可以存在在启动扇区里，于是我们则需要让计算机从磁盘上多读取一些数据（扇区）到内存中。\r\n# 尝试多读取一个扇区\r\n修改上次的代码，加入如图代码，这些代码主要为了调用BIOS函数读盘。\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020208219939216.png)\r\n调用BIOS INT 0x13函数读取磁盘的1个区（第二个扇区），如果读取错误，则跳转到error。\r\n含有IPL的启动区，位于C0-H0-S1（柱面0，磁头0，扇区1的缩写），下一个扇区是C0-H0-S2，这个是我们这次要装载的扇区。\r\n\r\n## JC指令\r\n是jump if carry的缩写，意思是如果进位标志（carry flag）是1的话，就跳转。\r\n\r\n## 进位标志\r\n是一个只能存储1位二进制数的寄存器。它位于EFLAGS寄存器的第0位。\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020214294622212.png)\r\n\r\n## BIOS第13号函数 INT 0x13\r\n磁盘读、写，扇区效验（verify），以及寻道（seek）\r\n- AH=0x02; (读盘)\r\n- AH=0x03;（写盘）\r\n- AH=0x04;（效验）\r\n- AH=0x0c;（寻道）\r\n- AL=处理对象的扇区数;（只能同时处理连续的扇区）\r\n- CH=柱面号 &0xff;\r\n- CL=扇区号（0-5位）|（柱面号&0x300）>> 2\r\n- DH=磁头号;\r\n- DL=驱动器号;\r\n- ES:BX=缓存区地址;（效验及寻道不使用）\r\n- 返回值\r\n- FLAGS.CF=0;没有错误，AH=0\r\n- FLAGS.CF=1;有错误，错误号码存入AH内（与重置\'rest\'功能一样）\r\n\r\n## 缓冲区地址\r\n这是一个内存地址，表示我们从磁盘上读取的数据装载到内存的哪一个位置。在指定内存地址的时候，可以使用段寄存器，我们使用段寄存器时，以ES:BX这种方式表示地址，写成MOV AL,[ES:BX]，它代表ES*16+BX的内存地址。我们可以把它理解成先用ES寄存器指定一个大概的位置，然后再用BX来指定其中一个具体的位置。但实际上不管我们**指定什么地址**，都**必须同时指定段寄存器**，这是规定。\r\n例如，MOV AL,[SI]其实是MOV AL,[DS:SI]，DS:可以省略，省略的话就是使用DS段寄存器。\r\n\";s:8:\"md_intro\";s:552:\"到目前为止，计算机读取了磁盘的第一个扇区（引导扇区），但是，我们的操作系统不可能小到可以存在在启动扇区里，于是我们则需要让计算机从磁盘上多读取一些数据（扇区）到内存中。\r\n# 尝试多读取一个扇区\r\n修改上次的代码，加入如图代码，这些代码主要为了调用BIOS函数读盘。\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020208219939216.png)\r\n调用BIOS INT 0x13函数读取磁盘的1个区（第二个扇区），如果读取<!--autointro-->\";s:15:\"os_wxapp_images\";s:131:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020208219939216.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020214294622212.png\";s:21:\"os_wxapp_images_count\";i:2;}', '2019-04-21 22:23:53', 0),(53, 18, 1, '', 0, '', 0, 0, '自制操作系统（八）| 读取磁盘出错重试和读取更多内容', NULL, '<h1>读取出错重试</h1>\n<p>磁盘读取的有时候会出错，而程序应该尝试多重试几次，例如重试5次，如果5次都失败，则认为是真的读取错误了。加入重试读取代码</p>\n<pre><code>\n        MOV     SI,0            ; 记录失败次数的寄存器\nretry:      \n        MOV     AH,0X02         ; AH=0x02 : 读盘\n        MOV     AL,1            ; 1个扇区\n        MOV     BX,0            \n        MOV     DL,0x00         ; A驱动器\n        INT     0X13            ; 调用磁盘BIOS\n        JNC     fin         &lt;!--autointro--&gt;</code></pre><!--autointro-->', '<h1 id=\"h1-u8BFBu53D6u51FAu9519u91CDu8BD5\"><a name=\"读取出错重试\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>读取出错重试</h1><p>磁盘读取的有时候会出错，而程序应该尝试多重试几次，例如重试5次，如果5次都失败，则认为是真的读取错误了。加入重试读取代码</p>\r\n<pre><code>        MOV        SI,0            ; 记录失败次数的寄存器\r\nretry:        \r\n        MOV        AH,0X02            ; AH=0x02 : 读盘\r\n        MOV        AL,1            ; 1个扇区\r\n        MOV        BX,0            \r\n        MOV        DL,0x00            ; A驱动器\r\n        INT        0X13            ; 调用磁盘BIOS\r\n        JNC        fin                ; 没出错的话跳转到fin\r\n        ADD        SI,1            ; 往SI加1\r\n        CMP        SI,5            ; 毕竟SI与5\r\n        JAE        error            ; SI &gt;= 5时候，跳转到error\r\n        MOV        AH,0x00            \r\n        MOV        DL,0x00            ; A驱动器\r\n        INT        0X13            ; 重置驱动器\r\n        JMP        retry</code></pre><h2 id=\"h2-jnc-\"><a name=\"JNC指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JNC指令</h2><p>是jump if not carry的意思，如果进位标志为0的时候就跳转。</p>\r\n<h2 id=\"h2-jae-\"><a name=\"JAE指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JAE指令</h2><p>是jump if above or equal的意思，意思是大于或等于时跳转。</p>\r\n<h1 id=\"h1--18-\"><a name=\"读到18扇区\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>读到18扇区</h1><p>要读取更多的扇区，思路是写一个循环，并且使用一个计数器，记录读取进入的扇区，如果计数器小于等于18的时候继续重复读取，而每次读取的时候，都将读取的数据载入内存指定的位置，指定的位置随着每次读取向后移动0x200位，0x200正好是512个字节，而扇区的大小就是512字节，也就是每读取一个扇区512字节，载入到内存地址，然后再从这个内存地址512字节后的内存地址继续读取载入。</p>\r\n<pre><code>readloop:\r\n        MOV        SI,0            ; 记录失败次数的寄存器\r\nretry:        \r\n        MOV        AH,0X02            ; AH=0x02 : 读盘\r\n        MOV        AL,1            ; 1个扇区\r\n        MOV        BX,0            \r\n        MOV        DL,0x00            ; A驱动器\r\n        INT        0X13            ; 调用磁盘BIOS\r\n        JNC        fin                ; 没出错的话跳转到fin\r\n        ADD        SI,1            ; 往SI加1\r\n        CMP        SI,5            ; 毕竟SI与5\r\n        JAE        error            ; SI &gt;= 5时候，跳转到error\r\n        MOV        AH,0x00            \r\n        MOV        DL,0x00            ; A驱动器\r\n        INT        0X13            ; 重置驱动器\r\n        JMP        retry\r\nnext:\r\n        MOV        AX,ES            ; 把内存地址后移0X200\r\n        ADD        AX,0x200\r\n        MOV        ES,AX            ; 因为没有ADD ES,0x200指令，所以这里稍微绕了个湾\r\n        ADD        CL,1            ; 往CL里加1\r\n        CMP        CL,18            ; 比较CL与18\r\n        JBE        readloop        ; 如果CL &lt;= 18 跳转至readloop</code></pre><h1 id=\"h1--10-\"><a name=\"读取10个柱面\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>读取10个柱面</h1><p>C0-H0-S18扇区的下一个扇区，是磁盘反面的C0-H1-S1，如果循环读取扇区到了18个扇区的时候，则改变读取的磁头、柱面、扇区，继续读取下一个扇区。</p>\r\n<pre><code>next:\r\n        MOV        AX,ES            ; 把内存地址后移0X200\r\n        ADD        AX,0x0020\r\n        MOV        ES,AX            ; 因为没有ADD ES,0x200指令，所以这里稍微绕了个湾\r\n        ADD        CL,1            ; 往CL里加1\r\n        CMP        CL,18            ; 比较CL与18\r\n        JBE        readloop        ; 如果CL &lt;= 18 跳转至readloop\r\n        MOV        CL,1            ; 扇区号置为1?\r\n        ADD        DH,1            ; 磁头1？\r\n        CMP        DH,2            \r\n        JB        readloop        ; 如果DH &lt; 2，则跳转到readloop\r\n        MOV        DH,0\r\n        ADD        CH,1\r\n        CMP        CH,CYLS\r\n        JB        readloop        ; 如果CH &lt; CYLS，则跳转到readloop</code></pre><h2 id=\"h2-jb-\"><a name=\"JB指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>JB指令</h2><p>是jump if below的意思，如果小于就跳转。</p>\r\n<h2 id=\"h2-equ-\"><a name=\"EQU指令\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>EQU指令</h2><p>相当于C语言中的#define命令，用来声明常数。</p>\r\n', NULL, 0, 459, 0, '', 'a:2:{s:10:\"md_content\";s:2988:\"# 读取出错重试\r\n磁盘读取的有时候会出错，而程序应该尝试多重试几次，例如重试5次，如果5次都失败，则认为是真的读取错误了。加入重试读取代码\r\n```\r\n		MOV		SI,0			; 记录失败次数的寄存器\r\nretry:		\r\n		MOV		AH,0X02			; AH=0x02 : 读盘\r\n		MOV		AL,1			; 1个扇区\r\n		MOV		BX,0			\r\n		MOV		DL,0x00			; A驱动器\r\n		INT		0X13			; 调用磁盘BIOS\r\n		JNC		fin				; 没出错的话跳转到fin\r\n		ADD		SI,1			; 往SI加1\r\n		CMP		SI,5			; 毕竟SI与5\r\n		JAE		error			; SI >= 5时候，跳转到error\r\n		MOV		AH,0x00			\r\n		MOV		DL,0x00			; A驱动器\r\n		INT		0X13			; 重置驱动器\r\n		JMP		retry\r\n```\r\n## JNC指令\r\n是jump if not carry的意思，如果进位标志为0的时候就跳转。\r\n## JAE指令\r\n是jump if above or equal的意思，意思是大于或等于时跳转。\r\n\r\n# 读到18扇区\r\n要读取更多的扇区，思路是写一个循环，并且使用一个计数器，记录读取进入的扇区，如果计数器小于等于18的时候继续重复读取，而每次读取的时候，都将读取的数据载入内存指定的位置，指定的位置随着每次读取向后移动0x200位，0x200正好是512个字节，而扇区的大小就是512字节，也就是每读取一个扇区512字节，载入到内存地址，然后再从这个内存地址512字节后的内存地址继续读取载入。\r\n```\r\nreadloop:\r\n		MOV		SI,0			; 记录失败次数的寄存器\r\nretry:		\r\n		MOV		AH,0X02			; AH=0x02 : 读盘\r\n		MOV		AL,1			; 1个扇区\r\n		MOV		BX,0			\r\n		MOV		DL,0x00			; A驱动器\r\n		INT		0X13			; 调用磁盘BIOS\r\n		JNC		fin				; 没出错的话跳转到fin\r\n		ADD		SI,1			; 往SI加1\r\n		CMP		SI,5			; 毕竟SI与5\r\n		JAE		error			; SI >= 5时候，跳转到error\r\n		MOV		AH,0x00			\r\n		MOV		DL,0x00			; A驱动器\r\n		INT		0X13			; 重置驱动器\r\n		JMP		retry\r\nnext:\r\n		MOV		AX,ES			; 把内存地址后移0X200\r\n		ADD		AX,0x200\r\n		MOV		ES,AX			; 因为没有ADD ES,0x200指令，所以这里稍微绕了个湾\r\n		ADD		CL,1			; 往CL里加1\r\n		CMP		CL,18			; 比较CL与18\r\n		JBE		readloop		; 如果CL <= 18 跳转至readloop\r\n```\r\n\r\n# 读取10个柱面\r\nC0-H0-S18扇区的下一个扇区，是磁盘反面的C0-H1-S1，如果循环读取扇区到了18个扇区的时候，则改变读取的磁头、柱面、扇区，继续读取下一个扇区。\r\n```\r\nnext:\r\n		MOV		AX,ES			; 把内存地址后移0X200\r\n		ADD		AX,0x0020\r\n		MOV		ES,AX			; 因为没有ADD ES,0x200指令，所以这里稍微绕了个湾\r\n		ADD		CL,1			; 往CL里加1\r\n		CMP		CL,18			; 比较CL与18\r\n		JBE		readloop		; 如果CL <= 18 跳转至readloop\r\n		MOV		CL,1			; 扇区号置为1?\r\n		ADD		DH,1			; 磁头1？\r\n		CMP		DH,2			\r\n		JB		readloop		; 如果DH < 2，则跳转到readloop\r\n		MOV		DH,0\r\n		ADD		CH,1\r\n		CMP		CH,CYLS\r\n		JB		readloop		; 如果CH < CYLS，则跳转到readloop\r\n```\r\n## JB指令\r\n是jump if below的意思，如果小于就跳转。\r\n## EQU指令\r\n相当于C语言中的#define命令，用来声明常数。\";s:8:\"md_intro\";s:438:\"# 读取出错重试\r\n磁盘读取的有时候会出错，而程序应该尝试多重试几次，例如重试5次，如果5次都失败，则认为是真的读取错误了。加入重试读取代码\r\n```\r\n		MOV		SI,0			; 记录失败次数的寄存器\r\nretry:		\r\n		MOV		AH,0X02			; AH=0x02 : 读盘\r\n		MOV		AL,1			; 1个扇区\r\n		MOV		BX,0			\r\n		MOV		DL,0x00			; A驱动器\r\n		INT		0X13			; 调用磁盘BIOS\r\n		JNC		fin			<!--autointro-->\";}', '2019-04-21 22:23:53', 0),(54, 18, 1, '', 0, '', 1, 0, '自制操作系统（九）| 从启动区执行操作系统', '/upload/image/2019/04/201904030258262539131.png', '<h1>一个最简单的操作系统</h1>\n<pre><code>fin:\n    HLT\n    JMP     fin</code></pre>\n<p>将代码保存为os.nas，并使用nask编译，输出成os.sys文件。\n现在有了操作系统了，就像我们安装其他系统一样，将操作系统文件写入到磁盘里，例如，安装window系统，它会将寄己的启动MBR写入磁盘，同时也将操作系统文件写入磁盘，而我们现在的思路是拿到一个磁盘映像文件，写入启动引导，然后再将我们的os.sys里存入这个磁盘映像里，然后再拿这个磁盘映像来测试运行或者装到其它机器的磁盘上（等于安装操</p><!--autointro-->', '<h1 id=\"h1-u4E00u4E2Au6700u7B80u5355u7684u64CDu4F5Cu7CFBu7EDF\"><a name=\"一个最简单的操作系统\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>一个最简单的操作系统</h1><pre><code>fin:\r\n    HLT\r\n    JMP        fin</code></pre><p>将代码保存为os.nas，并使用nask编译，输出成os.sys文件。<br>现在有了操作系统了，就像我们安装其他系统一样，将操作系统文件写入到磁盘里，例如，安装window系统，它会将寄己的启动MBR写入磁盘，同时也将操作系统文件写入磁盘，而我们现在的思路是拿到一个磁盘映像文件，写入启动引导，然后再将我们的os.sys里存入这个磁盘映像里，然后再拿这个磁盘映像来测试运行或者装到其它机器的磁盘上（等于安装操作系统）。</p>\r\n<p>修改Makefie文件</p>\r\n<pre><code>TOOLPATH = ../../tools/\r\nEDIMG    = $(TOOLPATH)edimg.exe\r\n# 生成磁盘映像文件\r\nos.img : ipl.bin os.sys Makefile\r\n    $(EDIMG) imgin:../../tools/fdimg0at.tek \\\r\n    wbinimg src:ipl.bin len:512 from:0 to:0 \\\r\n    copy from:os.sys to:@: \\\r\n    imgout:os.img</code></pre><p>使用edimg工具把os.sys文件存入磁盘映像中去。使用二进制查看生成的.img磁盘映像。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030232483660195.png\" alt=\"\"><br>向磁盘里保存的文件，文件名会写在0x002600以后的地方。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030234291229298.png\" alt=\"\"><br>文件内容会写在0x004200以后的地方，而这里的内容正好是“最简单操作系统”的内容。</p>\r\n<h1 id=\"h1-u4ECEu542Fu52A8u533Au6267u884Cu64CDu4F5Cu7CFBu7EDF\"><a name=\"从启动区执行操作系统\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>从启动区执行操作系统</h1><p>要怎样执行磁盘上0x004200号地址的程序呢？程序从启动区开始，把磁盘上的内容装载到了内存0x8000号地址，所以，磁盘0x4200处的内容就应该位于内存0x8000+0x4200=0xc200号地址。我们就往os.nas里加上ORG 0xc200，然后在ipl.nas处理的最后加上JMP 0xc200这个指令。</p>\r\n<pre><code>next:\r\n        MOV        AX,ES            ; 把内存地址后移0X200\r\n        ADD        AX,0x0020\r\n        MOV        ES,AX            ; 因为没有ADD ES,0x200指令，所以这里稍微绕了个湾\r\n        ADD        CL,1            ; 往CL里加1\r\n        CMP        CL,18            ; 比较CL与18\r\n        JBE        readloop        ; 如果CL &lt;= 18 跳转至readloop\r\n        MOV        CL,1            ; 扇区号置为1?\r\n        ADD        DH,1            ; 磁头1？\r\n        CMP        DH,2            \r\n        JB        readloop        ; 如果DH &lt; 2，则跳转到readloop\r\n        MOV        DH,0\r\n        ADD        CH,1\r\n        CMP        CH,CYLS\r\n        JB        readloop        ; 如果CH &lt; CYLS，则跳转到readloop\r\n\r\n; 读取完毕跳转到0xc200执行os.sys的程序\r\n\r\n        JMP        0xc200</code></pre><p>往os.nas里加上ORG 0xc200</p>\r\n<pre><code>; hello-os\r\n; TAB=4\r\n\r\n        ORG        0xc200\r\nfin:\r\n        HLT\r\n        JMP        fin</code></pre><h1 id=\"h1-u4F7Fu7528u753Bu9762u6A21u5F0Fu786Eu8BA4u64CDu4F5Cu7CFBu7EDFu6267u884Cu60C5u51B5\"><a name=\"使用画面模式确认操作系统执行情况\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>使用画面模式确认操作系统执行情况</h1><p>为了确认操作系统执行情况，我们调用显卡显示来确认，如果屏幕一片黑色，则成功调用显卡输出了，也可以确认程序os.sys确实执行了</p>\r\n<pre><code>; hello-os\r\n; TAB=4\r\n\r\n        ORG        0xc200        ; 指定程序装载的内存地址\r\n\r\n        MOV        AL,0x13        ; VGA显卡，320*200*8位彩色\r\n        MOV        AH,0x00\r\n        INT        0x10\r\n\r\nfin:\r\n        HLT\r\n        JMP        fin</code></pre><h2 id=\"h2--int-0x10\"><a name=\"设置显卡模式 INT 0x10\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>设置显卡模式 INT 0x10</h2><ul>\r\n<li>AH=0x00</li><li>AL=模式<br>0x03: 16色字符模式，80<em>25<br>0x12: VGA图形模式，640</em>480<em>4位彩色模式，独特的4面存储模式<br>0x13: VGA图形模式，320</em>200<em>8位彩色模式，调色板模式<br>0x6a: 扩展VGA图形模式，800</em>600*4彩色模式，独特的4面存储模式（部分显卡不支持）</li><li>返回值：无</li></ul>\r\n<p>运行测试<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030258262539131.png\" alt=\"\"></p>\r\n', NULL, 0, 507, 0, '', 'a:4:{s:10:\"md_content\";s:3297:\"# 一个最简单的操作系统\r\n```\r\nfin:\r\n	HLT\r\n	JMP		fin\r\n```\r\n将代码保存为os.nas，并使用nask编译，输出成os.sys文件。\r\n现在有了操作系统了，就像我们安装其他系统一样，将操作系统文件写入到磁盘里，例如，安装window系统，它会将寄己的启动MBR写入磁盘，同时也将操作系统文件写入磁盘，而我们现在的思路是拿到一个磁盘映像文件，写入启动引导，然后再将我们的os.sys里存入这个磁盘映像里，然后再拿这个磁盘映像来测试运行或者装到其它机器的磁盘上（等于安装操作系统）。\r\n\r\n修改Makefie文件\r\n```\r\nTOOLPATH = ../../tools/\r\nEDIMG    = $(TOOLPATH)edimg.exe\r\n# 生成磁盘映像文件\r\nos.img : ipl.bin os.sys Makefile\r\n	$(EDIMG) imgin:../../tools/fdimg0at.tek \\\r\n	wbinimg src:ipl.bin len:512 from:0 to:0 \\\r\n	copy from:os.sys to:@: \\\r\n	imgout:os.img\r\n```\r\n使用edimg工具把os.sys文件存入磁盘映像中去。使用二进制查看生成的.img磁盘映像。\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030232483660195.png)\r\n向磁盘里保存的文件，文件名会写在0x002600以后的地方。\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030234291229298.png)\r\n文件内容会写在0x004200以后的地方，而这里的内容正好是“最简单操作系统”的内容。\r\n\r\n# 从启动区执行操作系统\r\n要怎样执行磁盘上0x004200号地址的程序呢？程序从启动区开始，把磁盘上的内容装载到了内存0x8000号地址，所以，磁盘0x4200处的内容就应该位于内存0x8000+0x4200=0xc200号地址。我们就往os.nas里加上ORG 0xc200，然后在ipl.nas处理的最后加上JMP 0xc200这个指令。\r\n```\r\nnext:\r\n		MOV		AX,ES			; 把内存地址后移0X200\r\n		ADD		AX,0x0020\r\n		MOV		ES,AX			; 因为没有ADD ES,0x200指令，所以这里稍微绕了个湾\r\n		ADD		CL,1			; 往CL里加1\r\n		CMP		CL,18			; 比较CL与18\r\n		JBE		readloop		; 如果CL <= 18 跳转至readloop\r\n		MOV		CL,1			; 扇区号置为1?\r\n		ADD		DH,1			; 磁头1？\r\n		CMP		DH,2			\r\n		JB		readloop		; 如果DH < 2，则跳转到readloop\r\n		MOV		DH,0\r\n		ADD		CH,1\r\n		CMP		CH,CYLS\r\n		JB		readloop		; 如果CH < CYLS，则跳转到readloop\r\n		\r\n; 读取完毕跳转到0xc200执行os.sys的程序\r\n		\r\n		JMP		0xc200\r\n```\r\n往os.nas里加上ORG 0xc200\r\n```\r\n; hello-os\r\n; TAB=4\r\n\r\n		ORG		0xc200\r\nfin:\r\n		HLT\r\n		JMP		fin\r\n```\r\n# 使用画面模式确认操作系统执行情况\r\n为了确认操作系统执行情况，我们调用显卡显示来确认，如果屏幕一片黑色，则成功调用显卡输出了，也可以确认程序os.sys确实执行了\r\n```\r\n; hello-os\r\n; TAB=4\r\n\r\n		ORG		0xc200		; 指定程序装载的内存地址\r\n		\r\n		MOV		AL,0x13		; VGA显卡，320*200*8位彩色\r\n		MOV		AH,0x00\r\n		INT		0x10\r\n		\r\nfin:\r\n		HLT\r\n		JMP		fin\r\n```\r\n## 设置显卡模式 INT 0x10\r\n- AH=0x00\r\n- AL=模式\r\n  0x03: 16色字符模式，80*25\r\n  0x12: VGA图形模式，640*480*4位彩色模式，独特的4面存储模式\r\n  0x13: VGA图形模式，320*200*8位彩色模式，调色板模式\r\n  0x6a: 扩展VGA图形模式，800*600*4彩色模式，独特的4面存储模式（部分显卡不支持）\r\n- 返回值：无\r\n\r\n\r\n运行测试\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030258262539131.png)\";s:8:\"md_intro\";s:626:\"# 一个最简单的操作系统\r\n```\r\nfin:\r\n	HLT\r\n	JMP		fin\r\n```\r\n将代码保存为os.nas，并使用nask编译，输出成os.sys文件。\r\n现在有了操作系统了，就像我们安装其他系统一样，将操作系统文件写入到磁盘里，例如，安装window系统，它会将寄己的启动MBR写入磁盘，同时也将操作系统文件写入磁盘，而我们现在的思路是拿到一个磁盘映像文件，写入启动引导，然后再将我们的os.sys里存入这个磁盘映像里，然后再拿这个磁盘映像来测试运行或者装到其它机器的磁盘上（等于安装操<!--autointro-->\";s:15:\"os_wxapp_images\";s:197:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030232483660195.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030234291229298.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904030258262539131.png\";s:21:\"os_wxapp_images_count\";i:3;}', '2019-04-21 22:23:53', 0),(55, 18, 1, '', 0, '', 1, 0, '自制操作系统（十）| 进入32位模式并导入C语言', '/upload/image/2019/04/201904040204171080178.png', '<h1>前期准备</h1>\n<p>16位模式启动的话，用AX和CX等16位寄存器会非常方便，但反过来，像EAX和ECX等32位的寄存器，使用起来就很麻烦。另外，16位和32位模式中，机器语言中的命令代码不一样。同样的机器语言，解释的方法也不一样，所以16位模式的机器语言在32位模式下不能运行，反之亦然。\n在32位模式下，CPU的自我保护功能（识别出可疑的机器语言并进行屏蔽，以免破坏系统）在16位模式下不能使用，但32位能用。\n32位模式不能调用BIOS功能了（也有从32位返回16位的方法），因为BIOS是16</p><!--autointro-->', '<h1 id=\"h1-u524Du671Fu51C6u5907\"><a name=\"前期准备\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>前期准备</h1><p>16位模式启动的话，用AX和CX等16位寄存器会非常方便，但反过来，像EAX和ECX等32位的寄存器，使用起来就很麻烦。另外，16位和32位模式中，机器语言中的命令代码不一样。同样的机器语言，解释的方法也不一样，所以16位模式的机器语言在32位模式下不能运行，反之亦然。<br>在32位模式下，CPU的自我保护功能（识别出可疑的机器语言并进行屏蔽，以免破坏系统）在16位模式下不能使用，但32位能用。<br>32位模式不能调用BIOS功能了（也有从32位返回16位的方法），因为BIOS是16位机器语言写的。</p>\r\n<pre><code>; hello-os\r\n; TAB=4\r\n\r\n; 有关BOOT_INFO\r\n\r\nCYLS    EQU        0x0ff0        ; 设定启动区\r\nLEDS    EQU        0x0ff1        \r\nVMODE    EQU        0x0ff2        ; 关于颜色数目信息，颜色的位数\r\nSCRNX    EQU        0x0ff4        ; 分辨率的X（screen x）\r\nSCRNY    EQU        0x0ff6        ; 分辨率的Y（screen y）\r\nVRAM    EQU        0x0ff8        ; 图像缓冲区的开始地址\r\n\r\n        ORG        0xc200        ; 指定程序装载的内存地址\r\n\r\n        MOV        AL,0x13        ; VGA显卡，320*200*8位彩色\r\n        MOV        AH,0x00\r\n        INT        0x10\r\n\r\n        MOV        BYTE [VMODE],8\r\n        MOV        WORD [SCRNX],320\r\n        MOV        WORD [SCRNY],200\r\n        MOV        DWORD [VRAM],0x000a0000\r\n\r\n; 用BIOS取得键盘上各种LED指示灯的状态\r\n\r\n        MOV        AH,0x02\r\n        INT        0x16        ; keyboard BIOS\r\n        MOV        [LEDS],AL\r\n\r\nfin:\r\n        HLT\r\n        JMP        fin</code></pre><p>设置画面模式之后，还吧画面模式信息保存在了内存里，这是因为，我们以后可能还有支持各种不同的画面模式，这就需要把现在的设置信息保存起来以后备用。VRAM指的是显卡内存（video RAM），也就是用来显示画面的内存，它可以像一般内存一样存储数据，但VRAM的功能不仅局限于此，它的各个地址都对应着画面上的像素，可以利用这一机制在画面上绘制出五彩缤纷的图案。<br>VRAM分布在内存分布图上好几个不同的地方。这是因为不同的画面模式的像素也不一样。这次VRAM的值是0xa0000，是因为BIOS支持网页上规定了，这种画面模式下VRAM是0xa0000~0xaffff的64KB。</p>\r\n<h1 id=\"h1--c-\"><a name=\"导入C语言\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>导入C语言</h1><p>要开始进入C语言的代码编写，asmhead.nas里面写了一大堆我也不懂是什么的代码，然后调用C语言写一个简单的操作系统</p>\r\n<pre><code>void HariMain(void){\r\n\r\nfin:\r\n    goto fin;\r\n\r\n}</code></pre><p>那么.c文件要编译成机器语言，要经历如下过程</p>\r\n<ul>\r\n<li>使用cc1.exe从bootpack.c生成bootpack.gas文件</li><li>使用gas2nask.exe从bootpack.gas生成bootpack.nas</li><li>使用nask.exe从bootpack.nas生成bootpack.obj</li><li>使用obj2bin.exe从bootpack.obj生成bootpack.bim</li><li>使用bim2hrb.exe从bootpack.bim生成bootpack.hrb</li><li>使用copy指令将asmhead.bin与bootpack.hrb单纯的结合起来，生成haribote.sys</li></ul>\r\n<p>这一系列的编译过程可以写在Makefile文件里，执行make的时候就可以按步骤执行编译了</p>\r\n<h1 id=\"h1--hlt\"><a name=\"实现HLT\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>实现HLT</h1><p>在C语言中，不能使用HLT，所以就用汇编写一个实现HLT的函数，然后给C语言里调用</p>\r\n<pre><code>; naskfunc\r\n; TAB=4\r\n\r\n[FORMAT &quot;WCOFF&quot;]                ; 制作目标文件的模式\r\n[BITS 32]                        ; 制作32位模式用的机器语言\r\n\r\n; 制作目标文件的信息\r\n\r\n[FILE &quot;naskfunc.nas&quot;]            ; 源文件名信息\r\n        GLOBAL    _io_hlt            ; 程序中包含的函数名\r\n\r\n; 以下是实际的函数\r\n\r\n[SECTION .text]                    ; 目标文件中写了这些之后再写程序\r\n\r\n_io_hlt:                        ; void io_hlt(void);\r\n        HLT\r\n        RET</code></pre><p>输出格式设定为WCOFF，同时设定为32位机器语言模式。函数名称要在前面加\"_\"，需要链接的函数名称都要用GLOBAL指令声明。RET指令，相当于C语言的return。</p>\r\n<pre><code>void io_hlt(void);\r\n\r\nvoid HariMain(void){\r\n\r\nfin:\r\n    io_hlt();\r\n    goto fin;\r\n\r\n}</code></pre><p>在C语言中调用，运行测试，依旧漆黑一片<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904040204171080178.png\" alt=\"\"></p>\r\n', NULL, 0, 646, 0, '', 'a:4:{s:10:\"md_content\";s:3864:\"# 前期准备\r\n16位模式启动的话，用AX和CX等16位寄存器会非常方便，但反过来，像EAX和ECX等32位的寄存器，使用起来就很麻烦。另外，16位和32位模式中，机器语言中的命令代码不一样。同样的机器语言，解释的方法也不一样，所以16位模式的机器语言在32位模式下不能运行，反之亦然。\r\n在32位模式下，CPU的自我保护功能（识别出可疑的机器语言并进行屏蔽，以免破坏系统）在16位模式下不能使用，但32位能用。\r\n32位模式不能调用BIOS功能了（也有从32位返回16位的方法），因为BIOS是16位机器语言写的。\r\n```\r\n; hello-os\r\n; TAB=4\r\n\r\n; 有关BOOT_INFO\r\n\r\nCYLS	EQU		0x0ff0		; 设定启动区\r\nLEDS	EQU		0x0ff1		\r\nVMODE	EQU		0x0ff2		; 关于颜色数目信息，颜色的位数\r\nSCRNX	EQU		0x0ff4		; 分辨率的X（screen x）\r\nSCRNY	EQU		0x0ff6		; 分辨率的Y（screen y）\r\nVRAM	EQU		0x0ff8		; 图像缓冲区的开始地址\r\n\r\n		ORG		0xc200		; 指定程序装载的内存地址\r\n		\r\n		MOV		AL,0x13		; VGA显卡，320*200*8位彩色\r\n		MOV		AH,0x00\r\n		INT		0x10\r\n		\r\n		MOV		BYTE [VMODE],8\r\n		MOV		WORD [SCRNX],320\r\n		MOV		WORD [SCRNY],200\r\n		MOV		DWORD [VRAM],0x000a0000\r\n\r\n; 用BIOS取得键盘上各种LED指示灯的状态\r\n		\r\n		MOV		AH,0x02\r\n		INT		0x16		; keyboard BIOS\r\n		MOV		[LEDS],AL\r\n		\r\nfin:\r\n		HLT\r\n		JMP		fin\r\n```\r\n设置画面模式之后，还吧画面模式信息保存在了内存里，这是因为，我们以后可能还有支持各种不同的画面模式，这就需要把现在的设置信息保存起来以后备用。VRAM指的是显卡内存（video RAM），也就是用来显示画面的内存，它可以像一般内存一样存储数据，但VRAM的功能不仅局限于此，它的各个地址都对应着画面上的像素，可以利用这一机制在画面上绘制出五彩缤纷的图案。\r\nVRAM分布在内存分布图上好几个不同的地方。这是因为不同的画面模式的像素也不一样。这次VRAM的值是0xa0000，是因为BIOS支持网页上规定了，这种画面模式下VRAM是0xa0000~0xaffff的64KB。\r\n# 导入C语言\r\n要开始进入C语言的代码编写，asmhead.nas里面写了一大堆我也不懂是什么的代码，然后调用C语言写一个简单的操作系统\r\n```\r\nvoid HariMain(void){\r\n\r\nfin:\r\n	goto fin;\r\n\r\n}\r\n```\r\n那么.c文件要编译成机器语言，要经历如下过程\r\n- 使用cc1.exe从bootpack.c生成bootpack.gas文件\r\n- 使用gas2nask.exe从bootpack.gas生成bootpack.nas\r\n- 使用nask.exe从bootpack.nas生成bootpack.obj\r\n- 使用obj2bin.exe从bootpack.obj生成bootpack.bim\r\n- 使用bim2hrb.exe从bootpack.bim生成bootpack.hrb\r\n- 使用copy指令将asmhead.bin与bootpack.hrb单纯的结合起来，生成haribote.sys\r\n\r\n这一系列的编译过程可以写在Makefile文件里，执行make的时候就可以按步骤执行编译了\r\n# 实现HLT\r\n在C语言中，不能使用HLT，所以就用汇编写一个实现HLT的函数，然后给C语言里调用\r\n```\r\n; naskfunc\r\n; TAB=4\r\n\r\n[FORMAT \"WCOFF\"]				; 制作目标文件的模式\r\n[BITS 32]						; 制作32位模式用的机器语言\r\n\r\n; 制作目标文件的信息\r\n\r\n[FILE \"naskfunc.nas\"]			; 源文件名信息\r\n		GLOBAL	_io_hlt			; 程序中包含的函数名\r\n\r\n; 以下是实际的函数\r\n\r\n[SECTION .text]					; 目标文件中写了这些之后再写程序\r\n\r\n_io_hlt:						; void io_hlt(void);\r\n		HLT\r\n		RET\r\n```\r\n输出格式设定为WCOFF，同时设定为32位机器语言模式。函数名称要在前面加\\\"_\\\"，需要链接的函数名称都要用GLOBAL指令声明。RET指令，相当于C语言的return。\r\n```\r\nvoid io_hlt(void);\r\n\r\nvoid HariMain(void){\r\n\r\nfin:\r\n	io_hlt();\r\n	goto fin;\r\n\r\n}\r\n```\r\n在C语言中调用，运行测试，依旧漆黑一片\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904040204171080178.png)\r\n\r\n\";s:8:\"md_intro\";s:652:\"# 前期准备\r\n16位模式启动的话，用AX和CX等16位寄存器会非常方便，但反过来，像EAX和ECX等32位的寄存器，使用起来就很麻烦。另外，16位和32位模式中，机器语言中的命令代码不一样。同样的机器语言，解释的方法也不一样，所以16位模式的机器语言在32位模式下不能运行，反之亦然。\r\n在32位模式下，CPU的自我保护功能（识别出可疑的机器语言并进行屏蔽，以免破坏系统）在16位模式下不能使用，但32位能用。\r\n32位模式不能调用BIOS功能了（也有从32位返回16位的方法），因为BIOS是16<!--autointro-->\";s:15:\"os_wxapp_images\";s:65:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904040204171080178.png\";s:21:\"os_wxapp_images_count\";i:1;}', '2019-04-21 22:23:53', 0),(56, 21, 1, '', 0, '', 0, 0, '设计模式（三）| 代理模式', NULL, '<h1>UML</h1>\n<p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904082316298801076.png\" alt=\"\" />\n代理模式（Proxy）:为其他对象提供一种代理以控制对这个对象的访问。</p>\n<h1>代理模式的应用</h1>\n<p>远程代理：也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。\n虚拟代理：是跟进需要创建开销很大的对象。通过它来存放实例化需要很长时间真实对象。\n安全代理：用来控制真实对象访问时的权限。</p>\n<!--autointro-->', '<h1 id=\"h1-uml\"><a name=\"UML\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>UML</h1><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904082316298801076.png\" alt=\"\"><br>代理模式（Proxy）:为其他对象提供一种代理以控制对这个对象的访问。</p>\r\n<h1 id=\"h1-u4EE3u7406u6A21u5F0Fu7684u5E94u7528\"><a name=\"代理模式的应用\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>代理模式的应用</h1><p>远程代理：也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。<br>虚拟代理：是跟进需要创建开销很大的对象。通过它来存放实例化需要很长时间真实对象。<br>安全代理：用来控制真实对象访问时的权限。<br>智能引导：是指当调用真实的对象时，代理处理另外一些事。</p>\r\n<h1 id=\"h1-u4EE3u7801u5B9Eu4F8B\"><a name=\"代码实例\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>代码实例</h1><p>Subject接口类</p>\r\n<pre><code class=\"language-java\">public interface Subject {\r\n\r\n    void request();\r\n\r\n}</code></pre>\r\n<p>RealSubject类</p>\r\n<pre><code class=\"language-java\">public class RealSubject implements Subject {\r\n\r\n    @Override\r\n    public void request() {\r\n\r\n        System.out.println(&quot;真实的请求...&quot;);\r\n\r\n    }\r\n\r\n}</code></pre>\r\n<p>Proxy类</p>\r\n<pre><code class=\"language-java\">public class Proxy implements Subject {\r\n\r\n    private RealSubject real;\r\n\r\n    @Override\r\n    public void request() {\r\n        if (this.real == null){\r\n            this.real = new RealSubject();\r\n        }\r\n        this.real.request();\r\n    }\r\n\r\n}</code></pre>\r\n<p>client调用</p>\r\n<pre><code class=\"language-java\">public static void main(String[] args) {\r\n        Proxy proxy = new Proxy();\r\n        proxy.request();\r\n    }</code></pre>\r\n<p>输出结果<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904082320357444428.png\" alt=\"\"></p>\r\n', NULL, 0, 513, 0, '', 'a:4:{s:10:\"md_content\";s:1420:\"# UML\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904082316298801076.png)\r\n代理模式（Proxy）:为其他对象提供一种代理以控制对这个对象的访问。\r\n# 代理模式的应用\r\n远程代理：也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。\r\n虚拟代理：是跟进需要创建开销很大的对象。通过它来存放实例化需要很长时间真实对象。\r\n安全代理：用来控制真实对象访问时的权限。\r\n智能引导：是指当调用真实的对象时，代理处理另外一些事。\r\n# 代码实例\r\nSubject接口类\r\n```java\r\npublic interface Subject {\r\n\r\n    void request();\r\n\r\n}\r\n```\r\n\r\nRealSubject类\r\n```java\r\npublic class RealSubject implements Subject {\r\n\r\n    @Override\r\n    public void request() {\r\n\r\n        System.out.println(\"真实的请求...\");\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\nProxy类\r\n```java\r\npublic class Proxy implements Subject {\r\n\r\n    private RealSubject real;\r\n\r\n    @Override\r\n    public void request() {\r\n        if (this.real == null){\r\n            this.real = new RealSubject();\r\n        }\r\n        this.real.request();\r\n    }\r\n\r\n}\r\n```\r\n\r\nclient调用\r\n```java\r\npublic static void main(String[] args) {\r\n        Proxy proxy = new Proxy();\r\n        proxy.request();\r\n    }\r\n```\r\n\r\n输出结果\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904082320357444428.png)\";s:8:\"md_intro\";s:554:\"# UML\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904082316298801076.png)\r\n代理模式（Proxy）:为其他对象提供一种代理以控制对这个对象的访问。\r\n# 代理模式的应用\r\n远程代理：也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。\r\n虚拟代理：是跟进需要创建开销很大的对象。通过它来存放实例化需要很长时间真实对象。\r\n安全代理：用来控制真实对象访问时的权限。\r\n<!--autointro-->\";s:15:\"os_wxapp_images\";s:131:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904082316298801076.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904082320357444428.png\";s:21:\"os_wxapp_images_count\";i:2;}', '2019-04-21 22:23:53', 0),(57, 18, 1, '', 0, '', 0, 0, '自制操作系统（十一）| 画面显示', NULL, '<h1>思路分析</h1>\n<p>我们想要让屏幕显示点什么，其实就是往VRAM里写入想显示的值，回顾一下，VRAM指的是显卡内存（video RAM），也就是用来显示画面的内存，我们当前使用的画面模式下VRAM是0xa0000~0xaffff的64KB。那么，我们就往这些内存地址写入数据，就可以显示想要的东西了。</p>\n<h1>实操上代码</h1>\n<pre><code class=\"language-c\">\n//---------------------\n//|      函数声明     |\n//---------------------\nvoid io_hlt(vo&lt;!--autointro--&gt;</code></pre><!--autointro-->', '<h1 id=\"h1-u601Du8DEFu5206u6790\"><a name=\"思路分析\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>思路分析</h1><p>我们想要让屏幕显示点什么，其实就是往VRAM里写入想显示的值，回顾一下，VRAM指的是显卡内存（video RAM），也就是用来显示画面的内存，我们当前使用的画面模式下VRAM是0xa0000~0xaffff的64KB。那么，我们就往这些内存地址写入数据，就可以显示想要的东西了。</p>\r\n<h1 id=\"h1-u5B9Eu64CDu4E0Au4EE3u7801\"><a name=\"实操上代码\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>实操上代码</h1><pre><code class=\"language-c\">//---------------------\r\n//|      函数声明     |\r\n//---------------------\r\nvoid io_hlt(void);\r\n\r\n//---------------------\r\n//|       主方法      |\r\n//---------------------\r\nvoid HariMain(void) {\r\n    int i;\r\n    char *p;\r\n\r\n    for (i = 0xa0000; i &lt;= 0xaffff; i++) {        \r\n        p[i] = i &amp; 0x0f;\r\n    }\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>声明char类型的指针p，因为内存地址的单元每个大小是一个BYTE 8位，char正好是BYTE，所以等下写入数据的时候才不会报错</p>\r\n<p>声明变量i，从0xa0000开始，这个就是我们VRAM的开始地址，一直循环到0xaffff，正好是VRAM的结束地址，那么这些地址，我们将一个一个的写入代表颜色的值</p>\r\n<p>通过“与运算”将地址的值与0x0f，低4位原封保留，而高4位全部都变成0，结果类似如下：00 01 02 … 0e 0f 00 01 02 … 每隔16个像素，色号就反复一次。</p>\r\n<h1 id=\"h1-u6267u884Cu7ED3u679C\"><a name=\"执行结果\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>执行结果</h1><p><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904090042491449468.png\" alt=\"\"></p>\r\n', NULL, 0, 498, 0, '', 'a:4:{s:10:\"md_content\";s:1399:\"# 思路分析\r\n我们想要让屏幕显示点什么，其实就是往VRAM里写入想显示的值，回顾一下，VRAM指的是显卡内存（video RAM），也就是用来显示画面的内存，我们当前使用的画面模式下VRAM是0xa0000~0xaffff的64KB。那么，我们就往这些内存地址写入数据，就可以显示想要的东西了。\r\n# 实操上代码\r\n```c\r\n//---------------------\r\n//|      函数声明     |\r\n//---------------------\r\nvoid io_hlt(void);\r\n\r\n//---------------------\r\n//|       主方法      |\r\n//---------------------\r\nvoid HariMain(void) {\r\n    int i;\r\n    char *p;\r\n\r\n    for (i = 0xa0000; i <= 0xaffff; i++) {        \r\n        p[i] = i & 0x0f;\r\n    }\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}\r\n```\r\n声明char类型的指针p，因为内存地址的单元每个大小是一个BYTE 8位，char正好是BYTE，所以等下写入数据的时候才不会报错\r\n\r\n声明变量i，从0xa0000开始，这个就是我们VRAM的开始地址，一直循环到0xaffff，正好是VRAM的结束地址，那么这些地址，我们将一个一个的写入代表颜色的值\r\n\r\n通过“与运算”将地址的值与0x0f，低4位原封保留，而高4位全部都变成0，结果类似如下：00 01 02 ... 0e 0f 00 01 02 ... 每隔16个像素，色号就反复一次。\r\n\r\n# 执行结果\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904090042491449468.png)\";s:8:\"md_intro\";s:492:\"# 思路分析\r\n我们想要让屏幕显示点什么，其实就是往VRAM里写入想显示的值，回顾一下，VRAM指的是显卡内存（video RAM），也就是用来显示画面的内存，我们当前使用的画面模式下VRAM是0xa0000~0xaffff的64KB。那么，我们就往这些内存地址写入数据，就可以显示想要的东西了。\r\n# 实操上代码\r\n```c\r\n//---------------------\r\n//|      函数声明     |\r\n//---------------------\r\nvoid io_hlt(vo<!--autointro-->\";s:15:\"os_wxapp_images\";s:65:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904090042491449468.png\";s:21:\"os_wxapp_images_count\";i:1;}', '2019-04-21 22:23:53', 0),(58, 18, 1, '', 0, '', 1, 0, '自制操作系统（十二）| 色号设定与绘制桌面', '/upload/image/2019/04/201904100004575789930.png', '<h1>色号设定</h1>\n<p>色号使用8位二进制数，也就是只能使用0\\~255的数。一般说起指定颜色，都是用#ffffff一类的数，这就是RGB（红绿蓝）方式，用6位十六进制数，也就是24位二进制数来指定颜色。\n我们使用的VGA图形模式，320*200*8位彩色模式，调色板模式色号使用的是8位，是不够显示#ffffff的，所以可以指定0~255的数字所对应的颜色，然后设定调色板。</p>\n<pre><code class=\"language-c\">\n// 初始化调色板\nvoid init_palette(void) {\n    static unsign&lt;!--autointro--&gt;</code></pre><!--autointro-->', '<h1 id=\"h1-u8272u53F7u8BBEu5B9A\"><a name=\"色号设定\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>色号设定</h1><p>色号使用8位二进制数，也就是只能使用0~255的数。一般说起指定颜色，都是用#ffffff一类的数，这就是RGB（红绿蓝）方式，用6位十六进制数，也就是24位二进制数来指定颜色。<br>我们使用的VGA图形模式，320*200*8位彩色模式，调色板模式色号使用的是8位，是不够显示#ffffff的，所以可以指定0~255的数字所对应的颜色，然后设定调色板。</p>\r\n<pre><code class=\"language-c\">// 初始化调色板\r\nvoid init_palette(void) {\r\n    static unsigned char table_rgb[16 * 3] = {\r\n        0x00, 0x00, 0x00,  // 0:黑色\r\n        0xff, 0x00, 0x00,  // 1:亮红\r\n        0x00, 0xff, 0x00,  // 2:亮绿\r\n        0xff, 0xff, 0x00,  // 亮黄\r\n        0x00, 0x00, 0xff,  // 亮蓝\r\n        0xff, 0x00, 0xff,  // 亮紫\r\n        0x00, 0xff, 0xff,  // 浅蓝\r\n        0xff, 0xff, 0xff,  // 白色\r\n        0xc6, 0xc6, 0xc6,  // 亮灰\r\n        0x84, 0x00, 0x00,  // 暗红\r\n        0x00, 0x84, 0x00,  // 暗绿\r\n        0x84, 0x84, 0x00,  // 暗黄\r\n        0x00, 0x00, 0x84,  // 暗蓝\r\n        0x84, 0x00, 0x84,  // 暗紫\r\n        0x00, 0x84, 0x84,  // 浅暗蓝\r\n        0x84, 0x84, 0x84   // 暗灰\r\n    };\r\n    set_palette(0, 15, table_rgb);\r\n    return;\r\n}</code></pre>\r\n<p>定义一个无符号char（BYTE 0~255）数组，数组长度是16*3=48个，用来保存定义的颜色。</p>\r\n<pre><code class=\"language-C\">// 设置调色板\r\nvoid set_palette(int start, int end, unsigned char *rgb) {\r\n    int i, eflags;\r\n    // 记录中断许可标志的值\r\n    eflags = io_load_eflags();\r\n    // 将中断许可标志设为0，禁止中断\r\n    io_cli();\r\n    io_out8(0x03c8, start);\r\n    for (i = 0; i &lt; end; i++) {\r\n        io_out8(0x03c9, rgb[0] / 4);\r\n        io_out8(0x03c9, rgb[1] / 4);\r\n        io_out8(0x03c9, rgb[2] / 4);\r\n        rgb += 3;\r\n    }\r\n    // 还原中断许可\r\n    io_store_eflags(eflags);\r\n    return;\r\n}</code></pre>\r\n<p>CPU向设备发送电信号的指令是OUT，从设备取得信号的指令是IN，在OUT和IN指令中，为了区别不同的设备，也要使用设备号码，设备号码在英文中是port（端口）。</p>\r\n<h2 id=\"h2-u8C03u8272u677Fu7684u8BBFu95EEu6B65u9AA4\"><a name=\"调色板的访问步骤\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>调色板的访问步骤</h2><ul>\r\n<li>首先在一连串的访问中屏蔽中断（比如CLI）</li><li>将要设定的调色板号码写入0x03c8，紧接着按R，G，B的顺序写入0x03c9，如果还想继续设定下一个调色板，则省略调色板号码，再按RGB的顺序写入0x03c9就行了</li><li>如果想要读出当前调色板的状态，首先要将色号的号码写入0x03c7，再从0x03c9读取3次，读出的顺序就是R，G，B。如果想要继续读出下一个调色板，同样也是省略调色板号码的设定，按RGB的顺序读出</li><li>如果最初执行了CLI，那么最后要执行STI</li></ul>\r\n<p>在C语言中，没有与IN或OUT相当的语句，所以得用汇编来做。</p>\r\n<pre><code class=\"language-c\">_io_in8:    ; int io_in8(int port);\r\n        MOV        EDX,[ESP+4]        ; port\r\n        MOV        EAX,0\r\n        IN        AL,DX\r\n        RET</code></pre>\r\n<p>同时，C语言中也没有直接屏蔽中断的语句，也使用汇编来做。CLI是将中断标志（interrupt flag）置为0的指令（clear interrupt flag）。</p>\r\n<pre><code class=\"language-c\">_io_cli:    ; void io_cli(void);\r\n        CLI\r\n        RET</code></pre>\r\n<p>屏蔽中断也要有恢复中断的方法，也用汇编来做。STI是要将这个中断标志置为1的指令（set interrupt flag）。</p>\r\n<pre><code class=\"language-c\">_io_sti:    ; void io_sti(void);\r\n        STI\r\n        RET</code></pre>\r\n<p>关于EFLAGS寄存器<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020214294622212.png\" alt=\"\"></p>\r\n<h1 id=\"h1-u7ED8u5236u77E9u5F62\"><a name=\"绘制矩形\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>绘制矩形</h1><p>在当前画面模式中，画面上有320*200（=64000）个像素，假设左上角的坐标是（0，0），右下角的坐标是（320，200），那么像素坐标（x，y）对应的VRAM地址应该按下公式计算：<br>0xa0000 + x + y * 320<br>其它模式也基本相同，只是0xa0000这个起始地址和y的系数320有些不同。<br>绘制矩形函数</p>\r\n<pre><code class=\"language-c\">// 画矩形方法\r\nvoid boxfill8(unsigned char *vram, int xsize, unsigned char c, int x0, int y0,\r\n              int x1, int y1) {\r\n    int x, y;\r\n    for (y = y0; y &lt;= y1; y++) {\r\n        for (x = x0; x &lt;= x1; x++) {\r\n            vram[y * xsize + x] = c;\r\n        }\r\n    }\r\n    return;\r\n}</code></pre>\r\n<p>测试一下，画三个矩形</p>\r\n<pre><code class=\"language-c\">void HariMain(void) {\r\n    char *p;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    p = (char *)0xa0000;\r\n\r\n    // 绘制3个矩形\r\n    boxfill8(p, 320, COL8_FF0000, 20, 20, 120, 120);\r\n    boxfill8(p, 320, COL8_00FF00, 70, 50, 170, 150);\r\n    boxfill8(p, 320, COL8_0000FF, 120, 80, 220, 180);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>运行结果<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904100003004178090.png\" alt=\"\"></p>\r\n<h1 id=\"h1-u7ED8u5236u64CDu4F5Cu7CFBu7EDF\"><a name=\"绘制操作系统\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>绘制操作系统</h1><pre><code class=\"language-c\">void HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n    vram = (char *)0xa0000;\r\n\r\n    xsize = 320;\r\n    ysize = 200;\r\n\r\n    boxfill8(vram, xsize, COL8_008484, 0, 0, xsize - 1, ysize - 29);\r\n    boxfill8(vram, xsize, COL8_C6C6C6, 0, ysize - 28, xsize - 1, ysize - 28);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, 0, ysize - 27, xsize - 1, ysize - 27);\r\n    boxfill8(vram, xsize, COL8_C6C6C6, 0, ysize - 26, xsize - 1, ysize - 1);\r\n\r\n    boxfill8(vram, xsize, COL8_FFFFFF, 3, ysize - 24, 59, ysize - 24);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, 2, ysize - 24, 2, ysize - 4);\r\n    boxfill8(vram, xsize, COL8_848484, 3, ysize - 4, 59, ysize - 4);\r\n    boxfill8(vram, xsize, COL8_848484, 59, ysize - 23, 59, ysize - 5);\r\n    boxfill8(vram, xsize, COL8_000000, 2, ysize - 3, 59, ysize - 3);\r\n    boxfill8(vram, xsize, COL8_000000, 60, ysize - 24, 60, ysize - 3);\r\n\r\n    boxfill8(vram, xsize, COL8_848484, xsize - 47, ysize - 24, xsize - 4,\r\n             ysize - 24);\r\n    boxfill8(vram, xsize, COL8_848484, xsize - 47, ysize - 23, xsize - 47,\r\n             ysize - 4);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, xsize - 47, ysize - 3, xsize - 4,\r\n             ysize - 3);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, xsize - 3, ysize - 24, xsize - 3,\r\n             ysize - 3);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>测试运行<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904100004575789930.png\" alt=\"\"></p>\r\n', NULL, 0, 583, 0, '', 'a:4:{s:10:\"md_content\";s:6064:\"# 色号设定\r\n色号使用8位二进制数，也就是只能使用0\\~255的数。一般说起指定颜色，都是用#ffffff一类的数，这就是RGB（红绿蓝）方式，用6位十六进制数，也就是24位二进制数来指定颜色。\r\n我们使用的VGA图形模式，320\\*200\\*8位彩色模式，调色板模式色号使用的是8位，是不够显示#ffffff的，所以可以指定0~255的数字所对应的颜色，然后设定调色板。\r\n```c\r\n// 初始化调色板\r\nvoid init_palette(void) {\r\n    static unsigned char table_rgb[16 * 3] = {\r\n        0x00, 0x00, 0x00,  // 0:黑色\r\n        0xff, 0x00, 0x00,  // 1:亮红\r\n        0x00, 0xff, 0x00,  // 2:亮绿\r\n        0xff, 0xff, 0x00,  // 亮黄\r\n        0x00, 0x00, 0xff,  // 亮蓝\r\n        0xff, 0x00, 0xff,  // 亮紫\r\n        0x00, 0xff, 0xff,  // 浅蓝\r\n        0xff, 0xff, 0xff,  // 白色\r\n        0xc6, 0xc6, 0xc6,  // 亮灰\r\n        0x84, 0x00, 0x00,  // 暗红\r\n        0x00, 0x84, 0x00,  // 暗绿\r\n        0x84, 0x84, 0x00,  // 暗黄\r\n        0x00, 0x00, 0x84,  // 暗蓝\r\n        0x84, 0x00, 0x84,  // 暗紫\r\n        0x00, 0x84, 0x84,  // 浅暗蓝\r\n        0x84, 0x84, 0x84   // 暗灰\r\n    };\r\n    set_palette(0, 15, table_rgb);\r\n    return;\r\n}\r\n```\r\n定义一个无符号char（BYTE 0~255）数组，数组长度是16\\*3=48个，用来保存定义的颜色。\r\n```C\r\n// 设置调色板\r\nvoid set_palette(int start, int end, unsigned char *rgb) {\r\n    int i, eflags;\r\n    // 记录中断许可标志的值\r\n    eflags = io_load_eflags();\r\n    // 将中断许可标志设为0，禁止中断\r\n    io_cli();\r\n    io_out8(0x03c8, start);\r\n    for (i = 0; i < end; i++) {\r\n        io_out8(0x03c9, rgb[0] / 4);\r\n        io_out8(0x03c9, rgb[1] / 4);\r\n        io_out8(0x03c9, rgb[2] / 4);\r\n        rgb += 3;\r\n    }\r\n    // 还原中断许可\r\n    io_store_eflags(eflags);\r\n    return;\r\n}\r\n```\r\nCPU向设备发送电信号的指令是OUT，从设备取得信号的指令是IN，在OUT和IN指令中，为了区别不同的设备，也要使用设备号码，设备号码在英文中是port（端口）。\r\n\r\n## 调色板的访问步骤\r\n- 首先在一连串的访问中屏蔽中断（比如CLI）\r\n- 将要设定的调色板号码写入0x03c8，紧接着按R，G，B的顺序写入0x03c9，如果还想继续设定下一个调色板，则省略调色板号码，再按RGB的顺序写入0x03c9就行了\r\n- 如果想要读出当前调色板的状态，首先要将色号的号码写入0x03c7，再从0x03c9读取3次，读出的顺序就是R，G，B。如果想要继续读出下一个调色板，同样也是省略调色板号码的设定，按RGB的顺序读出\r\n- 如果最初执行了CLI，那么最后要执行STI\r\n\r\n在C语言中，没有与IN或OUT相当的语句，所以得用汇编来做。\r\n```c\r\n_io_in8:	; int io_in8(int port);\r\n		MOV		EDX,[ESP+4]		; port\r\n		MOV		EAX,0\r\n		IN		AL,DX\r\n		RET\r\n```\r\n同时，C语言中也没有直接屏蔽中断的语句，也使用汇编来做。CLI是将中断标志（interrupt flag）置为0的指令（clear interrupt flag）。\r\n```c\r\n_io_cli:	; void io_cli(void);\r\n		CLI\r\n		RET\r\n```\r\n屏蔽中断也要有恢复中断的方法，也用汇编来做。STI是要将这个中断标志置为1的指令（set interrupt flag）。\r\n```c\r\n_io_sti:	; void io_sti(void);\r\n		STI\r\n		RET\r\n```\r\n关于EFLAGS寄存器\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020214294622212.png)\r\n\r\n# 绘制矩形\r\n在当前画面模式中，画面上有320\\*200（=64000）个像素，假设左上角的坐标是（0，0），右下角的坐标是（320，200），那么像素坐标（x，y）对应的VRAM地址应该按下公式计算：\r\n0xa0000 + x + y \\* 320\r\n其它模式也基本相同，只是0xa0000这个起始地址和y的系数320有些不同。\r\n绘制矩形函数\r\n```c\r\n// 画矩形方法\r\nvoid boxfill8(unsigned char *vram, int xsize, unsigned char c, int x0, int y0,\r\n              int x1, int y1) {\r\n    int x, y;\r\n    for (y = y0; y <= y1; y++) {\r\n        for (x = x0; x <= x1; x++) {\r\n            vram[y * xsize + x] = c;\r\n        }\r\n    }\r\n    return;\r\n}\r\n```\r\n测试一下，画三个矩形\r\n```c\r\nvoid HariMain(void) {\r\n    char *p;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    p = (char *)0xa0000;\r\n\r\n    // 绘制3个矩形\r\n    boxfill8(p, 320, COL8_FF0000, 20, 20, 120, 120);\r\n    boxfill8(p, 320, COL8_00FF00, 70, 50, 170, 150);\r\n    boxfill8(p, 320, COL8_0000FF, 120, 80, 220, 180);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}\r\n```\r\n运行结果\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904100003004178090.png)\r\n\r\n# 绘制操作系统\r\n```c\r\nvoid HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n    vram = (char *)0xa0000;\r\n\r\n    xsize = 320;\r\n    ysize = 200;\r\n\r\n    boxfill8(vram, xsize, COL8_008484, 0, 0, xsize - 1, ysize - 29);\r\n    boxfill8(vram, xsize, COL8_C6C6C6, 0, ysize - 28, xsize - 1, ysize - 28);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, 0, ysize - 27, xsize - 1, ysize - 27);\r\n    boxfill8(vram, xsize, COL8_C6C6C6, 0, ysize - 26, xsize - 1, ysize - 1);\r\n\r\n    boxfill8(vram, xsize, COL8_FFFFFF, 3, ysize - 24, 59, ysize - 24);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, 2, ysize - 24, 2, ysize - 4);\r\n    boxfill8(vram, xsize, COL8_848484, 3, ysize - 4, 59, ysize - 4);\r\n    boxfill8(vram, xsize, COL8_848484, 59, ysize - 23, 59, ysize - 5);\r\n    boxfill8(vram, xsize, COL8_000000, 2, ysize - 3, 59, ysize - 3);\r\n    boxfill8(vram, xsize, COL8_000000, 60, ysize - 24, 60, ysize - 3);\r\n\r\n    boxfill8(vram, xsize, COL8_848484, xsize - 47, ysize - 24, xsize - 4,\r\n             ysize - 24);\r\n    boxfill8(vram, xsize, COL8_848484, xsize - 47, ysize - 23, xsize - 47,\r\n             ysize - 4);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, xsize - 47, ysize - 3, xsize - 4,\r\n             ysize - 3);\r\n    boxfill8(vram, xsize, COL8_FFFFFF, xsize - 3, ysize - 24, xsize - 3,\r\n             ysize - 3);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}\r\n```\r\n测试运行\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904100004575789930.png)\";s:8:\"md_intro\";s:546:\"# 色号设定\r\n色号使用8位二进制数，也就是只能使用0\\~255的数。一般说起指定颜色，都是用#ffffff一类的数，这就是RGB（红绿蓝）方式，用6位十六进制数，也就是24位二进制数来指定颜色。\r\n我们使用的VGA图形模式，320\\*200\\*8位彩色模式，调色板模式色号使用的是8位，是不够显示#ffffff的，所以可以指定0~255的数字所对应的颜色，然后设定调色板。\r\n```c\r\n// 初始化调色板\r\nvoid init_palette(void) {\r\n    static unsign<!--autointro-->\";s:15:\"os_wxapp_images\";s:197:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904020214294622212.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904100003004178090.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904100004575789930.png\";s:21:\"os_wxapp_images_count\";i:3;}', '2019-04-21 22:23:53', 0),(59, 18, 1, '', 0, '', 1, 0, '自制操作系统（十三）| 接收启动信息', NULL, '<p>在bootpack.c里的都是将0xa0000，320，200等数字直接写入程序。而本来这些值应该从asmhead.nas先前保存下来的值中取。如果不这样的话，当画面模式改变时，系统就不能正确运行。</p>\n<h1>读取内存地址值</h1>\n<pre><code class=\"language-c\">\nvoid HariMain(void) {\n    char *vram;\n    int xsize, ysize;\n    short *binfo_scrnx, *binfo_scrny;\n    int *binfo_vram;\n\n    //&lt;!--autointro--&gt;</code></pre><!--autointro-->', '<p>在bootpack.c里的都是将0xa0000，320，200等数字直接写入程序。而本来这些值应该从asmhead.nas先前保存下来的值中取。如果不这样的话，当画面模式改变时，系统就不能正确运行。</p>\r\n<h1 id=\"h1-u8BFBu53D6u5185u5B58u5730u5740u503C\"><a name=\"读取内存地址值\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>读取内存地址值</h1><pre><code class=\"language-c\">void HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    short *binfo_scrnx, *binfo_scrny;\r\n    int *binfo_vram;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo_scrnx = (short *)0x0ff4;\r\n    binfo_scrny = (short *)0x0ff6;\r\n    binfo_vram = (char *)0x0ff8;\r\n    xsize = *binfo_scrnx;\r\n    ysize = *binfo_scrny;\r\n    vram = (char *)*binfo_vram;\r\n\r\n    init_screen(vram, xsize, ysize);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>在asmhead.nas中，将启动的画面模式信息存在了0x0ff4、0x0ff6、0x0ff8内存地址中，所以，这里使用C语言指针，从这些内存地址里读取出值赋给变量。</p>\r\n<h1 id=\"h1-u4F7Fu7528u7ED3u6784u4F53\"><a name=\"使用结构体\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>使用结构体</h1><pre><code class=\"language-c\">struct BOOTINFO {\r\n    char cyls, leds, vmode, reserve;\r\n    short scrnx, scrny;\r\n    char *vram;\r\n};\r\nvoid HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n    xsize = (*binfo).scrnx;\r\n    ysize = (*binfo).scrny;\r\n    vram = (*binfo).vram;\r\n\r\n    init_screen(vram, xsize, ysize);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>将启动信息都归纳到一个结构体内。在32位编译器下，一个char占1个字节，一个char*(指针变量)占4个字节，一个short占2个字节，所以这个结构体占12个字节，binfo是一个指针变量（4个字节），首先要给binfo赋值，0x0ff0正好是asmhead.nas中设置启动区的内存地址，通过使用结构体中的不同类型的变量，正好获取到asmhead.nas中保存在对应内存地址的数据。</p>\r\n<h1 id=\"h1-u7BADu5934u8BB0u53F7\"><a name=\"箭头记号\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>箭头记号</h1><p>在C语言中，常常会用到类似（*binfo).scrnx的表现手法，因此出现了一种不使用括号的方式，即binfo-&gt;scrnx，我们称为箭头标记方式。</p>\r\n<pre><code class=\"language-c\">void HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n\r\n    init_screen(binfo-&gt;vram, binfo-&gt;scrnx, binfo-&gt;scrny);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>箭头标记方式！！让我想起了世界上最好的编程语言！<br>PHP是世界上最好的编程语言，没有之一。</p>\r\n', NULL, 0, 552, 0, '', 'a:2:{s:10:\"md_content\";s:2489:\"在bootpack.c里的都是将0xa0000，320，200等数字直接写入程序。而本来这些值应该从asmhead.nas先前保存下来的值中取。如果不这样的话，当画面模式改变时，系统就不能正确运行。\r\n# 读取内存地址值\r\n```c\r\nvoid HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    short *binfo_scrnx, *binfo_scrny;\r\n    int *binfo_vram;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo_scrnx = (short *)0x0ff4;\r\n    binfo_scrny = (short *)0x0ff6;\r\n    binfo_vram = (char *)0x0ff8;\r\n    xsize = *binfo_scrnx;\r\n    ysize = *binfo_scrny;\r\n    vram = (char *)*binfo_vram;\r\n\r\n    init_screen(vram, xsize, ysize);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}\r\n```\r\n在asmhead.nas中，将启动的画面模式信息存在了0x0ff4、0x0ff6、0x0ff8内存地址中，所以，这里使用C语言指针，从这些内存地址里读取出值赋给变量。\r\n\r\n# 使用结构体\r\n```c\r\nstruct BOOTINFO {\r\n    char cyls, leds, vmode, reserve;\r\n    short scrnx, scrny;\r\n    char *vram;\r\n};\r\nvoid HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n    xsize = (*binfo).scrnx;\r\n    ysize = (*binfo).scrny;\r\n    vram = (*binfo).vram;\r\n\r\n    init_screen(vram, xsize, ysize);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}\r\n```\r\n将启动信息都归纳到一个结构体内。在32位编译器下，一个char占1个字节，一个char\\*(指针变量)占4个字节，一个short占2个字节，所以这个结构体占12个字节，binfo是一个指针变量（4个字节），首先要给binfo赋值，0x0ff0正好是asmhead.nas中设置启动区的内存地址，通过使用结构体中的不同类型的变量，正好获取到asmhead.nas中保存在对应内存地址的数据。\r\n\r\n# 箭头记号\r\n在C语言中，常常会用到类似（\\*binfo).scrnx的表现手法，因此出现了一种不使用括号的方式，即binfo->scrnx，我们称为箭头标记方式。\r\n```c\r\nvoid HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n    \r\n    init_screen(binfo->vram, binfo->scrnx, binfo->scrny);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}\r\n```\r\n箭头标记方式！！让我想起了世界上最好的编程语言！\r\nPHP是世界上最好的编程语言，没有之一。\";s:8:\"md_intro\";s:410:\"在bootpack.c里的都是将0xa0000，320，200等数字直接写入程序。而本来这些值应该从asmhead.nas先前保存下来的值中取。如果不这样的话，当画面模式改变时，系统就不能正确运行。\r\n# 读取内存地址值\r\n```c\r\nvoid HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    short *binfo_scrnx, *binfo_scrny;\r\n    int *binfo_vram;\r\n\r\n    //<!--autointro-->\";}', '2019-04-21 22:23:53', 0),(60, 23, 2, '', 0, '', 0, 0, 'Java动态代理', '/upload/image/041271c50821480e9458037892f5866b.png', '', '<h2 id=\"h2-java-\"><a name=\"Java动态代理的作用及好处\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Java动态代理的作用及好处</h2><p>Java动态代理的优势是实现无侵入式的代码扩展，也就是方法的增强；让你可以在不用修改源码的情况下，增强一些方法；在方法的前后你可以做你任何想做的事情。</p>\r\n', '## Java动态代理的作用及好处\r\nJava动态代理的优势是实现无侵入式的代码扩展，也就是方法的增强；让你可以在不用修改源码的情况下，增强一些方法；在方法的前后你可以做你任何想做的事情。', 0, 56, 0, '2', 'a:2:{s:10:\"md_content\";s:255:\"# Java动态代理的作用及好处\r\nJava动态代理的优势是实现无侵入式的代码扩展，也就是方法的增强；让你可以在不用修改源码的情况下，增强一些方法；在方法的前后你可以做你任何想做的事情。\";s:8:\"md_intro\";s:271:\"# Java动态代理的作用及好处\r\nJava动态代理的优势是实现无侵入式的代码扩展，也就是方法的增强；让你可以在不用修改源码的情况下，增强一些方法；在方法的前后你可以做你任何想做的事情。<!--autointro-->\";}', '2019-04-21 22:23:53', 1),(61, 18, 1, '', 0, '', 1, 0, '自制操作系统（十四）| 显示字符串', '/upload/image/2019/04/201904120150387558902.png', '<h1>显示字符</h1>\n<p>要显示字符，原理就是在屏幕上按点去着色，字符可以用8*16的长方形像素点阵来表示。\n<img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120056554885456.png\" alt=\"\" />\n像这种描画文字形状的数据称为字体（font）数据。可以在C中定义如下数据来表示这个字体A</p>\n<pre><code class=\"language-c\">\nstatic char font_A[16] = {\n                            0x00, // 00000000\n                            0x18, /&lt;!--autointro--&gt;</code></pre><!--autointro-->', '<h1 id=\"h1-u663Eu793Au5B57u7B26\"><a name=\"显示字符\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>显示字符</h1><p>要显示字符，原理就是在屏幕上按点去着色，字符可以用8*16的长方形像素点阵来表示。<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120056554885456.png\" alt=\"\"><br>像这种描画文字形状的数据称为字体（font）数据。可以在C中定义如下数据来表示这个字体A</p>\r\n<pre><code class=\"language-c\">static char font_A[16] = {\r\n                            0x00, // 00000000\r\n                            0x18, // 00011000\r\n                            0x18, // 00011000\r\n                            0x18, // 00011000\r\n                            0x18, // 00011000\r\n                            0x24, // ‭00100100‬\r\n                            0x24, // ‭00100100‬\r\n                            0x24, // ‭00100100‬\r\n                            0x24, // ‭00100100‬\r\n                            0x7e, // ‭01111110‬\r\n                            0x42, // ‭01000010‬\r\n                            0x42, // ‭01000010‬\r\n                            0x42, // ‭01000010‬\r\n                            0xe7, // ‭11100111‬\r\n                            0x00, // 00000000\r\n                            0x00  // 00000000\r\n                        };</code></pre>\r\n<p>因为C无法使用二进制数记录数据，只能写成十六进制或八进制。编写一个用户绘制文字的函数。</p>\r\n<pre><code class=\"language-c\">void putfont8(char *vram, int xsize, int x, int y, char c, char *font) {\r\n    int i;\r\n    char *p, d;\r\n    for (i = 0; i &lt; 16; i++) {\r\n        // 公式 0xa0000 + x + y * 320\r\n        // 根据这个公式，可以计算出（x,y）坐标点对应的内存地址\r\n        p = vram + x + (y + i) * xsize ;\r\n        d = font[i];\r\n        // 0x80  1000000\r\n        if ((d &amp; 0x80) != 0) { p[0] = c; }\r\n        if ((d &amp; 0x40) != 0) { p[1] = c; }\r\n        if ((d &amp; 0x20) != 0) { p[2] = c; }\r\n        if ((d &amp; 0x10) != 0) { p[3] = c; }\r\n        if ((d &amp; 0x08) != 0) { p[4] = c; }\r\n        if ((d &amp; 0x04) != 0) { p[5] = c; }\r\n        if ((d &amp; 0x02) != 0) { p[6] = c; }\r\n        if ((d &amp; 0x01) != 0) { p[7] = c; }\r\n    }\r\n    return;\r\n}</code></pre>\r\n<p>&amp;是逻辑’与’运算，0x80的二进制是10000000，它与d进行’与’运算的结果如果是0，就说明d的最左边一位是0，反之，如果结果不是0，则d的最左边一位就是1。</p>\r\n<pre><code class=\"language-c\">void HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n    static char font_A[16] = {0x00, 0x18, 0x18, 0x18, 0x18, 0x24,0x24, 0x24,0x24,0x7e, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00};\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n\r\n    init_screen(binfo-&gt;vram, binfo-&gt;scrnx, binfo-&gt;scrny);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 10, 10, COL8_FFFFFF, font_A);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>使用函数绘制文字数据A，运行结果<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120127094076182.png\" alt=\"\"></p>\r\n<h1 id=\"h1-u589Eu52A0u5B57u4F53\"><a name=\"增加字体\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>增加字体</h1><p>使用书籍配套的字体文件hankaku.txt，在Makefile中将文件编译成obj文件，并链接到bin里。</p>\r\n<pre><code class=\"language-c\">extern char hankaku[4096];</code></pre>\r\n<p>源程序以外的数据，需要使用extern属性，编译器才知道它是外部数据，编译时候做出相应调整。hankaku是ASCII字符编码，含有256个字符。A的字符编码是0x41，所以A的字体数据，放在自”hankaku+0x41*16”开始的16字节里。C语言中A的字符编码可以用’A’表示，正好用它来代替0x41，所以也可以写成”hankaku+’A’*16”</p>\r\n<pre><code class=\"language-c\">void HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n    extern char hankaku[4096];\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n\r\n    init_screen(binfo-&gt;vram, binfo-&gt;scrnx, binfo-&gt;scrny);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx,  8, 8, COL8_FFFFFF, hankaku + &#39;A&#39; * 16);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 16, 8, COL8_FFFFFF, hankaku + &#39;B&#39; * 16);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 24, 8, COL8_FFFFFF, hankaku + &#39;C&#39; * 16);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 40, 8, COL8_FFFFFF, hankaku + &#39;1&#39; * 16);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 48, 8, COL8_FFFFFF, hankaku + &#39;2&#39; * 16);\r\n    putfont8(binfo-&gt;vram, binfo-&gt;scrnx, 56, 8, COL8_FFFFFF, hankaku + &#39;3&#39; * 16);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>输出多个字符，运行结果<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120136125176381.png\" alt=\"\"></p>\r\n<h1 id=\"h1-u663Eu793Au5B57u7B26u4E32\"><a name=\"显示字符串\" class=\"reference-link\" href=\"#\"></a><span class=\"header-link octicon octicon-link\"></span>显示字符串</h1><p>一个一个输出字符，显然是毕竟低效的，编写一个显示字符串的函数</p>\r\n<pre><code class=\"language-c\">void putfonts8_asc(char *vram, int xsize, int x, int y, char c,\r\n                   unsigned char *s) {\r\n    extern char hankaku[4096];\r\n    for (; *s != 0x00; s++) {\r\n        putfont8(vram, xsize, x, y, c, hankaku + *s * 16);\r\n        x += 8;\r\n    }\r\n    return;\r\n}</code></pre>\r\n<p>在main函数里测试一下</p>\r\n<pre><code class=\"language-c\">void HariMain(void) {\r\n\r\n    struct BOOTINFO *binfo = (struct BOOTINFO *) 0x0ff0;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    init_screen(binfo-&gt;vram, binfo-&gt;scrnx, binfo-&gt;scrny);\r\n    putfonts8_asc(binfo-&gt;vram, binfo-&gt;scrnx, 8, 8, COL8_FFFFFF,\r\n                  &quot;PHP is the best programming language&quot;);\r\n    putfonts8_asc(binfo-&gt;vram, binfo-&gt;scrnx, 8, 30, COL8_FFFFFF,\r\n                  &quot;in the world!&quot;);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}</code></pre>\r\n<p>运行结果<br><img src=\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120150387558902.png\" alt=\"\"></p>\r\n', NULL, 0, 578, 1, '', 'a:4:{s:10:\"md_content\";s:4994:\"# 显示字符\r\n要显示字符，原理就是在屏幕上按点去着色，字符可以用8\\*16的长方形像素点阵来表示。\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120056554885456.png)\r\n像这种描画文字形状的数据称为字体（font）数据。可以在C中定义如下数据来表示这个字体A\r\n```c\r\nstatic char font_A[16] = {\r\n							0x00, // 00000000\r\n							0x18, // 00011000\r\n							0x18, // 00011000\r\n							0x18, // 00011000\r\n							0x18, // 00011000\r\n							0x24, // ‭00100100‬\r\n							0x24, // ‭00100100‬\r\n							0x24, // ‭00100100‬\r\n							0x24, // ‭00100100‬\r\n							0x7e, // ‭01111110‬\r\n							0x42, // ‭01000010‬\r\n							0x42, // ‭01000010‬\r\n							0x42, // ‭01000010‬\r\n							0xe7, // ‭11100111‬\r\n							0x00, // 00000000\r\n							0x00  // 00000000\r\n						};\r\n```\r\n因为C无法使用二进制数记录数据，只能写成十六进制或八进制。编写一个用户绘制文字的函数。\r\n```c\r\nvoid putfont8(char *vram, int xsize, int x, int y, char c, char *font) {\r\n    int i;\r\n    char *p, d;\r\n    for (i = 0; i < 16; i++) {\r\n        // 公式 0xa0000 + x + y * 320\r\n        // 根据这个公式，可以计算出（x,y）坐标点对应的内存地址\r\n        p = vram + x + (y + i) * xsize ;\r\n        d = font[i];\r\n		// 0x80  1000000\r\n        if ((d & 0x80) != 0) { p[0] = c; }\r\n        if ((d & 0x40) != 0) { p[1] = c; }\r\n        if ((d & 0x20) != 0) { p[2] = c; }\r\n        if ((d & 0x10) != 0) { p[3] = c; }\r\n        if ((d & 0x08) != 0) { p[4] = c; }\r\n        if ((d & 0x04) != 0) { p[5] = c; }\r\n        if ((d & 0x02) != 0) { p[6] = c; }\r\n        if ((d & 0x01) != 0) { p[7] = c; }\r\n    }\r\n    return;\r\n}\r\n```\r\n&是逻辑\'与\'运算，0x80的二进制是10000000，它与d进行\'与\'运算的结果如果是0，就说明d的最左边一位是0，反之，如果结果不是0，则d的最左边一位就是1。\r\n```c\r\nvoid HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n    static char font_A[16] = {0x00, 0x18, 0x18, 0x18, 0x18, 0x24,0x24, 0x24,0x24,0x7e, 0x42, 0x42, 0x42, 0xe7, 0x00, 0x00};\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n\r\n    init_screen(binfo->vram, binfo->scrnx, binfo->scrny);\r\n    putfont8(binfo->vram, binfo->scrnx, 10, 10, COL8_FFFFFF, font_A);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}\r\n```\r\n使用函数绘制文字数据A，运行结果\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120127094076182.png)\r\n\r\n# 增加字体\r\n使用书籍配套的字体文件hankaku.txt，在Makefile中将文件编译成obj文件，并链接到bin里。\r\n```c\r\nextern char hankaku[4096];\r\n```\r\n源程序以外的数据，需要使用extern属性，编译器才知道它是外部数据，编译时候做出相应调整。hankaku是ASCII字符编码，含有256个字符。A的字符编码是0x41，所以A的字体数据，放在自\"hankaku+0x41\\*16\"开始的16字节里。C语言中A的字符编码可以用\'A\'表示，正好用它来代替0x41，所以也可以写成\"hankaku+\'A\'\\*16\"\r\n```c\r\nvoid HariMain(void) {\r\n    char *vram;\r\n    int xsize, ysize;\r\n    struct BOOTINFO *binfo;\r\n    extern char hankaku[4096];\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    binfo = (struct BOOTINFO *)0x0ff0;\r\n\r\n    init_screen(binfo->vram, binfo->scrnx, binfo->scrny);\r\n    putfont8(binfo->vram, binfo->scrnx,  8, 8, COL8_FFFFFF, hankaku + \'A\' * 16);\r\n	putfont8(binfo->vram, binfo->scrnx, 16, 8, COL8_FFFFFF, hankaku + \'B\' * 16);\r\n	putfont8(binfo->vram, binfo->scrnx, 24, 8, COL8_FFFFFF, hankaku + \'C\' * 16);\r\n	putfont8(binfo->vram, binfo->scrnx, 40, 8, COL8_FFFFFF, hankaku + \'1\' * 16);\r\n	putfont8(binfo->vram, binfo->scrnx, 48, 8, COL8_FFFFFF, hankaku + \'2\' * 16);\r\n	putfont8(binfo->vram, binfo->scrnx, 56, 8, COL8_FFFFFF, hankaku + \'3\' * 16);\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}\r\n```\r\n输出多个字符，运行结果\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120136125176381.png)\r\n\r\n# 显示字符串\r\n一个一个输出字符，显然是毕竟低效的，编写一个显示字符串的函数\r\n```c\r\nvoid putfonts8_asc(char *vram, int xsize, int x, int y, char c,\r\n                   unsigned char *s) {\r\n    extern char hankaku[4096];\r\n    for (; *s != 0x00; s++) {\r\n        putfont8(vram, xsize, x, y, c, hankaku + *s * 16);\r\n        x += 8;\r\n    }\r\n    return;\r\n}\r\n```\r\n在main函数里测试一下\r\n```c\r\nvoid HariMain(void) {\r\n\r\n    struct BOOTINFO *binfo = (struct BOOTINFO *) 0x0ff0;\r\n\r\n    // 初始化调色板\r\n    init_palette();\r\n\r\n    init_screen(binfo->vram, binfo->scrnx, binfo->scrny);\r\n    putfonts8_asc(binfo->vram, binfo->scrnx, 8, 8, COL8_FFFFFF,\r\n                  \"PHP is the best programming language\");\r\n    putfonts8_asc(binfo->vram, binfo->scrnx, 8, 30, COL8_FFFFFF,\r\n                  \"in the world!\");\r\n\r\n    for (;;) {\r\n        io_hlt();\r\n    }\r\n}\r\n```\r\n运行结果\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120150387558902.png)\";s:8:\"md_intro\";s:418:\"# 显示字符\r\n要显示字符，原理就是在屏幕上按点去着色，字符可以用8\\*16的长方形像素点阵来表示。\r\n![]({#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120056554885456.png)\r\n像这种描画文字形状的数据称为字体（font）数据。可以在C中定义如下数据来表示这个字体A\r\n```c\r\nstatic char font_A[16] = {\r\n							0x00, // 00000000\r\n							0x18, /<!--autointro-->\";s:15:\"os_wxapp_images\";s:263:\"{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120056554885456.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120127094076182.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120136125176381.png,{#ZC_BLOG_HOST#}zb_users/upload/2019/04/201904120150387558902.png\";s:21:\"os_wxapp_images_count\";i:4;}', '2019-04-21 22:23:53', 0),(65, 37, 1, '', 0, '', 0, 0, '零基础学运营 (一) | 运营概述 ', '/upload/image/e25cb0800fe442edb42ba5be8a6020f4.png', '一切能够进行产品推广、促进用户使用、提高用户认知的手段都是运营。运营的核心目的就是，让产品活得更好更久。', '<h2 id=\"h2-u8FD0u8425u7684u5B9Au4E49\"><a name=\"运营的定义\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运营的定义</h2><p>一切能够进行产品推广、促进用户使用、提高用户认知的手段都是运营。</p>\r\n<h2 id=\"h2-u8FD0u8425u7684u6838u5FC3u76EEu7684\"><a name=\"运营的核心目的\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运营的核心目的</h2><p>让产品活得更好更久。</p>\r\n<h2 id=\"h2-u4EA7u54C1u7684u751Fu547Du5468u671F\"><a name=\"产品的生命周期\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>产品的生命周期</h2><blockquote>\r\n<p>孕育 &gt; 初创 &gt; 成长 &gt; 成熟 &gt; 衰退 &gt; 消亡</p>\r\n</blockquote>\r\n<ul>\r\n<li><p>孕育期<br>  进行产品设计的过程；<br>  运营人员应当介入产品设计，预留好运营接口，做好对应的运营准备；</p>\r\n</li><li><p>初创期<br>  达到上线状态，与用户见面；<br>  运营人员应当通过各种手段获取初始用户，培养种子用户；</p>\r\n</li><li><p>成长期<br>  获取用户，持续运营；<br>  运营人员应当借助各种资源进行市场推广、开展各项活动，加速用户与收入的增长速度；</p>\r\n</li><li><p>成熟期<br>  用户稳定，收入持续；<br>  运营人员应当通过各种运营手段，保持用户稳定，保障收入稳定；</p>\r\n</li><li><p>衰退期<br>  用户衰减，收入减少；<br>  运营人员应当更多的关怀用户，并试图将已有的用户导入新的产品；</p>\r\n</li><li><p>消亡期<br>  完成历史使命，产品终结；<br>  运营人员应该做好后续工作，对用户有交代；</p>\r\n</li></ul>\r\n<h2 id=\"h2-u79CDu5B50u7528u6237\"><a name=\"种子用户\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>种子用户</h2><p>初期产品运营的概念；它指的是与产品对应的目标用户中的核心群体，这个群体是产品的重度使用者，并积极主动、乐于分享，其参与度远远高于其他使用者。种子用的作用是提出对产品的意见与建议，积极主动的参与到分享与推广产品的过程中去。</p>\r\n', '## 运营的定义\r\n一切能够进行产品推广、促进用户使用、提高用户认知的手段都是运营。\r\n\r\n## 运营的核心目的\r\n让产品活得更好更久。\r\n\r\n## 产品的生命周期\r\n> 孕育 > 初创 > 成长 > 成熟 > 衰退 > 消亡\r\n\r\n- 孕育期\r\n	进行产品设计的过程；\r\n	运营人员应当介入产品设计，预留好运营接口，做好对应的运营准备；\r\n	\r\n- 初创期\r\n	达到上线状态，与用户见面；\r\n	运营人员应当通过各种手段获取初始用户，培养种子用户；\r\n	\r\n- 成长期\r\n	获取用户，持续运营；\r\n	运营人员应当借助各种资源进行市场推广、开展各项活动，加速用户与收入的增长速度；\r\n	\r\n- 成熟期\r\n	用户稳定，收入持续；\r\n	运营人员应当通过各种运营手段，保持用户稳定，保障收入稳定；\r\n	\r\n- 衰退期\r\n	用户衰减，收入减少；\r\n	运营人员应当更多的关怀用户，并试图将已有的用户导入新的产品；\r\n	\r\n- 消亡期\r\n	完成历史使命，产品终结；\r\n	运营人员应该做好后续工作，对用户有交代；\r\n	\r\n## 种子用户\r\n初期产品运营的概念；它指的是与产品对应的目标用户中的核心群体，这个群体是产品的重度使用者，并积极主动、乐于分享，其参与度远远高于其他使用者。种子用的作用是提出对产品的意见与建议，积极主动的参与到分享与推广产品的过程中去。\r\n', 0, 522, 0, 'detail', NULL, '2019-04-28 11:37:06', 0),(66, 37, 1, '', 0, '', 0, 0, '零基础学运营 (二) | 核心任务--流量建设、用户运营', '/upload/image/e541739545984bc4bd1b69c23aff6fdc.png', '流量建设是要通过各种推广、扩散、营销、活动，提升网站的流量指标，我们通常所说的PV、UV、转化率、SEO都在这个环节', '<h2 id=\"h2-u6D41u91CFu5EFAu8BBE\"><a name=\"流量建设\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>流量建设</h2><p>流量建设是要通过各种推广、扩散、营销、活动，提升网站的流量指标，我们通常所说的PV、UV、转化率、SEO都在这个环节。<br><img src=\"/upload/image/e67e7b3649ce4bbe94e4966bf688d68b.png\" alt=\"\"></p>\r\n<ul>\r\n<li><p>流量：在一定时间内进入网站/产品的访问量。</p>\r\n</li><li><p>PV：Page View的英文缩写，意为页面浏览量，是评价网站流量的常用指标之一。</p>\r\n</li><li><p>UV：Unique Visitor的缩写，指不同的、通过互联网访问、浏览这个网页的自然人。</p>\r\n</li><li><p>转化率：Take Rates（Conversions Rates），转化率=进行了相应的动作的访问量/总访问量，用以衡量网站内容对访问者的吸引程度以及网站的宣传效果。</p>\r\n</li><li><p>SEO：Search Engine Optimiztion的英文缩写，意为“搜索引擎优化”。SEO指从自然搜索结果获得网站流量的技术和过程。</p>\r\n</li></ul>\r\n<h2 id=\"h2-u7528u6237u7EF4u7CFB\"><a name=\"用户维系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>用户维系</h2><p>有了用户和流量之后，运营的大部分工作在于如何持续有效的推动用户的活跃与留存，并从中发现有价值甚至高价值的用户。<br>经过多年的发展，用户的定义已经发展成为“USER”（使用者）与“Member”（会员）两种基础定义。</p>\r\n', '## 流量建设\r\n流量建设是要通过各种推广、扩散、营销、活动，提升网站的流量指标，我们通常所说的PV、UV、转化率、SEO都在这个环节。\r\n![](/upload/image/e67e7b3649ce4bbe94e4966bf688d68b.png)\r\n\r\n- 流量：在一定时间内进入网站/产品的访问量。\r\n\r\n- PV：Page View的英文缩写，意为页面浏览量，是评价网站流量的常用指标之一。\r\n\r\n- UV：Unique Visitor的缩写，指不同的、通过互联网访问、浏览这个网页的自然人。\r\n\r\n- 转化率：Take Rates（Conversions Rates），转化率=进行了相应的动作的访问量/总访问量，用以衡量网站内容对访问者的吸引程度以及网站的宣传效果。\r\n\r\n- SEO：Search Engine Optimiztion的英文缩写，意为“搜索引擎优化”。SEO指从自然搜索结果获得网站流量的技术和过程。\r\n\r\n## 用户维系\r\n有了用户和流量之后，运营的大部分工作在于如何持续有效的推动用户的活跃与留存，并从中发现有价值甚至高价值的用户。\r\n经过多年的发展，用户的定义已经发展成为“USER”（使用者）与“Member”（会员）两种基础定义。', 0, 426, 2, 'detail', NULL, '2019-04-28 10:28:56', 0),(67, 37, 1, '', 0, '', 0, 0, '零基础学运营 (三) | 内容运营', '/upload/image/328cc92eb22d4dbfa712da5e2399c0ec.png', '内容运营是指通过创造、编辑、组织、呈现网站或产品的内容，从而提高互联网产品的内容价值，制造出对用户的黏着、活跃产生一定促进作用的动作。', '<h2 id=\"h2-u4EC0u4E48u662Fu5185u5BB9\"><a name=\"什么是内容\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是内容</h2><p>网站（产品）中可提供用户消费并且延长用户停留时间、促进用户转化的展示均可称之为“内容”。表现形式有文字、图片、音频、视频或者动作等。</p>\r\n<blockquote>\r\n<p>举N栗子</p>\r\n<p>电商网站中琳琅满目的商品，这些商品有图片、名称、价格、打折信息、用户评价、打分、晒单、问答等。</p>\r\n<p>门户网站中的各类新闻，有文字、图片、视频、音频，有各种形式的专题，博客、微博等。</p>\r\n<p>政府网站中关于政府的新闻，各项法规、政策、政府职能描述等。</p>\r\n<p>搜索引擎中各种词条，词条中还有被标红的关键词、链接地址、图标（icon）等。</p>\r\n<p>社区论坛中的各种话题、问答、帖子、回复等。</p>\r\n</blockquote>\r\n<p>所有互联网产品都有内容，区别在于内容的形式不同，内容的展现方式不同，带给受众的感知不同，参与和互动的方式也不同。</p>\r\n<h2 id=\"h2-u4EC0u4E48u662Fu5185u5BB9u8FD0u8425\"><a name=\"什么是内容运营\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是内容运营</h2><p>内容运营是指通过创造、编辑、组织、呈现网站或产品的内容，从而提高互联网产品的内容价值，制造出对用户的黏着、活跃产生一定促进作用的动作。</p>\r\n<p><img src=\"/upload/image/5f26f841bcdf405da8ae60486b0b5c8b.png\" alt=\"\"></p>\r\n<p>内容运营的工作至少包括五个部分：</p>\r\n<blockquote>\r\n<p>创作内容（采集或者原创，包括各种内容类型）<br>编辑审核<br>推荐和专题制作<br>找到需要这些内容的人，并且想办法呈现给他们<br>根据数据和用户反馈，进行内容调整与优化</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5185u5BB9u8FD0u8425u7684u6838u5FC3\"><a name=\"内容运营的核心\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容运营的核心</h2><blockquote>\r\n<p>持续制作、编辑及推荐对用户有价值的内容，保证用户可以在产品中获取这些信息<br>根据KPI的设计，降低或者提高用户获取内容的成本<br>协助网站（产品）获利</p>\r\n</blockquote>\r\n<p>内容运营非常倚重文案能力，它对任职人员的思维灵活度、创意水平、逻辑能力都有要求。你既需要想出有趣的新鲜点子来规划和展示你的内容，又不能过分浮夸以至于用户不知所云为何物。<br>同时，内容运营人员也需要了解用户互动的逻辑，找出有效的方法和手段，刺激用户间产生正向互动，从而获得更多优质内容。</p>\r\n', '## 什么是内容\r\n网站（产品）中可提供用户消费并且延长用户停留时间、促进用户转化的展示均可称之为“内容”。表现形式有文字、图片、音频、视频或者动作等。\r\n> 举N栗子\r\n\r\n> 电商网站中琳琅满目的商品，这些商品有图片、名称、价格、打折信息、用户评价、打分、晒单、问答等。\r\n\r\n> 门户网站中的各类新闻，有文字、图片、视频、音频，有各种形式的专题，博客、微博等。\r\n\r\n> 政府网站中关于政府的新闻，各项法规、政策、政府职能描述等。\r\n\r\n> 搜索引擎中各种词条，词条中还有被标红的关键词、链接地址、图标（icon）等。\r\n\r\n> 社区论坛中的各种话题、问答、帖子、回复等。\r\n\r\n所有互联网产品都有内容，区别在于内容的形式不同，内容的展现方式不同，带给受众的感知不同，参与和互动的方式也不同。\r\n\r\n## 什么是内容运营\r\n内容运营是指通过创造、编辑、组织、呈现网站或产品的内容，从而提高互联网产品的内容价值，制造出对用户的黏着、活跃产生一定促进作用的动作。\r\n\r\n![](/upload/image/5f26f841bcdf405da8ae60486b0b5c8b.png)\r\n\r\n内容运营的工作至少包括五个部分：\r\n> 创作内容（采集或者原创，包括各种内容类型）\r\n> 编辑审核\r\n> 推荐和专题制作\r\n> 找到需要这些内容的人，并且想办法呈现给他们\r\n> 根据数据和用户反馈，进行内容调整与优化\r\n\r\n## 内容运营的核心\r\n> 持续制作、编辑及推荐对用户有价值的内容，保证用户可以在产品中获取这些信息\r\n> 根据KPI的设计，降低或者提高用户获取内容的成本\r\n> 协助网站（产品）获利\r\n\r\n内容运营非常倚重文案能力，它对任职人员的思维灵活度、创意水平、逻辑能力都有要求。你既需要想出有趣的新鲜点子来规划和展示你的内容，又不能过分浮夸以至于用户不知所云为何物。\r\n同时，内容运营人员也需要了解用户互动的逻辑，找出有效的方法和手段，刺激用户间产生正向互动，从而获得更多优质内容。', 0, 457, 1, 'detail', NULL, '2019-04-28 11:35:19', 0),(68, 37, 1, '', 0, '', 0, 0, '零基础学运营 (四) | 内容运营的初期事项', '/upload/image/61b262ab91ce4779b915eb5580db8085.png', '过去我们在面对内容运营时，很容易犯的一个错误是，把内容运营简化为将内容组织呈现出来并推送给希望推送的对象，而忽略了整体过程应该遵循内容供应链的思路。', '<blockquote>\r\n<p>内容的采集与创造<br>内容的呈现与管理<br>内容的扩散与传导<br>内容的效果与评估</p>\r\n</blockquote>\r\n<h2 id=\"h2--\"><a name=\"内容供应链——将内容视为你的商品\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容供应链——将内容视为你的商品</h2><p>供应链传统的意思是：产品生产和流通过程中所涉及的原料供应商、生厂商、分销商、零售商以及最终消费者等成员通过与上游、下游成员的连接组成的网络。<br><img src=\"/upload/image/c7a5bc11d65e4512ba0c9b010ebf141f.png\" alt=\"\"></p>\r\n<p>借助传统的供应链图示，可以将内容供应链类比如下图</p>\r\n<p><img src=\"/upload/image/6833211f6d8e4a2baabbc2a107db43ac.png\" alt=\"\"></p>\r\n<blockquote>\r\n<p>网站（产品）上有哪些内容（定位）<br>这些内容从哪里来，游谁提供（来源）<br>这些内容给谁看，要达到什么样的目标（受众）<br>这些内容要如何组织与呈现（展现机制）<br>这些内容如何做筛选，什么是好的内容（内容标准化）</p>\r\n</blockquote>\r\n<p>过去我们在面对内容运营时，很容易犯的一个错误是，<strong>把内容运营简化为将内容组织呈现出来并推送给希望推送的对象</strong>，而忽略了整体过程应该遵循内容供应链的思路。</p>\r\n<p>在内容运营的初期，对运营工作的排序应该是：</p>\r\n<ul>\r\n<li>内容消费者定位（网站定位+受众定位+运营目标）</li><li>内容来源确认（采集或者寻找内容生产者）</li><li>内容标准的确立（有哪些内容、如何展现内容、评判内容质量的标准）。</li></ul>\r\n<p>将你的内容视为你的商品，从初始阶段就定义这个商品的销售对象、选品和展示方式，进而确保上线后的后台内容流转与前台展示效果。</p>\r\n<h2 id=\"h2--\"><a name=\"内容初始化——构建网站与产品的价值观\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容初始化——构建网站与产品的价值观</h2><p>内容初始化就是在已构建的内容框架下，在用户进入之前填充一些内容，这些内容是内容运营初期网站或产品的核心部分，<strong>代表了网站或产品的价值观</strong>。</p>\r\n<p>内容初始化之前要解决的</p>\r\n<ul>\r\n<li>第一，确立好内容供应链的架构，解决内容从哪里来、到哪里去的流程问题。</li><li>第二，确立好内容面对的初始用户群（种子用户）。</li><li>第三，明确第一阶段用内容解决的问题，并进行内容准备。</li><li>第四，关键路径的梳理与初始内容的准备。</li></ul>\r\n', '> 内容的采集与创造\r\n> 内容的呈现与管理\r\n> 内容的扩散与传导\r\n> 内容的效果与评估\r\n\r\n## 内容供应链——将内容视为你的商品\r\n供应链传统的意思是：产品生产和流通过程中所涉及的原料供应商、生厂商、分销商、零售商以及最终消费者等成员通过与上游、下游成员的连接组成的网络。\r\n![](/upload/image/c7a5bc11d65e4512ba0c9b010ebf141f.png)\r\n\r\n借助传统的供应链图示，可以将内容供应链类比如下图\r\n\r\n![](/upload/image/6833211f6d8e4a2baabbc2a107db43ac.png)\r\n\r\n> 网站（产品）上有哪些内容（定位）\r\n> 这些内容从哪里来，游谁提供（来源）\r\n> 这些内容给谁看，要达到什么样的目标（受众）\r\n> 这些内容要如何组织与呈现（展现机制）\r\n> 这些内容如何做筛选，什么是好的内容（内容标准化）\r\n\r\n过去我们在面对内容运营时，很容易犯的一个错误是，**把内容运营简化为将内容组织呈现出来并推送给希望推送的对象**，而忽略了整体过程应该遵循内容供应链的思路。\r\n\r\n在内容运营的初期，对运营工作的排序应该是：\r\n- 内容消费者定位（网站定位+受众定位+运营目标）\r\n- 内容来源确认（采集或者寻找内容生产者）\r\n- 内容标准的确立（有哪些内容、如何展现内容、评判内容质量的标准）。\r\n\r\n将你的内容视为你的商品，从初始阶段就定义这个商品的销售对象、选品和展示方式，进而确保上线后的后台内容流转与前台展示效果。\r\n\r\n## 内容初始化——构建网站与产品的价值观\r\n内容初始化就是在已构建的内容框架下，在用户进入之前填充一些内容，这些内容是内容运营初期网站或产品的核心部分，**代表了网站或产品的价值观**。\r\n\r\n内容初始化之前要解决的\r\n- 第一，确立好内容供应链的架构，解决内容从哪里来、到哪里去的流程问题。\r\n- 第二，确立好内容面对的初始用户群（种子用户）。\r\n- 第三，明确第一阶段用内容解决的问题，并进行内容准备。\r\n- 第四，关键路径的梳理与初始内容的准备。\r\n', 0, 457, 2, 'detail', NULL, '2019-04-29 11:29:30', 0),(69, 37, 1, '', 0, '', 0, 0, '零基础学运营 (五) | 建立内容规范与推送渠道选择', '/upload/image/45cb35b3e3974fc59a8630fb1a703c40.png', '即便有了系统和规则的约束，内容质量的甄别也依然会有部分内容依赖人工，而且内容质量的甄别，本身就是所有有内容的网站和产品始终都在寻找解决方案的重要事项。', '<p>当一个网站或产品进入正式运营阶段，就需要建立一些标准。</p>\r\n<blockquote>\r\n<p>内容质量的甄别。<br>好内容的露出与呈现方式。<br>持续的推送与推荐机制的建立。<br>实现“自运营”的路径与机制选择。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5185u5BB9u8D28u91CFu7684u7504u522B\"><a name=\"内容质量的甄别\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容质量的甄别</h2><p>从<strong>产品设计</strong>层面，可以设计“赞同”、“反对”等，让用户协助网站筛选信息以及网站协助用户筛选信息的工具。<br>建立<strong>内容规范</strong>，确立了创建内容的标准后，网站就以及可以初步对垃圾内容的产生进行约束，创建内容标准的确立对甄别内容质量的帮助，是初步减少不良内容的出现概率。及规避对不良内容的清洗带来的用户投诉和用户意见的反弹。<br>即便有了系统和规则的约束，内容质量的甄别也依然会有部分内容依赖人工，而且内容质量的甄别，本身就是所有有内容的网站和产品始终都在寻找解决方案的重要事项。</p>\r\n<h2 id=\"h2-u628Au597Du7684u5185u5BB9u5448u73B0u7ED9u7528u6237\"><a name=\"把好的内容呈现给用户\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>把好的内容呈现给用户</h2><p>呈现的方式，无非是用户主动发现，以及运营人员对用户主动推送与引导两种方式。<br>推送渠道（也称为消息、通知），是很多运营人员都会用的手段。<br><img src=\"/upload/image/d75b831e3b3f42d38cb13ad9c330dd62.png\" alt=\"\"><br>既然有渠道，就有渠道选择问题，渠道选择原则自不待言，就是要使用用户最常接触、且最易使用的那部分渠道。在推送渠道的选择上</p>\r\n<blockquote>\r\n<p>第一，优先考虑渠道是否覆盖推送对象。<br>第二，推送内容的时效性。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u63A8u9001u6E20u9053u9009u62E9u7684u4F9Du636E\"><a name=\"推送渠道选择的依据\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>推送渠道选择的依据</h2><p><strong>历史推送数据</strong>。使用过什么渠道，各个渠道的到达率和转化率如何。<br><strong>竞品选择的渠道</strong>。如果没有历史数据，就需要预估，此时比较具有参开价值的，是竞品的渠道选择。<br><strong>用户兴趣点所涉及的渠道</strong>。没有历史数据，也没有掌握竞品的渠道，或者干脆连没有竞品；那么可能就需要跟进用户行为去猜测用户可能会在哪些渠道上接受信息，比如搜索引擎，导购平台等。</p>\r\n', '当一个网站或产品进入正式运营阶段，就需要建立一些标准。\r\n> 内容质量的甄别。\r\n> 好内容的露出与呈现方式。\r\n> 持续的推送与推荐机制的建立。\r\n> 实现“自运营”的路径与机制选择。\r\n\r\n## 内容质量的甄别\r\n从**产品设计**层面，可以设计“赞同”、“反对”等，让用户协助网站筛选信息以及网站协助用户筛选信息的工具。\r\n建立**内容规范**，确立了创建内容的标准后，网站就以及可以初步对垃圾内容的产生进行约束，创建内容标准的确立对甄别内容质量的帮助，是初步减少不良内容的出现概率。及规避对不良内容的清洗带来的用户投诉和用户意见的反弹。\r\n即便有了系统和规则的约束，内容质量的甄别也依然会有部分内容依赖人工，而且内容质量的甄别，本身就是所有有内容的网站和产品始终都在寻找解决方案的重要事项。\r\n\r\n## 把好的内容呈现给用户\r\n呈现的方式，无非是用户主动发现，以及运营人员对用户主动推送与引导两种方式。\r\n推送渠道（也称为消息、通知），是很多运营人员都会用的手段。\r\n![](/upload/image/d75b831e3b3f42d38cb13ad9c330dd62.png)\r\n既然有渠道，就有渠道选择问题，渠道选择原则自不待言，就是要使用用户最常接触、且最易使用的那部分渠道。在推送渠道的选择上\r\n> 第一，优先考虑渠道是否覆盖推送对象。\r\n> 第二，推送内容的时效性。\r\n\r\n## 推送渠道选择的依据\r\n**历史推送数据**。使用过什么渠道，各个渠道的到达率和转化率如何。\r\n**竞品选择的渠道**。如果没有历史数据，就需要预估，此时比较具有参开价值的，是竞品的渠道选择。\r\n**用户兴趣点所涉及的渠道**。没有历史数据，也没有掌握竞品的渠道，或者干脆连没有竞品；那么可能就需要跟进用户行为去猜测用户可能会在哪些渠道上接受信息，比如搜索引擎，导购平台等。', 0, 527, 1, 'detail', NULL, '2019-05-02 11:07:52', 0),(70, 37, 1, '', 0, '', 0, 0, '零基础学运营 (六) | 写一个好文案', '/upload/image/b6f7f2705cff4700aa81241c77e50164.png', '大部分用户只会看标题或者前面一段小字，以确定要不要展开它，或者直接忽略。所以推送内容务必直接了当，当然，这种直接了当是根据用户习惯来确定具体内容的。', '<p>大部分用户只会看标题或者前面一段小字，以确定要不要展开它，或者直接忽略。所以推送内容务必直接了当，当然，这种直接了当是根据用户习惯来确定具体内容的。如果你的用户喜欢小清新，就需要不落俗套的包装成小清新文字；如果你的用户是贪图便宜的，那么“全场1折起”这种标题就比先说一个小故事更容易吸引用户。</p>\r\n<h2 id=\"h2-u8D34u8FD1u53D7u4F17u7684u5FC3u7406\"><a name=\"贴近受众的心理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>贴近受众的心理</h2><p>你的文案需要考虑受众的心理感受，要么迎合良性感受，要么打击不良感受，要么二者兼顾。所以你需要弄清楚<strong>你的受众是谁</strong>？推送内容之后，如果希望用户点击、查看、参与，就需要文案贴近推送对象的心理诉求，好的内容应当是紧贴受众的，否则效果肯定会打折扣。</p>\r\n<h2 id=\"h2-u9009u4E00u4E2Au597Du4F4Du7F6E\"><a name=\"选一个好位置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>选一个好位置</h2><p>文案的核心内容一定要在第一眼就能看到的地方，醒目、直接，受众不会被其他部分干扰。</p>\r\n<h2 id=\"h2--\"><a name=\"简单有趣，朗朗上口\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>简单有趣，朗朗上口</h2><p>简单有趣代表容易理解，在信息爆炸的社会，一小段文字的力量比一大段文字的力量要大，当然前提是你用一小段文字清晰解释了一大段文字所代表的意思。朗朗上口代表着易于传播，当社交平台的力量被放大的时候，用朗朗上口的文案，更容易帮我们带来内容的传播，从而带来更多用户。</p>\r\n<h2 id=\"h2-u7B26u5408u573Au666F\"><a name=\"符合场景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>符合场景</h2><p>知乎用户徐慧琳曾经总结过好的文案的特征：<strong>称呼亲切、内容简单、落款严肃、充满诱惑</strong>。</p>\r\n<h2 id=\"h2--\"><a name=\"怎样才能在日常运营中写出好文案？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>怎样才能在日常运营中写出好文案？</h2><blockquote>\r\n<p>第一，了解受众。<br>第二，了解产品和活动。<br>第三，准确表达。<br>第四，突出产品特点或优势。<br>第五，勤加练习。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u6848u4F8B\"><a name=\"案例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>案例</h2><p><img src=\"/upload/image/45ea51ba0faa42429ea4a3c2d386e6c6.png\" alt=\"\"></p>\r\n', '大部分用户只会看标题或者前面一段小字，以确定要不要展开它，或者直接忽略。所以推送内容务必直接了当，当然，这种直接了当是根据用户习惯来确定具体内容的。如果你的用户喜欢小清新，就需要不落俗套的包装成小清新文字；如果你的用户是贪图便宜的，那么“全场1折起”这种标题就比先说一个小故事更容易吸引用户。\r\n## 贴近受众的心理\r\n你的文案需要考虑受众的心理感受，要么迎合良性感受，要么打击不良感受，要么二者兼顾。所以你需要弄清楚**你的受众是谁**？推送内容之后，如果希望用户点击、查看、参与，就需要文案贴近推送对象的心理诉求，好的内容应当是紧贴受众的，否则效果肯定会打折扣。\r\n## 选一个好位置\r\n文案的核心内容一定要在第一眼就能看到的地方，醒目、直接，受众不会被其他部分干扰。\r\n## 简单有趣，朗朗上口\r\n简单有趣代表容易理解，在信息爆炸的社会，一小段文字的力量比一大段文字的力量要大，当然前提是你用一小段文字清晰解释了一大段文字所代表的意思。朗朗上口代表着易于传播，当社交平台的力量被放大的时候，用朗朗上口的文案，更容易帮我们带来内容的传播，从而带来更多用户。\r\n## 符合场景\r\n知乎用户徐慧琳曾经总结过好的文案的特征：**称呼亲切、内容简单、落款严肃、充满诱惑**。\r\n## 怎样才能在日常运营中写出好文案？\r\n> 第一，了解受众。\r\n> 第二，了解产品和活动。\r\n> 第三，准确表达。\r\n> 第四，突出产品特点或优势。\r\n> 第五，勤加练习。\r\n\r\n## 案例\r\n![](/upload/image/45ea51ba0faa42429ea4a3c2d386e6c6.png)', 0, 463, 5, 'detail', NULL, '2019-05-02 11:13:53', 0),(71, 37, 1, '', 0, '', 0, 0, '零基础学运营 (七) | 判断推送效果', '/upload/image/c2e14e69989642e8b1fc640fe7269f1a.png', '整个推送过程中，一定要注意：避免用户打扰。要让推送的质量有所保证，就需要学习如何让用户愉快的接受推送而不觉得是一种打扰。这一点和内容的质量有关，和内容的精细化运营有关，和分用户运营也有关。', '<p>对推送后的用户行为的监控和用户行为数据的分析非常重要，通过数据分析，我们可以知道用户对哪些渠道是信任的、有兴趣的，对哪些渠道是不感兴趣的、触达不到的；也能够明白用户对哪些消息是乐于了解的，对哪些消息是不敢兴趣的；还可以知道什么样的文案和内容可以促进用户进一步的动作的，那么，在日后的运营中就可以有意识的调整和提高，以达到更好的效果。<br><img src=\"/upload/image/8044d7e01ffe4d3891a38cfee3b9e809.png\" alt=\"\"><br>上图描述了用户从收到推送到完成转化的路径，在各个环节中都应该有统计数据，各级数据中，都有对应的转化率。<br><img src=\"/upload/image/da40c233f57f47fe8aa6d8eebc78a9a9.png\" alt=\"\"><br>需要了解的是，漏斗的每个环节的转化率分别是多少，要比照渠道、内容、用户选型去分析。分析的结论主要包括：</p>\r\n<blockquote>\r\n<p>渠道的质量分析，比如哪个/哪些渠道效果好，哪些渠道效果不佳。<br>通过各渠道发出的推送成功到达用户的数量。<br>用户对待推送的态度如何，有多少用户打开、阅读了推送的内容。<br>在接收、查看推送的用户中，有多少人进入网站（产品）中对应的Landing Page（着陆页）。<br>最后，有多少用户完成了我们期望的转化。<br>对待这些数据，我们有哪些经验和教训，以后应当如何保持、改进、提高，这些应落实到具体的措施中，下一次再进行尝试。</p>\r\n</blockquote>\r\n<p>整个推送过程中，一定要注意：<strong>避免用户打扰</strong>。要让推送的质量有所保证，就需要学习如何让用户愉快的接受推送而不觉得是一种打扰。这一点和内容的质量有关，和内容的精细化运营有关，和分用户运营也有关。</p>\r\n', '对推送后的用户行为的监控和用户行为数据的分析非常重要，通过数据分析，我们可以知道用户对哪些渠道是信任的、有兴趣的，对哪些渠道是不感兴趣的、触达不到的；也能够明白用户对哪些消息是乐于了解的，对哪些消息是不敢兴趣的；还可以知道什么样的文案和内容可以促进用户进一步的动作的，那么，在日后的运营中就可以有意识的调整和提高，以达到更好的效果。\r\n![](/upload/image/8044d7e01ffe4d3891a38cfee3b9e809.png)\r\n上图描述了用户从收到推送到完成转化的路径，在各个环节中都应该有统计数据，各级数据中，都有对应的转化率。\r\n![](/upload/image/da40c233f57f47fe8aa6d8eebc78a9a9.png)\r\n需要了解的是，漏斗的每个环节的转化率分别是多少，要比照渠道、内容、用户选型去分析。分析的结论主要包括：\r\n> 渠道的质量分析，比如哪个/哪些渠道效果好，哪些渠道效果不佳。\r\n> 通过各渠道发出的推送成功到达用户的数量。\r\n> 用户对待推送的态度如何，有多少用户打开、阅读了推送的内容。\r\n> 在接收、查看推送的用户中，有多少人进入网站（产品）中对应的Landing Page（着陆页）。\r\n> 最后，有多少用户完成了我们期望的转化。\r\n> 对待这些数据，我们有哪些经验和教训，以后应当如何保持、改进、提高，这些应落实到具体的措施中，下一次再进行尝试。\r\n\r\n整个推送过程中，一定要注意：**避免用户打扰**。要让推送的质量有所保证，就需要学习如何让用户愉快的接受推送而不觉得是一种打扰。这一点和内容的质量有关，和内容的精细化运营有关，和分用户运营也有关。', 0, 811, 2, 'detail', NULL, '2019-05-03 11:37:48', 0),(72, 37, 1, '', 0, '', 0, 0, '零基础学运营 (八) | 内容的推荐与整合、实现自运营', '/upload/image/f044d1b390674c3487d9bcedaf7a1902.png', '自运营是网站（产品）的最高境界，但是在达到这个境界之前，我们必须要做用户引导与内容构建，否则很难实现网站（产品）健康有序的“自运营”。', '<h2 id=\"h2-u63A8u8350u4E0Eu6574u5408\"><a name=\"推荐与整合\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>推荐与整合</h2><p>当内容逐渐充实，内容运营人员的日常工作从生产内容转变为内容的推荐与整合。所谓内容的推荐，就是让优质的内容更多的呈现给用户。所谓内容的整合，就是让同类的内容产生集合。<br>列举一些知乎在内容推荐、整合上的动作</p>\r\n<blockquote>\r\n<p>关注话题与关注对象，用户主动关注的对象或话题内容更新，都是主动推荐/推送给用户。<br>对于网站上大量的优质内容，用户可以主动通过“发现”、“话题”等功能区寻找。<br>对于新近进入的成员的优质内容，通过“首场秀”进行推荐。<br>对于一些推荐阅读的内容，通过“每周精选”呈现给用户。</p>\r\n</blockquote>\r\n<p>不管进行怎样的外延、采用怎样的包装，其核心都是内容的筛选与面向对象的构建与策略。</p>\r\n<h2 id=\"h2-u81EAu8FD0u8425u7684u8DEFu5F84u4E0Eu673Au5236u9009u62E9\"><a name=\"自运营的路径与机制选择\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>自运营的路径与机制选择</h2><p>自运营是网站（产品）的最高境界，但是在达到这个境界之前，我们必须要做用户引导与内容构建，否则很难实现网站（产品）健康有序的“自运营”。所谓“自运营”，是指建立一些机制和规则，用户通过遵守这些机制，利用这些规则，使得日常运营不再过多的依赖运营人员的引导，实现用户自主运营。<br>一般来说，在自运营状态下，运营人员只需要通过组织活动、应对用户投诉等日常工作来进行日常管理和达成运营目标。</p>\r\n<p><img src=\"/upload/image/5ae9b4c734cc41ba94ff4efb42a1c1fb.png\" alt=\"\"></p>\r\n', '## 推荐与整合\r\n当内容逐渐充实，内容运营人员的日常工作从生产内容转变为内容的推荐与整合。所谓内容的推荐，就是让优质的内容更多的呈现给用户。所谓内容的整合，就是让同类的内容产生集合。\r\n列举一些知乎在内容推荐、整合上的动作\r\n> 关注话题与关注对象，用户主动关注的对象或话题内容更新，都是主动推荐/推送给用户。\r\n> 对于网站上大量的优质内容，用户可以主动通过“发现”、“话题”等功能区寻找。\r\n> 对于新近进入的成员的优质内容，通过“首场秀”进行推荐。\r\n> 对于一些推荐阅读的内容，通过“每周精选”呈现给用户。\r\n\r\n不管进行怎样的外延、采用怎样的包装，其核心都是内容的筛选与面向对象的构建与策略。\r\n\r\n## 自运营的路径与机制选择\r\n自运营是网站（产品）的最高境界，但是在达到这个境界之前，我们必须要做用户引导与内容构建，否则很难实现网站（产品）健康有序的“自运营”。所谓“自运营”，是指建立一些机制和规则，用户通过遵守这些机制，利用这些规则，使得日常运营不再过多的依赖运营人员的引导，实现用户自主运营。\r\n一般来说，在自运营状态下，运营人员只需要通过组织活动、应对用户投诉等日常工作来进行日常管理和达成运营目标。\r\n\r\n![](/upload/image/5ae9b4c734cc41ba94ff4efb42a1c1fb.png)', 0, 423, 8, 'detail', NULL, '2019-05-04 11:51:31', 0),(73, 37, 1, '', 0, '', 1, 0, '零基础学运营 (九) | 公共平台内容运营的步骤', '/upload/image/3f1c580070794dcca27dab58147fbb11.png', '原创的符合品牌特点及受众口味的内容，最容易引爆热点', '<h2 id=\"h2-u5148u5B9Au4F4D\"><a name=\"先定位\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>先定位</h2><p>根据品牌自身的特点、受众、调性来定义公共平台所要进行运营的内容的特色、受众的调性。<br>第一层的意思是面对受众群的定位。你要清楚哪些受众群体会喜欢你的内容。第二层的意思是面向内容的定位。对于这样的受众群体，你应该通过什么类型的内容进行长期的运营。</p>\r\n<h2 id=\"h2--\"><a name=\"快速测试，获取反馈\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>快速测试，获取反馈</h2><p>明确了定位，意味着内容的类型确立了，可以放置备选的内容了，然后就要去观察用户是否喜欢、是否感兴趣。通过数据分析，假定你发布的时间是固定的，你的受众群体是固定的，那么，更多的转发、评论、收藏、点赞就意味着用户对内容感兴趣，反之，则表示不感兴趣。</p>\r\n<h2 id=\"h2-u57F9u517Bu7528u6237u4E60u60EF\"><a name=\"培养用户习惯\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>培养用户习惯</h2><p>无论早上、中午、晚上，重要的是，要在固定的时间发布内容。如果内容发布的时间固定，长期关注内容的用户会培养成定时查看的习惯。当然，习惯是建立在用户对内容感兴趣的基础上。</p>\r\n<h2 id=\"h2-u575Au6301u957Fu671Fu7684u5185u5BB9u8FD0u8425u65B9u9488\"><a name=\"坚持长期的内容运营方针\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>坚持长期的内容运营方针</h2><p>明天做了后天就有效果，不管做什么事情，这样的想法都是错误的，尤其是在内容运营方面。有句话叫“一个人做一件好事不难，难的是一辈子都做好事”，内容运营也是这样，“一段时间最优质的内容不难，难的是一直最优质的内容”。</p>\r\n<h2 id=\"h2-u4E0Eu5185u5BB9u6D88u8D39u8005u4FDDu6301u4E92u52A8\"><a name=\"与内容消费者保持互动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>与内容消费者保持互动</h2><p>每天都保持与来消费内容的用户保持互动是很难的，公共平台上的内容消费者，或许也是内容生产者，和他们进行沟通，很有可能带来有益的提醒，帮助运营者找到用户关心的问题并予以解决。这并不难，只要你肯提供消费者需要的内容，你就解决了他们关心的问题。</p>\r\n<h2 id=\"h2-u575Au6301u539Fu521B\"><a name=\"坚持原创\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>坚持原创</h2><p>坚持原创是一件很难的事情，如果大多是内容都是转发的，那么很难吸引粉丝长期关注。内容获取渠道可以被替代，是很可怕的。<br><strong>原创的符合品牌特点及受众口味的内容，最容易引爆热点</strong>。</p>\r\n', '## 先定位\r\n根据品牌自身的特点、受众、调性来定义公共平台所要进行运营的内容的特色、受众的调性。\r\n第一层的意思是面对受众群的定位。你要清楚哪些受众群体会喜欢你的内容。第二层的意思是面向内容的定位。对于这样的受众群体，你应该通过什么类型的内容进行长期的运营。\r\n## 快速测试，获取反馈\r\n明确了定位，意味着内容的类型确立了，可以放置备选的内容了，然后就要去观察用户是否喜欢、是否感兴趣。通过数据分析，假定你发布的时间是固定的，你的受众群体是固定的，那么，更多的转发、评论、收藏、点赞就意味着用户对内容感兴趣，反之，则表示不感兴趣。\r\n## 培养用户习惯\r\n无论早上、中午、晚上，重要的是，要在固定的时间发布内容。如果内容发布的时间固定，长期关注内容的用户会培养成定时查看的习惯。当然，习惯是建立在用户对内容感兴趣的基础上。\r\n## 坚持长期的内容运营方针\r\n明天做了后天就有效果，不管做什么事情，这样的想法都是错误的，尤其是在内容运营方面。有句话叫“一个人做一件好事不难，难的是一辈子都做好事”，内容运营也是这样，“一段时间最优质的内容不难，难的是一直最优质的内容”。\r\n## 与内容消费者保持互动\r\n每天都保持与来消费内容的用户保持互动是很难的，公共平台上的内容消费者，或许也是内容生产者，和他们进行沟通，很有可能带来有益的提醒，帮助运营者找到用户关心的问题并予以解决。这并不难，只要你肯提供消费者需要的内容，你就解决了他们关心的问题。\r\n## 坚持原创\r\n坚持原创是一件很难的事情，如果大多是内容都是转发的，那么很难吸引粉丝长期关注。内容获取渠道可以被替代，是很可怕的。\r\n**原创的符合品牌特点及受众口味的内容，最容易引爆热点**。', 0, 523, 6, 'detail', NULL, '2019-05-05 11:09:23', 0),(75, 37, 1, '', 0, '', 0, 0, '零基础学运营 (十) | 内容运营的核心', '/upload/image/501e15d6b913a0f769653c2c749b4f576651.png', '内容运营必须要有KPI，但不管是曝光度的指标还是其他指标，指标的意义都不仅仅是“达成”，而是要反过来知道下一阶段的内容运营工作', '<p>一个网站（产品），只要有内容，就涉及内容供应链的建立。而内容供应链必然会涉及三方：内容消费者、内容生产者、网站与产品。</p>\r\n<h2 id=\"h2-u5185u5BB9u6D88u8D39u8005\"><a name=\"内容消费者\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容消费者</h2><p>内容消费者是消费内容的人（阅读、采纳、运用），他们与网站（产品）的定位息息相关，他们决定了网站（产品）的内容给谁看，谁会对这些内容感兴趣从而提供可转化的流量。</p>\r\n<h2 id=\"h2-u5185u5BB9u751Fu4EA7u8005\"><a name=\"内容生产者\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容生产者</h2><p>内容生产者是生产内容的人，他们是网站（产品）内容的发动机，他们决定了网站（产品）会提供什么样的内容。内容生产者所提供的内容与消费者兴趣匹配，是保证内容流转效率和网站（产品）转化能力的动力。</p>\r\n<h2 id=\"h2-u7F51u7AD9u4E0Eu4EA7u54C1\"><a name=\"网站与产品\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>网站与产品</h2><p>网站与产品是联系内容生产者和内容消费者的渠道或平台，它是需要<strong>维系内容生产者</strong>，<strong>满足内容消费者</strong>，通过各种方式保证网站（产品）的运转。</p>\r\n<blockquote>\r\n<p>从内容运营的角度来看，它不仅仅要明确内容定位内容消费者，也需要努力维系内容生产者，同时对用户反馈进行跟踪和推进，让内容流转更顺畅、内容消费更黏着、用户转化更便捷。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5185u5BB9u6D88u8D39u8005u5B9Au4F4D\"><a name=\"内容消费者定位\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容消费者定位</h2><p>内容消费者定位之后，可以确定网站（产品）早期提供的内容会聚焦在哪一些用户群体，从而建立比较单纯但直接的效果评价体系，并为后续运营调整和改进提供依据。<br>需要注意的是，内容消费者的定位是动态的，也就是说，并非在任何时间节点，内容消费者的描像都是一致的，它可能随着网站（产品）内容的调整而发生变化。</p>\r\n<blockquote>\r\n<p>以内容为主的网站（产品）都需要评估让用户进入的速率以用户选型的控制。用户过快进入可能会导致内容消费定位来不及调整，甚至冲击最初建立的内容消费者定位，影响网站（产品）所提供的质量和用户接受度。而用户进入过慢会导致内容消费力不足，内容生产者缺乏动力，从而影响内容的质量与数量。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u63A7u5236u5185u5BB9u6D88u8D39u8005u8FDBu5165u901Fu7387\"><a name=\"控制内容消费者进入速率\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>控制内容消费者进入速率</h2><p>控制内容消费者进入最成熟的方案是：<strong>邀请机制</strong>。<br>例如，通过发放邀请码的方式，让一部分用户获得进入的资格。邀请机制分为<strong>主动邀请</strong>和<strong>互动邀请</strong>。</p>\r\n<h3 id=\"h3-u4E3Bu52A8u9080u8BF7\"><a name=\"主动邀请\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>主动邀请</h3><p>由品牌或者产品主导，邀请业内有影响力或对品牌、产品感兴趣的用户。这种邀请多见于网络游戏的测试阶段和互联网产品获取种子用户阶段。</p>\r\n<h3 id=\"h3-u4E92u52A8u9080u8BF7\"><a name=\"互动邀请\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>互动邀请</h3><p>网站（产品）已有用户对还未进入的用户发起的邀请，让有需要的用户进入并体验产品。这种邀请多见于社交产品、社区产品和针对性产品。</p>\r\n<h3 id=\"h3-u9080u8BF7u673Au5236u662Fu4E00u628Au53CCu5203u5251\"><a name=\"邀请机制是一把双刃剑\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>邀请机制是一把双刃剑</h3><p>第一，让人感受到“稀缺性”，能够带来精确锁定，也会造成黑市交易。人群精确锁定是最好的结果，这意味着进入网站（产品）的用户完全符合运营者的期望。但如果稀缺的邀请码流入黑市，就无法达到其锁定人群的目标，甚至导致用户厌恶情绪，损害品牌形象。<br>第二，可以制造垂直领域用户群，但可能导致用户群体过于单一。在内容为主的网站（产品）早期，用户群体单一可以让网站（产品）拥有较好的掌控能力和内容生产能力，但长期来说会因为缺乏成长性和活力降低用户的兴趣。</p>\r\n<h2 id=\"h2-u62A4u57CEu6CB3u673Au5236\"><a name=\"护城河机制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>护城河机制</h2><p>控制内容消费者进入的另一种方案，是人为的确立一个较高的门槛，只有跨过这一门槛的用户才获得一定的权限和资格。好处是避免小号、水军进入，减少灌水内容的发布；可以结合一些手段，确保用户发言或者发帖前已经学习了相关的规章制度，减少垃圾内容的出现。坏处是考验用户的耐心，考验耐心是在考验用户对内容需求的强烈程度；考验内容本身的质量。</p>\r\n<h2 id=\"h2-u5185u5BB9u751Fu4EA7u8005u7EF4u7CFB\"><a name=\"内容生产者维系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容生产者维系</h2><p>一旦内容运营者完成了内容消费者定位，接下来就会考虑内容由谁来提供、什么样的内容是内容消费者喜欢的，这其实是内容生产者的定位。</p>\r\n<h3 id=\"h3-u5185u5BB9u751Fu4EA7u8005u5B9Au4F4D\"><a name=\"内容生产者定位\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容生产者定位</h3><blockquote>\r\n<p>内容生产者是谁？<br>内容生产者可能是网站（产品）内部的员工，也可能是外部用户。<br>他们提供何种内容？<br>内容生产者应当提供内容消费者需要的内容。<br>他们为什么会提供这些内容？<br>这意味着运营人员需要考虑激励内容生产者的措施。<br>内容的质量如何？<br>为定义高质量内容与质量一般的内容，运营人员需要制定一个简单的标准，可以是用户打分，也可以是网站（产品）的内容评价机制。<br>如何让他们长期提供高质量的内容？<br>这同样意味着需要考虑激励措施，不管是有形的物质激励还是无形的精神激励，运营人员都需要考虑激励的方式与方法。</p>\r\n</blockquote>\r\n<h3 id=\"h3--\"><a name=\"网站（产品）的氛围营造\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>网站（产品）的氛围营造</h3><p>有什么样的氛围就会产生什么样的内容生产者，如果希望内容生产者持续提供优质的内容且不会轻易流失，就需要为内容生产者提供一个合适的氛围，这个氛围需要符合内容网站（产品）的特点和气质。</p>\r\n<ul>\r\n<li>确保网站（产品）有相应的社区规范对内容进行管理。</li><li>确保对用户言论具有掌控力，合理并按规则予以奖惩。</li></ul>\r\n<h3 id=\"h3-u5185u5BB9u751Fu4EA7u8005u6FC0u52B1u63AAu65BDu8BBEu8BA1\"><a name=\"内容生产者激励措施设计\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容生产者激励措施设计</h3><p>对于内容生产者，需要有一套完整的激励措施，来激励他们持续的贡献内容。任何网站（产品）对用户都有激励措施，只是激励方式的类型有所不同。</p>\r\n<h3 id=\"h3-u5185u5BB9u751Fu4EA7u8005u4EF7u503Cu7EF4u7CFB\"><a name=\"内容生产者价值维系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容生产者价值维系</h3><p>内容运营者要充分理解并信任内容生产者的价值，并基于这个简单的逻辑，保持与内容生产者之间的关联。简单来说，就是运营人员要知道内容生产者是谁，知道他们能贡献哪个方面或哪个层次的内容，并且知道如何推动他们贡献内容。</p>\r\n<h2 id=\"h2-u5185u5BB9u7684u53CDu9988u673Au5236u4E0Eu8DDFu8E2Au7B56u7565\"><a name=\"内容的反馈机制与跟踪策略\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容的反馈机制与跟踪策略</h2><blockquote>\r\n<p>在内容的采集与管理工作中，必须考虑用户反馈和对应的根据策略。<br>反馈机制和根据策略可以根据平台的不同选择合适的展现方式。<br>数据挖掘机制非常重要，但更重要的是对数据挖掘之后的反馈与跟进。<br>内容不是一成不变的，而是需要调整与提高。<br>内容运营必须要有KPI，但不管是曝光度的指标还是其他指标，指标的意义都不仅仅是“达成”，而是要反过来知道下一阶段的内容运营工作。</p>\r\n</blockquote>\r\n', '一个网站（产品），只要有内容，就涉及内容供应链的建立。而内容供应链必然会涉及三方：内容消费者、内容生产者、网站与产品。\r\n## 内容消费者\r\n内容消费者是消费内容的人（阅读、采纳、运用），他们与网站（产品）的定位息息相关，他们决定了网站（产品）的内容给谁看，谁会对这些内容感兴趣从而提供可转化的流量。\r\n## 内容生产者\r\n内容生产者是生产内容的人，他们是网站（产品）内容的发动机，他们决定了网站（产品）会提供什么样的内容。内容生产者所提供的内容与消费者兴趣匹配，是保证内容流转效率和网站（产品）转化能力的动力。\r\n## 网站与产品\r\n网站与产品是联系内容生产者和内容消费者的渠道或平台，它是需要**维系内容生产者**，**满足内容消费者**，通过各种方式保证网站（产品）的运转。\r\n> 从内容运营的角度来看，它不仅仅要明确内容定位内容消费者，也需要努力维系内容生产者，同时对用户反馈进行跟踪和推进，让内容流转更顺畅、内容消费更黏着、用户转化更便捷。\r\n\r\n## 内容消费者定位\r\n内容消费者定位之后，可以确定网站（产品）早期提供的内容会聚焦在哪一些用户群体，从而建立比较单纯但直接的效果评价体系，并为后续运营调整和改进提供依据。\r\n需要注意的是，内容消费者的定位是动态的，也就是说，并非在任何时间节点，内容消费者的描像都是一致的，它可能随着网站（产品）内容的调整而发生变化。\r\n> 以内容为主的网站（产品）都需要评估让用户进入的速率以用户选型的控制。用户过快进入可能会导致内容消费定位来不及调整，甚至冲击最初建立的内容消费者定位，影响网站（产品）所提供的质量和用户接受度。而用户进入过慢会导致内容消费力不足，内容生产者缺乏动力，从而影响内容的质量与数量。\r\n\r\n## 控制内容消费者进入速率\r\n控制内容消费者进入最成熟的方案是：**邀请机制**。\r\n例如，通过发放邀请码的方式，让一部分用户获得进入的资格。邀请机制分为**主动邀请**和**互动邀请**。\r\n### 主动邀请\r\n由品牌或者产品主导，邀请业内有影响力或对品牌、产品感兴趣的用户。这种邀请多见于网络游戏的测试阶段和互联网产品获取种子用户阶段。\r\n### 互动邀请\r\n网站（产品）已有用户对还未进入的用户发起的邀请，让有需要的用户进入并体验产品。这种邀请多见于社交产品、社区产品和针对性产品。\r\n### 邀请机制是一把双刃剑\r\n第一，让人感受到“稀缺性”，能够带来精确锁定，也会造成黑市交易。人群精确锁定是最好的结果，这意味着进入网站（产品）的用户完全符合运营者的期望。但如果稀缺的邀请码流入黑市，就无法达到其锁定人群的目标，甚至导致用户厌恶情绪，损害品牌形象。\r\n第二，可以制造垂直领域用户群，但可能导致用户群体过于单一。在内容为主的网站（产品）早期，用户群体单一可以让网站（产品）拥有较好的掌控能力和内容生产能力，但长期来说会因为缺乏成长性和活力降低用户的兴趣。\r\n## 护城河机制\r\n控制内容消费者进入的另一种方案，是人为的确立一个较高的门槛，只有跨过这一门槛的用户才获得一定的权限和资格。好处是避免小号、水军进入，减少灌水内容的发布；可以结合一些手段，确保用户发言或者发帖前已经学习了相关的规章制度，减少垃圾内容的出现。坏处是考验用户的耐心，考验耐心是在考验用户对内容需求的强烈程度；考验内容本身的质量。\r\n## 内容生产者维系\r\n一旦内容运营者完成了内容消费者定位，接下来就会考虑内容由谁来提供、什么样的内容是内容消费者喜欢的，这其实是内容生产者的定位。\r\n### 内容生产者定位\r\n> 内容生产者是谁？\r\n> 内容生产者可能是网站（产品）内部的员工，也可能是外部用户。\r\n> 他们提供何种内容？\r\n> 内容生产者应当提供内容消费者需要的内容。\r\n> 他们为什么会提供这些内容？\r\n> 这意味着运营人员需要考虑激励内容生产者的措施。\r\n> 内容的质量如何？\r\n> 为定义高质量内容与质量一般的内容，运营人员需要制定一个简单的标准，可以是用户打分，也可以是网站（产品）的内容评价机制。\r\n> 如何让他们长期提供高质量的内容？\r\n这同样意味着需要考虑激励措施，不管是有形的物质激励还是无形的精神激励，运营人员都需要考虑激励的方式与方法。\r\n\r\n### 网站（产品）的氛围营造\r\n有什么样的氛围就会产生什么样的内容生产者，如果希望内容生产者持续提供优质的内容且不会轻易流失，就需要为内容生产者提供一个合适的氛围，这个氛围需要符合内容网站（产品）的特点和气质。\r\n- 确保网站（产品）有相应的社区规范对内容进行管理。\r\n- 确保对用户言论具有掌控力，合理并按规则予以奖惩。\r\n\r\n### 内容生产者激励措施设计\r\n对于内容生产者，需要有一套完整的激励措施，来激励他们持续的贡献内容。任何网站（产品）对用户都有激励措施，只是激励方式的类型有所不同。\r\n### 内容生产者价值维系\r\n内容运营者要充分理解并信任内容生产者的价值，并基于这个简单的逻辑，保持与内容生产者之间的关联。简单来说，就是运营人员要知道内容生产者是谁，知道他们能贡献哪个方面或哪个层次的内容，并且知道如何推动他们贡献内容。\r\n## 内容的反馈机制与跟踪策略\r\n> 在内容的采集与管理工作中，必须考虑用户反馈和对应的根据策略。\r\n> 反馈机制和根据策略可以根据平台的不同选择合适的展现方式。\r\n> 数据挖掘机制非常重要，但更重要的是对数据挖掘之后的反馈与跟进。\r\n> 内容不是一成不变的，而是需要调整与提高。\r\n> 内容运营必须要有KPI，但不管是曝光度的指标还是其他指标，指标的意义都不仅仅是“达成”，而是要反过来知道下一阶段的内容运营工作。\r\n', 0, 425, 1, '', NULL, '2019-05-10 02:13:44', 0),(78, 37, 1, '', 0, '', 1, 0, '零基础学运营 (十一) | 让内容健康的流转', '/upload/image/d339b9f8632f1e3c67b532dc6cca86fd8890.png', '在信息爆炸的今天，我们有各种工具、各种渠道可以让内容扩散，是相对简单的。', '<h2 id=\"h2-u627Eu5230u5185u5BB9u6D88u8D39u8005\"><a name=\"找到内容消费者\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>找到内容消费者</h2><p>最重要的是最用户研究，一个优秀的运营者通常是在不知不觉或者自觉主动做了很多用户研究工作的人，运营者的用户研究通常和运营目标紧密相关。</p>\r\n<blockquote>\r\n<p>内容消费者是谁？<br>他们通常在什么地方活跃？<br>他们的习惯是怎样的？<br>最近他们在关注什么热点？<br>我需要提供怎样的内容才能让他们注意到我？</p>\r\n</blockquote>\r\n<p>请注意，并不是只有内容生产者才是种子用户，一个内容为主的社区或者网站，内容消费者的类型和内容生产者的质量一样重要。对于内容运营者来说，要让内容生产者持续的创造内容，就要尽量避免在一个时间段内，带来大量与内容生产者创造的内容类型、内容质量不匹配的内容消费者；内容消费者引入有偏差，或者速率有偏差，引发社区或者网站内容的变化，而这种变化，冲击到了固有的核心用户，导致用户出现了不满情绪，进而会出现用户流失，甚至用户结构崩塌，注意，在扩大用户群体的过程中，对已有用户群体不产生过大的冲击。</p>\r\n<h2 id=\"h2-u7EF4u62A4u5185u5BB9u751Fu4EA7u8005\"><a name=\"维护内容生产者\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>维护内容生产者</h2><p>除了避免大量不匹配的内容消费者进入带来的冲击，我们还应当做好内容生产者的维系工作。通过加V、权重、认证等，人为隔离对丰富社区内容拥有不同贡献度的用户，以保证核心的内容生产者不受过多的干扰，尽量避免“鸡同鸭讲”甚至互相倾轧的现象，以维护内容社区的健康、稳定。</p>\r\n<h2 id=\"h2-u5185u5BB9u5982u4F55u6269u6563\"><a name=\"内容如何扩散\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内容如何扩散</h2><p>在信息爆炸的今天，我们有各种工具、各种渠道可以让内容扩散，是相对简单的。</p>\r\n', '## 找到内容消费者\r\n最重要的是最用户研究，一个优秀的运营者通常是在不知不觉或者自觉主动做了很多用户研究工作的人，运营者的用户研究通常和运营目标紧密相关。\r\n> 内容消费者是谁？\r\n> 他们通常在什么地方活跃？\r\n> 他们的习惯是怎样的？\r\n> 最近他们在关注什么热点？\r\n> 我需要提供怎样的内容才能让他们注意到我？\r\n\r\n请注意，并不是只有内容生产者才是种子用户，一个内容为主的社区或者网站，内容消费者的类型和内容生产者的质量一样重要。对于内容运营者来说，要让内容生产者持续的创造内容，就要尽量避免在一个时间段内，带来大量与内容生产者创造的内容类型、内容质量不匹配的内容消费者；内容消费者引入有偏差，或者速率有偏差，引发社区或者网站内容的变化，而这种变化，冲击到了固有的核心用户，导致用户出现了不满情绪，进而会出现用户流失，甚至用户结构崩塌，注意，在扩大用户群体的过程中，对已有用户群体不产生过大的冲击。\r\n## 维护内容生产者\r\n除了避免大量不匹配的内容消费者进入带来的冲击，我们还应当做好内容生产者的维系工作。通过加V、权重、认证等，人为隔离对丰富社区内容拥有不同贡献度的用户，以保证核心的内容生产者不受过多的干扰，尽量避免“鸡同鸭讲”甚至互相倾轧的现象，以维护内容社区的健康、稳定。\r\n## 内容如何扩散\r\n在信息爆炸的今天，我们有各种工具、各种渠道可以让内容扩散，是相对简单的。', 0, 452, 1, '', NULL, '2019-05-12 23:32:37', 0),(79, 37, 1, '', 0, '', 1, 0, '零基础学运营 (十二) | 如何让社区用户动起来', '/upload/image/1613b04ec194b10bf7c481806061b5e89781.png', '大多数社区的内容生产者是稀少的，而消费内容的用户则占大多数。因此，有时候，我们会担心如何让社区的用户动起来，不仅仅是内容生产者', '<p>大多数社区的内容生产者是稀少的，而消费内容的用户则占大多数。因此，有时候，我们会担心如何让社区的用户动起来，不仅仅是内容生产者，更重要的是让内容消费者积极的参与到社区内容中，营造社区用户活跃度高的氛围。</p>\r\n<h2 id=\"h2-u63D0u9AD8u51C6u5165u95E8u69DB\"><a name=\"提高准入门槛\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>提高准入门槛</h2><p>拥有稀缺内容或者优质内容的社区，会采用抬高用户的准入门槛的方式，通过设置护城河、用户分级，让真正需要内容的用户进入，让不是真正需要内容的用户离开，进入的用户通常会积极参与到社区讨论，让社区氛围热闹起来。这种做法的优势在于：由于内容获取的难度大，进入的用户会自愿、积极的参与到社区内容中，他们不得不通过自身的活跃去换取获得内容的权限。而劣势在于：如果其内容并非稀缺或不可替代，用户会选择门槛更低的社区，导致运营者建立活跃社区的目标难以达成。</p>\r\n<h2 id=\"h2--\"><a name=\"建立标准化内容，让用户按照规定动作参与社区运营\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>建立标准化内容，让用户按照规定动作参与社区运营</h2><p>规范用户发布的内容，降低用户使用的门槛，让更多的用户参与提供社区内容。例如，微博通过140个字数的限制，让用户发现其实制作内容的门槛很低，只要在规定的字数内表达自己的观点即可。</p>\r\n<h2 id=\"h2--\"><a name=\"制造观念冲突，让用户自发站队\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>制造观念冲突，让用户自发站队</h2><p>“豆腐脑应该是甜的还是咸的”这样一个千古难题，竟然引发各大社区划分出“甜豆腐脑派”和“咸豆腐脑派”，并两派互相嘲讽。“制造冲突”是一种比较有风险的做法。当然，这也是一种能够在短时间内制造出用户活跃和用户引入的做法。最通常的运营方式是利用社会热点，创造多种不同角度、不同立场的初始化内容，然后通过多种手段，让认同不同观点的用户发现彼此，并制造冲突，从而引发用户的站队。</p>\r\n', '大多数社区的内容生产者是稀少的，而消费内容的用户则占大多数。因此，有时候，我们会担心如何让社区的用户动起来，不仅仅是内容生产者，更重要的是让内容消费者积极的参与到社区内容中，营造社区用户活跃度高的氛围。\r\n## 提高准入门槛\r\n拥有稀缺内容或者优质内容的社区，会采用抬高用户的准入门槛的方式，通过设置护城河、用户分级，让真正需要内容的用户进入，让不是真正需要内容的用户离开，进入的用户通常会积极参与到社区讨论，让社区氛围热闹起来。这种做法的优势在于：由于内容获取的难度大，进入的用户会自愿、积极的参与到社区内容中，他们不得不通过自身的活跃去换取获得内容的权限。而劣势在于：如果其内容并非稀缺或不可替代，用户会选择门槛更低的社区，导致运营者建立活跃社区的目标难以达成。\r\n## 建立标准化内容，让用户按照规定动作参与社区运营\r\n规范用户发布的内容，降低用户使用的门槛，让更多的用户参与提供社区内容。例如，微博通过140个字数的限制，让用户发现其实制作内容的门槛很低，只要在规定的字数内表达自己的观点即可。\r\n## 制造观念冲突，让用户自发站队\r\n“豆腐脑应该是甜的还是咸的”这样一个千古难题，竟然引发各大社区划分出“甜豆腐脑派”和“咸豆腐脑派”，并两派互相嘲讽。“制造冲突”是一种比较有风险的做法。当然，这也是一种能够在短时间内制造出用户活跃和用户引入的做法。最通常的运营方式是利用社会热点，创造多种不同角度、不同立场的初始化内容，然后通过多种手段，让认同不同观点的用户发现彼此，并制造冲突，从而引发用户的站队。', 0, 477, 1, '', NULL, '2019-05-13 23:06:24', 0),(80, 37, 1, '', 0, '', 1, 0, '零基础学运营 (十三) | 活动运营的基本流程', '/upload/image/f22841d341c19e59b5fbc2a92bf4e2536345.png', '做运营，离不开活动，活动运营，顾名思义是通过组织活动在短期内提升相关指标的运营手段。', '<p>做运营，离不开活动，活动运营，顾名思义是通过组织活动在短期内提升相关指标的运营手段。一个完整的活动运营流程会涉及一下步骤：</p>\r\n<blockquote>\r\n<p>策划&gt;开发&gt;测试&gt;宣传&gt;上线&gt;指标监控&gt;奖励发放&gt;效果评估</p>\r\n</blockquote>\r\n<p>策划：活动的设计阶段，会定义明确的活动时间、对象、方式、目标、预算等。</p>\r\n<p>开发：活动需要由设计人员设计界面，请开发人员开发实现功能。</p>\r\n<p>测试：一个活动开发完成后，需要测试以确认功能是否可用于易用。</p>\r\n<p>宣传：找到可以触达用户的渠道，协调资源来做活动露出。这个阶段是和开发、测试同时进行的，而且为了活动效果，在上线前就会做一些预热。</p>\r\n<p>上线：终于到了上线时间，活动就会在线上进行展示，让用户参与活动。</p>\r\n<p>指标监控：活动上线后，需要监测相应的指标，根据指标反映的问题进行适当的调整。</p>\r\n<p>奖励发放：活动结束后或者活动中对符合奖励条件的用户发放奖励。</p>\r\n<p>效果评估：活动结束后，评估活动效果，总结经验教训，以备下次活动参考借鉴。</p>\r\n<p>在整个活动运营过程中，有四件事情非常重要，可以称为“核心”：</p>\r\n<blockquote>\r\n<p>活动设计与成本预算<br>活动风险管控与应急预案<br>活动数据监测与应对策略<br>活动效果判断与总结</p>\r\n</blockquote>\r\n', '做运营，离不开活动，活动运营，顾名思义是通过组织活动在短期内提升相关指标的运营手段。一个完整的活动运营流程会涉及一下步骤：\r\n> 策划>开发>测试>宣传>上线>指标监控>奖励发放>效果评估\r\n\r\n策划：活动的设计阶段，会定义明确的活动时间、对象、方式、目标、预算等。\r\n\r\n开发：活动需要由设计人员设计界面，请开发人员开发实现功能。\r\n\r\n测试：一个活动开发完成后，需要测试以确认功能是否可用于易用。\r\n\r\n宣传：找到可以触达用户的渠道，协调资源来做活动露出。这个阶段是和开发、测试同时进行的，而且为了活动效果，在上线前就会做一些预热。\r\n\r\n上线：终于到了上线时间，活动就会在线上进行展示，让用户参与活动。\r\n\r\n指标监控：活动上线后，需要监测相应的指标，根据指标反映的问题进行适当的调整。\r\n\r\n奖励发放：活动结束后或者活动中对符合奖励条件的用户发放奖励。\r\n\r\n效果评估：活动结束后，评估活动效果，总结经验教训，以备下次活动参考借鉴。\r\n\r\n在整个活动运营过程中，有四件事情非常重要，可以称为“核心”：\r\n> 活动设计与成本预算\r\n> 活动风险管控与应急预案\r\n> 活动数据监测与应对策略\r\n> 活动效果判断与总结', 0, 466, 1, '', NULL, '2019-05-14 23:29:34', 0),(81, 37, 1, '', 0, '', 1, 0, '零基础学运营 (十四) | 活动设计与成本预算', '/upload/image/0d7719ff28ad002f627a87f7db22622e6389.png', '如果说服不了老板，那么，尽你的最大努力，来设计一个吸引人的活动吧。', '<p>如何进行活动策划；如何写活动策划。但是，有一件更重要的事情必须贯彻活动运营的始终，那就是：<strong>目的明确、目标清晰</strong>。一个运营者，如果心中永远只有当前的目标，而忽略了行动的目的，那么他终将一无所获。<br>运营的成本指的是达成目标所需要支出的费用，运营的预算指的是公司期望通过运营达成目标所承担的费用。运营的方针有两种：一曰借力，二曰借势。</p>\r\n<blockquote>\r\n<p>先看能不能借势，再看能不能借力。<br>如果势、力皆无，那么就拿出数据说服老板，要么降低活动预期，要么增加活动预算。<br>如果说服不了老板，那么，尽你的最大努力，来设计一个吸引人的活动吧。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5982u4F55u7B56u5212u6D3Bu52A8\"><a name=\"如何策划活动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>如何策划活动</h2><p>所有活动都必须有理由，所以，在着手策划活动之前，请给自己一个做活动的理由。</p>\r\n<h3 id=\"h3-u65F6u95F4u8282u70B9\"><a name=\"时间节点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>时间节点</h3><p>时间节点是最常见的理由。例如：节假日、季节变化。以时间为理由做活动，比较容易获得用户认同。用户在传统商业活动中已经养成习惯，认为这个节点应该有活动，所以，即便设计的活动不是很精彩，用户也愿意来参加，因为这是习惯。</p>\r\n<h3 id=\"h3-u57FAu4E8Eu4EA7u54C1u6216u8005u5546u54C1u672Cu8EABu7684u7B56u5212\"><a name=\"基于产品或者商品本身的策划\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>基于产品或者商品本身的策划</h3><p>利用产品或者商品本身的一些属性，有针对性的开展活动，这种活动，通常会利用商品的一个类目或者共同属性，甚至产品迭代的某个重要版本，有针对性的开展活动。这种活动设计需要运营与策划人员对产品或者商品有<strong>足够的理解</strong>，并且能够抓住消费者最感兴趣的点进行组织和引导。</p>\r\n<h3 id=\"h3--\"><a name=\"热点类，包括社会热点、娱乐热点、生活热点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>热点类，包括社会热点、娱乐热点、生活热点</h3><p>不管是社会热点、娱乐热点，还是生活热点，都可以拿来作为活动素材、活动理由。所以，如果要从这个角度去设计活动，运营人员要知道最近有哪些热点，人们为什么关注这些热点，这些热点可以怎么利用。</p>\r\n<h3 id=\"h3-u81EAu9020u70EDu70B9\"><a name=\"自造热点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>自造热点</h3><p>总而言之，难度很大，新手无法驾驭，不要轻易尝试。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u89C4u5219u7684u8BBEu8BA1u51C6u5219\"><a name=\"活动规则的设计准则\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动规则的设计准则</h2><p>活动设计与活动理由要无缝衔接，流程简单少思考，文案清晰无歧义。</p>\r\n<blockquote>\r\n<p>让活动主题吸引人<br>让活动给人独特的感受<br>细致的设计活动方式与规则<br>认真的匹配活动与理由<br>活动规则越复杂，用户逃跑心态越强烈<br>采用游戏化或任务化的设计，对把控用户的参与节奏很有帮助。<br>不管活动设计得多好，如果活动宣传没做好，活动效果还是会很差。</p>\r\n</blockquote>\r\n<p>运营人员要考虑活动怎么让用户看到！尤其是让目标用户看到。对于活动宣传渠道的选择，即使一个活动设计得再无聊，如果有足够多的人看到它，它可能会起到很好的宣传效果；而不管一个活动设计得那么精致，如果人们并不知晓，那它也不太可能有效果。<br>必须要知道产品的用户是谁，他们处于怎样的生命周期，活动的设计是为了达成什么目标。同时，需要记住，不论是怎样的活动目标，活动围绕的对象永远都是人，所以，了解用户是非常重要的环节。需要知道，用户经常在哪里出没、对怎样的内容感兴趣，从而精准的选择投放渠道。至于如何选择，可以参考<strong>过往的数据</strong>，如果没有历史数据，百度指数相关活动的搜索、来源都可以作为参考。</p>\r\n', '如何进行活动策划；如何写活动策划。但是，有一件更重要的事情必须贯彻活动运营的始终，那就是：**目的明确、目标清晰**。一个运营者，如果心中永远只有当前的目标，而忽略了行动的目的，那么他终将一无所获。\r\n运营的成本指的是达成目标所需要支出的费用，运营的预算指的是公司期望通过运营达成目标所承担的费用。运营的方针有两种：一曰借力，二曰借势。\r\n> 先看能不能借势，再看能不能借力。\r\n> 如果势、力皆无，那么就拿出数据说服老板，要么降低活动预期，要么增加活动预算。\r\n> 如果说服不了老板，那么，尽你的最大努力，来设计一个吸引人的活动吧。\r\n\r\n## 如何策划活动\r\n所有活动都必须有理由，所以，在着手策划活动之前，请给自己一个做活动的理由。\r\n### 时间节点\r\n时间节点是最常见的理由。例如：节假日、季节变化。以时间为理由做活动，比较容易获得用户认同。用户在传统商业活动中已经养成习惯，认为这个节点应该有活动，所以，即便设计的活动不是很精彩，用户也愿意来参加，因为这是习惯。\r\n### 基于产品或者商品本身的策划\r\n利用产品或者商品本身的一些属性，有针对性的开展活动，这种活动，通常会利用商品的一个类目或者共同属性，甚至产品迭代的某个重要版本，有针对性的开展活动。这种活动设计需要运营与策划人员对产品或者商品有**足够的理解**，并且能够抓住消费者最感兴趣的点进行组织和引导。\r\n### 热点类，包括社会热点、娱乐热点、生活热点\r\n不管是社会热点、娱乐热点，还是生活热点，都可以拿来作为活动素材、活动理由。所以，如果要从这个角度去设计活动，运营人员要知道最近有哪些热点，人们为什么关注这些热点，这些热点可以怎么利用。\r\n### 自造热点\r\n总而言之，难度很大，新手无法驾驭，不要轻易尝试。\r\n## 活动规则的设计准则\r\n活动设计与活动理由要无缝衔接，流程简单少思考，文案清晰无歧义。\r\n> 让活动主题吸引人\r\n> 让活动给人独特的感受\r\n> 细致的设计活动方式与规则\r\n> 认真的匹配活动与理由\r\n> 活动规则越复杂，用户逃跑心态越强烈\r\n> 采用游戏化或任务化的设计，对把控用户的参与节奏很有帮助。\r\n> 不管活动设计得多好，如果活动宣传没做好，活动效果还是会很差。\r\n\r\n运营人员要考虑活动怎么让用户看到！尤其是让目标用户看到。对于活动宣传渠道的选择，即使一个活动设计得再无聊，如果有足够多的人看到它，它可能会起到很好的宣传效果；而不管一个活动设计得那么精致，如果人们并不知晓，那它也不太可能有效果。\r\n必须要知道产品的用户是谁，他们处于怎样的生命周期，活动的设计是为了达成什么目标。同时，需要记住，不论是怎样的活动目标，活动围绕的对象永远都是人，所以，了解用户是非常重要的环节。需要知道，用户经常在哪里出没、对怎样的内容感兴趣，从而精准的选择投放渠道。至于如何选择，可以参考**过往的数据**，如果没有历史数据，百度指数相关活动的搜索、来源都可以作为参考。', 0, 434, 5, '', NULL, '2019-05-15 23:55:28', 0),(82, 37, 1, '', 0, '', 1, 0, '零基础学运营 (十五) | 如何写活动策划', '/upload/image/bd9cb437e557f299f085658ccb5c2a844395.png', '一部分作为前端展示，除了让用户看得明白如何参与活动，更要能够推动用户主动参与；另一部分是作为与开发人员的约定，活动如何设计、如何实现，需要和开发人员沟通。', '<p>标准的活动策划方案包括如下内容</p>\r\n<h3 id=\"h3-u6D3Bu52A8u4E3Bu9898\"><a name=\"活动主题\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动主题</h3><p>活动文案的一部分，让用户看得懂，明白活动是什么主题，是否对他有吸引力。</p>\r\n<h3 id=\"h3-u6D3Bu52A8u5BF9u8C61\"><a name=\"活动对象\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动对象</h3><p>明确活动针对的群体，让用户看得懂，让自己抓得住，让领导认可。</p>\r\n<h3 id=\"h3-u6D3Bu52A8u65F6u95F4\"><a name=\"活动时间\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动时间</h3><p>活动的开始时间、结束时间，奖励发放时间、领取时间。</p>\r\n<h3 id=\"h3-u6D3Bu52A8u63CFu8FF0\"><a name=\"活动描述\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动描述</h3><p>活动文案的一部分，让用户看过之后明白要不要参与，怎么参与。</p>\r\n<h3 id=\"h3-u89C4u5219u8BE6u60C5\"><a name=\"规则详情\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>规则详情</h3><p>活动文案的一部分，让用户看得懂，让开发人员看得懂，一部分内容是在前端展示给用户看的，另一部分内容是让开发人员知道活动如何实现。</p>\r\n<h3 id=\"h3-u6295u653Eu6E20u9053\"><a name=\"投放渠道\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>投放渠道</h3><p>让市场人员或者你自己看得懂，要有投放时间、投放渠道的选择、预算。</p>\r\n<h3 id=\"h3-u98CEu9669u63A7u5236\"><a name=\"风险控制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>风险控制</h3><p>让开发人员开得懂你的风险环节是什么，有无对应的措施来解决。</p>\r\n<h3 id=\"h3-u76D1u6D4Bu6307u6807\"><a name=\"监测指标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>监测指标</h3><p>涵盖大多数相关指标，包括投放渠道的监控、用户参与情况的监控、奖励发放的监控等。监测这些指标可以帮助你在查看数据的时候找到问题，并且启发你去解决这些问题。</p>\r\n<h3 id=\"h3-u6210u672Cu9884u4F30\"><a name=\"成本预估\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>成本预估</h3><p>一个活动需要多少钱，单人成本是多少。成本预估不一定非常准确，但必须要树立这个意识。有一些活动是不花钱的，但是如果要花钱，你要明白一个活动的容量有多大，对指标的帮助是什么，为了这些利益，你需要多少成本支持。</p>\r\n<h3 id=\"h3-u6548u679Cu8BC4u4F30\"><a name=\"效果评估\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>效果评估</h3><p>有成本就有收益，你的活动目的对网站（产品）的哪些指标是有帮助的，以及如何体现，你需要考虑，并让领导认可。</p>\r\n<h3 id=\"h3-faq-\"><a name=\"FAQ（常见问题解答）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>FAQ（常见问题解答）</h3><p>可以另外准备一个文档，提供给客服或者相关人员，帮助解决用户在参与活动中遇到的问题。FAQ要详细、标准。如果活动规模大，仅有FAQ还不够，你需要提前准备客服的培训文件，并积极与客服人员沟通。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u7B56u5212u6587u672C\"><a name=\"活动策划文本\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动策划文本</h2><p>一部分作为前端展示，除了让用户看得明白如何参与活动，更要能够推动用户主动参与；另一部分是作为与开发人员的约定，活动如何设计、如何实现，需要和开发人员沟通，必要的时候，你需要另外做一个文档，将流程、需求罗列清楚，并且和开发人员保持沟通。<br>活动策划文档的目的，是为了让活动做得有理有据。做活动的理由、耗费运营成本的代价、上线后可能带来的预期收益都是必须体现在活动策划中的。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u6548u679Cu62A5u544A\"><a name=\"活动效果报告\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动效果报告</h2><blockquote>\r\n<p>活动概述：简单概述活动主题、对象、时间、内容。<br>活动效果统计：对活动结束后的活动效果进行描述。<br>宣传效果统计：对各个投放渠道的效果进行统计，并且掌握每个渠道带来的流量、转化率的相关数据。<br>反思与总结：活动效果、宣传效果带来了哪些经验和教训，下次应该怎么调整，如何提高。</p>\r\n</blockquote>\r\n', '标准的活动策划方案包括如下内容\r\n### 活动主题\r\n活动文案的一部分，让用户看得懂，明白活动是什么主题，是否对他有吸引力。\r\n### 活动对象\r\n明确活动针对的群体，让用户看得懂，让自己抓得住，让领导认可。\r\n### 活动时间\r\n活动的开始时间、结束时间，奖励发放时间、领取时间。\r\n### 活动描述\r\n活动文案的一部分，让用户看过之后明白要不要参与，怎么参与。\r\n### 规则详情\r\n活动文案的一部分，让用户看得懂，让开发人员看得懂，一部分内容是在前端展示给用户看的，另一部分内容是让开发人员知道活动如何实现。\r\n### 投放渠道\r\n让市场人员或者你自己看得懂，要有投放时间、投放渠道的选择、预算。\r\n### 风险控制\r\n让开发人员开得懂你的风险环节是什么，有无对应的措施来解决。\r\n### 监测指标\r\n涵盖大多数相关指标，包括投放渠道的监控、用户参与情况的监控、奖励发放的监控等。监测这些指标可以帮助你在查看数据的时候找到问题，并且启发你去解决这些问题。\r\n### 成本预估\r\n一个活动需要多少钱，单人成本是多少。成本预估不一定非常准确，但必须要树立这个意识。有一些活动是不花钱的，但是如果要花钱，你要明白一个活动的容量有多大，对指标的帮助是什么，为了这些利益，你需要多少成本支持。\r\n### 效果评估\r\n有成本就有收益，你的活动目的对网站（产品）的哪些指标是有帮助的，以及如何体现，你需要考虑，并让领导认可。\r\n### FAQ（常见问题解答）\r\n可以另外准备一个文档，提供给客服或者相关人员，帮助解决用户在参与活动中遇到的问题。FAQ要详细、标准。如果活动规模大，仅有FAQ还不够，你需要提前准备客服的培训文件，并积极与客服人员沟通。\r\n\r\n## 活动策划文本\r\n一部分作为前端展示，除了让用户看得明白如何参与活动，更要能够推动用户主动参与；另一部分是作为与开发人员的约定，活动如何设计、如何实现，需要和开发人员沟通，必要的时候，你需要另外做一个文档，将流程、需求罗列清楚，并且和开发人员保持沟通。\r\n活动策划文档的目的，是为了让活动做得有理有据。做活动的理由、耗费运营成本的代价、上线后可能带来的预期收益都是必须体现在活动策划中的。\r\n## 活动效果报告\r\n> 活动概述：简单概述活动主题、对象、时间、内容。\r\n> 活动效果统计：对活动结束后的活动效果进行描述。\r\n> 宣传效果统计：对各个投放渠道的效果进行统计，并且掌握每个渠道带来的流量、转化率的相关数据。\r\n> 反思与总结：活动效果、宣传效果带来了哪些经验和教训，下次应该怎么调整，如何提高。\r\n\r\n', 0, 422, 4, '', NULL, '2019-05-16 23:42:09', 0),(83, 37, 1, '', 0, '', 1, 0, '零基础学运营 (十六) | 活动风险管控与应急预案', '/upload/image/440b8f3ad3e08f30a2b9029412ad60f28816.png', '市场人员与开发人员沟通不足，双方信息不对称。市场人员因为之前做过类似活动，所以认为可以直接复用之前活动的代码，加以调整后即可测试上线。', '<p>线上活动的流程</p>\r\n<blockquote>\r\n<p>策划-审批-开发-测试-上线</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5B58u5728u98CEu9669\"><a name=\"存在风险\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>存在风险</h2><p>第一、运营人员与市场人员沟通不足，在理解上存在分歧。理解上的分歧加上未充分沟通，导致了后续流程中的隐患。首当其冲的就是对于发奖条件的设计，这直接影响到开发人员的工作量。</p>\r\n<p>第二、市场人员与开发人员沟通不足，双方信息不对称。市场人员因为之前做过类似活动，所以认为可以直接复用之前活动的代码，加以调整后即可测试上线。开发人员则在整理代码的时候，把类似活动的代码给清除了，因此本次活动需要重新写代码，重新测试，才可以部署上线。信息不对称导致市场人员对开发难度的估计过低，过于乐观的认为活动是可以随时上线的，而开发人员则要遵守上线规范，必然达不到“随时上线”的要求。</p>\r\n<p>第三、运营人员与市场、开发、测试人员沟通不足，出现了流程断档。</p>\r\n<p>发生以上类似问题后，从运营层面提出解决方案：<br>所有内部、外部活动策划完成后，活动负责人员出具详细的需求定义文档，在审核通过后，活动涉及的所有开发与测试人员一起沟通，使所有人知晓活动上线时间，并通过邮件确认。<br>所有文档、交互、设计，都必须使用类似redmine（项目管理软件）的工具进行统一汇总，并且在发生任何更新时，通知所有相关人员。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u98CEu63A7u4E0Eu5E94u6025u9884u6848\"><a name=\"活动风控与应急预案\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动风控与应急预案</h2><p>在活动策划环节，要考虑几个基础问题：</p>\r\n<blockquote>\r\n<p>设计活动的规则是否有漏洞（穷举极端事件）<br>活动是否影响普通用户的体验（系统问题，需要和产品人员沟通）<br>奖励设置是否合理（考虑用户获奖难度和用户获奖所需成本）<br>运营节奏如何把控（何时投放宣传、哪些字符串与文字要调整）<br>运营效果如何监测（通过什么方式监测哪些指标）</p>\r\n</blockquote>\r\n<p>与开发人员、测试人员确认了开发需求和排期之后，需要着手整理FAQ以及客服事件模板，并在产品上线前完成与客服团队的沟通，确认客服人员知晓处理相应事件的话术与应对策略。必要时还要准备PPT去做客服培训。<br>做好应急预案，假设发生极端事件或数据异常波动，可以采用什么手段和办法进行及时调整，将活动拉回健康状态。</p>\r\n<p><img src=\"/upload/image/477f1cce279dfe62a222605d43e00ead4936.png\" alt=\"\"></p>\r\n<p><img src=\"/upload/image/ab847da8d68b82a1c8bfd19322ded8b65770.png\" alt=\"\"></p>\r\n<p><img src=\"/upload/image/04eaa8da8be33af2ea74ecc13b76a31f7412.png\" alt=\"\"></p>\r\n<p><img src=\"/upload/image/c107430ab124d0c02c401631266508fe4095.png\" alt=\"\"></p>\r\n', '线上活动的流程\r\n> 策划-审批-开发-测试-上线\r\n\r\n## 存在风险\r\n第一、运营人员与市场人员沟通不足，在理解上存在分歧。理解上的分歧加上未充分沟通，导致了后续流程中的隐患。首当其冲的就是对于发奖条件的设计，这直接影响到开发人员的工作量。\r\n\r\n第二、市场人员与开发人员沟通不足，双方信息不对称。市场人员因为之前做过类似活动，所以认为可以直接复用之前活动的代码，加以调整后即可测试上线。开发人员则在整理代码的时候，把类似活动的代码给清除了，因此本次活动需要重新写代码，重新测试，才可以部署上线。信息不对称导致市场人员对开发难度的估计过低，过于乐观的认为活动是可以随时上线的，而开发人员则要遵守上线规范，必然达不到“随时上线”的要求。\r\n\r\n第三、运营人员与市场、开发、测试人员沟通不足，出现了流程断档。\r\n\r\n发生以上类似问题后，从运营层面提出解决方案：\r\n所有内部、外部活动策划完成后，活动负责人员出具详细的需求定义文档，在审核通过后，活动涉及的所有开发与测试人员一起沟通，使所有人知晓活动上线时间，并通过邮件确认。\r\n所有文档、交互、设计，都必须使用类似redmine（项目管理软件）的工具进行统一汇总，并且在发生任何更新时，通知所有相关人员。\r\n\r\n## 活动风控与应急预案\r\n在活动策划环节，要考虑几个基础问题：\r\n> 设计活动的规则是否有漏洞（穷举极端事件）\r\n> 活动是否影响普通用户的体验（系统问题，需要和产品人员沟通）\r\n> 奖励设置是否合理（考虑用户获奖难度和用户获奖所需成本）\r\n> 运营节奏如何把控（何时投放宣传、哪些字符串与文字要调整）\r\n> 运营效果如何监测（通过什么方式监测哪些指标）\r\n\r\n与开发人员、测试人员确认了开发需求和排期之后，需要着手整理FAQ以及客服事件模板，并在产品上线前完成与客服团队的沟通，确认客服人员知晓处理相应事件的话术与应对策略。必要时还要准备PPT去做客服培训。\r\n做好应急预案，假设发生极端事件或数据异常波动，可以采用什么手段和办法进行及时调整，将活动拉回健康状态。\r\n\r\n![](/upload/image/477f1cce279dfe62a222605d43e00ead4936.png)\r\n\r\n![](/upload/image/ab847da8d68b82a1c8bfd19322ded8b65770.png)\r\n\r\n![](/upload/image/04eaa8da8be33af2ea74ecc13b76a31f7412.png)\r\n\r\n![](/upload/image/c107430ab124d0c02c401631266508fe4095.png)', 0, 630, 88, '', NULL, '2019-05-19 23:39:36', 0),(84, 37, 1, '', 0, '', 1, 0, '零基础学运营 (十七) | 活动数据监测与应对策略', '/upload/image/9a43f165cc603f6d77580f03d7ce71cd5456.png', '不监控没有价值的数据。监控活动数据的目的是发现问题和解决问题。但是并非发现和解决所有问题，而是关注核心数据，忽略非核心数据。', '<p>作为一个活动运营人员，如果我们要充分的了解一个活动中发生了什么，我们就需要监控活动数据。<br><img src=\"/upload/image/7d84979bc5454627ac12f9f8724141204638.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5982u679Cu5F15u6D41u6709u95EEu9898\"><a name=\"如果引流有问题\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>如果引流有问题</h2><p>第一步，更换素材与文案，持续监测效果，如果无效，进行第二步。<br>第二步，更换投放时间及覆盖范围，持续监测效果，如果无效，进行第三步。<br>第三步，下架或更换渠道。</p>\r\n<h2 id=\"h2-u5982u679Cu7528u6237u6D41u7A0Bu6709u95EEu9898\"><a name=\"如果用户流程有问题\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>如果用户流程有问题</h2><p>第一步，更改页面活动流程描述，或更具体，或更简明。<br>第二步，推送消息或通知，引导用户再次操作。<br>第三步，尽快迭代，简化或优化流程。更新活动后再从第一步开始循环进行。</p>\r\n<h2 id=\"h2-u6B63u786Eu7684u76D1u63A7u6D3Bu52A8u6570u636E\"><a name=\"正确的监控活动数据\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>正确的监控活动数据</h2><p>首先，不监控没有价值的数据。监控活动数据的目的是发现问题和解决问题。但是并非发现和解决所有问题，而是关注核心数据，忽略非核心数据。虽然活动数据监控非常重要，但并不意味着达成数据监控的目标是活动运营的核心。活动运营的本质是为了短期拉动指标，所以，如果出现资源不足，无法支撑密集的活动监控数据时，不是要追着开发人员去埋点，而是退而求其次，与产品人员讨论所有可能的数据监控埋点，从而在后续的活动中可以有效的获取这些数据监控项。<br>从理论上说，数据监控并不仅仅是活动的需求，也是整个产品的诉求，而活动数据监控和产品自身数据监控的出发点，既有相似的可以复用的需求，也有侧重点各异无法复用的需求。</p>\r\n', '作为一个活动运营人员，如果我们要充分的了解一个活动中发生了什么，我们就需要监控活动数据。\r\n![](/upload/image/7d84979bc5454627ac12f9f8724141204638.png)\r\n\r\n## 如果引流有问题\r\n第一步，更换素材与文案，持续监测效果，如果无效，进行第二步。\r\n第二步，更换投放时间及覆盖范围，持续监测效果，如果无效，进行第三步。\r\n第三步，下架或更换渠道。\r\n## 如果用户流程有问题\r\n第一步，更改页面活动流程描述，或更具体，或更简明。\r\n第二步，推送消息或通知，引导用户再次操作。\r\n第三步，尽快迭代，简化或优化流程。更新活动后再从第一步开始循环进行。\r\n## 正确的监控活动数据\r\n首先，不监控没有价值的数据。监控活动数据的目的是发现问题和解决问题。但是并非发现和解决所有问题，而是关注核心数据，忽略非核心数据。虽然活动数据监控非常重要，但并不意味着达成数据监控的目标是活动运营的核心。活动运营的本质是为了短期拉动指标，所以，如果出现资源不足，无法支撑密集的活动监控数据时，不是要追着开发人员去埋点，而是退而求其次，与产品人员讨论所有可能的数据监控埋点，从而在后续的活动中可以有效的获取这些数据监控项。\r\n从理论上说，数据监控并不仅仅是活动的需求，也是整个产品的诉求，而活动数据监控和产品自身数据监控的出发点，既有相似的可以复用的需求，也有侧重点各异无法复用的需求。', 0, 402, 0, '', NULL, '2019-05-20 23:43:50', 0),(86, 37, 1, '', 0, '', 1, 0, '零基础学运营 (十八) | 活动完成设计之后与活动总结', '/upload/image/b081f563d5628c9165b5dc29501d3dbe7217.png', '一份活动总结中最关键和最核心的部分，就是你对活动效果的判定和经验教训的总结。对于经验教训，要大胆假设，积极再现。', '<h2 id=\"h2-u534Fu8C03u8D44u6E90\"><a name=\"协调资源\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>协调资源</h2><p>活动策划完成后的第一件事，就是确认资源。产品和运营人员最常见的困境就是：没有资源。如果你所在的公司采用了项目组制的管理，你还是很容易协调资源的，甚至资源都在等着你召唤，如果你所在的公司采用扁平化管理，你需要各方人士去协调资源。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u5F00u53D1\"><a name=\"活动开发\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动开发</h2><p>我们永远不知道我们的活动设计，对于开发人员和设计人员来说存在什么问题，是否有一些资源无法满足，所以，必须提前沟通，避免资源准备好之后又重新检视需求，带来不必要的麻烦。</p>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>各条线的工作计划和时间节点，是否有延迟，完成进度如何。<br>需求实现完成度，有没有遗漏的需求。</p>\r\n<h2 id=\"h2-u5199u4E00u4EFDu9760u8C31u7684u6D3Bu52A8u603Bu7ED3\"><a name=\"写一份靠谱的活动总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>写一份靠谱的活动总结</h2><p>第一、所谓的活动效果评估，绝不仅仅是活动之后写一篇活动报告这样简单，活动总结报告的要求是言之有物，对以后的活动运营有知道作用。<br>第二、效果评估更多的是为了从一次活动中得出经验和教训，有助于以后活动运营效果的提升，而不是为了追究活动效果不佳的责任，或者美化活动效果以得到奖励。</p>\r\n<h2 id=\"h2-u6D3Bu52A8u603Bu7ED3u7684u683Cu5F0Fu4E0Eu5185u5BB9\"><a name=\"活动总结的格式与内容\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动总结的格式与内容</h2><p>活动总结的内容应当包含：活动时间、活动内容、活动效果、经验教训。<br>对于前两点，需要对照最初活动设计的策划案，确认哪些需求实现了，哪些需求没有实现，以及有没有按时上线或者变更需求，这些都需要如实反馈。<br>对于后两点，首先得了解数据的情况；同时还得知道数据波动的原因，其中哪些是自然波动，有哪些是做了调整导致的，还有哪些是外因所致，哪些原因是不可抗力；知道了数据波动的原因之后，你要对导致数据波动的原因的主次关系进行分析，得出结论：什么因数对数据影响最大，哪些因数几乎没有影响，哪些是负面影响。<br><strong>如果你无法知道这些，那么你也从不会从中收获经验和教训</strong></p>\r\n<h2 id=\"h2-u6D3Bu52A8u603Bu7ED3u7684u5173u952Eu4E0Eu6838u5FC3\"><a name=\"活动总结的关键与核心\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动总结的关键与核心</h2><p>一份活动总结中最关键和最核心的部分，就是你对活动效果的判定和经验教训的总结。对于经验教训，要<strong>大胆假设，积极再现</strong>。</p>\r\n<h3 id=\"h3-u6210u672Cu6D4Bu91CFu539Fu5219\"><a name=\"成本测量原则\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>成本测量原则</h3><p>所谓成本测量原则，是指在活动设计阶段，设定一个总成本、人均成本以及活动目标值，活动结束后，考核成本是否在预期成本以内。<br>成本测量原则的预期是：将活动总成本控制在预算总成本以内，不超发，同时单个指标的成本越低越好。</p>\r\n<h3 id=\"h3-kpi-\"><a name=\"KPI达成原则\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>KPI达成原则</h3><p>是指在活动设计阶段，虽然提出了总成本和人均成本，但同时也提除了活动目标值，活动结束时，考核是否达成了活动的KPI。<br>KPI达成原则的预期是：<strong>用超出预期的效果来抵消成本控制不当的负面影响</strong>。</p>\r\n', '## 协调资源\r\n活动策划完成后的第一件事，就是确认资源。产品和运营人员最常见的困境就是：没有资源。如果你所在的公司采用了项目组制的管理，你还是很容易协调资源的，甚至资源都在等着你召唤，如果你所在的公司采用扁平化管理，你需要各方人士去协调资源。\r\n## 活动开发\r\n我们永远不知道我们的活动设计，对于开发人员和设计人员来说存在什么问题，是否有一些资源无法满足，所以，必须提前沟通，避免资源准备好之后又重新检视需求，带来不必要的麻烦。\r\n## 测试\r\n各条线的工作计划和时间节点，是否有延迟，完成进度如何。\r\n需求实现完成度，有没有遗漏的需求。\r\n## 写一份靠谱的活动总结\r\n第一、所谓的活动效果评估，绝不仅仅是活动之后写一篇活动报告这样简单，活动总结报告的要求是言之有物，对以后的活动运营有知道作用。\r\n第二、效果评估更多的是为了从一次活动中得出经验和教训，有助于以后活动运营效果的提升，而不是为了追究活动效果不佳的责任，或者美化活动效果以得到奖励。\r\n## 活动总结的格式与内容\r\n活动总结的内容应当包含：活动时间、活动内容、活动效果、经验教训。\r\n对于前两点，需要对照最初活动设计的策划案，确认哪些需求实现了，哪些需求没有实现，以及有没有按时上线或者变更需求，这些都需要如实反馈。\r\n对于后两点，首先得了解数据的情况；同时还得知道数据波动的原因，其中哪些是自然波动，有哪些是做了调整导致的，还有哪些是外因所致，哪些原因是不可抗力；知道了数据波动的原因之后，你要对导致数据波动的原因的主次关系进行分析，得出结论：什么因数对数据影响最大，哪些因数几乎没有影响，哪些是负面影响。\r\n**如果你无法知道这些，那么你也从不会从中收获经验和教训**\r\n## 活动总结的关键与核心\r\n一份活动总结中最关键和最核心的部分，就是你对活动效果的判定和经验教训的总结。对于经验教训，要**大胆假设，积极再现**。\r\n### 成本测量原则\r\n所谓成本测量原则，是指在活动设计阶段，设定一个总成本、人均成本以及活动目标值，活动结束后，考核成本是否在预期成本以内。\r\n成本测量原则的预期是：将活动总成本控制在预算总成本以内，不超发，同时单个指标的成本越低越好。\r\n### KPI达成原则\r\n是指在活动设计阶段，虽然提出了总成本和人均成本，但同时也提除了活动目标值，活动结束时，考核是否达成了活动的KPI。\r\nKPI达成原则的预期是：**用超出预期的效果来抵消成本控制不当的负面影响**。', 0, 491, 0, '', NULL, '2019-05-22 00:17:54', 0),(87, 37, 1, '', 0, '', 1, 0, '零基础学运营 (十九) | 以系统的观念对待活动策划', '/upload/image/375f790bef55a68b8ac92b9b27587b5f6125.png', '一套系统可以被用于多个场景，对于活动运营来说，就是有一个系统可以支撑多种活动运营模式，而无需再次开发。', '<h2 id=\"h2-u6D3Bu52A8u7684u76EEu7684\"><a name=\"活动的目的\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>活动的目的</h2><p>第一、促进用户行为相关的目的：注册、活跃、付费或者转化以及其他需要短期进行提升的用户行为。<br>第二、促进网站（产品）指标相关的目的：功能使用频次、电商客单价、转化率、社区UGC数量等。</p>\r\n<h2 id=\"h2--\"><a name=\"周期性活动/定期活动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>周期性活动/定期活动</h2><p>活动的玩法或者说运营方式不会有很大的变化，且自身的核心功能关联紧密，因此，无需付出更多的成本去教育用户。</p>\r\n<h2 id=\"h2-u7CFBu7EDFu89C2u5FF5\"><a name=\"系统观念\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>系统观念</h2><p>如果不系统的思考活动的设计和策划，往往会做很多重复性工作。所谓系统观念来对待活动策划，是对活动运营人员提出一个考虑“系统复用”的课题，同时还要求活动运营人员具备周期性活动策划的意识。</p>\r\n<h2 id=\"h2-u7CFBu7EDFu590Du7528\"><a name=\"系统复用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>系统复用</h2><p>一套系统可以被用于多个场景，对于活动运营来说，就是有一个系统可以支撑多种活动运营模式，而无需再次开发。</p>\r\n<h2 id=\"h2--\"><a name=\"为什么要“系统复用”\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>为什么要“系统复用”</h2><p>产品开发和运营活动开发都是技术开发，需要美工设计人员和技术人员排期。特别是对技术人员来说，如果发现很多内容都是过去已经开发过的，将很难产生开发热情，重复的工作毫无价值。因此，运营人员必须要尝试学习系统复用的概念。系统复用可以帮助我们节省开发资源、缩短测试时间，然后快速完成上线。</p>\r\n<h2 id=\"h2-u4EC0u4E48u6837u7684u7CFBu7EDFu53EFu4EE5u590Du7528\"><a name=\"什么样的系统可以复用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么样的系统可以复用</h2><p>可以复用的系统应该包含几个特点：<br>可扩展，系统本身开放性很高，因此可以兼容多个产品设计方案的填充；<br>可配置，调整配置就可以产生各种不同的效果；<br>可通用，用户的需求有核心需求和边缘需求，系统也有核心功能和扩展功能，核心功能越没针对性，可复用的可能性就越高。</p>\r\n<h2 id=\"h2-u5468u671Fu6027u6D3Bu52A8u7B56u5212\"><a name=\"周期性活动策划\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>周期性活动策划</h2><p>周期性活动有助于用户习惯的养成，可以减少宣传成本，养成习惯的用户到了时间节点会主动参与活动。通过用户主动参与的行为，运营人员可以了解用户的偏好，对之后活动运营的改进大有裨益。<strong>用户推广计划</strong>，就是目前非常常见的周期性活动，甚至有很多产品已经将其作为自身功能的一部分，基本核心很简单：从已有用户出发，请已有用户在社交圈传播自己的产品，并定向邀请自己的好友加入使用，作为回报，邀请他人的用户和被邀请的用户都有可能获得奖励。</p>\r\n', '## 活动的目的\r\n第一、促进用户行为相关的目的：注册、活跃、付费或者转化以及其他需要短期进行提升的用户行为。\r\n第二、促进网站（产品）指标相关的目的：功能使用频次、电商客单价、转化率、社区UGC数量等。\r\n## 周期性活动/定期活动\r\n活动的玩法或者说运营方式不会有很大的变化，且自身的核心功能关联紧密，因此，无需付出更多的成本去教育用户。\r\n## 系统观念\r\n如果不系统的思考活动的设计和策划，往往会做很多重复性工作。所谓系统观念来对待活动策划，是对活动运营人员提出一个考虑“系统复用”的课题，同时还要求活动运营人员具备周期性活动策划的意识。\r\n## 系统复用\r\n一套系统可以被用于多个场景，对于活动运营来说，就是有一个系统可以支撑多种活动运营模式，而无需再次开发。\r\n## 为什么要“系统复用”\r\n产品开发和运营活动开发都是技术开发，需要美工设计人员和技术人员排期。特别是对技术人员来说，如果发现很多内容都是过去已经开发过的，将很难产生开发热情，重复的工作毫无价值。因此，运营人员必须要尝试学习系统复用的概念。系统复用可以帮助我们节省开发资源、缩短测试时间，然后快速完成上线。\r\n## 什么样的系统可以复用\r\n可以复用的系统应该包含几个特点：\r\n可扩展，系统本身开放性很高，因此可以兼容多个产品设计方案的填充；\r\n可配置，调整配置就可以产生各种不同的效果；\r\n可通用，用户的需求有核心需求和边缘需求，系统也有核心功能和扩展功能，核心功能越没针对性，可复用的可能性就越高。\r\n## 周期性活动策划\r\n周期性活动有助于用户习惯的养成，可以减少宣传成本，养成习惯的用户到了时间节点会主动参与活动。通过用户主动参与的行为，运营人员可以了解用户的偏好，对之后活动运营的改进大有裨益。**用户推广计划**，就是目前非常常见的周期性活动，甚至有很多产品已经将其作为自身功能的一部分，基本核心很简单：从已有用户出发，请已有用户在社交圈传播自己的产品，并定向邀请自己的好友加入使用，作为回报，邀请他人的用户和被邀请的用户都有可能获得奖励。', 0, 522, 1, '', NULL, '2019-05-23 00:11:52', 0),(88, 37, 1, '', 0, '', 1, 0, '零基础学运营 (二十) | 内部活动与联合活动', '/upload/image/0d572eb955158069c38408f18183b0d65173.png', '如果基本需求得不到很好满足，客户就会不满意，而即便基本需求可以得到很好的满足，其实客户也不会觉得非常满意。', '<h2 id=\"h2-u5185u90E8u6D3Bu52A8\"><a name=\"内部活动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内部活动</h2><p>活动运营人员是驱动器，是活动需求方。几乎所有的公司都是如此，对于内部活动，活动运营人员有很大的权限，可以决定做什么活动、如何实施、申请活动预算、维护活动全程、让活动落地执行，有始有终。</p>\r\n<h2 id=\"h2-u8054u5408u6D3Bu52A8\"><a name=\"联合活动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>联合活动</h2><p>活动运营人员是调和剂，是活动需求的承接方和合作者。在有的公司，活动运营人员同时还兼任BD（business development，商务拓展）的角色，需要去和其他公司谈判，采用联合活动的方式，共担成本甚至让对方负担成本，完成活动策划并让活动落地执行；而另一些公司，活动运营人员只承接来之第三方市场部门传递过来的合作意向，完成需求的整理及活动策划并让活动落地执行。</p>\r\n<h2 id=\"h2-u5BA2u6237u9884u671Fu7BA1u7406\"><a name=\"客户预期管理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>客户预期管理</h2><p>首要要做好需求确认与需求控制，联合活动的的目的必须明确，你需要的资源通过什么方式从合作方转接过来，这需要准确的需求确认。并不是合作方出了钱，那么合作方就占据优势，提出的一切需求都要满足。因为合作方的需求大多数情况下是个性化的，个性化的问题在于，每个活动实际需求可能不同，而且几乎无法复用。所以要做客户预期管理。<br><img src=\"/upload/image/4c3a5fe54312fe9438288d93d750182d8702.png\" alt=\"\"><br>预期需求是客户被告知的、被教育会获得的服务。<br>基本需求是客户认为服务方提供本应提供的服务。<br>如果基本需求得不到很好满足，客户就会不满意，而即便基本需求可以得到很好的满足，其实客户也不会觉得非常满意。<br>而惊喜需求则是客户觉得你不会提供的服务，是一种超越了期待的服务，不管效果好不好，是否全面，客户都会觉得非常满意。<br>传统的管理客户预期的方法是：<br><img src=\"/upload/image/843aadb7f45387ed91d9c8cee5efd8042449.png\" alt=\"\"><br>对于运营人员来说，可以替换为：<br><img src=\"/upload/image/99f26a96739b3dd4d544ec84f85da7326338.png\" alt=\"\"><br>围绕单一的合作活动去做活动设计，总结合作活动的共性，去做系统设计。即实现了当前合作目标，又为了未来可以批量实现类似的合作目标。单一的合作活动总有个性化，即使做了系统，依然不能避免再次开发，那么多系统设计是否有必要？答案是绝对有必要。</p>\r\n', '## 内部活动\r\n活动运营人员是驱动器，是活动需求方。几乎所有的公司都是如此，对于内部活动，活动运营人员有很大的权限，可以决定做什么活动、如何实施、申请活动预算、维护活动全程、让活动落地执行，有始有终。\r\n## 联合活动\r\n活动运营人员是调和剂，是活动需求的承接方和合作者。在有的公司，活动运营人员同时还兼任BD（business development，商务拓展）的角色，需要去和其他公司谈判，采用联合活动的方式，共担成本甚至让对方负担成本，完成活动策划并让活动落地执行；而另一些公司，活动运营人员只承接来之第三方市场部门传递过来的合作意向，完成需求的整理及活动策划并让活动落地执行。\r\n## 客户预期管理\r\n首要要做好需求确认与需求控制，联合活动的的目的必须明确，你需要的资源通过什么方式从合作方转接过来，这需要准确的需求确认。并不是合作方出了钱，那么合作方就占据优势，提出的一切需求都要满足。因为合作方的需求大多数情况下是个性化的，个性化的问题在于，每个活动实际需求可能不同，而且几乎无法复用。所以要做客户预期管理。\r\n![](/upload/image/4c3a5fe54312fe9438288d93d750182d8702.png)\r\n预期需求是客户被告知的、被教育会获得的服务。\r\n基本需求是客户认为服务方提供本应提供的服务。\r\n如果基本需求得不到很好满足，客户就会不满意，而即便基本需求可以得到很好的满足，其实客户也不会觉得非常满意。\r\n而惊喜需求则是客户觉得你不会提供的服务，是一种超越了期待的服务，不管效果好不好，是否全面，客户都会觉得非常满意。\r\n传统的管理客户预期的方法是：\r\n![](/upload/image/843aadb7f45387ed91d9c8cee5efd8042449.png)\r\n对于运营人员来说，可以替换为：\r\n![](/upload/image/99f26a96739b3dd4d544ec84f85da7326338.png)\r\n围绕单一的合作活动去做活动设计，总结合作活动的共性，去做系统设计。即实现了当前合作目标，又为了未来可以批量实现类似的合作目标。单一的合作活动总有个性化，即使做了系统，依然不能避免再次开发，那么多系统设计是否有必要？答案是绝对有必要。\r\n', 0, 498, 1, '', NULL, '2019-05-24 23:57:44', 0),(89, 37, 1, '', 0, '', 1, 0, '零基础学运营 (二十一) | 用户运营的工作内容', '/upload/image/2410855d8ed31029e8866ded64aed1f16606.png', '付费用户对产品有极高的依赖，如何通过运营手段，让他们认为值得为产品的功能付费甚至持续付费，是一件困难但必须考虑的事情。', '<p>用户运营是每个产品的核心工作，不管是内容运营还是活动运营，最后指标都会落实到最终的运营收益上，收益可能是用户数也可能是交易额或利润。用户运营是指产品的用户活跃、留存、付费为目标，依据用户需求，指定运营方案甚至运营机制。用户运营的核心是开源、节流（减少损失）、维持（促进活跃及提高留存）、刺激（转化付费）。</p>\r\n<h2 id=\"h2-u5F00u6E90\"><a name=\"开源\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>开源</h2><p>主要是指用户规模的扩大，通常落脚点在访问量和注册用户。<br><img src=\"/upload/image/608c6326f565c517ad31e1d876642d9a9864.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u6CE8u518Cu6E20u9053u7684u6311u9009u548Cu6253u5F00\"><a name=\"注册渠道的挑选和打开\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注册渠道的挑选和打开</h3><p>注册渠道的选择决定用户进入产品的入口，注册方式的选择决定用户进入的门槛。<br>第一种方式：自建帐号体系。<br>第二种方式：使用社会化登录。<br>第三种方式：使用社会化登录，并与自建帐号体系结合。</p>\r\n<h3 id=\"h3-u63D0u5347u6CE8u518Cu8F6Cu5316u7387\"><a name=\"提升注册转化率\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>提升注册转化率</h3><p>用户完成注册只是第一步，最重要的运营工作是，如何将一个注册用户转化为一个<strong>对产品有认知的有效用户</strong>。<br><img src=\"/upload/image/bd022125c9a7bed2366820c797bfa8396214.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u8282u6D41\"><a name=\"节流\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>节流</h2><p>主要是保持用户规模，通常落脚点在沉默用户或流失用户。</p>\r\n<h3 id=\"h3-u5B9Au4E49u7528u6237u6C89u9ED8u6216u6D41u5931u7684u6807u51C6\"><a name=\"定义用户沉默或流失的标准\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义用户沉默或流失的标准</h3><p>用户多长时间没有登录产品就意味着流失，这需要明确定义。</p>\r\n<h3 id=\"h3-u5EFAu7ACBu6D41u5931u9884u8B66u673Au5236\"><a name=\"建立流失预警机制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>建立流失预警机制</h3><p>弄清楚用户是在什么情况下流失的，通过运营数据建立模型，并制定相关的运营策略，当用户行为符合流失模型定义时发出警告，敦促运营人员进行针对性调整，预防流失发生。</p>\r\n<h3 id=\"h3-u5BF9u5DF2u6D41u5931u7684u7528u6237u8FDBu884Cu633Du56DE\"><a name=\"对已流失的用户进行挽回\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>对已流失的用户进行挽回</h3><p>用户如果已经流失了，如何让他们回到产品中，这需要开展活动，但挽回用户非常困难，所以更重要的是预防流失，而不是挽回。</p>\r\n<h2 id=\"h2-u4FC3u6D3Bu8DC3\"><a name=\"促活跃\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>促活跃</h2><p>提升用户使用产品的频次，通常落脚点在用户留存率和用户活跃率。</p>\r\n<h3 id=\"h3-u5B9Au4E49u7528u6237u7559u5B58u4E0Eu7528u6237u6D3Bu8DC3u7684u6807u51C6\"><a name=\"定义用户留存与用户活跃的标准\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义用户留存与用户活跃的标准</h3><p>移动互联网时代，有一些应用界定用户留存的标准是打开应用，这无可厚非，但仅仅是打开，其实并不意味着用户活跃，所以，需要制定更严格的策略和定义来规定用户的活跃行为。</p>\r\n<h3 id=\"h3-u63D0u5347u7528u6237u7559u5B58u7387\"><a name=\"提升用户留存率\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>提升用户留存率</h3><p>用户不会无缘无故的留下来，产品或运营人员需要做一些促进用户留存的工作，如果用户留存的比例过低，运营人员需要想办法提高留存的数据。</p>\r\n<h3 id=\"h3--\"><a name=\"提升用户活跃度（用户行为、产品使用频次）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>提升用户活跃度（用户行为、产品使用频次）</h3><p>用户留下来了，不意味着用户就是活跃的，那些行为数据可以衡量出用户是否活跃，这是运营人员要做的功课。</p>\r\n<h2 id=\"h2-u8F6Cu4ED8u8D39\"><a name=\"转付费\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>转付费</h2><p>抓住高价值用户或核心用户的需求，让他们为产品付费，并且持续付费。</p>\r\n<h3 id=\"h3-u901Au8FC7u4E00u7CFBu5217u884Cu4E3Au8BA9u672Au4ED8u8D39u7684u7528u6237u4ED8u8D39\"><a name=\"通过一系列行为让未付费的用户付费\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>通过一系列行为让未付费的用户付费</h3><p>促进用户从活跃向付费转化，是以用户付费为盈利方式的产品的重要工作内容。</p>\r\n<h3 id=\"h3-u901Au8FC7u673Au5236u8BA9u5DF2u4ED8u8D39u7684u7528u6237u6301u7EEDu4ED8u8D39\"><a name=\"通过机制让已付费的用户持续付费\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>通过机制让已付费的用户持续付费</h3><p>付费用户对产品有极高的依赖，如何通过运营手段，让他们认为值得为产品的功能付费甚至持续付费，是一件困难但必须考虑的事情。</p>\r\n', '用户运营是每个产品的核心工作，不管是内容运营还是活动运营，最后指标都会落实到最终的运营收益上，收益可能是用户数也可能是交易额或利润。用户运营是指产品的用户活跃、留存、付费为目标，依据用户需求，指定运营方案甚至运营机制。用户运营的核心是开源、节流（减少损失）、维持（促进活跃及提高留存）、刺激（转化付费）。\r\n##开源\r\n主要是指用户规模的扩大，通常落脚点在访问量和注册用户。\r\n![](/upload/image/608c6326f565c517ad31e1d876642d9a9864.png)\r\n###注册渠道的挑选和打开\r\n注册渠道的选择决定用户进入产品的入口，注册方式的选择决定用户进入的门槛。\r\n第一种方式：自建帐号体系。\r\n第二种方式：使用社会化登录。\r\n第三种方式：使用社会化登录，并与自建帐号体系结合。\r\n###提升注册转化率\r\n用户完成注册只是第一步，最重要的运营工作是，如何将一个注册用户转化为一个**对产品有认知的有效用户**。\r\n![](/upload/image/bd022125c9a7bed2366820c797bfa8396214.png)\r\n##节流\r\n主要是保持用户规模，通常落脚点在沉默用户或流失用户。\r\n###定义用户沉默或流失的标准\r\n用户多长时间没有登录产品就意味着流失，这需要明确定义。\r\n###建立流失预警机制\r\n弄清楚用户是在什么情况下流失的，通过运营数据建立模型，并制定相关的运营策略，当用户行为符合流失模型定义时发出警告，敦促运营人员进行针对性调整，预防流失发生。\r\n###对已流失的用户进行挽回\r\n用户如果已经流失了，如何让他们回到产品中，这需要开展活动，但挽回用户非常困难，所以更重要的是预防流失，而不是挽回。\r\n##促活跃\r\n提升用户使用产品的频次，通常落脚点在用户留存率和用户活跃率。\r\n###定义用户留存与用户活跃的标准\r\n移动互联网时代，有一些应用界定用户留存的标准是打开应用，这无可厚非，但仅仅是打开，其实并不意味着用户活跃，所以，需要制定更严格的策略和定义来规定用户的活跃行为。\r\n###提升用户留存率\r\n用户不会无缘无故的留下来，产品或运营人员需要做一些促进用户留存的工作，如果用户留存的比例过低，运营人员需要想办法提高留存的数据。\r\n###提升用户活跃度（用户行为、产品使用频次）\r\n用户留下来了，不意味着用户就是活跃的，那些行为数据可以衡量出用户是否活跃，这是运营人员要做的功课。\r\n##转付费\r\n抓住高价值用户或核心用户的需求，让他们为产品付费，并且持续付费。\r\n###通过一系列行为让未付费的用户付费\r\n促进用户从活跃向付费转化，是以用户付费为盈利方式的产品的重要工作内容。\r\n###通过机制让已付费的用户持续付费\r\n付费用户对产品有极高的依赖，如何通过运营手段，让他们认为值得为产品的功能付费甚至持续付费，是一件困难但必须考虑的事情。', 0, 524, 1, '', NULL, '2019-05-26 00:29:55', 0),(90, 37, 1, '', 0, '', 1, 0, '零基础学运营 (二十二) | 关于开源那点事', '/upload/image/437f5d90809f6ae6d47674dd881dffb59776.png', '运营和产品人员应该通过引导流程告诉用户：产品是什么、核心价值在哪里、提供怎样的服务等等。', '<p>目前用户注册通道越来越多的采取先用第三方登录再绑定用户资料的方式，当用户意识到自己不需要那么多用户名和密码，当企业意识到用户其实就是同一个群体，帐号的共享之路就开启了。</p>\r\n<h2 id=\"h2-u6CE8u518Cu8F6Cu5316\"><a name=\"注册转化\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注册转化</h2><p>用户填写完资料以后，要不留余力的引导用户了解并使用产品，可以使用引导步骤，好处是：第一，运营人员在整个流程中，能够轻松的帮助用户使用产品的功能，确立注册用户对产品的首次认知。第二，用户完成引导流程后，就掌握了产品的大概玩法，容易继续进行动作，成为一个有效的注册用户。<br>运营和产品人员应该通过引导流程告诉用户：产品是什么、核心价值在哪里、提供怎样的服务等等。作为运营者，必须清醒的认识到，对于一个新用户，只有TA通过注册引导流程，到达产品使用界面，甚至完第一次产品使用，才算的上是一个真正的用户。</p>\r\n<blockquote>\r\n<p>把用户当傻子。应当简单明了、图文并茂的告诉用户，这是什么，用户能做什么，用户从哪里开始体验。<br>最大程度的展现核心功能、核心价值、核心玩法。<br>分阶段的展示次要功能、次要价值、次要玩法，不要试图全部塞给用户。<br>根据统计整理文案，改进引导顺序等细节。<br>引导要有趣，不要让用户觉得枯燥；步骤简单、流程要短。<br>引导要捆绑用户行为，用户的每一个反馈都可以告诉你，他究竟是否明白你在说什么。每一个反馈都可以提供一些激励，促使他继续下去，完成流程。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5173u8054u6307u6807\"><a name=\"关联指标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>关联指标</h2><p>在用户运营工作的相关数据中，对应用户注册行为，有几项关联指标。</p>\r\n<h6 id=\"h6-u6CE8u518Cu6765u6E90\"><a name=\"注册来源\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注册来源</h6><p>外部投放的广告落地到某个 Landing Page ，引导用户完成注册。<br>用户直接在产品上完成注册。</p>\r\n<h6 id=\"h6-u6CE8u518Cu8F6Cu6362u7387\"><a name=\"注册转换率\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注册转换率</h6><p>从进入注册流程到完成注册流程的注册成功用户数，占所达到注册页面的用户数的比例。这个数据涉及注册流程是否有优化空间，以及如何优化。</p>\r\n<h6 id=\"h6-u8E66u5931u9875u9762\"><a name=\"蹦失页面\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>蹦失页面</h6><p>没有完成注册流程的用户跳出注册流程的页面或者步骤。这个数据涉及后续流失用户的分析，必须关注。</p>\r\n<h2 id=\"h2-u5173u8054u6307u6807u5728u4E0Du540Cu65F6u671Fu7684u4F5Cu7528\"><a name=\"关联指标在不同时期的作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>关联指标在不同时期的作用</h2><p>在用户运营的初期，为了降低获取外部用户，注册来源的质量是最重要的指标，而判断来源的质量，就要考虑注册转化的成功率，并参考蹦失页面，来确认用户为什么放弃注册转化，判断是否可以优化注册引导流程。</p>\r\n<p>在用户运营中期，需要新用户的稳定进入，就需要密切的关注注册转化率指标与蹦失页面指标，适时调整，并考虑采用配套活动推动用户的注册引导行为。</p>\r\n<p>在用户运营的后期，需要关注用户的留存及活跃度，此时就不需要刻意关注注册的相关指标，反而需要注意用户的留存指标和活跃指标，以及流失用户的模型建立及预警机制。</p>\r\n', '目前用户注册通道越来越多的采取先用第三方登录再绑定用户资料的方式，当用户意识到自己不需要那么多用户名和密码，当企业意识到用户其实就是同一个群体，帐号的共享之路就开启了。\r\n## 注册转化\r\n用户填写完资料以后，要不留余力的引导用户了解并使用产品，可以使用引导步骤，好处是：第一，运营人员在整个流程中，能够轻松的帮助用户使用产品的功能，确立注册用户对产品的首次认知。第二，用户完成引导流程后，就掌握了产品的大概玩法，容易继续进行动作，成为一个有效的注册用户。\r\n运营和产品人员应该通过引导流程告诉用户：产品是什么、核心价值在哪里、提供怎样的服务等等。作为运营者，必须清醒的认识到，对于一个新用户，只有TA通过注册引导流程，到达产品使用界面，甚至完第一次产品使用，才算的上是一个真正的用户。\r\n> 把用户当傻子。应当简单明了、图文并茂的告诉用户，这是什么，用户能做什么，用户从哪里开始体验。\r\n> 最大程度的展现核心功能、核心价值、核心玩法。\r\n> 分阶段的展示次要功能、次要价值、次要玩法，不要试图全部塞给用户。\r\n> 根据统计整理文案，改进引导顺序等细节。\r\n> 引导要有趣，不要让用户觉得枯燥；步骤简单、流程要短。\r\n> 引导要捆绑用户行为，用户的每一个反馈都可以告诉你，他究竟是否明白你在说什么。每一个反馈都可以提供一些激励，促使他继续下去，完成流程。\r\n\r\n## 关联指标\r\n在用户运营工作的相关数据中，对应用户注册行为，有几项关联指标。\r\n###### 注册来源\r\n外部投放的广告落地到某个 Landing Page ，引导用户完成注册。\r\n用户直接在产品上完成注册。\r\n###### 注册转换率\r\n从进入注册流程到完成注册流程的注册成功用户数，占所达到注册页面的用户数的比例。这个数据涉及注册流程是否有优化空间，以及如何优化。\r\n###### 蹦失页面\r\n没有完成注册流程的用户跳出注册流程的页面或者步骤。这个数据涉及后续流失用户的分析，必须关注。\r\n## 关联指标在不同时期的作用\r\n在用户运营的初期，为了降低获取外部用户，注册来源的质量是最重要的指标，而判断来源的质量，就要考虑注册转化的成功率，并参考蹦失页面，来确认用户为什么放弃注册转化，判断是否可以优化注册引导流程。\r\n\r\n在用户运营中期，需要新用户的稳定进入，就需要密切的关注注册转化率指标与蹦失页面指标，适时调整，并考虑采用配套活动推动用户的注册引导行为。\r\n\r\n在用户运营的后期，需要关注用户的留存及活跃度，此时就不需要刻意关注注册的相关指标，反而需要注意用户的留存指标和活跃指标，以及流失用户的模型建立及预警机制。', 0, 492, 1, '', NULL, '2019-05-28 00:00:52', 0),(91, 37, 1, '', 0, '', 1, 0, '零基础学运营 (二十三) | 节流到底节什么流', '/upload/image/e765f5d53bc0c3968ce6c8d0495c6f541054.png', '要切实做到预防流失，除了已建立的流失预警模型外，还需要运营人员有快速的反应能力，对影响用户、发生流失的环节进行强补。', '<p>开源的反面是节流，作为用户运营的关键事项，节流担负着减少产品的用户流失，以及挽回已流失用户的重任。</p>\r\n<h2 id=\"h2-u5B9Au4E49u6D41u5931u7528u6237u7684u8861u91CFu6807u51C6\"><a name=\"定义流失用户的衡量标准\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义流失用户的衡量标准</h2><p>通常情况下，用户的生命周期如下图：<br><img src=\"/upload/image/b71dffbc3bae7616e9f8f4bb088444ae2024.png\" alt=\"\"><br>以上所有环节都有可能发生用户流失。<br>在运营工作中，我们通常会看到如下事实：</p>\r\n<blockquote>\r\n<p>流失行为是一个长期的持续行为。<br>定义流失首先要定义用户行为模型，从而确认对产品来说，到底用户多长时间不使用就是流失。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u5EFAu7ACBu6D41u5931u9884u8B66u673Au5236\"><a name=\"建立流失预警机制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>建立流失预警机制</h2><p>流失预警的前提是，对用户行为数据和产品节奏保持长期有效的监控，因为运营人员需要了解数据，才能对流失预警做出判断：</p>\r\n<blockquote>\r\n<p>在流失前，用户进行了哪些类是行为。<br>这些用户是否集中于某一渠道。<br>这些用户的性别属性、地域属性、年龄层次、兴趣特征是否类似。<br>在发生流失的时间点，产品做了哪些动作，是否发布了新版本，是否改动了某些核心功能。</p>\r\n</blockquote>\r\n<p>第一，产品在做改版设计时，一定要充分调研用户和听取运营人员的意见。运营人员也一定要拿出数据佐证产品改版设计是否合理，是否会影响已有用户的活跃和留存。</p>\r\n<p>第二，对于大改版，一定要慎之又慎，灰度测试必不可少，同时该坚持的原则一定要坚持，改版一定不要仅凭感觉。改版之前，一定要和运营同学讨论一下新版本的引导学习流程的设计。运营人员要充分加入讨论中，做好各种预案和策略，在出现问题时，可以有效的缓解甚至解决，避免带来预料之外的麻烦。</p>\r\n<p>第三，运营人员要密切掌握用户的使用反馈，及时解决各种可能的运营风险。</p>\r\n<h2 id=\"h2-u9884u9632u7528u6237u6D41u5931\"><a name=\"预防用户流失\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>预防用户流失</h2><p>依然是从数据层面来看，运营人员已经完成了用户分类，了解了不同的用户来源渠道，掌握了用户的性别特征、地域特征、年龄层次，接下来运营人员要了解的，主要就是用户的兴趣点。</p>\r\n<blockquote>\r\n<p>给用户想要的一切。<br>持续给他们想要的一切。<br>尝试给他们可能喜欢的一切。<br>避免让他们失去兴趣。</p>\r\n</blockquote>\r\n<p>要切实做到预防流失，除了已建立的流失预警模型外，还需要运营人员有快速的反应能力，对影响用户、发生流失的环节进行强补。</p>\r\n', '开源的反面是节流，作为用户运营的关键事项，节流担负着减少产品的用户流失，以及挽回已流失用户的重任。\r\n## 定义流失用户的衡量标准\r\n通常情况下，用户的生命周期如下图：\r\n![](/upload/image/b71dffbc3bae7616e9f8f4bb088444ae2024.png)\r\n以上所有环节都有可能发生用户流失。\r\n在运营工作中，我们通常会看到如下事实：\r\n> 流失行为是一个长期的持续行为。\r\n> 定义流失首先要定义用户行为模型，从而确认对产品来说，到底用户多长时间不使用就是流失。\r\n\r\n## 建立流失预警机制\r\n流失预警的前提是，对用户行为数据和产品节奏保持长期有效的监控，因为运营人员需要了解数据，才能对流失预警做出判断：\r\n> 在流失前，用户进行了哪些类是行为。\r\n> 这些用户是否集中于某一渠道。\r\n> 这些用户的性别属性、地域属性、年龄层次、兴趣特征是否类似。\r\n> 在发生流失的时间点，产品做了哪些动作，是否发布了新版本，是否改动了某些核心功能。\r\n\r\n第一，产品在做改版设计时，一定要充分调研用户和听取运营人员的意见。运营人员也一定要拿出数据佐证产品改版设计是否合理，是否会影响已有用户的活跃和留存。\r\n\r\n第二，对于大改版，一定要慎之又慎，灰度测试必不可少，同时该坚持的原则一定要坚持，改版一定不要仅凭感觉。改版之前，一定要和运营同学讨论一下新版本的引导学习流程的设计。运营人员要充分加入讨论中，做好各种预案和策略，在出现问题时，可以有效的缓解甚至解决，避免带来预料之外的麻烦。\r\n\r\n第三，运营人员要密切掌握用户的使用反馈，及时解决各种可能的运营风险。\r\n\r\n## 预防用户流失\r\n依然是从数据层面来看，运营人员已经完成了用户分类，了解了不同的用户来源渠道，掌握了用户的性别特征、地域特征、年龄层次，接下来运营人员要了解的，主要就是用户的兴趣点。\r\n> 给用户想要的一切。\r\n> 持续给他们想要的一切。\r\n> 尝试给他们可能喜欢的一切。\r\n> 避免让他们失去兴趣。\r\n\r\n要切实做到预防流失，除了已建立的流失预警模型外，还需要运营人员有快速的反应能力，对影响用户、发生流失的环节进行强补。', 0, 518, 2, '', NULL, '2019-05-28 23:38:44', 0),(92, 37, 1, '', 0, '', 1, 0, '零基础学运营 (二十四) | 当用户流失了，我们做什么', '/upload/image/6a9b771dde39bf0e6c8bf986c3be2bb55028.png', '流失预警其实是亡羊补牢，针对的是未来的流失隐患，要确保羊不走失，更多的还是要提高留存和活跃度，对于已经走失的羊，是很难找回来的。', '<p>用户流失是一个自然发生的无法完全避免的事情，运营人员面对流失的用户，必然要尝试挽回，获取一个新用户的成本，比维护一个老用户的成本要高得多，如果用户流失了，再次唤醒他们会非常困难。</p>\r\n<h2 id=\"h2-u6D41u5931u9884u8B66\"><a name=\"流失预警\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>流失预警</h2><p>明确定义、变量选取、多次建模、指导业务。</p>\r\n<blockquote>\r\n<p>明确用户流失的标准。<br>选取用户建模的指标，用户的行为、活跃的频率、活跃时候对应的操作。<br>建立模型，并不断的调试，剔除无意义的干扰项。<br>从数据库中把符合模型的用户筛选出来。<br>设计活动、话术、直接与用户沟通，尝试延长其在产品中的生命周期。</p>\r\n</blockquote>\r\n<p>流失预警模型仅仅展示了通常情况下用户流失的原因，而特殊情况下的用户流失通过模型是看不出来的，了解了用户能够被唤醒的原因，或许是利益，给用户带来点利好；或许是情怀，帮助用户回忆一下过去的情景，或许是别的什么。可以让流失的用户回归后，有留下来并活跃的理由；或许是别的什么。节流的关键，是在用户未流失之前，而用户挽回的关键，则是在挽回后的用户留存。</p>\r\n<p>第一、流失预警其实是亡羊补牢，针对的是未来的流失隐患，要确保羊不走失，更多的还是要提高留存和活跃度，对于已经走失的羊，是很难找回来的。</p>\r\n<p>第二、流失挽回虽然收效甚微，但依然要做，而重要的永远不是活动如何设计才能挽回更多的流失用户，而是用户回来之后如何让其留下来，别再流失。用户流失的次数越多，挽回的可能性就越低。</p>\r\n<h2 id=\"h2-u7528u6237u633Du56DEu7684u6B65u9AA4\"><a name=\"用户挽回的步骤\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>用户挽回的步骤</h2><p>第一步、让用户知道你要挽回TA，通过哪个渠道告诉他、如何告诉他，你要挽回TA；用户流失了，意味着你不可能通过系统内的渠道和TA渠道联系，那么就要依靠系统外的渠道。</p>\r\n<blockquote>\r\n<p>邮箱，不管是到达率还是打开率，都很一般，唯一的优点就是发送量大。<br>短信，用户每天接收铺天盖地的垃圾短信，所以你的挽回内容设计得不好，很容易被当成垃圾短信而无视，用户会认为隐私被侵犯，导致严重的客户投诉。</p>\r\n</blockquote>\r\n<p>检测挽回的效果需要看监控几个数据：到达率、打开率、转化率。</p>\r\n<p>第二步、让用户认为你是在乎TA，而不仅仅是要挽回TA。不管通过何种渠道推送挽回流失用户的内容，运营人员想要达到的目标是先让流失用户回来看看，然后才是考虑让他再在站内进行一些动作。那么，运营人员准备的挽回文案就很重要了。一个关键要是是：告诉用户有礼品，比单纯的让用户回来坐坐，更有吸引力。</p>\r\n<p>第三步、挽回后的用户更需要引导和关怀。当你挽回一个用户，就要把他当作一个全新的用户，好好的引导和关怀。做一些流失用户回来之后的引导工作，那么成功的挽回的概率将远远超过大多数人。</p>\r\n', '用户流失是一个自然发生的无法完全避免的事情，运营人员面对流失的用户，必然要尝试挽回，获取一个新用户的成本，比维护一个老用户的成本要高得多，如果用户流失了，再次唤醒他们会非常困难。\r\n## 流失预警\r\n明确定义、变量选取、多次建模、指导业务。\r\n> 明确用户流失的标准。\r\n> 选取用户建模的指标，用户的行为、活跃的频率、活跃时候对应的操作。\r\n> 建立模型，并不断的调试，剔除无意义的干扰项。\r\n> 从数据库中把符合模型的用户筛选出来。\r\n> 设计活动、话术、直接与用户沟通，尝试延长其在产品中的生命周期。\r\n\r\n流失预警模型仅仅展示了通常情况下用户流失的原因，而特殊情况下的用户流失通过模型是看不出来的，了解了用户能够被唤醒的原因，或许是利益，给用户带来点利好；或许是情怀，帮助用户回忆一下过去的情景，或许是别的什么。可以让流失的用户回归后，有留下来并活跃的理由；或许是别的什么。节流的关键，是在用户未流失之前，而用户挽回的关键，则是在挽回后的用户留存。\r\n\r\n第一、流失预警其实是亡羊补牢，针对的是未来的流失隐患，要确保羊不走失，更多的还是要提高留存和活跃度，对于已经走失的羊，是很难找回来的。\r\n\r\n第二、流失挽回虽然收效甚微，但依然要做，而重要的永远不是活动如何设计才能挽回更多的流失用户，而是用户回来之后如何让其留下来，别再流失。用户流失的次数越多，挽回的可能性就越低。\r\n\r\n## 用户挽回的步骤\r\n第一步、让用户知道你要挽回TA，通过哪个渠道告诉他、如何告诉他，你要挽回TA；用户流失了，意味着你不可能通过系统内的渠道和TA渠道联系，那么就要依靠系统外的渠道。\r\n> 邮箱，不管是到达率还是打开率，都很一般，唯一的优点就是发送量大。\r\n> 短信，用户每天接收铺天盖地的垃圾短信，所以你的挽回内容设计得不好，很容易被当成垃圾短信而无视，用户会认为隐私被侵犯，导致严重的客户投诉。\r\n\r\n检测挽回的效果需要看监控几个数据：到达率、打开率、转化率。\r\n\r\n第二步、让用户认为你是在乎TA，而不仅仅是要挽回TA。不管通过何种渠道推送挽回流失用户的内容，运营人员想要达到的目标是先让流失用户回来看看，然后才是考虑让他再在站内进行一些动作。那么，运营人员准备的挽回文案就很重要了。一个关键要是是：告诉用户有礼品，比单纯的让用户回来坐坐，更有吸引力。\r\n\r\n第三步、挽回后的用户更需要引导和关怀。当你挽回一个用户，就要把他当作一个全新的用户，好好的引导和关怀。做一些流失用户回来之后的引导工作，那么成功的挽回的概率将远远超过大多数人。\r\n\r\n', 0, 495, 4, '', NULL, '2019-06-02 00:54:47', 0),(93, 37, 1, '', 0, '', 1, 0, '零基础学运营 (二十五) | 促进用户活跃是个基本功', '/upload/image/3ea0b530e05a5ca6f29497bf992965047454.png', '不管有多少种办法引入用户，必须至少有一种办法来留住用户，这才是运营最关键的部分。', '<p><img src=\"/upload/image/54e7af3e7798a48f44c3c700a3bca37c1500.png\" alt=\"\"><br>如果我们把产品拥有的用户看作是一个鱼塘，用户是鱼，那么鱼塘里有多少鱼取决于两点：</p>\r\n<blockquote>\r\n<p>从外部流进来多少鱼（开源）。<br>从鱼塘里游出去多少鱼（节流）。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/0fd84594a6e419be119db3c3ab73ad9f3274.png\" alt=\"\"><br>整个用户运营体系中最重要的一件事情，就是维护到开源带来的用户，提高他们的留存率及活跃度，减少他们的流失。</p>\r\n<p>围绕核心业务设计可以获得奖励的用户行为；强调连续行为的重要性；尽量让奖励变得对用户有价值。奖励一定要设置有期限性，促使用户使用奖励去消费。</p>\r\n<p>从运营的角度出发如何增加用户的黏性，促使他们留存和活跃，给用户好处、让用户通过长期积累获得好处从而增加他们放弃产品成本之外，还有另一种方式是做好产品的运营与维护，让用户觉得产品有用、好用，养成习惯，从而确保用户不会轻易离开。</p>\r\n<p>不管有多少种办法引入用户，必须至少有一种办法来留住用户，这才是运营最关键的部分。</p>\r\n', '![](/upload/image/54e7af3e7798a48f44c3c700a3bca37c1500.png)\r\n如果我们把产品拥有的用户看作是一个鱼塘，用户是鱼，那么鱼塘里有多少鱼取决于两点：\r\n> 从外部流进来多少鱼（开源）。\r\n> 从鱼塘里游出去多少鱼（节流）。\r\n\r\n![](/upload/image/0fd84594a6e419be119db3c3ab73ad9f3274.png)\r\n整个用户运营体系中最重要的一件事情，就是维护到开源带来的用户，提高他们的留存率及活跃度，减少他们的流失。\r\n\r\n围绕核心业务设计可以获得奖励的用户行为；强调连续行为的重要性；尽量让奖励变得对用户有价值。奖励一定要设置有期限性，促使用户使用奖励去消费。\r\n\r\n从运营的角度出发如何增加用户的黏性，促使他们留存和活跃，给用户好处、让用户通过长期积累获得好处从而增加他们放弃产品成本之外，还有另一种方式是做好产品的运营与维护，让用户觉得产品有用、好用，养成习惯，从而确保用户不会轻易离开。\r\n\r\n不管有多少种办法引入用户，必须至少有一种办法来留住用户，这才是运营最关键的部分。', 0, 521, 1, '', NULL, '2019-06-03 00:26:28', 0),(95, 37, 1, '', 0, '', 1, 0, '零基础学运营 (二十六) | 花了钱的用户才是好用户', '/upload/image/d850c75dddc3d002910c90b17773f8a15485.png', '今天内容有点少，没办法，重点就这么多而已。', '<p>大多数产品都会定期的搞一些“A-P”活动，“A”指的是“Active”，“P”是“pay”，也就是将活跃用户转化为付费用户，一个不争的事实是，当用户真正开始为产品付费，产品就会提供给用户更多的功能、更好的服务、更深的关怀。这是因为，只有花了钱的用户才是好用户。</p>\r\n<p>产品通常会采用“赠送”、“体验”的方式，让活跃用户去感知收费功能的便利性，可以更好的提高转化率。</p>\r\n<p>// 今天内容有点少，没办法，重点就这么多而已。</p>\r\n', '大多数产品都会定期的搞一些“A-P”活动，“A”指的是“Active”，“P”是“pay”，也就是将活跃用户转化为付费用户，一个不争的事实是，当用户真正开始为产品付费，产品就会提供给用户更多的功能、更好的服务、更深的关怀。这是因为，只有花了钱的用户才是好用户。\r\n\r\n产品通常会采用“赠送”、“体验”的方式，让活跃用户去感知收费功能的便利性，可以更好的提高转化率。\r\n\r\n// 今天内容有点少，没办法，重点就这么多而已。', 0, 522, 1, '', NULL, '2019-06-09 22:42:16', 0),(96, 5, 1, '', 0, '', 1, 0, 'swift (四) | 数组', '/upload/image/24f32753a3153725292452c7e5ec99e35160.png', 'Swift 数组使用有序列表存储同一类型的多个值。相同的值可以多次出现在一个数组的不同位置中。', '<h2 id=\"h2-u6570u7EC4\"><a name=\"数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>数组</h2><p>Swift 数组使用有序列表存储同一类型的多个值。相同的值可以多次出现在一个数组的不同位置中。</p>\r\n<p>Swift 数组会强制检测元素的类型，如果类型不同则会报错，Swift 数组应该遵循像<code>Array&lt;Element&gt;</code>这样的形式，其中Element是这个数组中唯一允许存在的数据类型。</p>\r\n<p>如果创建一个数组，并赋值给一个变量，则创建的集合就是可以修改的。这意味着在创建数组后，可以通过添加、删除、修改的方式改变数组里的项目。如果将一个数组赋值给常量，数组就不可更改，并且数组的大小和内容都不可以修改。</p>\r\n<h2 id=\"h2-u521Bu5EFAu6570u7EC4\"><a name=\"创建数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>创建数组</h2><p>创建一个由特定数据类型构成的空数组</p>\r\n<pre><code class=\"lang-swift\">var someArray = [SomeType]()\r\n</code></pre>\r\n<p>创建一个初始化大小数组的语法</p>\r\n<pre><code class=\"lang-swift\">var someArray = [SomeType](repeatedValue: InitialValue,count: NumbeOfElements)\r\n</code></pre>\r\n<p>实例创建了一个类型为 Int ，大小为 3，初始值为 0 的空数组</p>\r\n<pre><code class=\"lang-swift\">var someInts = [Int](repeatedValue: 0,count: 3)\r\n</code></pre>\r\n<p>实例创建了含有三个元素的数组</p>\r\n<pre><code class=\"lang-swift\">var someInts:[Int] = [10, 20, 30]\r\n</code></pre>\r\n<h2 id=\"h2-u8BBFu95EEu6570u7EC4\"><a name=\"访问数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>访问数组</h2><p>根据数组的索引来访问数组的元素语法</p>\r\n<pre><code class=\"lang-swift\">var someVar = someArray[index]\r\n</code></pre>\r\n<p>实例根据索引访问数组元素</p>\r\n<pre><code class=\"lang-swift\">var someVar = someInts[0]\r\n</code></pre>\r\n<h2 id=\"h2-u4FEEu6539u6570u7EC4\"><a name=\"修改数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>修改数组</h2><p>你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素</p>\r\n<pre><code class=\"lang-swift\">var someInts = [Int]()\r\nsomeInts.append(20)\r\nsomeInts.append(30)\r\nsomeInts += [40]\r\nvar someVar = someInts[0]\r\n</code></pre>\r\n<p>可以通过索引修改数组元素的值</p>\r\n<pre><code class=\"lang-swift\">someInts[2] = 50\r\n</code></pre>\r\n<h2 id=\"h2-u904Du5386u6570u7EC4\"><a name=\"遍历数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>遍历数组</h2><p>可以使用for-in循环来遍历所有数组中的数据项</p>\r\n<pre><code class=\"lang-swift\">var someStrs = [String]()\r\nsomeStrs.append(&quot;Apple&quot;)\r\nsomeStrs.append(&quot;Amazon&quot;)\r\nsomeStrs.append(&quot;W3CSchool&quot;)\r\nsomeStrs += [&quot;Google&quot;]\r\nfor item in someStrs {\r\n    print(item)\r\n}\r\n</code></pre>\r\n<p>同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历</p>\r\n<pre><code class=\"lang-swift\">for (index, item) in someStrs.enumerate() {\r\n   print(&quot;在 index = \\(index) 位置上的值为 \\(item)&quot;)\r\n}\r\n</code></pre>\r\n<h2 id=\"h2-u5408u5E76u6570u7EC4\"><a name=\"合并数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>合并数组</h2><p>可以使用加法操作符（+）来合并两种已存在的相同类型数组</p>\r\n<pre><code class=\"lang-swift\">var intsA = [Int](repeating: 0, count: 1)\r\nvar intsB = [Int](repeating: 1, count: 1)\r\nvar intsC = intsA + intsB\r\nfor item in intsC {\r\n    print(item)\r\n}\r\n</code></pre>\r\n<h2 id=\"h2-count-\"><a name=\"count 属性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>count 属性</h2><p>可以使用 count 属性来计算数组元素个数</p>\r\n<pre><code class=\"lang-swift\">intsC.count\r\n</code></pre>\r\n<h2 id=\"h2-isempty-\"><a name=\"isEmpty 属性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>isEmpty 属性</h2><p>可以通过只读属性 isEmpty 来判断数组是否为空，返回布尔值</p>\r\n<pre><code class=\"lang-swift\">intsC.isEmpty\r\n</code></pre>\r\n', '## 数组\r\nSwift 数组使用有序列表存储同一类型的多个值。相同的值可以多次出现在一个数组的不同位置中。\r\n\r\nSwift 数组会强制检测元素的类型，如果类型不同则会报错，Swift 数组应该遵循像`Array<Element>`这样的形式，其中Element是这个数组中唯一允许存在的数据类型。\r\n\r\n如果创建一个数组，并赋值给一个变量，则创建的集合就是可以修改的。这意味着在创建数组后，可以通过添加、删除、修改的方式改变数组里的项目。如果将一个数组赋值给常量，数组就不可更改，并且数组的大小和内容都不可以修改。\r\n\r\n## 创建数组\r\n创建一个由特定数据类型构成的空数组\r\n```swift\r\nvar someArray = [SomeType]()\r\n```\r\n创建一个初始化大小数组的语法\r\n```swift\r\nvar someArray = [SomeType](repeatedValue: InitialValue,count: NumbeOfElements)\r\n```\r\n实例创建了一个类型为 Int ，大小为 3，初始值为 0 的空数组\r\n```swift\r\nvar someInts = [Int](repeatedValue: 0,count: 3)\r\n```\r\n实例创建了含有三个元素的数组\r\n```swift\r\nvar someInts:[Int] = [10, 20, 30]\r\n```\r\n## 访问数组\r\n根据数组的索引来访问数组的元素语法\r\n```swift\r\nvar someVar = someArray[index]\r\n```\r\n实例根据索引访问数组元素\r\n```swift\r\nvar someVar = someInts[0]\r\n```\r\n## 修改数组\r\n你可以使用 append() 方法或者赋值运算符 += 在数组末尾添加元素\r\n```swift\r\nvar someInts = [Int]()\r\nsomeInts.append(20)\r\nsomeInts.append(30)\r\nsomeInts += [40]\r\nvar someVar = someInts[0]\r\n```\r\n可以通过索引修改数组元素的值\r\n```swift\r\nsomeInts[2] = 50\r\n```\r\n## 遍历数组\r\n可以使用for-in循环来遍历所有数组中的数据项\r\n```swift\r\nvar someStrs = [String]()\r\nsomeStrs.append(\"Apple\")\r\nsomeStrs.append(\"Amazon\")\r\nsomeStrs.append(\"W3CSchool\")\r\nsomeStrs += [\"Google\"]\r\nfor item in someStrs {\r\n    print(item)\r\n}\r\n```\r\n同时需要每个数据项的值和索引值，可以使用 String 的 enumerate() 方法来进行数组遍历\r\n```swift\r\nfor (index, item) in someStrs.enumerate() {\r\n   print(\"在 index = \\(index) 位置上的值为 \\(item)\")\r\n}\r\n```\r\n## 合并数组\r\n可以使用加法操作符（+）来合并两种已存在的相同类型数组\r\n```swift\r\nvar intsA = [Int](repeating: 0, count: 1)\r\nvar intsB = [Int](repeating: 1, count: 1)\r\nvar intsC = intsA + intsB\r\nfor item in intsC {\r\n    print(item)\r\n}\r\n```\r\n## count 属性\r\n可以使用 count 属性来计算数组元素个数\r\n```swift\r\nintsC.count\r\n```\r\n## isEmpty 属性\r\n可以通过只读属性 isEmpty 来判断数组是否为空，返回布尔值\r\n```swift\r\nintsC.isEmpty\r\n```', 0, 521, 0, '', NULL, '2019-06-09 22:52:01', 0),(97, 37, 1, '', 0, '', 1, 0, '零基础学运营 (二十七) | 市场拉用户，运营留用户', '/upload/image/44d7ba1491407bd16712b638765908477271.png', '用户运营和产品关系也是一样的道理,产品的核心功能如果过硬，用户运营就越容易进行，越能够起到协助产品前进的作用。', '<p>市场推广是打开渠道，引入用户，而开源更侧重于对引入用户的承接，所以开源是一个动作，但不是唯一的动作，用户运营的四个核心事项也不是毫无交集的，相反，是且必须互相交融的。<br>用户运营的目标，最基础的是用户规模，而用户的规模又隐含了：<br><strong>用户数</strong>（使用用户数、注册用户数、活跃用户数、付费用户数、流失用户数，如果是客户端还要考虑下载量）<br><strong>用户结构</strong>（新老用户的比例）<br><strong>用户属性与用户行为</strong>（用户属性可以用于分类目标用户，用户行为可以用来考察用户的声明周期和用户习惯）</p>\r\n<p>在做用户运营，有两件事很重要：</p>\r\n<h3 id=\"h3-u4EA7u54C1u7684u53EFu7528u6027\"><a name=\"产品的可用性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>产品的可用性</h3><p>可用性是说，这个产品的功能是不是好的，能不能给用户用，会不会引起用户对产品认知的歧义，会不会出现重大BUG。</p>\r\n<h3 id=\"h3-u4EA7u54C1u7684u6613u7528u6027\"><a name=\"产品的易用性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>产品的易用性</h3><p>易用性是说，相比竞品，这个产品是不是有更好的体验，是否让用户觉得舒服，是否需要设计特别的用户引导。</p>\r\n<p>“不足”对于产品来说，是一个长期的状态，没有十全十美的产品，任何产品都需要产品以外的帮助，包括运营协助、市场的推动、商务的补充，“产品不足运营补”。<br>“运营”其实是个大运营的概念，用户运营和产品关系也是一样的道理,产品的核心功能如果过硬，用户运营就越容易进行，越能够起到协助产品前进的作用。</p>\r\n', '市场推广是打开渠道，引入用户，而开源更侧重于对引入用户的承接，所以开源是一个动作，但不是唯一的动作，用户运营的四个核心事项也不是毫无交集的，相反，是且必须互相交融的。\r\n用户运营的目标，最基础的是用户规模，而用户的规模又隐含了：\r\n**用户数**（使用用户数、注册用户数、活跃用户数、付费用户数、流失用户数，如果是客户端还要考虑下载量）\r\n**用户结构**（新老用户的比例）\r\n**用户属性与用户行为**（用户属性可以用于分类目标用户，用户行为可以用来考察用户的声明周期和用户习惯）\r\n\r\n在做用户运营，有两件事很重要：\r\n### 产品的可用性\r\n可用性是说，这个产品的功能是不是好的，能不能给用户用，会不会引起用户对产品认知的歧义，会不会出现重大BUG。\r\n### 产品的易用性\r\n易用性是说，相比竞品，这个产品是不是有更好的体验，是否让用户觉得舒服，是否需要设计特别的用户引导。\r\n\r\n“不足”对于产品来说，是一个长期的状态，没有十全十美的产品，任何产品都需要产品以外的帮助，包括运营协助、市场的推动、商务的补充，“产品不足运营补”。\r\n“运营”其实是个大运营的概念，用户运营和产品关系也是一样的道理,产品的核心功能如果过硬，用户运营就越容易进行，越能够起到协助产品前进的作用。', 0, 507, 8, '', NULL, '2019-06-10 23:25:07', 0),(98, 5, 1, '', 0, '', 1, 0, 'swift (五) | 枚举', '', '', '<p>枚举简单的说也是一种数据类型，只不过是这种数据类型只包含自定义的特定数据，它是一组有共同特性的数据的集合。</p>\r\n', '枚举简单的说也是一种数据类型，只不过是这种数据类型只包含自定义的特定数据，它是一组有共同特性的数据的集合。', 0, 0, 0, '', NULL, '2019-06-11 00:32:05', 1),(99, 39, 1, '', 0, '', 1, 0, '摄影入门 (一) | 什么样的照片才算好照片', '/upload/image/21deb535b09e1ec39fa4e05cc4f68d251983.png', '优秀的被大家认可的摄影作品，都倾注了作者丰富的情感，有深刻的社会涵义，能引起人们的思考和情绪的共鸣，触动人们的心灵，拍摄付出了情感，画面就有了灵魂', '<h2 id=\"h2-u9C9Cu660Eu7684u4E3Bu9898\"><a name=\"鲜明的主题\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>鲜明的主题</h2><p>所要表达的内容必须清晰明了，一张照片想要表达什么，想要传递什么核心的信息，如果说一张照片让人看了不知所云，或者说题材毫无吸引力，这张照片很可能是失败的。摄影是瞬间艺术，需要敏锐的观察力、表现力，正是艺术修养和生活积淀和情感积淀在摄影上的体现，在潜意识的引领下灵感火花的闪现。</p>\r\n<p>明对拍摄对象，应该<strong>精心推敲，确认主题</strong>，想办法通过照片把想表达的思想准确的传递给观众，尽量简洁明了的能让读者理解。</p>\r\n<h2 id=\"h2-u6280u672Fu63A7u5236u5F97u5F53\"><a name=\"技术控制得当\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>技术控制得当</h2><p>熟练使用手中的相机，理解各个按钮的含义，并能快速准确的进行调节，能依据拍摄的效果，合理的控制曝光、景深、色调等等，这些基本的摄影技术，是成就一张好照片的最基础的因素。</p>\r\n<p>对焦清晰，成像质量锐利，曝光准确，用光得当会提升照片的感染力。对焦不实，曝光不准确，色彩不自然，后期粗糙等等都将使你的作品明显缺乏美感。</p>\r\n<h2 id=\"h2-u51FAu8272u7684u753Bu9762u5143u7D20u6784u6210\"><a name=\"出色的画面元素构成\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>出色的画面元素构成</h2><p>一张照片画面元素的构成是多方面的，包括主体、配体、背景、前景、环境、色彩、体块、线条、质感、空间、情绪、气氛等等多个方面。</p>\r\n<h3 id=\"h3-u4E3Bu4F53u7A81u51FA\"><a name=\"主体突出\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>主体突出</h3><p>摄影画面必须有一个突出醒目的主体，主体和主题是两个不同的概念，主题是你想要表达的思想，而主体是你想要表达思想的最重要载体，一幅好照片必须能把注意力吸引向被摄主体，这一点和画面简洁、背景简化等拍摄要求是一脉相承的，换句话来说，就是使得观赏者的目光一下子就投向画面的主要物体，而不受画面背景的干扰。<strong>主体是你照片的一个支点，所有的技术手段都应该围绕它来执行</strong>。</p>\r\n<h3 id=\"h3-u753Bu9762u7B80u6D01u660Eu4E86\"><a name=\"画面简洁明了\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>画面简洁明了</h3><p>一幅好的照片，画面必须简洁明了，画面中应该只包括那些<strong>有利于把视线引向被摄主体的内容</strong>，或者说有利于主题表达的内容，而排出或者压缩那些可能分散注意力，并与主题无关的内容。</p>\r\n<h3 id=\"h3-u51FAu8272u7684u6784u56FE\"><a name=\"出色的构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>出色的构图</h3><p>良好的构图是好作品必须具备的条件，出色的构图处理，既能突出主体，也能增加照片美感，让人更容易理解照片内容，也大大的提高了照片的艺术性，摄影艺术是视觉艺术，视觉艺术中形式美感，如点、线、面、色、光，以及均衡、变化、节奏、比例等美的要素要匠心安排，才能人们得到非常愉快的观赏体验。</p>\r\n<h2 id=\"h2--\"><a name=\"倾注情感、涵义深刻\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>倾注情感、涵义深刻</h2><p>优秀的被大家认可的摄影作品，都倾注了作者丰富的情感，有深刻的社会涵义，能引起人们的思考和情绪的共鸣，触动人们的心灵，拍摄付出了情感，画面就有了灵魂，作品只有首先打动了寄己才能感动别人。</p>\r\n<h2 id=\"h2-u6848u4F8B\"><a name=\"案例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>案例</h2><p><img src=\"/upload/image/dccb98c8efc8c8e13d4faa761dc82f3f5363.png\" alt=\"\"></p>\r\n', '## 鲜明的主题\r\n所要表达的内容必须清晰明了，一张照片想要表达什么，想要传递什么核心的信息，如果说一张照片让人看了不知所云，或者说题材毫无吸引力，这张照片很可能是失败的。摄影是瞬间艺术，需要敏锐的观察力、表现力，正是艺术修养和生活积淀和情感积淀在摄影上的体现，在潜意识的引领下灵感火花的闪现。\r\n\r\n明对拍摄对象，应该**精心推敲，确认主题**，想办法通过照片把想表达的思想准确的传递给观众，尽量简洁明了的能让读者理解。\r\n## 技术控制得当\r\n熟练使用手中的相机，理解各个按钮的含义，并能快速准确的进行调节，能依据拍摄的效果，合理的控制曝光、景深、色调等等，这些基本的摄影技术，是成就一张好照片的最基础的因素。\r\n\r\n对焦清晰，成像质量锐利，曝光准确，用光得当会提升照片的感染力。对焦不实，曝光不准确，色彩不自然，后期粗糙等等都将使你的作品明显缺乏美感。\r\n## 出色的画面元素构成\r\n一张照片画面元素的构成是多方面的，包括主体、配体、背景、前景、环境、色彩、体块、线条、质感、空间、情绪、气氛等等多个方面。\r\n### 主体突出\r\n摄影画面必须有一个突出醒目的主体，主体和主题是两个不同的概念，主题是你想要表达的思想，而主体是你想要表达思想的最重要载体，一幅好照片必须能把注意力吸引向被摄主体，这一点和画面简洁、背景简化等拍摄要求是一脉相承的，换句话来说，就是使得观赏者的目光一下子就投向画面的主要物体，而不受画面背景的干扰。**主体是你照片的一个支点，所有的技术手段都应该围绕它来执行**。\r\n### 画面简洁明了\r\n一幅好的照片，画面必须简洁明了，画面中应该只包括那些**有利于把视线引向被摄主体的内容**，或者说有利于主题表达的内容，而排出或者压缩那些可能分散注意力，并与主题无关的内容。\r\n### 出色的构图\r\n良好的构图是好作品必须具备的条件，出色的构图处理，既能突出主体，也能增加照片美感，让人更容易理解照片内容，也大大的提高了照片的艺术性，摄影艺术是视觉艺术，视觉艺术中形式美感，如点、线、面、色、光，以及均衡、变化、节奏、比例等美的要素要匠心安排，才能人们得到非常愉快的观赏体验。\r\n## 倾注情感、涵义深刻\r\n优秀的被大家认可的摄影作品，都倾注了作者丰富的情感，有深刻的社会涵义，能引起人们的思考和情绪的共鸣，触动人们的心灵，拍摄付出了情感，画面就有了灵魂，作品只有首先打动了寄己才能感动别人。\r\n## 案例\r\n![](/upload/image/dccb98c8efc8c8e13d4faa761dc82f3f5363.png)\r\n', 0, 495, 3, '', NULL, '2019-06-18 00:32:04', 0),(100, 39, 1, '', 0, '', 1, 0, '摄影入门 (二) | 正确持机完成初次拍摄', '/upload/image/85edee9a1c7edab85428f484dea16d641725.png', '拿稳手中的相机，关键在于掌握正确的持机方法，采用正确姿势拍摄，不仅能够让我们顺利的完成拍摄任务，而且会极大的提高图片的质量。', '<p>拿相机在手中，是我们开始学习摄影的第一个动作。<br>拍摄图像的模糊不清晰，大部分的原因都是因为没有拿稳手中的相机，相机晃动所造成的，拿稳手中的相机，关键在于掌握正确的持机方法，采用正确姿势拍摄，不仅能够让我们顺利的完成拍摄任务，而且会极大的提高图片的质量。</p>\r\n<h2 id=\"h2-u6A2Au5411u6301u673Au65B9u6CD5\"><a name=\"横向持机方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>横向持机方法</h2><p><img src=\"/upload/image/b3f4817d27f846e155b3cd2664551de62697.png\" alt=\"\"><br>横向持机是拍摄中常用的持机方法。<br>右手紧握相机手柄，食指轻触快门键，以备随时拍摄；左手从相机下方托稳相机，拇指和食指握住相机来稳定镜头，眼睛紧贴眼罩，通过眼睛和双手的3点来支撑相机，防止相机出现抖动。一定要注意双臂和双肘尽力紧贴身体，按动快门时，动作尽量要轻，并且尽量能够屏住呼吸，这样能够最大的减少对相机的影响，保持相机的稳定。</p>\r\n<h2 id=\"h2-u7EB5u5411u6301u673Au65B9u6CD5\"><a name=\"纵向持机方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>纵向持机方法</h2><p><img src=\"/upload/image/90dbd16ae473edac8c83eb26ddf749381537.png\" alt=\"\"><br>右手上翻，一般左手在下。</p>\r\n<h2 id=\"h2-u957Fu7126u955Cu5934u65B9u6CD5\"><a name=\"长焦镜头方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>长焦镜头方法</h2><p><img src=\"/upload/image/a96cfc17d2f12cbcfbdba98c2e68b7aa6894.png\" alt=\"\"><br>一般使用三脚架拍摄，如条件不允许，可以使用如图所示方法。</p>\r\n<h2 id=\"h2-u4F4Eu4F4Du62CDu6444u65B9u6CD5\"><a name=\"低位拍摄方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>低位拍摄方法</h2><p><img src=\"/upload/image/485e26e0a8e92bf04f31ce1b2be17b412786.png\" alt=\"\"><br>左膝支撑握持相机手柄的左臂的肘部，以防止出现抖动。一般情况下，跪姿拍摄较难稳定身体，最好也借助固定物体依靠，如树、墙等。<br><img src=\"/upload/image/4cc15065a40b214de2609cdd3d54a3342815.png\" alt=\"\"><br>采用坐姿拍摄，则应将双臂的肘部稳稳的放在膝部以获得稳定的支撑，不建议把双腿放平的拍摄姿势。</p>\r\n<h2 id=\"h2-u5176u5B83\"><a name=\"其它\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>其它</h2><p>趴下拍摄，拿稳相机即可，单反相机不建议使用实时取景液晶屏拍摄。</p>\r\n', '拿相机在手中，是我们开始学习摄影的第一个动作。\r\n拍摄图像的模糊不清晰，大部分的原因都是因为没有拿稳手中的相机，相机晃动所造成的，拿稳手中的相机，关键在于掌握正确的持机方法，采用正确姿势拍摄，不仅能够让我们顺利的完成拍摄任务，而且会极大的提高图片的质量。\r\n## 横向持机方法\r\n![](/upload/image/b3f4817d27f846e155b3cd2664551de62697.png)\r\n横向持机是拍摄中常用的持机方法。\r\n右手紧握相机手柄，食指轻触快门键，以备随时拍摄；左手从相机下方托稳相机，拇指和食指握住相机来稳定镜头，眼睛紧贴眼罩，通过眼睛和双手的3点来支撑相机，防止相机出现抖动。一定要注意双臂和双肘尽力紧贴身体，按动快门时，动作尽量要轻，并且尽量能够屏住呼吸，这样能够最大的减少对相机的影响，保持相机的稳定。\r\n## 纵向持机方法\r\n![](/upload/image/90dbd16ae473edac8c83eb26ddf749381537.png)\r\n右手上翻，一般左手在下。\r\n## 长焦镜头方法\r\n![](/upload/image/a96cfc17d2f12cbcfbdba98c2e68b7aa6894.png)\r\n一般使用三脚架拍摄，如条件不允许，可以使用如图所示方法。\r\n## 低位拍摄方法\r\n![](/upload/image/485e26e0a8e92bf04f31ce1b2be17b412786.png)\r\n左膝支撑握持相机手柄的左臂的肘部，以防止出现抖动。一般情况下，跪姿拍摄较难稳定身体，最好也借助固定物体依靠，如树、墙等。\r\n![](/upload/image/4cc15065a40b214de2609cdd3d54a3342815.png)\r\n采用坐姿拍摄，则应将双臂的肘部稳稳的放在膝部以获得稳定的支撑，不建议把双腿放平的拍摄姿势。\r\n## 其它\r\n趴下拍摄，拿稳相机即可，单反相机不建议使用实时取景液晶屏拍摄。\r\n', 0, 769, 3, '', NULL, '2019-06-18 21:59:25', 0),(101, 39, 1, '', 0, '', 1, 0, '摄影入门 (三) | 常用的场景拍摄模式', '/upload/image/4d52a00f43ce8eb0657e43f65e43404c6347.png', '全自动拍摄模式，数码相机能够自动分析拍摄场景，进行恰当的设置。比如可以在风光拍摄时将蓝天、绿树、夕阳映照的天空表现得鲜艳。', '<h2 id=\"h2-u573Au666Fu667Au80FDu81EAu52A8u6A21u5F0F\"><a name=\"场景智能自动模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>场景智能自动模式</h2><p><img src=\"/upload/image/236f79aa84569425a7ea1b09ba24252f3876.png\" alt=\"\"><br>场景智能自动模式，不少厂家称其为“绿区模式”，属于全自动拍摄模式，数码相机能够自动分析拍摄场景，进行恰当的设置。比如可以在风光拍摄时将蓝天、绿树、夕阳映照的天空表现得鲜艳。人像拍摄时调整色调表现自然健康的肤色。可以理解为“傻瓜模式”。<br>这种模式适合在光线明了的环境使用，如在阴天或环境光线不太好的情况下，往往达不到理想的效果，很容易出现躁点与照片的模糊不清及偏色现象。</p>\r\n<h2 id=\"h2-u4EBAu50CFu6A21u5F0F\"><a name=\"人像模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>人像模式</h2><p><img src=\"/upload/image/f60fea917f65e442db44fde746bd15a18481.png\" alt=\"\"><br>人像模式比较适合拍摄以人物为主体的照片。在该模式下相机会利用大光圈虚化背景，使人物更加醒目。同时对照片色调进行调整，使肌肤质地更加柔和，另外，曝光也相对偏亮，使皮肤显得更加白皙。</p>\r\n<h2 id=\"h2-u98CEu666Fu6A21u5F0F\"><a name=\"风景模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>风景模式</h2><p><img src=\"/upload/image/c20af11ef5b1f4286e71147d9dd73a2a7538.png\" alt=\"\"><br>风景模式适合拍摄辽阔的风光题材，相机设置能够对由近及远的大范围景物进行锐利成像。同时还具有使绿色、红色、蓝色更加鲜艳的特征。照片整体映像更加清晰、锐利。另外，在此模式下，不管环境有多暗内置闪光灯都不会自动闪光。</p>\r\n<h2 id=\"h2-u5FAEu8DDDu6A21u5F0F\"><a name=\"微距模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>微距模式</h2><p><img src=\"/upload/image/da354ba138fc350f8b2b08c5451f28241506.png\" alt=\"\"><br>微距模式的设置便于拍摄多种微小被摄物体。可应用于花草、昆虫以及身边多种微小物体等拍摄，是一种可以广泛应用的便捷拍摄模式。但要注意你的相机镜头的最近拍摄距离，使用近距离拍摄专用的微距镜头效果更好。</p>\r\n<h2 id=\"h2-u8FD0u52A8u6A21u5F0F\"><a name=\"运动模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运动模式</h2><p><img src=\"/upload/image/3b5793b35358c6ef457d5869e2f49f2d1781.png\" alt=\"\"><br>运动模式组合了适于拍摄高速运动物体的多种设置，可用于多种多样的的运动物体，也适于拍摄儿童或宠物。<br>在运动模式下，自动对焦功能将追踪正在运动的被摄体，进行连续对焦。同时，相机采用较高的快门速度。而且运动模式还采用了连拍功能，提高了扑捉瞬间机会的能力。</p>\r\n<h2 id=\"h2-u95EAu5149u706Fu5173u95EDu6A21u5F0F\"><a name=\"闪光灯关闭模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>闪光灯关闭模式</h2><p><img src=\"/upload/image/d4330ddf769937ffd21ebaa55f5d99427469.png\" alt=\"\"><br>虽然闪光灯摄影可将昏暗场景下的被摄体拍得明亮，是非常方便的功能，但根据拍摄条件和环境场所的不同，拍摄的时候可能并不希望闪光灯闪光。这时候可以使用闪光灯关闭模式。</p>\r\n<h2 id=\"h2-ca-\"><a name=\"CA（创意自动）模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>CA（创意自动）模式</h2><p><img src=\"/upload/image/96c63e9f669091431f3d4e51680441996430.png\" alt=\"\"><br>CA（创意自动）模式是能够提升表现力的全自动模式。可通过简单的操作控制设置，获得符合意图的效果。<br>CA（创意自动）模式是基于场景智能自动，又能一定程度反映拍摄者意图的拍摄模式。刚刚接触单反相机的人也可以通过简单的文字描述选择功能。<br>1111</p>\r\n', '## 场景智能自动模式\r\n![](/upload/image/236f79aa84569425a7ea1b09ba24252f3876.png)\r\n场景智能自动模式，不少厂家称其为“绿区模式”，属于全自动拍摄模式，数码相机能够自动分析拍摄场景，进行恰当的设置。比如可以在风光拍摄时将蓝天、绿树、夕阳映照的天空表现得鲜艳。人像拍摄时调整色调表现自然健康的肤色。可以理解为“傻瓜模式”。\r\n这种模式适合在光线明了的环境使用，如在阴天或环境光线不太好的情况下，往往达不到理想的效果，很容易出现躁点与照片的模糊不清及偏色现象。\r\n## 人像模式\r\n![](/upload/image/f60fea917f65e442db44fde746bd15a18481.png)\r\n人像模式比较适合拍摄以人物为主体的照片。在该模式下相机会利用大光圈虚化背景，使人物更加醒目。同时对照片色调进行调整，使肌肤质地更加柔和，另外，曝光也相对偏亮，使皮肤显得更加白皙。\r\n## 风景模式\r\n![](/upload/image/c20af11ef5b1f4286e71147d9dd73a2a7538.png)\r\n风景模式适合拍摄辽阔的风光题材，相机设置能够对由近及远的大范围景物进行锐利成像。同时还具有使绿色、红色、蓝色更加鲜艳的特征。照片整体映像更加清晰、锐利。另外，在此模式下，不管环境有多暗内置闪光灯都不会自动闪光。\r\n## 微距模式\r\n![](/upload/image/da354ba138fc350f8b2b08c5451f28241506.png)\r\n微距模式的设置便于拍摄多种微小被摄物体。可应用于花草、昆虫以及身边多种微小物体等拍摄，是一种可以广泛应用的便捷拍摄模式。但要注意你的相机镜头的最近拍摄距离，使用近距离拍摄专用的微距镜头效果更好。\r\n## 运动模式\r\n![](/upload/image/3b5793b35358c6ef457d5869e2f49f2d1781.png)\r\n运动模式组合了适于拍摄高速运动物体的多种设置，可用于多种多样的的运动物体，也适于拍摄儿童或宠物。\r\n在运动模式下，自动对焦功能将追踪正在运动的被摄体，进行连续对焦。同时，相机采用较高的快门速度。而且运动模式还采用了连拍功能，提高了扑捉瞬间机会的能力。\r\n## 闪光灯关闭模式\r\n![](/upload/image/d4330ddf769937ffd21ebaa55f5d99427469.png)\r\n虽然闪光灯摄影可将昏暗场景下的被摄体拍得明亮，是非常方便的功能，但根据拍摄条件和环境场所的不同，拍摄的时候可能并不希望闪光灯闪光。这时候可以使用闪光灯关闭模式。\r\n## CA（创意自动）模式\r\n![](/upload/image/96c63e9f669091431f3d4e51680441996430.png)\r\nCA（创意自动）模式是能够提升表现力的全自动模式。可通过简单的操作控制设置，获得符合意图的效果。\r\nCA（创意自动）模式是基于场景智能自动，又能一定程度反映拍摄者意图的拍摄模式。刚刚接触单反相机的人也可以通过简单的文字描述选择功能。\r\n1111\r\n', 0, 576, 1, '', NULL, '2019-06-19 22:03:18', 0),(102, 39, 1, '', 0, '', 1, 0, '摄影入门 (四) | 了解曝光', '/upload/image/075876843d6b39102a9ca88abe7fe43a4984.png', '曝光的正确与否，直接影响着图像的亮度、质感、色彩等。在摄影中，通过控制曝光来还原与景物亮度近似的明暗对比关系，或者根据创作意图将不同的景物亮度在画面中形成最佳效果', '<h2 id=\"h2-u8BA4u8BC6u66DDu5149\"><a name=\"认识曝光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>认识曝光</h2><p>曝光就是相机感光元件接受从镜头进入的光线，从而形成影像的过程。<br><img src=\"/upload/image/091a0be482a388f2b01b30f15c6e6f3c7664.png\" alt=\"\"><br>相机接收光线，形成图像，一般有三种情形<br><img src=\"/upload/image/d6125b23c7ed0a286b923db109a508089228.png\" alt=\"\"><br>接收光线太多，照片太亮，超出景物整体亮度，我们称之为“曝光过度（过曝、过亮）”<br><img src=\"/upload/image/5122f8640111e500f3f642d1712f6b677866.png\" alt=\"\"><br>画面灰暗，整体亮度不足，被称为“曝光不足（欠曝、过暗）”<br><img src=\"/upload/image/44f6ac0c599770a43ac5b2d252150b648198.png\" alt=\"\"><br>真实的表现了场景亮度，整个画面亮度恰当，合乎我们视觉感受，这张照片我们认为是曝光正确的。曝光的正确与否，直接影响着图像的亮度、质感、色彩等。在摄影中，通过控制曝光来还原与景物亮度近似的明暗对比关系，或者根据创作意图将不同的景物亮度在画面中形成最佳效果。</p>\r\n<h2 id=\"h2-u66DDu5149u4E09u8981u7D20\"><a name=\"曝光三要素\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>曝光三要素</h2><p>在单反相机上级，影响曝光要素的有三个，分别是光圈、快门、感光度（ISO）。在拍摄过程可以通过对光圈、快门、感光度（ISO）的调节，来控制照片的整体亮度。<br><img src=\"/upload/image/542505be01204302038890307a7023f23085.png\" alt=\"\"></p>\r\n', '## 认识曝光\r\n曝光就是相机感光元件接受从镜头进入的光线，从而形成影像的过程。\r\n![](/upload/image/091a0be482a388f2b01b30f15c6e6f3c7664.png)\r\n相机接收光线，形成图像，一般有三种情形\r\n![](/upload/image/d6125b23c7ed0a286b923db109a508089228.png)\r\n接收光线太多，照片太亮，超出景物整体亮度，我们称之为“曝光过度（过曝、过亮）”\r\n![](/upload/image/5122f8640111e500f3f642d1712f6b677866.png)\r\n画面灰暗，整体亮度不足，被称为“曝光不足（欠曝、过暗）”\r\n![](/upload/image/44f6ac0c599770a43ac5b2d252150b648198.png)\r\n真实的表现了场景亮度，整个画面亮度恰当，合乎我们视觉感受，这张照片我们认为是曝光正确的。曝光的正确与否，直接影响着图像的亮度、质感、色彩等。在摄影中，通过控制曝光来还原与景物亮度近似的明暗对比关系，或者根据创作意图将不同的景物亮度在画面中形成最佳效果。\r\n## 曝光三要素\r\n在单反相机上级，影响曝光要素的有三个，分别是光圈、快门、感光度（ISO）。在拍摄过程可以通过对光圈、快门、感光度（ISO）的调节，来控制照片的整体亮度。\r\n![](/upload/image/542505be01204302038890307a7023f23085.png)', 0, 707, 0, '', NULL, '2019-06-21 17:04:41', 0),(103, 39, 1, '', 0, '', 1, 0, '摄影入门 (五) | 光圈', '/upload/image/8a1290f93c831f043b8f7fe6a9da0c663403.png', '一般来说，最佳光圈位于该镜头最大光圈缩小2至3档处。所以在拍摄时要尽量使用最佳光圈，以提高成像质量。', '<p>光圈是集成在镜头里面，由可以活动的金属叶片组成，用于控制镜头通光亮度的光闸。光圈通常由多片可活动的金属叶片组成，可以使中间形成的（近似）圆孔变大或缩小，以达到控制通过光量大小的目的。</p>\r\n<h2 id=\"h2-u5149u5708u5927u5C0F\"><a name=\"光圈大小\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光圈大小</h2><p>通常都是用“光圈系数”来称呼，简称“光圈”或者“f-系数”。<br><img src=\"/upload/image/4d5c2c8c4a322a4425d68cb12d8667a86898.png\" alt=\"\"><br>光圈的大小正好和数值的大小相反，光圈越大，数值越小，光圈越小，数值越大。<br>每个镜头因为面对用户群、制造工艺的不同，最大光圈是不一样的。<br><img src=\"/upload/image/87967b9c600b98de68f474cc5f97cfc01266.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5149u5708u5BF9u66DDu5149u7684u5F71u54CD\"><a name=\"光圈对曝光的影响\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光圈对曝光的影响</h2><p><img src=\"/upload/image/89be58ff558e2daa1885ff8bdfe594f32716.png\" alt=\"\"><br>假设圆柱认为是通过光圈的光线，那么很明显，F2.8通过的光线多，而F22就非常的小，那么，在同等时间里，明显F2.8通光量就要多于F8和F22。</p>\r\n<h2 id=\"h2-u5149u5708u5927u5C0Fu53EFu63A7u5236u753Bu9762u7684u865Au5B9E\"><a name=\"光圈大小可控制画面的虚实\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光圈大小可控制画面的虚实</h2><p>光圈对画面曝光产生影响之外，光圈的调节还有一个重要的作用，就是可以控制画面的虚实，我们可以通过对光圈大小的调节，在调整进光量的同时可以对背景虚化进行控制，这个效果称之为景深。<br><img src=\"/upload/image/e3544458d3607a18c990cf031a15c0701926.png\" alt=\"\"><br>大光圈可以拍摄出背景虚化的效果<br><img src=\"/upload/image/0b631d639a17b54b92ea7e00597e1f109680.png\" alt=\"\"><br>小光圈可以拍摄出前后都很清晰，表现非常深远的空间纵深感。</p>\r\n<h2 id=\"h2-u5149u5708u5F71u54CDu753Bu8D28\"><a name=\"光圈影响画质\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光圈影响画质</h2><p>任何镜头，都有某一档光圈的成像质量是最好的，即受各种像差的影响最小，这档光圈俗称最佳光圈。一般来说，最佳光圈位于该镜头最大光圈缩小2至3档处。所以在拍摄时要尽量使用最佳光圈，以提高成像质量。</p>\r\n', '光圈是集成在镜头里面，由可以活动的金属叶片组成，用于控制镜头通光亮度的光闸。光圈通常由多片可活动的金属叶片组成，可以使中间形成的（近似）圆孔变大或缩小，以达到控制通过光量大小的目的。\r\n## 光圈大小\r\n通常都是用“光圈系数”来称呼，简称“光圈”或者“f-系数”。\r\n![](/upload/image/4d5c2c8c4a322a4425d68cb12d8667a86898.png)\r\n光圈的大小正好和数值的大小相反，光圈越大，数值越小，光圈越小，数值越大。\r\n每个镜头因为面对用户群、制造工艺的不同，最大光圈是不一样的。\r\n![](/upload/image/87967b9c600b98de68f474cc5f97cfc01266.png)\r\n## 光圈对曝光的影响\r\n![](/upload/image/89be58ff558e2daa1885ff8bdfe594f32716.png)\r\n假设圆柱认为是通过光圈的光线，那么很明显，F2.8通过的光线多，而F22就非常的小，那么，在同等时间里，明显F2.8通光量就要多于F8和F22。\r\n## 光圈大小可控制画面的虚实\r\n光圈对画面曝光产生影响之外，光圈的调节还有一个重要的作用，就是可以控制画面的虚实，我们可以通过对光圈大小的调节，在调整进光量的同时可以对背景虚化进行控制，这个效果称之为景深。\r\n![](/upload/image/e3544458d3607a18c990cf031a15c0701926.png)\r\n大光圈可以拍摄出背景虚化的效果\r\n![](/upload/image/0b631d639a17b54b92ea7e00597e1f109680.png)\r\n小光圈可以拍摄出前后都很清晰，表现非常深远的空间纵深感。\r\n## 光圈影响画质\r\n任何镜头，都有某一档光圈的成像质量是最好的，即受各种像差的影响最小，这档光圈俗称最佳光圈。一般来说，最佳光圈位于该镜头最大光圈缩小2至3档处。所以在拍摄时要尽量使用最佳光圈，以提高成像质量。', 0, 881, 1, '', NULL, '2019-06-24 22:33:42', 0),(104, 39, 1, '', 0, '', 1, 0, '摄影入门 (六) | 快门', '/upload/image/4444cc25297a69e975e85f3d607a609c3079.png', '镜头焦距为50mm，安全快门速度为1/50，另外，即使使用小于50mm的短焦距镜头，安全快门依旧不能低于1/50', '<p>快门是照相机中用来控制光线照射感光元件时间长短的装置，快门隐藏在相机内部，位于相机反光板的后面，感光元件前面，其作用就像一扇黑色不透光的门，只有打开时才会让光线通过，照射到感光元件上，形成图像。<br><img src=\"/upload/image/d160491f8287c2a1c2d7eb6f1a7b6f8b1001.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5DE5u4F5Cu539Fu7406\"><a name=\"工作原理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>工作原理</h2><p>为了保护相机内部的感光器件，不至于曝光，快门总是关闭的。拍摄时，调整好快门速度后，按下照相机的快门释放按钮，快门才会打开。在快门开启与关闭的间隙间，让光线照射到相机内的影像传感器上，从而活动影像。</p>\r\n<h2 id=\"h2-u5FEBu95E8u901Fu5EA6\"><a name=\"快门速度\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>快门速度</h2><p>快门速度的大小，是指传感器暴露在光线中的时间长短，可以理解为快门速度就是曝光时间，常见的快门速度有：<br><img src=\"/upload/image/7e157bdba496a0f80c084056c1ed9f197925.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u8D85u9AD8u901Fu5FEBu95E8u51DDu56FAu4E00u77ACu95F4\"><a name=\"超高速快门凝固一瞬间\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>超高速快门凝固一瞬间</h2><p>采用高速快门，可以将运动中的物体清晰的凝固住。<br><img src=\"/upload/image/5090d2f9c910f93a73beaefd4a8de30c9271.png\" alt=\"\"><br>画面主体的运动速度越快，凝固其动态所需的快门速度就必须越高。1/250秒以上的快门速度能捕捉大部分运动速度较慢的运动对象的动态。</p>\r\n<h2 id=\"h2-u6162u901Fu5FEBu95E8u8868u73B0u52A8u611Fu865Au5E7Bu7684u6548u679C\"><a name=\"慢速快门表现动感虚幻的效果\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>慢速快门表现动感虚幻的效果</h2><p>使用慢速快门拍摄，可以使运动的物体在照片上形成模糊的虚影，而不动的物体依然清晰，从而形成虚实相映的效果。<br><img src=\"/upload/image/155f807c7978550083d35a0b58ed082c5844.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5B89u5168u5FEBu95E8\"><a name=\"安全快门\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安全快门</h2><p>手持相机的时候，需要使得快门速度搞过“安全快门”速度，才能保证照片不模糊。安全快门一般是焦距的倒数，例如，镜头焦距为50mm，安全快门速度为1/50，另外，即使使用小于50mm的短焦距镜头，安全快门依旧不能低于1/50。</p>\r\n', '快门是照相机中用来控制光线照射感光元件时间长短的装置，快门隐藏在相机内部，位于相机反光板的后面，感光元件前面，其作用就像一扇黑色不透光的门，只有打开时才会让光线通过，照射到感光元件上，形成图像。\r\n![](/upload/image/d160491f8287c2a1c2d7eb6f1a7b6f8b1001.png)\r\n## 工作原理\r\n为了保护相机内部的感光器件，不至于曝光，快门总是关闭的。拍摄时，调整好快门速度后，按下照相机的快门释放按钮，快门才会打开。在快门开启与关闭的间隙间，让光线照射到相机内的影像传感器上，从而活动影像。\r\n## 快门速度\r\n快门速度的大小，是指传感器暴露在光线中的时间长短，可以理解为快门速度就是曝光时间，常见的快门速度有：\r\n![](/upload/image/7e157bdba496a0f80c084056c1ed9f197925.png)\r\n## 超高速快门凝固一瞬间\r\n采用高速快门，可以将运动中的物体清晰的凝固住。\r\n![](/upload/image/5090d2f9c910f93a73beaefd4a8de30c9271.png)\r\n画面主体的运动速度越快，凝固其动态所需的快门速度就必须越高。1/250秒以上的快门速度能捕捉大部分运动速度较慢的运动对象的动态。\r\n## 慢速快门表现动感虚幻的效果\r\n使用慢速快门拍摄，可以使运动的物体在照片上形成模糊的虚影，而不动的物体依然清晰，从而形成虚实相映的效果。\r\n![](/upload/image/155f807c7978550083d35a0b58ed082c5844.png)\r\n## 安全快门\r\n手持相机的时候，需要使得快门速度搞过“安全快门”速度，才能保证照片不模糊。安全快门一般是焦距的倒数，例如，镜头焦距为50mm，安全快门速度为1/50，另外，即使使用小于50mm的短焦距镜头，安全快门依旧不能低于1/50。', 0, 1016, 0, '', NULL, '2019-06-28 23:43:49', 0),(105, 39, 1, '', 0, '', 1, 0, '摄影入门 (七) | 感光度', '/upload/image/aad6167a26b5a495264f8212d5577d209505.png', '可以理解为感受光线的数值，也称为ISO值，是指相机感光元件对光线的敏感程度。也可以理解为是感光元件感受光线的能力。', '<p>可以理解为感受光线的数值，也称为ISO值，是指相机感光元件对光线的敏感程度。也可以理解为是感光元件感受光线的能力。<br>数值越大表示感光性越强，也就是对光线越敏感，很容易接收到光线，而数值越小表示感光性越弱，表示对光线反应迟钝，不容易感光。<br><img src=\"/upload/image/55011650be6dc9a1adb5ba0de6296b1d7864.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u611Fu5149u5EA6u5BF9u66DDu5149u7684u5F71u54CD\"><a name=\"感光度对曝光的影响\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>感光度对曝光的影响</h2><p>在快门、光圈设置不变的情况下，调节感光度，画面随着感光度逐步提高，会越来越亮，如果把数值调节越低，画面会越来越暗。<br><img src=\"/upload/image/4b24aed7733cba801b84663db2b5d27e4461.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u611Fu5149u5EA6u5BF9u753Bu8D28u7684u5F71u54CD\"><a name=\"感光度对画质的影响\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>感光度对画质的影响</h2><p>感光度与画质之间有着密切的联系。<strong>采用高感光度时，照片噪点增加，图片质量下降</strong>。采用低感光度拍摄，图片的质量明显好于采用高感光度拍摄的画面。所以，在拍摄时，推荐大家尽可能使用低感光度。<br><img src=\"/upload/image/c0cbc362cc20021a2faffe47b4a1fcce4901.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u611Fu5149u5EA6u7684u9009u62E9u548Cu4F7Fu7528\"><a name=\"感光度的选择和使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>感光度的选择和使用</h2><h3 id=\"h3-u4F4Eu611Fu5149u5EA6u7684u4F7Fu7528\"><a name=\"低感光度的使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>低感光度的使用</h3><p>在光线充足的环境下，选择较低的感光度，可以获得清晰度高、颗粒细腻、层次丰富的高质量照片。为达到画面特定的艺术效果，在实际拍摄中，可以降低感光度，使快门速度变慢，从而实现特殊效果。<br><img src=\"/upload/image/07cecb0e69e78264ea27c8e4dd3270239062.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u9AD8u611Fu5149u5EA6u7684u4F7Fu7528\"><a name=\"高感光度的使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>高感光度的使用</h3><p>在光线较暗的情况下，选择高感光度，能增加进光量，缩短曝光时间，提高快门速度，从而减少相机抖动，保证画面的清晰度。<br><img src=\"/upload/image/69f7227e32ec1ad2b0e7ed245774e2fe6751.png\" alt=\"\"></p>\r\n', '可以理解为感受光线的数值，也称为ISO值，是指相机感光元件对光线的敏感程度。也可以理解为是感光元件感受光线的能力。\r\n数值越大表示感光性越强，也就是对光线越敏感，很容易接收到光线，而数值越小表示感光性越弱，表示对光线反应迟钝，不容易感光。\r\n![](/upload/image/55011650be6dc9a1adb5ba0de6296b1d7864.png)\r\n## 感光度对曝光的影响\r\n在快门、光圈设置不变的情况下，调节感光度，画面随着感光度逐步提高，会越来越亮，如果把数值调节越低，画面会越来越暗。\r\n![](/upload/image/4b24aed7733cba801b84663db2b5d27e4461.png)\r\n## 感光度对画质的影响\r\n感光度与画质之间有着密切的联系。**采用高感光度时，照片噪点增加，图片质量下降**。采用低感光度拍摄，图片的质量明显好于采用高感光度拍摄的画面。所以，在拍摄时，推荐大家尽可能使用低感光度。\r\n![](/upload/image/c0cbc362cc20021a2faffe47b4a1fcce4901.png)\r\n## 感光度的选择和使用\r\n### 低感光度的使用\r\n在光线充足的环境下，选择较低的感光度，可以获得清晰度高、颗粒细腻、层次丰富的高质量照片。为达到画面特定的艺术效果，在实际拍摄中，可以降低感光度，使快门速度变慢，从而实现特殊效果。\r\n![](/upload/image/07cecb0e69e78264ea27c8e4dd3270239062.png)\r\n### 高感光度的使用\r\n在光线较暗的情况下，选择高感光度，能增加进光量，缩短曝光时间，提高快门速度，从而减少相机抖动，保证画面的清晰度。\r\n![](/upload/image/69f7227e32ec1ad2b0e7ed245774e2fe6751.png)', 0, 1167, 0, '', NULL, '2019-06-30 22:52:46', 0),(106, 39, 1, '', 0, '', 1, 0, '摄影入门 (八) | 曝光模式选择', '/upload/image/674abeb0498a771f57b12341475a51a81106.png', 'M挡全手动拍摄模式在遇到复杂多变光线的场合时，使用方便。好多专业摄影师在进行创作摄影中基本都会使用这种拍摄模式。', '<h2 id=\"h2-p-\"><a name=\"P 程序自动曝光模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>P 程序自动曝光模式</h2><p>P模式是程序自动曝光模式，与场景模式A+（AUTO或者绿框模式）有点相似。相机会根据现场光线的情况自动设置光圈和快门的曝光组合，从而获得准确的曝光。</p>\r\n<p>程序自动模式下，光圈、快门都可以手动调节，但不是单独调节，而是组合调节。就是说，相机原本设置一个曝光组合，你想要获得小景深（即背景虚化效果），可调节光圈，快门自动配置。当然你要是想调节快门，光圈会自动设置，同时可以对曝光补偿、ISO感光度等功能进行控制，也就是说，你可以选择一组适合自己拍摄要求的曝光组合。</p>\r\n<p>P模式下，既有全自动的便利，同时又有手动控制的空间。</p>\r\n<h2 id=\"h2-av-a-\"><a name=\"AV/A 光圈优先拍摄模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>AV/A 光圈优先拍摄模式</h2><p>Av或者A光圈优先模式，是一种半自动拍摄模式。在这种拍摄模式下，你可以先设定光圈的大小，相机和根据拍摄条件自动调节其它参数。光圈优先模式通常适用于需要控制景深的照片。<br><img src=\"/upload/image/c7f1a4f2c092165e5fda057ba554a72d3145.png\" alt=\"\"></p>\r\n<h2 id=\"h2-tv-s-\"><a name=\"TV/S 快门优先拍摄模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>TV/S 快门优先拍摄模式</h2><p>在该模式下，你可以先设定快门速度，相机会自动选择与快门速度匹配的光圈值。在快门优先的情况下，利用不同的快门速度控制运动物体的虚实，形成特殊的画面效果。<br><img src=\"/upload/image/e95dd300eacd67154374e750ee178d1c7486.png\" alt=\"\"></p>\r\n<h2 id=\"h2-m-\"><a name=\"M 全手动拍摄模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>M 全手动拍摄模式</h2><p>摄影师可以自己调节快门与光圈、ISO等参数，完全手动控制画面的曝光。也就是说，在你按下相机快门之前，相机上所有拍摄参数必须手动设置好。M挡全手动拍摄模式在遇到复杂多变光线的场合时，使用方便。好多专业摄影师在进行创作摄影中基本都会使用这种拍摄模式。</p>\r\n', '## P 程序自动曝光模式\r\nP模式是程序自动曝光模式，与场景模式A+（AUTO或者绿框模式）有点相似。相机会根据现场光线的情况自动设置光圈和快门的曝光组合，从而获得准确的曝光。\r\n\r\n程序自动模式下，光圈、快门都可以手动调节，但不是单独调节，而是组合调节。就是说，相机原本设置一个曝光组合，你想要获得小景深（即背景虚化效果），可调节光圈，快门自动配置。当然你要是想调节快门，光圈会自动设置，同时可以对曝光补偿、ISO感光度等功能进行控制，也就是说，你可以选择一组适合自己拍摄要求的曝光组合。\r\n\r\nP模式下，既有全自动的便利，同时又有手动控制的空间。\r\n\r\n## AV/A 光圈优先拍摄模式\r\nAv或者A光圈优先模式，是一种半自动拍摄模式。在这种拍摄模式下，你可以先设定光圈的大小，相机和根据拍摄条件自动调节其它参数。光圈优先模式通常适用于需要控制景深的照片。\r\n![](/upload/image/c7f1a4f2c092165e5fda057ba554a72d3145.png)\r\n\r\n## TV/S 快门优先拍摄模式\r\n在该模式下，你可以先设定快门速度，相机会自动选择与快门速度匹配的光圈值。在快门优先的情况下，利用不同的快门速度控制运动物体的虚实，形成特殊的画面效果。\r\n![](/upload/image/e95dd300eacd67154374e750ee178d1c7486.png)\r\n\r\n## M 全手动拍摄模式\r\n摄影师可以自己调节快门与光圈、ISO等参数，完全手动控制画面的曝光。也就是说，在你按下相机快门之前，相机上所有拍摄参数必须手动设置好。M挡全手动拍摄模式在遇到复杂多变光线的场合时，使用方便。好多专业摄影师在进行创作摄影中基本都会使用这种拍摄模式。', 0, 639, 0, '', NULL, '2019-07-06 23:07:48', 0),(107, 39, 1, '', 0, '', 1, 0, '摄影入门 (九) | 测光方式的选择', '/upload/image/743db17e22a76df5b1b068a5733243c24689.png', '现代单反相机已经具备非常完备的测光系统，并能够胜任几乎所有复杂的拍摄场景，使获得正确曝光非常方便快捷。', '<h2 id=\"h2-u4E3Au4EC0u4E48u8981u6D4Bu5149\"><a name=\"为什么要测光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>为什么要测光</h2><p>早起机械相机时代，摄影师拍摄时，主要依靠经验来判断光圈、快门、感光度的组合，来取得照片合适的亮度。现代单反相机已经具备非常完备的测光系统，并能够胜任几乎所有复杂的拍摄场景，使获得正确曝光非常方便快捷。<br><img src=\"/upload/image/4b6ae84ec7ed7dd73b2a3193b9335fb75792.png\" alt=\"\"><br><img src=\"/upload/image/a93ac602f50135e78cd66e33d647b6933586.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u6D4Bu5149u6A21u5F0Fu7684u4F7Fu7528\"><a name=\"测光模式的使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测光模式的使用</h2><h3 id=\"h3-u8BC4u4EF7u6D4Bu5149\"><a name=\"评价测光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>评价测光</h3><p>几乎所有相机都将这类测光作为默认的测光模式。评价测光会将画面切割成多个区块，然后分别在各个区块进行测光，可以对画面整体亮度进行判断，计算基本平均的曝光。是目前最先进的智能化测光方式，即使对测光不熟悉的人，用这种方式一般也能够得到曝光毕竟准确的照片。</p>\r\n<p>这种模式在拍摄顺光的情况下，光照比较均匀的场景时效果最好，目前已经成为许多摄影师和摄影爱好者最常用的测光方式。但是，在对画面内有极端亮度差的物体存在或逆光状态的场景下略显力不从心，有时候会出现曝光不稳定的情况。<br><img src=\"/upload/image/f479d26b3bf6278c860a27497f54f1248633.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u4E2Du592Eu91CDu70B9u5E73u5747u6D4Bu5149\"><a name=\"中央重点平均测光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>中央重点平均测光</h3><p>该模式主要考虑到一般摄影者喜欢将拍摄主体放在画面中间这个习惯。以画面中心部分亮度作为主要测光依据，同时根据画面边缘的亮度进行调整来觉得曝光。</p>\r\n<p>这种测光模式在拍摄中心构图的景物时效果比较好。比如半身或者特写人像，因为它更多的考虑画面中心的人物，往往能正确的还原人物的肤色。<br><img src=\"/upload/image/3bacd919e0db850ae4ba742a1b12b5085036.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u5C40u90E8u6D4Bu5149\"><a name=\"局部测光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>局部测光</h3><p>局部测光只对画面中央的一块区域画面的某一局部进行测光，与中央重点平均测光最大的区别在于该测光模式不兼顾画面其它地方，而只以中央部分的测光数据为整个画面曝光的依据。</p>\r\n<p>当被摄主体与背景有着强烈明暗反差，而且被摄主体所占画面比例不大时，运用这种测光方式最适合。<br><img src=\"/upload/image/4808beaac484586d518007fd33a79dfa9906.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u70B9u6D4Bu5149\"><a name=\"点测光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>点测光</h3><p>点测光只对画面中央一个很小的区域进行测光，可近似的看成是一个点，相机根据这个较窄区域测得的光线，作为曝光依据，这是一种相当准确的测光方法。<br><img src=\"/upload/image/4b8eaba9327442056d191b2b193729413863.png\" alt=\"\"></p>\r\n', '## 为什么要测光\r\n早起机械相机时代，摄影师拍摄时，主要依靠经验来判断光圈、快门、感光度的组合，来取得照片合适的亮度。现代单反相机已经具备非常完备的测光系统，并能够胜任几乎所有复杂的拍摄场景，使获得正确曝光非常方便快捷。\r\n![](/upload/image/4b6ae84ec7ed7dd73b2a3193b9335fb75792.png)\r\n![](/upload/image/a93ac602f50135e78cd66e33d647b6933586.png)\r\n## 测光模式的使用\r\n### 评价测光\r\n几乎所有相机都将这类测光作为默认的测光模式。评价测光会将画面切割成多个区块，然后分别在各个区块进行测光，可以对画面整体亮度进行判断，计算基本平均的曝光。是目前最先进的智能化测光方式，即使对测光不熟悉的人，用这种方式一般也能够得到曝光毕竟准确的照片。\r\n\r\n这种模式在拍摄顺光的情况下，光照比较均匀的场景时效果最好，目前已经成为许多摄影师和摄影爱好者最常用的测光方式。但是，在对画面内有极端亮度差的物体存在或逆光状态的场景下略显力不从心，有时候会出现曝光不稳定的情况。\r\n![](/upload/image/f479d26b3bf6278c860a27497f54f1248633.png)\r\n### 中央重点平均测光\r\n该模式主要考虑到一般摄影者喜欢将拍摄主体放在画面中间这个习惯。以画面中心部分亮度作为主要测光依据，同时根据画面边缘的亮度进行调整来觉得曝光。\r\n\r\n这种测光模式在拍摄中心构图的景物时效果比较好。比如半身或者特写人像，因为它更多的考虑画面中心的人物，往往能正确的还原人物的肤色。\r\n![](/upload/image/3bacd919e0db850ae4ba742a1b12b5085036.png)\r\n### 局部测光\r\n局部测光只对画面中央的一块区域画面的某一局部进行测光，与中央重点平均测光最大的区别在于该测光模式不兼顾画面其它地方，而只以中央部分的测光数据为整个画面曝光的依据。\r\n\r\n当被摄主体与背景有着强烈明暗反差，而且被摄主体所占画面比例不大时，运用这种测光方式最适合。\r\n![](/upload/image/4808beaac484586d518007fd33a79dfa9906.png)\r\n### 点测光\r\n点测光只对画面中央一个很小的区域进行测光，可近似的看成是一个点，相机根据这个较窄区域测得的光线，作为曝光依据，这是一种相当准确的测光方法。\r\n![](/upload/image/4b8eaba9327442056d191b2b193729413863.png)', 0, 737, 2, '', NULL, '2019-07-08 01:10:08', 0),(108, 39, 1, '', 0, '', 1, 0, '摄影入门 (十) | 曝光补偿和包围曝光', '/upload/image/3399ccdc8e379b6862fb2cf642662e9d6344.png', '曝光补偿指的是当我们完成测光，设定光圈快门之后，因环境光线的变化，依据拍摄者的构思对曝光做加减的额外设定，从而让照片更明亮或更昏暗。', '<h2 id=\"h2-u4EC0u4E48u662Fu66DDu5149u8865u507F\"><a name=\"什么是曝光补偿\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是曝光补偿</h2><p>曝光补偿指的是当我们完成测光，设定光圈快门之后，因环境光线的变化，依据拍摄者的构思对曝光做加减的额外设定，从而让照片更明亮或更昏暗。是控制曝光的非常常用的一个功能。</p>\r\n<h2 id=\"h2-u66DDu5149u8865u507Fu7684u4F7Fu7528\"><a name=\"曝光补偿的使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>曝光补偿的使用</h2><p>面对不同的拍摄场景，曝光补偿有以下几个使用技巧：</p>\r\n<h3 id=\"h3-u88ABu6444u5BF9u8C61u4EAEu5EA6u8F83u9AD8u65F6u9700u4F5Cu6B63u8865u507F\"><a name=\"被摄对象亮度较高时需作正补偿\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>被摄对象亮度较高时需作正补偿</h3><p><img src=\"/upload/image/74bed2a5029c1be042c672285cc9db233074.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u88ABu6444u5BF9u8C61u4EAEu5EA6u8F83u4F4Eu65F6u9700u4F5Cu8D1Fu8865u507F\"><a name=\"被摄对象亮度较低时需作负补偿\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>被摄对象亮度较低时需作负补偿</h3><p><img src=\"/upload/image/55b5740b22e49b26cdd44ab7f0501c783968.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u5F53u88ABu6444u5BF9u8C61u4E0Eu80CCu666Fu5173u7CFBu590Du6742u65F6u9700u7075u6D3Bu5904u7406\"><a name=\"当被摄对象与背景关系复杂时需灵活处理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>当被摄对象与背景关系复杂时需灵活处理</h3><p>在拍摄中我们经常性的遇到以下两种情况，第一种情况是背景比较亮，主体物亮度低，这种情况需要做正补偿。<br><img src=\"/upload/image/0d9c8e24f2323c103adda42d82aaa74c3786.png\" alt=\"\"><br>第二种情况正好相反，景物背景亮度低，而主体亮度高，这种情况需作负补偿。这样，主体不至于曝光过度，而背景更暗，主体物显得更加突出。<br><img src=\"/upload/image/449e41f5b76ec31fddbd355eaa2129f42871.png\" alt=\"\"><br>曝光补偿对于照片的表现有着重要的作用，在控制曝光中我们常用“白加黑减”这四个字来阐述曝光补偿的要领，要对白色物体进行曝光正补偿，对深色调的物体进行曝光负补偿。物体越黑或越白，曝光修正幅度越大。<br><img src=\"/upload/image/369f299cd2ac4bf97257eeba88a59e006675.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5305u56F4u66DDu5149\"><a name=\"包围曝光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>包围曝光</h2><p>包围曝光是一种通过对同一对象拍摄曝光量不同的多张照片“包围”在一起，以获得正确的曝光照片的方法。自动包围曝光会先按相机测光值拍摄一张，然后在其基础上，增加和减少曝光量各拍摄一张，若仍无把握，可重新拍摄多几张，这样就可以拍摄一组曝光量均不同的照片，方便你选择。</p>\r\n', '## 什么是曝光补偿\r\n曝光补偿指的是当我们完成测光，设定光圈快门之后，因环境光线的变化，依据拍摄者的构思对曝光做加减的额外设定，从而让照片更明亮或更昏暗。是控制曝光的非常常用的一个功能。\r\n## 曝光补偿的使用\r\n面对不同的拍摄场景，曝光补偿有以下几个使用技巧：\r\n### 被摄对象亮度较高时需作正补偿\r\n![](/upload/image/74bed2a5029c1be042c672285cc9db233074.png)\r\n### 被摄对象亮度较低时需作负补偿\r\n![](/upload/image/55b5740b22e49b26cdd44ab7f0501c783968.png)\r\n### 当被摄对象与背景关系复杂时需灵活处理\r\n在拍摄中我们经常性的遇到以下两种情况，第一种情况是背景比较亮，主体物亮度低，这种情况需要做正补偿。\r\n![](/upload/image/0d9c8e24f2323c103adda42d82aaa74c3786.png)\r\n第二种情况正好相反，景物背景亮度低，而主体亮度高，这种情况需作负补偿。这样，主体不至于曝光过度，而背景更暗，主体物显得更加突出。\r\n![](/upload/image/449e41f5b76ec31fddbd355eaa2129f42871.png)\r\n曝光补偿对于照片的表现有着重要的作用，在控制曝光中我们常用“白加黑减”这四个字来阐述曝光补偿的要领，要对白色物体进行曝光正补偿，对深色调的物体进行曝光负补偿。物体越黑或越白，曝光修正幅度越大。\r\n![](/upload/image/369f299cd2ac4bf97257eeba88a59e006675.png)\r\n## 包围曝光\r\n包围曝光是一种通过对同一对象拍摄曝光量不同的多张照片“包围”在一起，以获得正确的曝光照片的方法。自动包围曝光会先按相机测光值拍摄一张，然后在其基础上，增加和减少曝光量各拍摄一张，若仍无把握，可重新拍摄多几张，这样就可以拍摄一组曝光量均不同的照片，方便你选择。', 0, 599, 4, '', NULL, '2019-07-17 07:31:09', 0),(109, 39, 1, '', 0, '', 1, 0, '摄影入门 (十一) | 景深控制', '/upload/image/326f4448741d61892d9f5be04ec9b0632316.png', '景深的的“景”是指我们要拍摄的景物，“深”就是清晰度度的纵深范围。所谓景深，就是被摄主体前后能够清晰成像的距离范围', '<h2 id=\"h2-u4E86u89E3u666Fu6DF1\"><a name=\"了解景深\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>了解景深</h2><p>景深的的“景”是指我们要拍摄的景物，“深”就是清晰度度的纵深范围。所谓景深，就是被摄主体前后能够清晰成像的距离范围。从比较清晰的最近点，到比较清晰的最远点之间的距离，就是景深。<br><img src=\"/upload/image/bab0fa55676dbc15d30df3df6d6c29495078.png\" alt=\"\"><br>景深越大，纵深景物的清晰范围也就越大，称为大景深。景深越小，纵深景物的清晰范围也就越小，称为小景深或浅景深。<br><img src=\"/upload/image/5cdc0177aa987c1362008714acdcc3d58913.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u666Fu6DF1u63A7u5236u7684u4E09u8981u7D20\"><a name=\"景深控制的三要素\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>景深控制的三要素</h2><p>景深一般由三个方面来控制：分别是光圈的大小、镜头焦距的长短、拍摄距离的远近。</p>\r\n<h3 id=\"h3--\"><a name=\"光圈越小，景深就越长，光圈越大，景深越浅\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光圈越小，景深就越长，光圈越大，景深越浅</h3><p><img src=\"/upload/image/be3bbf4361c47a44fd7fe1d65a8d0eed7829.png\" alt=\"\"></p>\r\n<h3 id=\"h3--\"><a name=\"镜头焦距越长，景深范围越小，镜头焦距越短，景深范围越大\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>镜头焦距越长，景深范围越小，镜头焦距越短，景深范围越大</h3><p><img src=\"/upload/image/f81d75bf5ed2c1833f84ad18306d0d672060.png\" alt=\"\"></p>\r\n<h3 id=\"h3--\"><a name=\"拍摄距离越近，景深范围越小，距离越远，景深范围越大\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>拍摄距离越近，景深范围越小，距离越远，景深范围越大</h3><p><img src=\"/upload/image/8eeb36b7d80ba65f00ea2d4fad0469b23062.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u666Fu6DF1u63A7u5236u7684u5E94u7528\"><a name=\"景深控制的应用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>景深控制的应用</h2><p>在实际拍摄中，我们要根据拍摄的题材，以及画面预计要达到的效果等，通过光圈、焦距的调节，通过调整距离拍摄对象的远近来控制景深。</p>\r\n<h3 id=\"h3-u6D45u666Fu6DF1u7684u63A7u5236u65B9u6CD5\"><a name=\"浅景深的控制方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>浅景深的控制方法</h3><p>在拍摄人物、花卉、小动物和植物等题材，可利用浅景深的方式来模糊被摄体前后的景物，使背景简洁，更加容易突出主体。</p>\r\n<blockquote>\r\n<p>a.尽可能的靠近被摄物体<br>b.使用大光圈<br>c.使用长焦距</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/868f779a78270bfa89171d59a314b6d47004.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u5927u666Fu6DF1u7684u63A7u5236u65B9u6CD5\"><a name=\"大景深的控制方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>大景深的控制方法</h3><p>在拍摄风光、建筑等题材的照片时，我们常利用大景深来表现整个清晰的场景。在抓拍纪实、运动摄影、新闻摄影当中，首先应该考虑画面的清晰度和曝光的准确性，景深控制就不是画面的主要追求的技术了。</p>\r\n<blockquote>\r\n<p>a.尽可能的远离被摄物体<br>b.使用小光圈<br>c.使用短焦距</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/0f78cf073f8617dd82b11ca607cb04454895.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u666Fu6DF1u9884u6D4Bu6309u94AE\"><a name=\"景深预测按钮\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>景深预测按钮</h3><p>在拍摄过程中，摄影师可以通过取景器里面的影像，大致判断景深的情况。但是，需要提醒大家，取景器景深情况，并不是拍摄时实际景深的效果，因为光圈没有按照你设置的参数收缩，所以取景器所看到的是光圈保持最大状态的景深。可以按下景深预测按钮，从观景窗判断景深效果。</p>\r\n', '## 了解景深\r\n景深的的“景”是指我们要拍摄的景物，“深”就是清晰度度的纵深范围。所谓景深，就是被摄主体前后能够清晰成像的距离范围。从比较清晰的最近点，到比较清晰的最远点之间的距离，就是景深。\r\n![](/upload/image/bab0fa55676dbc15d30df3df6d6c29495078.png)\r\n景深越大，纵深景物的清晰范围也就越大，称为大景深。景深越小，纵深景物的清晰范围也就越小，称为小景深或浅景深。\r\n![](/upload/image/5cdc0177aa987c1362008714acdcc3d58913.png)\r\n## 景深控制的三要素\r\n景深一般由三个方面来控制：分别是光圈的大小、镜头焦距的长短、拍摄距离的远近。\r\n### 光圈越小，景深就越长，光圈越大，景深越浅\r\n![](/upload/image/be3bbf4361c47a44fd7fe1d65a8d0eed7829.png)\r\n### 镜头焦距越长，景深范围越小，镜头焦距越短，景深范围越大\r\n![](/upload/image/f81d75bf5ed2c1833f84ad18306d0d672060.png)\r\n### 拍摄距离越近，景深范围越小，距离越远，景深范围越大\r\n![](/upload/image/8eeb36b7d80ba65f00ea2d4fad0469b23062.png)\r\n## 景深控制的应用\r\n在实际拍摄中，我们要根据拍摄的题材，以及画面预计要达到的效果等，通过光圈、焦距的调节，通过调整距离拍摄对象的远近来控制景深。\r\n### 浅景深的控制方法\r\n在拍摄人物、花卉、小动物和植物等题材，可利用浅景深的方式来模糊被摄体前后的景物，使背景简洁，更加容易突出主体。\r\n> a.尽可能的靠近被摄物体\r\n> b.使用大光圈\r\n> c.使用长焦距\r\n\r\n![](/upload/image/868f779a78270bfa89171d59a314b6d47004.png)\r\n### 大景深的控制方法\r\n在拍摄风光、建筑等题材的照片时，我们常利用大景深来表现整个清晰的场景。在抓拍纪实、运动摄影、新闻摄影当中，首先应该考虑画面的清晰度和曝光的准确性，景深控制就不是画面的主要追求的技术了。\r\n> a.尽可能的远离被摄物体\r\n> b.使用小光圈\r\n> c.使用短焦距\r\n\r\n![](/upload/image/0f78cf073f8617dd82b11ca607cb04454895.png)\r\n\r\n### 景深预测按钮\r\n在拍摄过程中，摄影师可以通过取景器里面的影像，大致判断景深的情况。但是，需要提醒大家，取景器景深情况，并不是拍摄时实际景深的效果，因为光圈没有按照你设置的参数收缩，所以取景器所看到的是光圈保持最大状态的景深。可以按下景深预测按钮，从观景窗判断景深效果。', 0, 607, 7, '', NULL, '2019-07-21 07:42:59', 0),(110, 39, 1, '', 0, '', 1, 0, '摄影入门 (十二) | 色温与白平衡', '/upload/image/d807f2a5c11e0851908a0c9e8466a5f81366.png', '光源中含有红黄成分越多表示色温越低，含有蓝紫成分越多则表示色温越高。通常把色温数值较低的称为“暖光”，呈现“暖调”；色温数值比较高的称为“冷光”，呈现“冷调”。', '<h2 id=\"h2-u4EC0u4E48u662Fu8272u6E29\"><a name=\"什么是色温\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是色温</h2><p>简单说，就是人们眼睛所感受到光线的颜色变化。色温以开尔文（K）为计算单位。光源中含有红黄成分越多表示色温越低，含有蓝紫成分越多则表示色温越高。通常把色温数值较低的称为“暖光”，呈现“暖调”；色温数值比较高的称为“冷光”，呈现“冷调”。</p>\r\n<h2 id=\"h2-u4E3Au4EC0u4E48u662Fu767Du5E73u8861\"><a name=\"为什么是白平衡\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>为什么是白平衡</h2><p>白平衡字面上的理解是白色的平衡。在单反相机用WB这两个字母表示。通俗的讲，白平衡就是“在不同光线环境中，让相机拍出来的白色物体还原白色”。如果白色还原成白色，那其他景物的影像就会接近人眼的色彩视觉习惯。简单的说就是矫正照片偏色的过程。<br><img src=\"/upload/image/029e81070c9c41b4fdc480577a3001892412.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u767Du5E73u8861u548Cu8272u6E29u7684u5173u7CFB\"><a name=\"白平衡和色温的关系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>白平衡和色温的关系</h2><p>白平衡的调整过程其实就是通过调整色温来控制画面色调，所以，色温对于单反相机而言就是白平衡的问题，彼此有着密切的关联性。因为有色温的差异，我们在拍摄期间要根据光线的不同而经常性调节白平衡，从而相对准确的还原现实色彩。<br><img src=\"/upload/image/4b88dae126970861ecc33a0cce7b26c63300.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u81EAu52A8u767Du5E73u8861\"><a name=\"自动白平衡\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>自动白平衡</h2><p>相机默认的白平衡设置，由相机根据光源色温自动确定白平衡。在阴天或多云天气的自然光源环境下，准确率还是比较高的，但是，一般不适用于闪光灯、荧光灯等人造光源，在这种光源下使用自动白平衡，照片色彩会出现或多或少的偏差。</p>\r\n<h2 id=\"h2-u624Bu52A8u767Du5E73u8861\"><a name=\"手动白平衡\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>手动白平衡</h2><p>根据实际光源色温选择相机上给定的白平衡类型。又分按光源类型分为日光、阴天、闪光灯、白炽灯、荧光灯等多种模式，我们在实际拍摄中，只要按目前的光源环境，选择相应的白平衡模式，就可以比较准确的还原当前画面本来的色彩。</p>\r\n<h2 id=\"h2-u81EAu5B9Au4E49u767Du5E73u8861u7684u65B9u6CD5\"><a name=\"自定义白平衡的方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>自定义白平衡的方法</h2><p>使用专业的白平衡卡，可以是纯白的白色卡，也可以是使用18%的灰卡。<br><img src=\"/upload/image/a02ac9e5310e12e8f428d26db5c17cdd3649.png\" alt=\"\"><br><img src=\"/upload/image/ac59f4475de3df8ba42de9c643c497295110.png\" alt=\"\"></p>\r\n', '## 什么是色温\r\n简单说，就是人们眼睛所感受到光线的颜色变化。色温以开尔文（K）为计算单位。光源中含有红黄成分越多表示色温越低，含有蓝紫成分越多则表示色温越高。通常把色温数值较低的称为“暖光”，呈现“暖调”；色温数值比较高的称为“冷光”，呈现“冷调”。\r\n## 为什么是白平衡\r\n白平衡字面上的理解是白色的平衡。在单反相机用WB这两个字母表示。通俗的讲，白平衡就是“在不同光线环境中，让相机拍出来的白色物体还原白色”。如果白色还原成白色，那其他景物的影像就会接近人眼的色彩视觉习惯。简单的说就是矫正照片偏色的过程。\r\n![](/upload/image/029e81070c9c41b4fdc480577a3001892412.png)\r\n## 白平衡和色温的关系\r\n白平衡的调整过程其实就是通过调整色温来控制画面色调，所以，色温对于单反相机而言就是白平衡的问题，彼此有着密切的关联性。因为有色温的差异，我们在拍摄期间要根据光线的不同而经常性调节白平衡，从而相对准确的还原现实色彩。\r\n![](/upload/image/4b88dae126970861ecc33a0cce7b26c63300.png)\r\n## 自动白平衡\r\n相机默认的白平衡设置，由相机根据光源色温自动确定白平衡。在阴天或多云天气的自然光源环境下，准确率还是比较高的，但是，一般不适用于闪光灯、荧光灯等人造光源，在这种光源下使用自动白平衡，照片色彩会出现或多或少的偏差。\r\n## 手动白平衡\r\n根据实际光源色温选择相机上给定的白平衡类型。又分按光源类型分为日光、阴天、闪光灯、白炽灯、荧光灯等多种模式，我们在实际拍摄中，只要按目前的光源环境，选择相应的白平衡模式，就可以比较准确的还原当前画面本来的色彩。\r\n## 自定义白平衡的方法\r\n使用专业的白平衡卡，可以是纯白的白色卡，也可以是使用18%的灰卡。\r\n![](/upload/image/a02ac9e5310e12e8f428d26db5c17cdd3649.png)\r\n![](/upload/image/ac59f4475de3df8ba42de9c643c497295110.png)', 0, 736, 6, '', NULL, '2019-07-23 06:54:01', 0),(111, 39, 1, '', 0, '', 1, 0, '摄影入门 (十三) | 拍摄位置与画面构成', '/upload/image/819767ed671cb0bf94ca8df8b00a04ef5833.png', '在考虑构图的过程中，首选要考虑的就是画面中主体物的最佳拍摄位置。由于相机与被摄体的距离不同，而造成被摄体在拍摄画面中所呈现出的范围大小区别也就是我们俗称的景别。', '<h1 id=\"h1-u62CDu6444u4F4Du7F6E\"><a name=\"拍摄位置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>拍摄位置</h1><p>在考虑构图的过程中，首选要考虑的就是画面中主体物的最佳拍摄位置。由于相机与被摄体的距离不同，而造成被摄体在拍摄画面中所呈现出的范围大小区别也就是我们俗称的景别。构成摄影的景别有以下几种：远景、全景、中景、近景和特写。</p>\r\n<h2 id=\"h2-u6784u6210u6444u5F71u7684u666Fu522B\"><a name=\"构成摄影的景别\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>构成摄影的景别</h2><p>远景：表现气势、强调整体，忽略细节。<br>全景：表现全貌与环境、主体明显。<br>中景：表现主体与辅体关系、情节取胜。<br>近景：突出表现主要部分。<br>特写：刻画细节。</p>\r\n<h3 id=\"h3-u8FDCu666F\"><a name=\"远景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>远景</h3><p>包括景物范围很广，能显示出宽阔的场景和广大的空间。向观众展现被摄场景总的印象，表现大的气势和气氛，但不能表现被摄主体的细节。<br><img src=\"/upload/image/64a9fdd66488393fee82df720657b75b7890.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u5168u666F\"><a name=\"全景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>全景</h3><p>是以完整的包容某一事物或某一具体对象，并有适当空间环境组成的画面。其特点是事物或具体对象有完整的形象，环境也能得到体现。<br><img src=\"/upload/image/86829529009cda81a5cd6a79487c16e04938.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u4E2Du666F\"><a name=\"中景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>中景</h3><p>中景只是包容某一事物或某一具体对象的局部范围画面。比如拍人物，表现膝盖以上相貌的画面为中景（半身人像）。其特点是以表现某一事物的主要部分为中心，常常以情节取胜，环境表现降到次要地位。<br><img src=\"/upload/image/0d7f251c8742940f7755fde2a63013e88717.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u8FD1u666F\"><a name=\"近景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>近景</h3><p>画面包括的景物范围很小，被摄对象能表现出更多的细节，容易给观众留下具体而深刻的印象，不易表现环境背景的特点。<br><img src=\"/upload/image/152c237323536696f844e13b141c4ca97419.png\" alt=\"\"></p>\r\n<h3 id=\"h3-u7279u5199\"><a name=\"特写\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>特写</h3><p>较近景更进一步，让被摄对象的某一局部充满画面，只表现被摄对象的某一细节，从细微处揭示物体的特点，给观众留下很深的印象。<br><img src=\"/upload/image/221093ea0f0a4709ba65350f8872f8f23506.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u62CDu6444u7684u65B9u5411\"><a name=\"拍摄的方向\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>拍摄的方向</h2><p>正面：主体正面形象、对称美、庄重威严、缺乏透视感。</p>\r\n<p>斜侧：透视效果明显、画面生动。</p>\r\n<p>正侧：刻画轮廓、表现人物的神态面目。</p>\r\n<p>背面：含蓄、引起联想。</p>\r\n<h2 id=\"h2-u62CDu6444u7684u9AD8u5EA6\"><a name=\"拍摄的高度\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>拍摄的高度</h2><p>平拍：亲切自然、突出主体。</p>\r\n<p>仰拍：强调夸张、高昂向上。</p>\r\n<p>俯拍：层次充分、场面盛大。</p>\r\n<h1 id=\"h1-u753Bu9762u6784u6210\"><a name=\"画面构成\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>画面构成</h1><p>一幅摄影作品的画面大体可以分为4个部分：主体、陪体、前景与背景。</p>\r\n<h2 id=\"h2-u4E3Bu4F53\"><a name=\"主体\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>主体</h2><p>摄影画面的兴趣中心，主体是摄影画面中要表现的主要对象，也是摄影画面的兴趣中心，是画面表现内容的主要体现者，是组织画面的主要依据。</p>\r\n<blockquote>\r\n<p>主体的作用：<br>提现主题思想，使观众正确理解照片的内容；<br>主体是画面结构中心，有利集中观众的视线。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/139ab99edc08c0300750ff7b7bbcbe146993.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u966Au4F53\"><a name=\"陪体\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>陪体</h2><p>主题内涵特征表达的辅助者</p>\r\n<blockquote>\r\n<p>陪体的作用：<br>与主体共同完成主题思想的表达；<br>增加画面信息量，使画面更自然生动；<br>使画面造型更丰富，更具感染力。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/d7c3da312fb96d93993594a563ae284c1952.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u524Du666F\"><a name=\"前景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>前景</h2><p>离相机最近的景物，前景一般处于主体前面，有明显的特点。其位置可以分布在画面四周，也可遍布画面；可以是实像，也可以是虚像。</p>\r\n<blockquote>\r\n<p>前景的作用<br>渲染主题，具有概括性。<br>增强空间感，强化主观地位；<br>均衡画面；<br>加强装饰性。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/d8b92f25ba94cd4af9dc7b72d316f3c64203.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u80CCu666F\"><a name=\"背景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>背景</h2><p>画面主题的有力烘托着，一幅照片的成功与主体的背景有关。良好的背景能有效的起到烘托主体的作用。</p>\r\n<blockquote>\r\n<p>背景的作用<br>烘托主体，使主体形状、轮廓更加突出；<br>交代环境、点化中心；<br>帮助构图，使画面具有空间感、均衡感等。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/2fd86363e770bf087f14bbd9eea69df43467.png\" alt=\"\"></p>\r\n', '# 拍摄位置\r\n在考虑构图的过程中，首选要考虑的就是画面中主体物的最佳拍摄位置。由于相机与被摄体的距离不同，而造成被摄体在拍摄画面中所呈现出的范围大小区别也就是我们俗称的景别。构成摄影的景别有以下几种：远景、全景、中景、近景和特写。\r\n## 构成摄影的景别\r\n远景：表现气势、强调整体，忽略细节。\r\n全景：表现全貌与环境、主体明显。\r\n中景：表现主体与辅体关系、情节取胜。\r\n近景：突出表现主要部分。\r\n特写：刻画细节。\r\n### 远景\r\n包括景物范围很广，能显示出宽阔的场景和广大的空间。向观众展现被摄场景总的印象，表现大的气势和气氛，但不能表现被摄主体的细节。\r\n![](/upload/image/64a9fdd66488393fee82df720657b75b7890.png)\r\n### 全景\r\n是以完整的包容某一事物或某一具体对象，并有适当空间环境组成的画面。其特点是事物或具体对象有完整的形象，环境也能得到体现。\r\n![](/upload/image/86829529009cda81a5cd6a79487c16e04938.png)\r\n### 中景\r\n中景只是包容某一事物或某一具体对象的局部范围画面。比如拍人物，表现膝盖以上相貌的画面为中景（半身人像）。其特点是以表现某一事物的主要部分为中心，常常以情节取胜，环境表现降到次要地位。\r\n![](/upload/image/0d7f251c8742940f7755fde2a63013e88717.png)\r\n### 近景\r\n画面包括的景物范围很小，被摄对象能表现出更多的细节，容易给观众留下具体而深刻的印象，不易表现环境背景的特点。\r\n![](/upload/image/152c237323536696f844e13b141c4ca97419.png)\r\n### 特写\r\n较近景更进一步，让被摄对象的某一局部充满画面，只表现被摄对象的某一细节，从细微处揭示物体的特点，给观众留下很深的印象。\r\n![](/upload/image/221093ea0f0a4709ba65350f8872f8f23506.png)\r\n## 拍摄的方向\r\n\r\n正面：主体正面形象、对称美、庄重威严、缺乏透视感。\r\n\r\n斜侧：透视效果明显、画面生动。\r\n\r\n正侧：刻画轮廓、表现人物的神态面目。\r\n\r\n背面：含蓄、引起联想。\r\n\r\n## 拍摄的高度\r\n\r\n平拍：亲切自然、突出主体。\r\n\r\n仰拍：强调夸张、高昂向上。\r\n\r\n俯拍：层次充分、场面盛大。\r\n\r\n# 画面构成\r\n一幅摄影作品的画面大体可以分为4个部分：主体、陪体、前景与背景。\r\n\r\n## 主体\r\n摄影画面的兴趣中心，主体是摄影画面中要表现的主要对象，也是摄影画面的兴趣中心，是画面表现内容的主要体现者，是组织画面的主要依据。\r\n> 主体的作用：\r\n> 提现主题思想，使观众正确理解照片的内容；\r\n> 主体是画面结构中心，有利集中观众的视线。\r\n\r\n![](/upload/image/139ab99edc08c0300750ff7b7bbcbe146993.png)\r\n\r\n## 陪体\r\n主题内涵特征表达的辅助者\r\n> 陪体的作用：\r\n> 与主体共同完成主题思想的表达；\r\n> 增加画面信息量，使画面更自然生动；\r\n> 使画面造型更丰富，更具感染力。\r\n\r\n![](/upload/image/d7c3da312fb96d93993594a563ae284c1952.png)\r\n\r\n## 前景\r\n离相机最近的景物，前景一般处于主体前面，有明显的特点。其位置可以分布在画面四周，也可遍布画面；可以是实像，也可以是虚像。\r\n> 前景的作用\r\n> 渲染主题，具有概括性。\r\n> 增强空间感，强化主观地位；\r\n> 均衡画面；\r\n> 加强装饰性。\r\n\r\n![](/upload/image/d8b92f25ba94cd4af9dc7b72d316f3c64203.png)\r\n\r\n## 背景\r\n画面主题的有力烘托着，一幅照片的成功与主体的背景有关。良好的背景能有效的起到烘托主体的作用。\r\n> 背景的作用\r\n> 烘托主体，使主体形状、轮廓更加突出；\r\n> 交代环境、点化中心；\r\n> 帮助构图，使画面具有空间感、均衡感等。\r\n\r\n![](/upload/image/2fd86363e770bf087f14bbd9eea69df43467.png)', 0, 1222, 2, '', NULL, '2019-07-23 21:58:57', 0),(112, 39, 1, '', 0, '', 1, 0, '摄影入门 (十四) | 奇妙的点、线、面', '/upload/image/39cfb3235853cfc9aa90aee20ea2d7881157.png', '点、线、面是平面构成中的三大要素，在摄影构图中起着支配画面布局、觉得视觉观看效果的作用。', '<p>点是以细小的点状物形成画面造型的方法，线是以线条形成画面造型的方法，块是以块状物形成画面造型的方法。点、线、面是平面构成中的三大要素，在摄影构图中起着支配画面布局、觉得视觉观看效果的作用。</p>\r\n<h2 id=\"h2-u70B9u6027u683Cu7279u5F81\"><a name=\"点性格特征\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>点性格特征</h2><p>自由、不受约束、轻松、跳跃、不安分、飘逸。<br>点是最基本的视觉元素，是构成画面的视觉、情绪的核心。<br><img src=\"/upload/image/5f1131655ea6e0d9a429942f89cb25936570.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u7EBFu7684u6027u683Cu7279u5F81\"><a name=\"线的性格特征\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>线的性格特征</h2><p>连贯、轻松、轻盈、有韵律、造型感、引导性。<br>线的组合往往造成画面中力的走向和运行节奏，也为点的出现提供了框架画面构图的选择，对视觉的引导、控制是由所有的视觉元素共同完成。<br><img src=\"/upload/image/f61ab547264d85b181fc8054025f4e823201.png\" alt=\"\"><br>直线会唤起对地平线的印象，从而引发对广大的空间、距离等概念的联想。水平直线本身也会给人以平衡、安静的视觉感受。<br><img src=\"/upload/image/44d318bbf16761077add96c5e2f236cd2367.png\" alt=\"\"><br>发射线构图有增加视觉张力的效果，给人一种力度的感觉。发射线构图不仅可以制造、烘托气氛，还可以使视线焦点更为集中。<br><img src=\"/upload/image/006a9a310cbbc7971357a9667c7ce7b34587.png\" alt=\"\"><br>垂直线给人耸立的感觉和高度的联想，与之相伴产生的是理性、冷静、精确、疏远等心理感觉。<br><img src=\"/upload/image/9e6fefb57d193ee03f50e79bd2e4f61f8456.png\" alt=\"\"><br>曲线表现优雅、美丽和可爱，是一种轻松愉快的线条，人的眼睛很容易追随这种线条。<br><img src=\"/upload/image/2c105e6c24d1579d217e3cda6fea08874579.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u9762u7684u6027u683Cu7279u5F81\"><a name=\"面的性格特征\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>面的性格特征</h2><p>稳定、沉重、安全、包容性、分量感、把控大局。<br>面的大小、形状、位置的变化使面在构图中扮演着不同的角色。<br><img src=\"/upload/image/81fae4dbacd6a11f0b733d47f57e3fa63523.png\" alt=\"\"><br>画面因线的分割而产生面。<br><img src=\"/upload/image/efb7fb47666d423b588d1e327551bead1525.png\" alt=\"\"><br>因黑白或彩色的分布而产生面。<br><img src=\"/upload/image/32a454819d1fe7aca9c6952cabd0a2ed2607.png\" alt=\"\"><br>大面积的颜色会给人的视觉以强烈的冲击，小面积的面则会让人感觉轻松许多。<br><img src=\"/upload/image/44bdf1c4097c31eff0e47f0fda809ce51255.png\" alt=\"\"></p>\r\n', '点是以细小的点状物形成画面造型的方法，线是以线条形成画面造型的方法，块是以块状物形成画面造型的方法。点、线、面是平面构成中的三大要素，在摄影构图中起着支配画面布局、觉得视觉观看效果的作用。\r\n## 点性格特征\r\n自由、不受约束、轻松、跳跃、不安分、飘逸。\r\n点是最基本的视觉元素，是构成画面的视觉、情绪的核心。\r\n![](/upload/image/5f1131655ea6e0d9a429942f89cb25936570.png)\r\n## 线的性格特征\r\n连贯、轻松、轻盈、有韵律、造型感、引导性。\r\n线的组合往往造成画面中力的走向和运行节奏，也为点的出现提供了框架画面构图的选择，对视觉的引导、控制是由所有的视觉元素共同完成。\r\n![](/upload/image/f61ab547264d85b181fc8054025f4e823201.png)\r\n直线会唤起对地平线的印象，从而引发对广大的空间、距离等概念的联想。水平直线本身也会给人以平衡、安静的视觉感受。\r\n![](/upload/image/44d318bbf16761077add96c5e2f236cd2367.png)\r\n发射线构图有增加视觉张力的效果，给人一种力度的感觉。发射线构图不仅可以制造、烘托气氛，还可以使视线焦点更为集中。\r\n![](/upload/image/006a9a310cbbc7971357a9667c7ce7b34587.png)\r\n垂直线给人耸立的感觉和高度的联想，与之相伴产生的是理性、冷静、精确、疏远等心理感觉。\r\n![](/upload/image/9e6fefb57d193ee03f50e79bd2e4f61f8456.png)\r\n曲线表现优雅、美丽和可爱，是一种轻松愉快的线条，人的眼睛很容易追随这种线条。\r\n![](/upload/image/2c105e6c24d1579d217e3cda6fea08874579.png)\r\n## 面的性格特征\r\n稳定、沉重、安全、包容性、分量感、把控大局。\r\n面的大小、形状、位置的变化使面在构图中扮演着不同的角色。\r\n![](/upload/image/81fae4dbacd6a11f0b733d47f57e3fa63523.png)\r\n画面因线的分割而产生面。\r\n![](/upload/image/efb7fb47666d423b588d1e327551bead1525.png)\r\n因黑白或彩色的分布而产生面。\r\n![](/upload/image/32a454819d1fe7aca9c6952cabd0a2ed2607.png)\r\n大面积的颜色会给人的视觉以强烈的冲击，小面积的面则会让人感觉轻松许多。\r\n![](/upload/image/44bdf1c4097c31eff0e47f0fda809ce51255.png)', 0, 850, 0, '', NULL, '2019-08-25 21:20:03', 0),(113, 19, 1, '', 0, '', 0, 0, 'redis (三) | 字符串（String）', '/upload/image/b832146c005b14c64273c1c4acd0b8688155.png', 'Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。', '<p>Redis 字符串数据类型的相关命令用于管理 redis 字符串值。</p>\r\n<h2 id=\"h2-u8BEDu6CD5\"><a name=\"语法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>语法</h2><pre><code>redis 127.0.0.1:6379 &gt; COMMAND KEY_NAME\r\n</code></pre><h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><pre><code>127.0.0.1:6379&gt; set hello redis\r\nOK\r\n127.0.0.1:6379&gt; get hello\r\n&quot;redis&quot;\r\n</code></pre><h2 id=\"h2-redis-\"><a name=\"Redis 字符串命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 字符串命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>序号</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>SET key value</td>\r\n<td>设置指定 key 的值</td>\r\n</tr>\r\n<tr>\r\n<td>GET key</td>\r\n<td>获取指定 key 的值</td>\r\n</tr>\r\n<tr>\r\n<td>GETRANGE key start end</td>\r\n<td>返回 key 中字符串值的子字符</td>\r\n</tr>\r\n<tr>\r\n<td>GETSET key value</td>\r\n<td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)</td>\r\n</tr>\r\n<tr>\r\n<td>GETBIT key offset</td>\r\n<td>对 key 所储存的字符串值，获取指定偏移量上的位(bit)</td>\r\n</tr>\r\n<tr>\r\n<td>MGET key1 [key2..]</td>\r\n<td>获取所有(一个或多个)给定 key 的值</td>\r\n</tr>\r\n<tr>\r\n<td>SETBIT key offset value</td>\r\n<td>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)</td>\r\n</tr>\r\n<tr>\r\n<td>SETEX key seconds value</td>\r\n<td>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)</td>\r\n</tr>\r\n<tr>\r\n<td>SETNX key value</td>\r\n<td>只有在 key 不存在时设置 key 的值</td>\r\n</tr>\r\n<tr>\r\n<td>SETRANGE key offset value</td>\r\n<td>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始</td>\r\n</tr>\r\n<tr>\r\n<td>STRLEN key</td>\r\n<td>返回 key 所储存的字符串值的长度</td>\r\n</tr>\r\n<tr>\r\n<td>MSET key value [key value …]</td>\r\n<td>同时设置一个或多个 key-value 对</td>\r\n</tr>\r\n<tr>\r\n<td>MSETNX key value [key value …]</td>\r\n<td>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</td>\r\n</tr>\r\n<tr>\r\n<td>PSETEX key milliseconds value</td>\r\n<td>这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位</td>\r\n</tr>\r\n<tr>\r\n<td>INCR key</td>\r\n<td>将 key 中储存的数字值增一</td>\r\n</tr>\r\n<tr>\r\n<td>INCRBY key increment</td>\r\n<td>将 key 所储存的值加上给定的增量值（increment）</td>\r\n</tr>\r\n<tr>\r\n<td>INCRBYFLOAT key increment</td>\r\n<td>将 key 所储存的值加上给定的浮点增量值（increment）</td>\r\n</tr>\r\n<tr>\r\n<td>DECR key</td>\r\n<td>将 key 中储存的数字值减一</td>\r\n</tr>\r\n<tr>\r\n<td>DECRBY key decrement</td>\r\n<td>key 所储存的值减去给定的减量值（decrement）</td>\r\n</tr>\r\n<tr>\r\n<td>APPEND key value</td>\r\n<td>如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis 字符串数据类型的相关命令用于管理 redis 字符串值。\r\n## 语法\r\n```\r\nredis 127.0.0.1:6379 > COMMAND KEY_NAME\r\n```\r\n## 实例\r\n```\r\n127.0.0.1:6379> set hello redis\r\nOK\r\n127.0.0.1:6379> get hello\r\n\"redis\"\r\n```\r\n## Redis 字符串命令\r\n| 序号  | 描述 |\r\n| ------------ | ------------ |\r\n| SET key value |  设置指定 key 的值 |\r\n| GET key | 获取指定 key 的值 |\r\n| GETRANGE key start end  | 返回 key 中字符串值的子字符 |\r\n| GETSET key value | 将给定 key 的值设为 value ，并返回 key 的旧值(old value) |\r\n| GETBIT key offset | 对 key 所储存的字符串值，获取指定偏移量上的位(bit) |\r\n| MGET key1 [key2..] | 获取所有(一个或多个)给定 key 的值 |\r\n| SETBIT key offset value | 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit) |\r\n| SETEX key seconds value | 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位) |\r\n| SETNX key value | 只有在 key 不存在时设置 key 的值 |\r\n| SETRANGE key offset value | 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始 |\r\n| STRLEN key | 返回 key 所储存的字符串值的长度 |\r\n| MSET key value [key value ...] | 同时设置一个或多个 key-value 对 |\r\n| MSETNX key value [key value ...]  | 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在 |\r\n| PSETEX key milliseconds value | 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位 |\r\n| INCR key | 将 key 中储存的数字值增一 |\r\n| INCRBY key increment | 将 key 所储存的值加上给定的增量值（increment） |\r\n| INCRBYFLOAT key increment | 将 key 所储存的值加上给定的浮点增量值（increment） |\r\n| DECR key | 将 key 中储存的数字值减一 |\r\n| DECRBY key decrement | key 所储存的值减去给定的减量值（decrement） |\r\n| APPEND key value | 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾 |', 0, 477, 0, '', NULL, '2019-09-03 11:39:03', 0),(114, 19, 1, '', 0, '', 0, 0, 'redis (四) | 哈希(Hash)', '/upload/image/ab62c59cc673a53a86766df3e811f2e31988.png', 'Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。', '<p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>\r\n<p>Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。</p>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><pre><code>127.0.0.1:6379&gt; HMSET hello 1 2 3 4 5 6\r\nOK\r\n127.0.0.1:6379&gt; HGETALL hello\r\n1) &quot;1&quot;\r\n2) &quot;2&quot;\r\n3) &quot;3&quot;\r\n4) &quot;4&quot;\r\n5) &quot;5&quot;\r\n6) &quot;6&quot;\r\n</code></pre><h2 id=\"h2-redis-hash-\"><a name=\"Redis hash 命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis hash 命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>HDEL key field1 [field2]</td>\r\n<td>删除一个或多个哈希表字段</td>\r\n</tr>\r\n<tr>\r\n<td>HEXISTS key field</td>\r\n<td>查看哈希表 key 中，指定的字段是否存在</td>\r\n</tr>\r\n<tr>\r\n<td>HGETALL key</td>\r\n<td>获取在哈希表中指定 key 的所有字段和值</td>\r\n</tr>\r\n<tr>\r\n<td>HINCRBY key field increment</td>\r\n<td>为哈希表 key 中的指定字段的整数值加上增量 increment</td>\r\n</tr>\r\n<tr>\r\n<td>HINCRBYFLOAT key field increment</td>\r\n<td>为哈希表 key 中的指定字段的浮点数值加上增量 increment</td>\r\n</tr>\r\n<tr>\r\n<td>HKEYS key</td>\r\n<td>获取所有哈希表中的字段</td>\r\n</tr>\r\n<tr>\r\n<td>HLEN key</td>\r\n<td>获取哈希表中字段的数量</td>\r\n</tr>\r\n<tr>\r\n<td>HMGET key field1 [field2]</td>\r\n<td>获取所有给定字段的值</td>\r\n</tr>\r\n<tr>\r\n<td>HMSET key field1 value1 [field2 value2 ]</td>\r\n<td>同时将多个 field-value (域-值)对设置到哈希表 key 中</td>\r\n</tr>\r\n<tr>\r\n<td>HSET key field value</td>\r\n<td>将哈希表 key 中的字段 field 的值设为 value</td>\r\n</tr>\r\n<tr>\r\n<td>HSETNX key field value</td>\r\n<td>只有在字段 field 不存在时，设置哈希表字段的值</td>\r\n</tr>\r\n<tr>\r\n<td>HVALS key</td>\r\n<td>获取哈希表中所有值</td>\r\n</tr>\r\n<tr>\r\n<td>HSCAN key cursor [MATCH pattern] [COUNT count]</td>\r\n<td>迭代哈希表中的键值对</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。\r\n\r\nRedis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。\r\n## 实例\r\n```\r\n127.0.0.1:6379> HMSET hello 1 2 3 4 5 6\r\nOK\r\n127.0.0.1:6379> HGETALL hello\r\n1) \"1\"\r\n2) \"2\"\r\n3) \"3\"\r\n4) \"4\"\r\n5) \"5\"\r\n6) \"6\"\r\n```\r\n## Redis hash 命令\r\n| 命令  | 描述  |\r\n| ------------ | ------------ |\r\n| HDEL key field1 [field2] | 删除一个或多个哈希表字段 |\r\n| HEXISTS key field  | 查看哈希表 key 中，指定的字段是否存在 |\r\n| HGETALL key  | 获取在哈希表中指定 key 的所有字段和值 |\r\n| HINCRBY key field increment  | 为哈希表 key 中的指定字段的整数值加上增量 increment  |\r\n| HINCRBYFLOAT key field increment  | 为哈希表 key 中的指定字段的浮点数值加上增量 increment |\r\n| HKEYS key  | 获取所有哈希表中的字段 |\r\n| HLEN key  | 获取哈希表中字段的数量 |\r\n| HMGET key field1 [field2]  | 获取所有给定字段的值 |\r\n| HMSET key field1 value1 [field2 value2 ]  | 同时将多个 field-value (域-值)对设置到哈希表 key 中 |\r\n| HSET key field value  | 将哈希表 key 中的字段 field 的值设为 value |\r\n| HSETNX key field value  | 只有在字段 field 不存在时，设置哈希表字段的值 |\r\n| HVALS key | 获取哈希表中所有值 |\r\n| HSCAN key cursor [MATCH pattern] [COUNT count]  | 迭代哈希表中的键值对 |\r\n', 0, 474, 0, '', NULL, '2019-09-03 23:57:46', 0),(115, 19, 1, '', 0, '', 0, 0, 'redis (五) | 列表(List)', '/upload/image/ef605b6df615f0d56a063a6d227c78257496.png', 'Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。', '<p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><pre><code>127.0.0.1:6379&gt; LPUSH hello redis\r\n(integer) 1\r\n127.0.0.1:6379&gt; LPUSH hello mongodb\r\n(integer) 2\r\n127.0.0.1:6379&gt; LPUSH hello mysql\r\n(integer) 3\r\n127.0.0.1:6379&gt; LRANGE hello 0 10\r\n1) &quot;mysql&quot;\r\n2) &quot;mongodb&quot;\r\n3) &quot;redis&quot;\r\n</code></pre><h2 id=\"h2-redis-\"><a name=\"Redis 列表命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 列表命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>BLPOP key1 [key2 ] timeout</td>\r\n<td>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\r\n</tr>\r\n<tr>\r\n<td>BRPOP key1 [key2 ] timeout</td>\r\n<td>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\r\n</tr>\r\n<tr>\r\n<td>BRPOPLPUSH source destination timeout</td>\r\n<td>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\r\n</tr>\r\n<tr>\r\n<td>LINDEX key index</td>\r\n<td>通过索引获取列表中的元素</td>\r\n</tr>\r\n<tr>\r\n<td>LINSERT key BEFORE\\AFTER pivot value</td>\r\n<td>在列表的元素前或者后插入元素</td>\r\n</tr>\r\n<tr>\r\n<td>LLEN key</td>\r\n<td>获取列表长度</td>\r\n</tr>\r\n<tr>\r\n<td>LPOP key</td>\r\n<td>移出并获取列表的第一个元素</td>\r\n</tr>\r\n<tr>\r\n<td>LPUSH key value1 [value2]</td>\r\n<td>将一个或多个值插入到列表头部</td>\r\n</tr>\r\n<tr>\r\n<td>LPUSHX key value</td>\r\n<td>将一个值插入到已存在的列表头部</td>\r\n</tr>\r\n<tr>\r\n<td>LRANGE key start stop</td>\r\n<td>获取列表指定范围内的元素</td>\r\n</tr>\r\n<tr>\r\n<td>LREM key count value</td>\r\n<td>移除列表元素</td>\r\n</tr>\r\n<tr>\r\n<td>LSET key index value</td>\r\n<td>通过索引设置列表元素的值</td>\r\n</tr>\r\n<tr>\r\n<td>LTRIM key start stop</td>\r\n<td>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>\r\n</tr>\r\n<tr>\r\n<td>RPOP key</td>\r\n<td>移除列表的最后一个元素，返回值为移除的元素。</td>\r\n</tr>\r\n<tr>\r\n<td>RPOPLPUSH source destination</td>\r\n<td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>\r\n</tr>\r\n<tr>\r\n<td>RPUSH key value1 [value2]</td>\r\n<td>在列表中添加一个或多个值</td>\r\n</tr>\r\n<tr>\r\n<td>RPUSHX key value</td>\r\n<td>为已存在的列表添加值</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。\r\n## 实例\r\n```\r\n127.0.0.1:6379> LPUSH hello redis\r\n(integer) 1\r\n127.0.0.1:6379> LPUSH hello mongodb\r\n(integer) 2\r\n127.0.0.1:6379> LPUSH hello mysql\r\n(integer) 3\r\n127.0.0.1:6379> LRANGE hello 0 10\r\n1) \"mysql\"\r\n2) \"mongodb\"\r\n3) \"redis\"\r\n```\r\n## Redis 列表命令\r\n| 命令 | 描述 |\r\n| ------------ | ------------ |\r\n| BLPOP key1 [key2 ] timeout  | 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。|\r\n| BRPOP key1 [key2 ] timeout  | 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。|\r\n| BRPOPLPUSH source destination timeout  | 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 |\r\n| LINDEX key index  | 通过索引获取列表中的元素 |\r\n| LINSERT key BEFORE\\AFTER pivot value  | 在列表的元素前或者后插入元素 |\r\n| LLEN key  | 获取列表长度 |\r\n| LPOP key  | 移出并获取列表的第一个元素 |\r\n| LPUSH key value1 [value2]  | 将一个或多个值插入到列表头部 |\r\n| LPUSHX key value  | 将一个值插入到已存在的列表头部 |\r\n| LRANGE key start stop  | 获取列表指定范围内的元素 |\r\n| LREM key count value  | 移除列表元素 |\r\n| LSET key index value  | 通过索引设置列表元素的值 |\r\n| LTRIM key start stop  | 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。 |\r\n| RPOP key  | 移除列表的最后一个元素，返回值为移除的元素。 |\r\n| RPOPLPUSH source destination  | 移除列表的最后一个元素，并将该元素添加到另一个列表并返回 |\r\n| RPUSH key value1 [value2]  | 在列表中添加一个或多个值 |\r\n| RPUSHX key value  | 为已存在的列表添加值 |\r\n', 0, 453, 0, '', NULL, '2019-09-05 00:23:43', 0),(116, 19, 1, '', 0, '', 0, 0, 'redis (六) | 集合(Set)', '/upload/image/1b9103f9966bca5a520811ee523bf61a5449.png', 'Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。', '<p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>\r\n<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>\r\n<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><pre><code>127.0.0.1:6379&gt; SADD hello redis\r\n(integer) 1\r\n127.0.0.1:6379&gt; SADD hello mongodb\r\n(integer) 1\r\n127.0.0.1:6379&gt; SADD hello mysql\r\n(integer) 1\r\n127.0.0.1:6379&gt; SADD hello mysql\r\n(integer) 0\r\n127.0.0.1:6379&gt; SMEMBERS hello\r\n1) &quot;mysql&quot;\r\n2) &quot;redis&quot;\r\n3) &quot;mongodb&quot;\r\n</code></pre><h2 id=\"h2-redis-\"><a name=\"Redis 集合命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 集合命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>SADD key member1 [member2]</td>\r\n<td>向集合添加一个或多个成员</td>\r\n</tr>\r\n<tr>\r\n<td>SCARD key</td>\r\n<td>获取集合的成员数</td>\r\n</tr>\r\n<tr>\r\n<td>SDIFF key1 [key2]</td>\r\n<td>返回给定所有集合的差集</td>\r\n</tr>\r\n<tr>\r\n<td>SDIFFSTORE destination key1 [key2]</td>\r\n<td>返回给定所有集合的差集并存储在 destination 中</td>\r\n</tr>\r\n<tr>\r\n<td>SINTER key1 [key2]</td>\r\n<td>返回给定所有集合的交集</td>\r\n</tr>\r\n<tr>\r\n<td>SINTERSTORE destination key1 [key2]</td>\r\n<td>返回给定所有集合的交集并存储在 destination 中</td>\r\n</tr>\r\n<tr>\r\n<td>SISMEMBER key member</td>\r\n<td>判断 member 元素是否是集合 key 的成员</td>\r\n</tr>\r\n<tr>\r\n<td>SMEMBERS key</td>\r\n<td>返回集合中的所有成员</td>\r\n</tr>\r\n<tr>\r\n<td>SMOVE source destination member</td>\r\n<td>将 member 元素从 source 集合移动到 destination 集合</td>\r\n</tr>\r\n<tr>\r\n<td>SPOP key</td>\r\n<td>移除并返回集合中的一个随机元素</td>\r\n</tr>\r\n<tr>\r\n<td>SRANDMEMBER key [count]</td>\r\n<td>返回集合中一个或多个随机数</td>\r\n</tr>\r\n<tr>\r\n<td>SREM key member1 [member2]</td>\r\n<td>移除集合中一个或多个成员</td>\r\n</tr>\r\n<tr>\r\n<td>SUNION key1 [key2]</td>\r\n<td>返回所有给定集合的并集</td>\r\n</tr>\r\n<tr>\r\n<td>SUNIONSTORE destination key1 [key2]</td>\r\n<td>所有给定集合的并集存储在 destination 集合中</td>\r\n</tr>\r\n<tr>\r\n<td>SSCAN key cursor [MATCH pattern] [COUNT count]</td>\r\n<td>迭代集合中的元素</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。\r\n\r\nRedis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。\r\n\r\n集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。\r\n\r\n## 实例\r\n```\r\n127.0.0.1:6379> SADD hello redis\r\n(integer) 1\r\n127.0.0.1:6379> SADD hello mongodb\r\n(integer) 1\r\n127.0.0.1:6379> SADD hello mysql\r\n(integer) 1\r\n127.0.0.1:6379> SADD hello mysql\r\n(integer) 0\r\n127.0.0.1:6379> SMEMBERS hello\r\n1) \"mysql\"\r\n2) \"redis\"\r\n3) \"mongodb\"\r\n```\r\n## Redis 集合命令\r\n| 命令 | 描述 |\r\n| ------------ | ------------ |\r\n| SADD key member1 [member2] | 向集合添加一个或多个成员 |\r\n| SCARD key | 获取集合的成员数 |\r\n| SDIFF key1 [key2] | 返回给定所有集合的差集 |\r\n| SDIFFSTORE destination key1 [key2]  | 返回给定所有集合的差集并存储在 destination 中 |\r\n| SINTER key1 [key2] | 返回给定所有集合的交集 |\r\n| SINTERSTORE destination key1 [key2] | 返回给定所有集合的交集并存储在 destination 中 |\r\n| SISMEMBER key member | 判断 member 元素是否是集合 key 的成员 |\r\n| SMEMBERS key | 返回集合中的所有成员 |\r\n| SMOVE source destination member | 将 member 元素从 source 集合移动到 destination 集合 |\r\n| SPOP key | 移除并返回集合中的一个随机元素 |\r\n| SRANDMEMBER key [count] | 返回集合中一个或多个随机数 |\r\n| SREM key member1 [member2] | 移除集合中一个或多个成员 |\r\n| SUNION key1 [key2] | 返回所有给定集合的并集 |\r\n| SUNIONSTORE destination key1 [key2] | 所有给定集合的并集存储在 destination 集合中 |\r\n| SSCAN key cursor [MATCH pattern] [COUNT count]  | 迭代集合中的元素 |\r\n', 0, 472, 0, '', NULL, '2019-09-06 00:10:48', 0),(117, 19, 1, '', 0, '', 0, 0, 'redis (七) | 有序集合(sorted set)', '/upload/image/bc9f03a1a805d6c4c0c9cd6337b8f2f23774.png', 'Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。', '<p>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</p>\r\n<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\r\n<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>\r\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><pre><code>127.0.0.1:6379&gt; ZADD hello 1 redis\r\n(integer) 1\r\n127.0.0.1:6379&gt; ZADD hello 2 mongodb\r\n(integer) 1\r\n127.0.0.1:6379&gt; ZADD hello 3 mysql\r\n(integer) 1\r\n127.0.0.1:6379&gt; ZADD hello 3 mysql\r\n(integer) 0\r\n127.0.0.1:6379&gt; ZADD hello 4 mysql\r\n(integer) 0\r\n127.0.0.1:6379&gt; ZRANGE hello 0 10 WITHSCORES\r\n1) &quot;redis&quot;\r\n2) &quot;1&quot;\r\n3) &quot;mongodb&quot;\r\n4) &quot;2&quot;\r\n5) &quot;mysql&quot;\r\n6) &quot;4&quot;\r\n</code></pre><h2 id=\"h2-redis-\"><a name=\"Redis 有序集合命令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 有序集合命令</h2><table>\r\n<thead>\r\n<tr>\r\n<th>命令</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>ZADD key score1 member1 [score2 member2]</td>\r\n<td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>\r\n</tr>\r\n<tr>\r\n<td>ZCARD key</td>\r\n<td>获取有序集合的成员数</td>\r\n</tr>\r\n<tr>\r\n<td>ZCOUNT key min max</td>\r\n<td>计算在有序集合中指定区间分数的成员数</td>\r\n</tr>\r\n<tr>\r\n<td>ZINCRBY key increment member</td>\r\n<td>有序集合中对指定成员的分数加上增量 increment</td>\r\n</tr>\r\n<tr>\r\n<td>ZINTERSTORE destination numkeys key [key …]</td>\r\n<td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td>\r\n</tr>\r\n<tr>\r\n<td>ZLEXCOUNT key min max</td>\r\n<td>在有序集合中计算指定字典区间内成员数量</td>\r\n</tr>\r\n<tr>\r\n<td>ZRANGE key start stop [WITHSCORES]</td>\r\n<td>通过索引区间返回有序集合指定区间内的成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZRANGEBYLEX key min max [LIMIT offset count]</td>\r\n<td>通过字典区间返回有序集合的成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</td>\r\n<td>通过分数返回有序集合指定区间内的成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZRANK key member</td>\r\n<td>返回有序集合中指定成员的索引</td>\r\n</tr>\r\n<tr>\r\n<td>ZREM key member [member …]</td>\r\n<td>移除有序集合中的一个或多个成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZREMRANGEBYLEX key min max</td>\r\n<td>移除有序集合中给定的字典区间的所有成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZREMRANGEBYRANK key start stop</td>\r\n<td>移除有序集合中给定的排名区间的所有成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZREMRANGEBYSCORE key min max</td>\r\n<td>移除有序集合中给定的分数区间的所有成员</td>\r\n</tr>\r\n<tr>\r\n<td>ZREVRANGE key start stop [WITHSCORES]</td>\r\n<td>返回有序集中指定区间内的成员，通过索引，分数从高到低</td>\r\n</tr>\r\n<tr>\r\n<td>ZREVRANGEBYSCORE key max min [WITHSCORES]</td>\r\n<td>返回有序集中指定分数区间内的成员，分数从高到低排序</td>\r\n</tr>\r\n<tr>\r\n<td>ZREVRANK key member</td>\r\n<td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td>\r\n</tr>\r\n<tr>\r\n<td>ZSCORE key member</td>\r\n<td>返回有序集中，成员的分数值</td>\r\n</tr>\r\n<tr>\r\n<td>ZUNIONSTORE destination numkeys key [key …]</td>\r\n<td>计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>\r\n</tr>\r\n<tr>\r\n<td>ZSCAN key cursor [MATCH pattern] [COUNT count]</td>\r\n<td>迭代有序集合中的元素（包括元素成员和元素分值）</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n', 'Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。\r\n\r\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\r\n\r\n有序集合的成员是唯一的,但分数(score)却可以重复。\r\n\r\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。\r\n\r\n## 实例\r\n```\r\n127.0.0.1:6379> ZADD hello 1 redis\r\n(integer) 1\r\n127.0.0.1:6379> ZADD hello 2 mongodb\r\n(integer) 1\r\n127.0.0.1:6379> ZADD hello 3 mysql\r\n(integer) 1\r\n127.0.0.1:6379> ZADD hello 3 mysql\r\n(integer) 0\r\n127.0.0.1:6379> ZADD hello 4 mysql\r\n(integer) 0\r\n127.0.0.1:6379> ZRANGE hello 0 10 WITHSCORES\r\n1) \"redis\"\r\n2) \"1\"\r\n3) \"mongodb\"\r\n4) \"2\"\r\n5) \"mysql\"\r\n6) \"4\"\r\n```\r\n## Redis 有序集合命令\r\n| 命令  |  描述 |\r\n| ------------ | ------------ |\r\n| ZADD key score1 member1 [score2 member2]  | 向有序集合添加一个或多个成员，或者更新已存在成员的分数  |\r\n| ZCARD key  | 获取有序集合的成员数  |\r\n| ZCOUNT key min max | 计算在有序集合中指定区间分数的成员数 |\r\n| ZINCRBY key increment member | 有序集合中对指定成员的分数加上增量 increment |\r\n| ZINTERSTORE destination numkeys key [key ...] | 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中 |\r\n| ZLEXCOUNT key min max | 在有序集合中计算指定字典区间内成员数量 |\r\n| ZRANGE key start stop [WITHSCORES] | 通过索引区间返回有序集合指定区间内的成员 |\r\n| ZRANGEBYLEX key min max [LIMIT offset count] | 通过字典区间返回有序集合的成员 |\r\n| ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] | 通过分数返回有序集合指定区间内的成员 |\r\n| ZRANK key member | 返回有序集合中指定成员的索引 |\r\n| ZREM key member [member ...] | 移除有序集合中的一个或多个成员 |\r\n| ZREMRANGEBYLEX key min max | 移除有序集合中给定的字典区间的所有成员 |\r\n| ZREMRANGEBYRANK key start stop | 移除有序集合中给定的排名区间的所有成员 |\r\n| ZREMRANGEBYSCORE key min max | 移除有序集合中给定的分数区间的所有成员 |\r\n| ZREVRANGE key start stop [WITHSCORES] | 返回有序集中指定区间内的成员，通过索引，分数从高到低 |\r\n| ZREVRANGEBYSCORE key max min [WITHSCORES] | 返回有序集中指定分数区间内的成员，分数从高到低排序 |\r\n| ZREVRANK key member | 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序 |\r\n| ZSCORE key member | 返回有序集中，成员的分数值 |\r\n| ZUNIONSTORE destination numkeys key [key ...] | 计算给定的一个或多个有序集的并集，并存储在新的 key 中 |\r\n| ZSCAN key cursor [MATCH pattern] [COUNT count] | 迭代有序集合中的元素（包括元素成员和元素分值） |', 0, 405, 0, '', NULL, '2019-09-16 00:17:27', 0),(118, 19, 1, '', 0, '', 0, 0, 'redis (八) | Redis HyperLogLog', '', '', '<p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p>\r\n<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p>\r\n<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>\r\n<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>\r\n<h2 id=\"h2--\"><a name=\"什么是基数?\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是基数?</h2><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2>', 'Redis 在 2.8.9 版本添加了 HyperLogLog 结构。\r\n\r\nRedis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。\r\n\r\n在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。\r\n\r\n但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。\r\n\r\n## 什么是基数?\r\n比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。\r\n## 实例\r\n', 0, 0, 0, '', NULL, '2019-09-16 22:51:56', 1),(119, 39, 1, '', 0, '', 1, 0, '摄影入门 (十五) | 常见的几种摄影构图方法', '/upload/image/062c0271519fbea7353a53039b7cd6bf8597.png', '摄影本无定法，所谓“摄影构图”是人们根据成功摄影作品归纳总结出来的一套实践经验上升而成的“理论”。构图理论是有一定实践指导意义的，需要注意的是不能被所谓的理论所桎梏。', '<p>摄影本无定法，所谓“摄影构图”是人们根据成功摄影作品归纳总结出来的一套实践经验上升而成的“理论”。构图理论是有一定实践指导意义的，需要注意的是不能被所谓的理论所桎梏。</p>\r\n<h2 id=\"h2-u5E73u8861u5F0Fu6784u56FE\"><a name=\"平衡式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>平衡式构图</h2><p>平衡式构图给人以满足的感觉，画面结构完整，安排巧妙，对应而平衡。常用于月夜、水面、夜景、新闻等题材。<br><img src=\"/upload/image/3a0b5d930ebc7166882cfc463c13ea994277.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5BF9u79F0u5F0Fu6784u56FE\"><a name=\"对称式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>对称式构图</h2><p>对称式构图具有平衡、稳定、相呼应的特点。缺点：呆板、缺少变化。常用于表现对称的物体、建筑、特殊风格的物体。<br><img src=\"/upload/image/e611d92dca496e50000a0260a141a0093626.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u53D8u5316u5F0Fu6784u56FE\"><a name=\"变化式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>变化式构图</h2><p>变化式构图故意将主体安排在某一角落或某一边，给人一种思考和遐想的空间，留下进一步判断的余地。这种构图富余韵味和情趣，常用于山水小景、体育运动、艺术摄影、幽默照片等。<br><img src=\"/upload/image/2c25c802e818ec155710a55866acadb83729.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5BF9u89D2u7EBFu6784u56FE\"><a name=\"对角线构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>对角线构图</h2><p>对角线构图是最基本的经典构图方式之一，把主题安排在对角线上，能有效的利用画面对角线的长度，同时也能使衬体与主体发生直接关系，富于动感，画面活泼，容易产生线条汇聚趋势，吸引人的视线，达到突出主体的效果。<br><img src=\"/upload/image/da386ec831f2518dd8193b5886df37fa8583.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4EA4u53C9u7EBFu6784u56FE\"><a name=\"交叉线构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>交叉线构图</h2><p>景物呈交叉线结构，景物的交叉点可以在画面以内，也可以在画面以外。前者有类似十字线构图的特点，后者有类似斜线构图的特点，能充分利用画面空间，并把视线引向交叉中心，也可引向画面以外，具有活泼、轻松、舒展、含蓄的特点。<br><img src=\"/upload/image/f23f32e2c3d033fe5ae7a5b3444e2a075494.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u692Du5706u578Bu6784u56FE\"><a name=\"椭圆型构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>椭圆型构图</h2><p>椭圆形构图容易产生强烈的整体感，并能产生旋转、运动、收缩等视觉效果。常用于表现不需要特别强调主体，而着重表现场面或者渲染气氛的画面内容。<br><img src=\"/upload/image/9872aba68b92f507040e04551c761ae74170.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5341u5B57u578Bu6784u56FE\"><a name=\"十字型构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>十字型构图</h2><p>十字型构图画面上的景物、影调或色彩的变化呈正交十字形，能利用较多的空间，因而能容纳较多的背景和衬体，使视线自然向十字交叉的部位集中。多用于有稳定排列组合的物体，或者拍摄有规律的运动物体等。<br><img src=\"/upload/image/096728aa49db260ea40a82a1b620bea13641.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u6C34u5E73u7EBFu5F0Fu6784u56FE\"><a name=\"水平线式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>水平线式构图</h2><p>水平线式构图具有平静、安宁、舒适、稳定等特点。常用于表现平静如镜的湖面、微波荡漾的水面、一望无际的平川、广阔平坦的原野、辽阔无垠的草原等。<br><img src=\"/upload/image/5462d518f98c6f5d98f32ded035364c39386.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u659Cu7EBFu5F0Fu6784u56FE\"><a name=\"斜线式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>斜线式构图</h2><p>斜线式构图分立式斜线和平式斜线两种，常表现运动、流动、倾斜、动荡、失衡、紧张、危险、一泻千里等场面。也有画面利用斜线指出特定的物体，起到一个固定引导的作用。<br><img src=\"/upload/image/e12fd1683a62bc575acde26fe51ce0895195.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4E09u89D2u5F62u6784u56FE\"><a name=\"三角形构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>三角形构图</h2><p>三角形构图以视觉中心为景物的主要位置，有时是以三点成面几何构成来安排景物，形成一个稳定的三角形。这种三角形可以是正三角形也可以是斜三角形或倒三角形，其中斜三角形较为常用，也较为灵活。三角形构图具有安定、均衡但不失灵活的特点。<br><img src=\"/upload/image/520416d3825920c0f9ec3635e8ffa56b9670.png\" alt=\"\"></p>\r\n<h2 id=\"h2-s-\"><a name=\"S型构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>S型构图</h2><p>S型构图又是另一种基本的经典构图方式。画面上的景物呈S形曲线的方式分布，具有延长、变化的特点，使画面看上去有韵律感，产生优美、雅致、协调的感觉。当需要采用曲线形式表现被摄物体时，首先应该想到用S形构图。常用于表现河流、小溪、曲径等。<br><img src=\"/upload/image/9a80384bf2d97da92e65332f4f79d1a65332.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5411u5FC3u5F0Fu6784u56FE\"><a name=\"向心式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>向心式构图</h2><p>向心式构图主体处于画面中心位置，四周景物呈现朝中心集中的构图形式，能将实现强烈引向主体，并起到聚焦的作用。具有突出主体的鲜明特点，但有时也产生压迫中心，局促沉重的感觉。<br><img src=\"/upload/image/7dee48bb11d40319ced2cdf548518e931864.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5782u76F4u5F0Fu6784u56FE\"><a name=\"垂直式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>垂直式构图</h2><p>垂直式构图能充分显示景物的高大和纵深。常用于表现万木争荣的森林、参天大树、险峻山石、飞泻的瀑布、摩天大楼等。<br><img src=\"/upload/image/81a8c7ffd6abaa6c37e7d96b5f6b365d2937.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4E5Du5BABu683Cu6784u56FE\"><a name=\"九宫格构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>九宫格构图</h2><p>这是最基本的构图方式之一，将主体安排在九宫格交叉点的位置上，一般认为右上角的交叉点最为理想，其次为右下方。这种构图方式较为符合人们的视觉习惯，使主体自然成为视觉中心，具有突出主体并使画面趋向均衡的特点。<br><img src=\"/upload/image/a0c35afc6d733c325d05e313192f694c1710.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u7D27u51D1u5F0Fu6784u56FE\"><a name=\"紧凑式构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>紧凑式构图</h2><p>将景物主体以特写的形式加以放大，使其局部布满画面，具有紧凑、细腻、微观等特点。常用于人物肖像，显微摄影或者表现局部细节。对刻画人物的面部往往达到传神境地，令人难忘。<br><img src=\"/upload/image/1df8dea6c25d6c6b6fbe3fa536d3a5f68607.png\" alt=\"\"></p>\r\n<h2 id=\"h2-l-\"><a name=\"L型构图\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>L型构图</h2><p>用类似于L形的线条或色块将需要强调的主体围绕、框架起来，起到突出主题的作用。L形如同半个围框，可以是正L形，也可以是倒L形，均能把人的注意力集中到围框以内，使主体突出，主题鲜明。常用于有一定规律的线条画面。<br><img src=\"/upload/image/5a7c8b02c4aa76726195cf3ec0cece9b9390.png\" alt=\"\"></p>\r\n', '摄影本无定法，所谓“摄影构图”是人们根据成功摄影作品归纳总结出来的一套实践经验上升而成的“理论”。构图理论是有一定实践指导意义的，需要注意的是不能被所谓的理论所桎梏。\r\n## 平衡式构图\r\n平衡式构图给人以满足的感觉，画面结构完整，安排巧妙，对应而平衡。常用于月夜、水面、夜景、新闻等题材。\r\n![](/upload/image/3a0b5d930ebc7166882cfc463c13ea994277.png)\r\n## 对称式构图\r\n对称式构图具有平衡、稳定、相呼应的特点。缺点：呆板、缺少变化。常用于表现对称的物体、建筑、特殊风格的物体。\r\n![](/upload/image/e611d92dca496e50000a0260a141a0093626.png)\r\n## 变化式构图\r\n变化式构图故意将主体安排在某一角落或某一边，给人一种思考和遐想的空间，留下进一步判断的余地。这种构图富余韵味和情趣，常用于山水小景、体育运动、艺术摄影、幽默照片等。\r\n![](/upload/image/2c25c802e818ec155710a55866acadb83729.png)\r\n## 对角线构图\r\n对角线构图是最基本的经典构图方式之一，把主题安排在对角线上，能有效的利用画面对角线的长度，同时也能使衬体与主体发生直接关系，富于动感，画面活泼，容易产生线条汇聚趋势，吸引人的视线，达到突出主体的效果。\r\n![](/upload/image/da386ec831f2518dd8193b5886df37fa8583.png)\r\n## 交叉线构图\r\n景物呈交叉线结构，景物的交叉点可以在画面以内，也可以在画面以外。前者有类似十字线构图的特点，后者有类似斜线构图的特点，能充分利用画面空间，并把视线引向交叉中心，也可引向画面以外，具有活泼、轻松、舒展、含蓄的特点。\r\n![](/upload/image/f23f32e2c3d033fe5ae7a5b3444e2a075494.png)\r\n## 椭圆型构图\r\n椭圆形构图容易产生强烈的整体感，并能产生旋转、运动、收缩等视觉效果。常用于表现不需要特别强调主体，而着重表现场面或者渲染气氛的画面内容。\r\n![](/upload/image/9872aba68b92f507040e04551c761ae74170.png)\r\n## 十字型构图\r\n十字型构图画面上的景物、影调或色彩的变化呈正交十字形，能利用较多的空间，因而能容纳较多的背景和衬体，使视线自然向十字交叉的部位集中。多用于有稳定排列组合的物体，或者拍摄有规律的运动物体等。\r\n![](/upload/image/096728aa49db260ea40a82a1b620bea13641.png)\r\n## 水平线式构图\r\n水平线式构图具有平静、安宁、舒适、稳定等特点。常用于表现平静如镜的湖面、微波荡漾的水面、一望无际的平川、广阔平坦的原野、辽阔无垠的草原等。\r\n![](/upload/image/5462d518f98c6f5d98f32ded035364c39386.png)\r\n## 斜线式构图\r\n斜线式构图分立式斜线和平式斜线两种，常表现运动、流动、倾斜、动荡、失衡、紧张、危险、一泻千里等场面。也有画面利用斜线指出特定的物体，起到一个固定引导的作用。\r\n![](/upload/image/e12fd1683a62bc575acde26fe51ce0895195.png)\r\n## 三角形构图\r\n三角形构图以视觉中心为景物的主要位置，有时是以三点成面几何构成来安排景物，形成一个稳定的三角形。这种三角形可以是正三角形也可以是斜三角形或倒三角形，其中斜三角形较为常用，也较为灵活。三角形构图具有安定、均衡但不失灵活的特点。\r\n![](/upload/image/520416d3825920c0f9ec3635e8ffa56b9670.png)\r\n## S型构图\r\nS型构图又是另一种基本的经典构图方式。画面上的景物呈S形曲线的方式分布，具有延长、变化的特点，使画面看上去有韵律感，产生优美、雅致、协调的感觉。当需要采用曲线形式表现被摄物体时，首先应该想到用S形构图。常用于表现河流、小溪、曲径等。\r\n![](/upload/image/9a80384bf2d97da92e65332f4f79d1a65332.png)\r\n## 向心式构图\r\n向心式构图主体处于画面中心位置，四周景物呈现朝中心集中的构图形式，能将实现强烈引向主体，并起到聚焦的作用。具有突出主体的鲜明特点，但有时也产生压迫中心，局促沉重的感觉。\r\n![](/upload/image/7dee48bb11d40319ced2cdf548518e931864.png)\r\n## 垂直式构图\r\n垂直式构图能充分显示景物的高大和纵深。常用于表现万木争荣的森林、参天大树、险峻山石、飞泻的瀑布、摩天大楼等。\r\n![](/upload/image/81a8c7ffd6abaa6c37e7d96b5f6b365d2937.png)\r\n## 九宫格构图\r\n这是最基本的构图方式之一，将主体安排在九宫格交叉点的位置上，一般认为右上角的交叉点最为理想，其次为右下方。这种构图方式较为符合人们的视觉习惯，使主体自然成为视觉中心，具有突出主体并使画面趋向均衡的特点。\r\n![](/upload/image/a0c35afc6d733c325d05e313192f694c1710.png)\r\n## 紧凑式构图\r\n将景物主体以特写的形式加以放大，使其局部布满画面，具有紧凑、细腻、微观等特点。常用于人物肖像，显微摄影或者表现局部细节。对刻画人物的面部往往达到传神境地，令人难忘。\r\n![](/upload/image/1df8dea6c25d6c6b6fbe3fa536d3a5f68607.png)\r\n## L型构图\r\n用类似于L形的线条或色块将需要强调的主体围绕、框架起来，起到突出主题的作用。L形如同半个围框，可以是正L形，也可以是倒L形，均能把人的注意力集中到围框以内，使主体突出，主题鲜明。常用于有一定规律的线条画面。\r\n![](/upload/image/5a7c8b02c4aa76726195cf3ec0cece9b9390.png)', 0, 871, 0, '', NULL, '2019-10-08 00:55:26', 0),(120, 6, 1, '', 0, '', 1, 0, 'IOS | 使用xib开发项目（不使用storyboard）', '/upload/image/2a91415eb3c35fc95abdee9be0cda65a9647.png', 'storyboard在多人协作开发的时候，容易因为多人一起修改storyboard而产生冲突，而使用传统的XIB开发，避免了一些不必要的代码冲突', '<h2 id=\"h2--main-storyboard-\"><a name=\"删除 Main.storyboard 引用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>删除 Main.storyboard 引用</h2><p>删除main.storyboard  — 删除info.plist  storyboard name main   general 删掉 main interface 内main</p>\r\n<p><img src=\"/upload/image/8624f0df2f0e82dcbd513fb20db5e60f9003.png\" alt=\"\"></p>\r\n<h2 id=\"h2--viewcontroller\"><a name=\"设置ViewController\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>设置ViewController</h2><p>在 SceneDelegate.swift 的 scene 方法中编写代码</p>\r\n<pre><code class=\"lang-swift\">    var window: UIWindow?\r\n\r\n\r\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\r\n\r\n        self.window = UIWindow(windowScene: scene as! UIWindowScene)\r\n        self.window?.rootViewController = RootViewController(nibName: &quot;RootViewController&quot;, bundle: nil)\r\n        self.window?.makeKeyAndVisible()\r\n\r\n        guard let _ = (scene as? UIWindowScene) else { return }\r\n\r\n    }\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p><img src=\"/upload/image/445cc51cb8554f9eed3ba2a24842d63f9119.png\" alt=\"\"></p>\r\n', '## 删除 Main.storyboard 引用\r\n删除main.storyboard  — 删除info.plist  storyboard name main   general 删掉 main interface 内main\r\n\r\n![](/upload/image/8624f0df2f0e82dcbd513fb20db5e60f9003.png)\r\n\r\n## 设置ViewController\r\n在 SceneDelegate.swift 的 scene 方法中编写代码\r\n```swift\r\n    var window: UIWindow?\r\n\r\n\r\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\r\n        \r\n        self.window = UIWindow(windowScene: scene as! UIWindowScene)\r\n        self.window?.rootViewController = RootViewController(nibName: \"RootViewController\", bundle: nil)\r\n        self.window?.makeKeyAndVisible()\r\n        \r\n        guard let _ = (scene as? UIWindowScene) else { return }\r\n        \r\n    }\r\n```\r\n\r\n## 测试\r\n![](/upload/image/445cc51cb8554f9eed3ba2a24842d63f9119.png)', 0, 813, 0, '', NULL, '2019-10-10 00:21:26', 0),(121, 23, 1, '', 0, '', 1, 0, 'Maven 教程（一） | Mac下安装Maven', '/upload/image/899fc6f5ba556f7a5d53fcfb6c9f6f951617.png', 'Maven 翻译为\"专家\"、\"内行\"，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。', '<h2 id=\"h2--maven\"><a name=\"下载Maven\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载Maven</h2><p>下载地址 <a href=\"http://maven.apache.org/download.cgi\" title=\"Maven官网\">Maven官网</a><br><img src=\"/upload/image/7372f1a262496b3e793897c67f03f5244133.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5B89u88C5\"><a name=\"安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装</h2><p>解压文件</p>\r\n<pre><code class=\"lang-shell\">tar -zxvf apache-maven-3.6.2-bin.tar.gz\r\n</code></pre>\r\n<p>将解压出来的文件夹，移动到 usr/local 下</p>\r\n<pre><code class=\"lang-shell\">sudo mv -f apache-maven-3.6.2 /usr/local/\r\n</code></pre>\r\n<p>配置环境变量，mac 下配置 <code>~/.bash_profile</code> 文件，每次打开都需要先<code>source ~/.bash_profile</code>，非常不方便，配置<code>~/.zshrc</code>则不用。</p>\r\n<pre><code class=\"lang-shell\">export MAVEN_HOME=/usr/local/apache-maven-3.6.2\r\nexport PATH=${PATH}:${MAVEN_HOME}/bin\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>在 terminal 输入</p>\r\n<pre><code class=\"lang-shell\">mvn -v\r\n</code></pre>\r\n<p>输出如下结果，则表示 maven 安装成功了<br><img src=\"/upload/image/1207891fc8b34ee12c2a5324d3beb8206834.png\" alt=\"\"></p>\r\n', '## 下载Maven\r\n下载地址 [Maven官网](http://maven.apache.org/download.cgi \"Maven官网\")\r\n![](/upload/image/7372f1a262496b3e793897c67f03f5244133.png)\r\n## 安装\r\n解压文件\r\n```shell\r\ntar -zxvf apache-maven-3.6.2-bin.tar.gz\r\n```\r\n将解压出来的文件夹，移动到 usr/local 下\r\n```shell\r\nsudo mv -f apache-maven-3.6.2 /usr/local/\r\n```\r\n配置环境变量，mac 下配置 `~/.bash_profile` 文件，每次打开都需要先`source ~/.bash_profile`，非常不方便，配置`~/.zshrc`则不用。\r\n```shell\r\nexport MAVEN_HOME=/usr/local/apache-maven-3.6.2\r\nexport PATH=${PATH}:${MAVEN_HOME}/bin\r\n```\r\n## 测试\r\n在 terminal 输入\r\n```shell\r\nmvn -v\r\n```\r\n输出如下结果，则表示 maven 安装成功了\r\n![](/upload/image/1207891fc8b34ee12c2a5324d3beb8206834.png)', 0, 648, 1, '', NULL, '2019-10-23 00:34:09', 0),(122, 16, 1, '', 0, '', 1, 0, 'nexus 3.x 安装教程', '/upload/image/88b4578330c24a2925358747c3e234a81974.png', '如果在项目开发中，特别是公司有内部的一些类库，不希望发布到 maven 中央仓库的，可以使用 nexus 搭建私服仓库，当然 nexus 不仅仅可以做 maven 仓库，还可以做 npm 仓库和 docker 仓库等', '<h2 id=\"h2-u4E0Bu8F7D\"><a name=\"下载\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载</h2><p>下载地址 <a href=\"https://www.sonatype.com/nexus-repository-oss\" title=\"nexus官网\">nexus官网</a></p>\r\n<p><img src=\"/upload/image/ddcb37aab1746e2522d5f613d75523679363.png\" alt=\"\"></p>\r\n<p>推荐在 Linux 环境下运行 nexus 仓库，使用 wget 下载 UNIX 安装包。</p>\r\n<h2 id=\"h2-u5B89u88C5\"><a name=\"安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装</h2><p>进入安装包下载的目录，执行解压命令</p>\r\n<pre><code class=\"lang-shell\"> tar -zxvf nexus-3.19.1-01-unix.tar.gz\r\n</code></pre>\r\n<p>解压后得出两个文件夹 nexus-3.19.1-01 和 sonatype-work </p>\r\n<p>如有有需求修改 nexus 使用的端口</p>\r\n<pre><code class=\"lang-shell\">vim nexus-3.19.1-01/etc/nexus-default.properties\r\n</code></pre>\r\n<p>修改端口为期望的值</p>\r\n<pre><code class=\"lang-shell\">application-port=8083\r\n</code></pre>\r\n<p>启动 nexus 只需要到 bin 目录执行 nexus 启动文件即可</p>\r\n<pre><code class=\"lang-shell\">./nexus-3.19.1-01/bin/nexus start\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>在浏览器输入 localhost:8083 即可访问 nexus oss了</p>\r\n<p><img src=\"/upload/image/ace48071e41478ebddf1084d5ff920eb1170.png\" alt=\"\"></p>\r\n', '## 下载\r\n下载地址 [nexus官网](https://www.sonatype.com/nexus-repository-oss \"nexus官网\")\r\n\r\n![](/upload/image/ddcb37aab1746e2522d5f613d75523679363.png)\r\n\r\n推荐在 Linux 环境下运行 nexus 仓库，使用 wget 下载 UNIX 安装包。\r\n## 安装\r\n进入安装包下载的目录，执行解压命令\r\n```shell\r\n tar -zxvf nexus-3.19.1-01-unix.tar.gz \r\n```\r\n解压后得出两个文件夹 nexus-3.19.1-01 和 sonatype-work \r\n\r\n如有有需求修改 nexus 使用的端口\r\n```shell\r\nvim nexus-3.19.1-01/etc/nexus-default.properties\r\n```\r\n修改端口为期望的值\r\n```shell\r\napplication-port=8083\r\n```\r\n启动 nexus 只需要到 bin 目录执行 nexus 启动文件即可\r\n```shell\r\n./nexus-3.19.1-01/bin/nexus start\r\n```\r\n## 测试\r\n在浏览器输入 localhost:8083 即可访问 nexus oss了\r\n\r\n![](/upload/image/ace48071e41478ebddf1084d5ff920eb1170.png)', 0, 833, 0, '', NULL, '2019-10-28 00:16:57', 0),(123, 23, 1, '', 0, '', 1, 0, 'Maven 教程（二） | 构建JAVA项目', '/upload/image/1a65ebc7ffcb8d5b431b4780c63eee339567.png', '通过使用官方提供的原型，可以快速的生成java项目，当然也可以手动创建POM文件来构建项目', '<h2 id=\"h2-u6784u5EFA\"><a name=\"构建\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>构建</h2><p>在安装了 maven 的状态下，可以使用 maven 官方提供的原型来创建符合 maven 目录结构的java项目，执行如下命令</p>\r\n<pre><code class=\"lang-shell\">mvn archetype:generate\r\n</code></pre>\r\n<h3 id=\"h3-u9009u62E9u9700u8981u7684u9879u76EEu539Fu578B\"><a name=\"选择需要的项目原型\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>选择需要的项目原型</h3><pre><code class=\"lang-shell\">Choose org.apache.maven.archetypes:maven-archetype-quickstart version: \r\n1: 1.0-alpha-1\r\n2: 1.0-alpha-2\r\n3: 1.0-alpha-3\r\n4: 1.0-alpha-4\r\n5: 1.0\r\n6: 1.1\r\n7: 1.3\r\n8: 1.4\r\nChoose a number: 8:\r\n</code></pre>\r\n<p>这里我们选择默认的值 8</p>\r\n<h3 id=\"h3--groupid-\"><a name=\"定义我们的 groupId 组织名\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义我们的 groupId 组织名</h3><pre><code class=\"lang-shell\">Define value for property &#39;groupId&#39;:\r\n</code></pre>\r\n<p>输入 com._365d1.demo ，一般我们按照 <code>公司网址的反写 + 项目名称</code> 的格式输入</p>\r\n<h3 id=\"h3-u5B9Au4E49u9879u76EEu540Du79F0\"><a name=\"定义项目名称\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义项目名称</h3><pre><code class=\"lang-shell\">Define value for property &#39;artifactId&#39;\r\n</code></pre>\r\n<p>输入 demo</p>\r\n<h3 id=\"h3-u5B9Au4E49u9879u76EEu7248u672C\"><a name=\"定义项目版本\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义项目版本</h3><pre><code class=\"lang-shell\">Define value for property &#39;version&#39; 1.0-SNAPSHOT: :\r\n</code></pre>\r\n<p>默认值为 1.0-SHAPSHOT  ，这里选择默认</p>\r\n<h3 id=\"h3-u5B9Au4E49u5305u540Du79F0\"><a name=\"定义包名称\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>定义包名称</h3><pre><code class=\"lang-shell\">Define value for property &#39;package&#39; com._365d1.demo: :\r\n</code></pre>\r\n<p>这里我们选择默认</p>\r\n<h3 id=\"h3-u751Fu6210u9879u76EE\"><a name=\"生成项目\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>生成项目</h3><p>确定后，我们即可使用官方提供的原型生成 java 项目了，目录结构</p>\r\n<pre><code>demo                 工程目录\r\n├─src              源代码目录\r\n└─target         构建生成目录\r\n</code></pre><h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>执行命令将项目打包为jar包</p>\r\n<pre><code class=\"lang-shell\">mvn package\r\n</code></pre>\r\n<p>在 target 目录中则生成了构建后的 .jar 包</p>\r\n', '## 构建\r\n在安装了 maven 的状态下，可以使用 maven 官方提供的原型来创建符合 maven 目录结构的java项目，执行如下命令\r\n```shell\r\nmvn archetype:generate\r\n```\r\n### 选择需要的项目原型\r\n```shell\r\nChoose org.apache.maven.archetypes:maven-archetype-quickstart version: \r\n1: 1.0-alpha-1\r\n2: 1.0-alpha-2\r\n3: 1.0-alpha-3\r\n4: 1.0-alpha-4\r\n5: 1.0\r\n6: 1.1\r\n7: 1.3\r\n8: 1.4\r\nChoose a number: 8:   \r\n```\r\n这里我们选择默认的值 8\r\n\r\n### 定义我们的 groupId 组织名\r\n```shell\r\nDefine value for property \'groupId\': \r\n```\r\n输入 com._365d1.demo ，一般我们按照 `公司网址的反写 + 项目名称` 的格式输入\r\n\r\n### 定义项目名称\r\n```shell\r\nDefine value for property \'artifactId\'\r\n```\r\n输入 demo\r\n### 定义项目版本\r\n```shell\r\nDefine value for property \'version\' 1.0-SNAPSHOT: :\r\n```\r\n默认值为 1.0-SHAPSHOT  ，这里选择默认\r\n### 定义包名称\r\n```shell\r\nDefine value for property \'package\' com._365d1.demo: : \r\n```\r\n这里我们选择默认\r\n### 生成项目\r\n确定后，我们即可使用官方提供的原型生成 java 项目了，目录结构\r\n```\r\ndemo                 工程目录\r\n├─src              源代码目录\r\n└─target         构建生成目录\r\n```\r\n## 测试\r\n执行命令将项目打包为jar包\r\n```shell\r\nmvn package\r\n```\r\n在 target 目录中则生成了构建后的 .jar 包', 0, 556, 0, '', NULL, '2019-10-28 00:52:24', 0),(124, 18, 1, '', 0, '', 1, 0, 'Maven工程与Nexus私服的基本使用实操', '/upload/image/54233279be2205c32eefe683dc17a1988651.png', '搭建maven私服仓库，可以在将一些日常开发中写到的类库上传到私服仓库，方便然后开发中直接使用。', '<h2 id=\"h2--maven-setting-\"><a name=\"配置 Maven Setting 文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置 Maven Setting 文件</h2><pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;settings xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot; xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\r\n\r\n  &lt;!-- 配置服务端的设置 --&gt;\r\n  &lt;servers&gt;\r\n    &lt;!--服务器元素包含配置服务器时需要的信息 --&gt;\r\n    &lt;server&gt;\r\n      &lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt;\r\n      &lt;id&gt;releases&lt;/id&gt;\r\n      &lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt;\r\n      &lt;username&gt;developer&lt;/username&gt;\r\n      &lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 + --&gt;\r\n      &lt;password&gt;888888&lt;/password&gt;  \r\n    &lt;/server&gt;\r\n    &lt;!--服务器元素包含配置服务器时需要的信息 --&gt;\r\n    &lt;server&gt;\r\n      &lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt;\r\n      &lt;id&gt;snapshots&lt;/id&gt;\r\n      &lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt;\r\n      &lt;username&gt;developer&lt;/username&gt; \r\n      &lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 + --&gt;\r\n      &lt;password&gt;888888&lt;/password&gt;  \r\n    &lt;/server&gt;\r\n  &lt;/servers&gt;\r\n\r\n  &lt;!-- 配置镜像地址 --&gt;\r\n  &lt;mirrors&gt;\r\n    &lt;!-- 私服仓库地址 --&gt;\r\n    &lt;mirror&gt;\r\n      &lt;!-- 该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;\r\n      &lt;id&gt;nexus&lt;/id&gt;\r\n      &lt;!-- 镜像名称 --&gt;\r\n      &lt;name&gt;nexus.365d1.com&lt;/name&gt;\r\n      &lt;!-- 该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;\r\n      &lt;url&gt;http://nexus.365d1.com/repository/maven-public/&lt;/url&gt;\r\n      &lt;!-- 被镜像的服务器的id，*号表示所有仓库都被镜像 --&gt;\r\n      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;      \r\n    &lt;/mirror&gt;\r\n  &lt;/mirrors&gt;\r\n\r\n&lt;/settings&gt;\r\n</code></pre>\r\n<h2 id=\"h2--pom-\"><a name=\"工程 POM 文件加入私服配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>工程 POM 文件加入私服配置</h2><pre><code class=\"lang-xml\">&lt;distributionManagement&gt;\r\n    &lt;repository&gt;\r\n        &lt;id&gt;releases&lt;/id&gt;\r\n        &lt;name&gt;Releases&lt;/name&gt;\r\n        &lt;url&gt;http://nexus.365d1.com/repository/maven-releases/&lt;/url&gt;\r\n    &lt;/repository&gt;\r\n    &lt;snapshotRepository&gt;\r\n        &lt;id&gt;snapshots&lt;/id&gt;\r\n        &lt;name&gt;Snapshot&lt;/name&gt;\r\n        &lt;url&gt;http://nexus.365d1.com/repository/maven-snapshots/&lt;/url&gt;\r\n    &lt;/snapshotRepository&gt;\r\n&lt;/distributionManagement&gt;\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>执行 maven deploy 命令，查看登录仓库查看，已经部署到私服了。<br><img src=\"/upload/image/7231555fc80bdb479d0af40cc4e769658786.png\" alt=\"\"></p>\r\n', '## 配置 Maven Setting 文件\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n\r\n  <!-- 配置服务端的设置 -->\r\n  <servers>\r\n	<!--服务器元素包含配置服务器时需要的信息 -->\r\n	<server>\r\n	  <!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 -->\r\n	  <id>releases</id>\r\n	  <!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 -->\r\n	  <username>developer</username>\r\n	  <!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 + -->\r\n	  <password>888888</password>  \r\n	</server>\r\n	<!--服务器元素包含配置服务器时需要的信息 -->\r\n	<server>\r\n	  <!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 -->\r\n	  <id>snapshots</id>\r\n	  <!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 -->\r\n	  <username>developer</username> \r\n	  <!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 + -->\r\n	  <password>888888</password>  \r\n	</server>\r\n  </servers>\r\n\r\n  <!-- 配置镜像地址 -->\r\n  <mirrors>\r\n	<!-- 私服仓库地址 -->\r\n    <mirror>\r\n	  <!-- 该镜像的唯一标识符。id用来区分不同的mirror元素。 -->\r\n	  <id>nexus</id>\r\n	  <!-- 镜像名称 -->\r\n	  <name>nexus.365d1.com</name>\r\n	  <!-- 该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 -->\r\n	  <url>http://nexus.365d1.com/repository/maven-public/</url>\r\n	  <!-- 被镜像的服务器的id，*号表示所有仓库都被镜像 -->\r\n	  <mirrorOf>*</mirrorOf>	  \r\n    </mirror>\r\n  </mirrors>\r\n  \r\n</settings>\r\n```\r\n## 工程 POM 文件加入私服配置\r\n```xml\r\n<distributionManagement>\r\n    <repository>\r\n        <id>releases</id>\r\n        <name>Releases</name>\r\n        <url>http://nexus.365d1.com/repository/maven-releases/</url>\r\n    </repository>\r\n    <snapshotRepository>\r\n        <id>snapshots</id>\r\n        <name>Snapshot</name>\r\n        <url>http://nexus.365d1.com/repository/maven-snapshots/</url>\r\n    </snapshotRepository>\r\n</distributionManagement>\r\n```\r\n## 测试\r\n执行 maven deploy 命令，查看登录仓库查看，已经部署到私服了。\r\n![](/upload/image/7231555fc80bdb479d0af40cc4e769658786.png)\r\n', 0, 538, 1, '', NULL, '2019-11-13 01:09:07', 0),(125, 18, 1, '', 0, '', 0, 0, 'spring security 模块功能说明', '', '', '', '', 0, 0, 0, '', NULL, '2019-12-04 21:05:44', 1),(126, 8, 1, '', 0, '', 1, 0, 'docker 分配宿主机网段 IP 及固定容器 IP', '/upload/image/30dd09c8a120b88323ea58db5d3255cb1404.png', '如果你没有很多的服务器（硬件），又想玩一些或者学习一些集群架构，正好你的个人PC又性能不佳，无法用虚拟机的方式虚拟很多很多的设备，那可以尝试一下性能消耗较小的docker容器，搭建与学习集群知识，或者，只是玩。', '<blockquote>\r\n<p>警告：在生产环境以下做法都不适用。<br>建议: 在生产环境请使用 Kubernetes。<br>特殊用途：没有一堆服务器，又想尝试学习搭建一些集群使用。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u57FAu7840u73AFu5883\"><a name=\"基础环境\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>基础环境</h2><p>1.虚拟机 VirtualBox<br>2.操作系统 Ubuntu 18.04.3 LTS<br>3.容器引擎 Docker 19.03.5</p>\r\n<h2 id=\"h2-u865Au62DFu673Au8BBEu7F6E\"><a name=\"虚拟机设置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>虚拟机设置</h2><p>在虚拟机上安装 Ubuntu 系统，安装完毕后需要将网卡设置为<strong>混杂模式</strong>。</p>\r\n<p><img src=\"/upload/image/3ff9525ddf3432cf5296280207471a075167.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u914Du7F6Eu7F51u6865\"><a name=\"配置网桥\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置网桥</h2><p>宿主机与docker如果要使用一样的网段，可以建立一个网桥，将宿主机网卡桥接到该网桥上。Ubuntu18.04的网络配置文件为/etc/netplan/50-cloud-init.yaml，编辑该文件，代码如下：</p>\r\n<pre><code class=\"lang-yaml\">network:\r\n  version: 2\r\n  ethernets:\r\n    enp0s3:\r\n      dhcp4: no\r\n      dhcp6: no\r\n  bridges:\r\n    br0:\r\n      interfaces: [enp0s3]\r\n      dhcp4: no\r\n      addresses: [192.168.1.251/24]\r\n      gateway4: 192.168.1.1\r\n      nameservers:\r\n        addresses: [192.168.1.1,8.8.8.8]\r\n</code></pre>\r\n<p>新建了一个名字为br0的网桥，并将网卡enp0s3桥接上来，设置使用静态IP 192.168.1.251。使用命令<code>netplan apply</code>启用新的网络配置，使用命令<code>ifconfig</code>查看网络配置是否生效。</p>\r\n<p><img src=\"/upload/image/ff9a4a00d6864c44c786a4dc674f19f08677.png\" alt=\"\"></p>\r\n<p>尝试ping外网确认配置的网络是通的。</p>\r\n<p><img src=\"/upload/image/ad9298af2238956cd57015c5920154632146.png\" alt=\"\"></p>\r\n<h2 id=\"h2--docker\"><a name=\"配置docker\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置docker</h2><p>默认情况下，docker启动时会创建一个名为docker0的网桥，并使用该网桥，需要修改docker的启动配置，不再使用docker0的默认网桥，转而使用新建的br0网桥。修改/etc/docker/daemon.json文件（文件不存在就创建一个），加入如下配置：</p>\r\n<pre><code class=\"lang-yaml\">{\r\n  &quot;bridge&quot;:&quot;br0&quot;\r\n}\r\n</code></pre>\r\n<p>使用命令<code>systemctl restart docker</code>重启docker引擎。</p>\r\n<h2 id=\"h2-u8FD0u884Cu5BB9u5668\"><a name=\"运行容器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运行容器</h2><p>可以使用官方的busybox镜像来启一个容器进行测试。</p>\r\n<blockquote>\r\n<p>Busybox是一个集成了一百多个最常用Linux命令和工具的软件工具箱，它在单一的可执行文件中提供了精简的Unix工具集。BusyBox可运行于多款POSIX环境操作系统中，如Linux（包括Andoroid）、Hurd、FreeBSD等。Busybox既包含了一些简单实用的工具，如cat和echo，也包含了一些更大，更复&gt; 杂的工具，如grep、find、mount以及telnet。可以说BusyBox是Linux系统的瑞士军刀。</p>\r\n</blockquote>\r\n<p>执行命令</p>\r\n<pre><code class=\"lang-shell\">run -it --rm --name test busybox\r\n</code></pre>\r\n<p>容器起来后，在容器里执行<code>ifconfig</code>命令查看IP地址。</p>\r\n<p><img src=\"/upload/image/5812f4caa29f0cf99f33775626fd5fe13186.png\" alt=\"\"></p>\r\n<p>虽然分配了和宿主机一样的网段，但是分配的IP是192.168.1.1，docker会从依次往上分配IP，如果再启一个容器分配的就是192.168.1.2了，但这不是想要的，IP不能控制分配非常舒服。</p>\r\n<h2 id=\"h2--ip\"><a name=\"配置固定IP\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置固定IP</h2><p>要固定IP需要使用到pipework。</p>\r\n<blockquote>\r\n<p>pipework 是由 Docker 的工程师 Jérôme Petazzoni 开发的一个 Docker 网络配置工具，由 200 多行 shell 实现，方便易用。</p>\r\n</blockquote>\r\n<p>执行以下代码获取pipework：</p>\r\n<pre><code class=\"lang-shell\">git clone https://github.com/jpetazzo/pipework\r\ncp pipework/pipework /usr/local/bin/\r\n</code></pre>\r\n<p>停止刚才创建的测试容器，它不符合要求，从新创建一个容器。</p>\r\n<pre><code class=\"lang-shell\">docker run -it --rm --network none --name test busybox\r\n</code></pre>\r\n<p>使用<code>--network none</code>在创建的时候不分配IP，稍后使用pipwork分配。此时查看容器里是没有IP的。</p>\r\n<p><img src=\"/upload/image/777e9eb53866032f27dd0297be590c294154.png\" alt=\"\"></p>\r\n<p>使用pipwork分配固定的IP，执行如下命令：</p>\r\n<pre><code class=\"lang-shell\">pipework br0 test 192.168.1.100/24@192.168.1.251\r\n</code></pre>\r\n<p>在这里的br0是上面新建的网桥，test是新建的容器名称，@符合后面的是网关地址，需要写宿主机的IP地址。重新进入容器执行<code>ifconfig</code>查看。</p>\r\n<p><img src=\"/upload/image/b2bbc3f4637e96c94fb7595045cf5c755854.png\" alt=\"\"></p>\r\n<p>此时，容器的IP就已经是刚才指定分配的了。其实固定分配IP也可以通过docker create network实现，那是另外一个故事了，现在先把这个故事讲完，最后，测试一下容器的网络情况。</p>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>容器ping外网，结果<code>通</code>。</p>\r\n<p><img src=\"/upload/image/b3f576b4f4b69166d526296a13f3b8444671.png\" alt=\"\"></p>\r\n<p>容器ping宿主机，结果<code>通</code>。</p>\r\n<p><img src=\"/upload/image/a8dda1c576e854df1d70948263213ebb4403.png\" alt=\"\"></p>\r\n<p>宿主机ping容器，结果<code>通</code>。</p>\r\n<p><img src=\"/upload/image/2b82b4c6d2e640afaf054453eef828689006.png\" alt=\"\"></p>\r\n<p>我的电脑ping容器，正在用的这个，非虚拟机(宿主机)，结果<code>通</code>。</p>\r\n<p><img src=\"/upload/image/5e784aebc654d1f8382451cbbf1754952548.png\" alt=\"\"></p>\r\n<p>容器ping我的电脑，结果<code>通</code>，肯定通的，不用测试！！！</p>\r\n', '> 警告：在生产环境以下做法都不适用。\r\n> 建议: 在生产环境请使用 Kubernetes。\r\n> 特殊用途：没有一堆服务器，又想尝试学习搭建一些集群使用。\r\n\r\n## 基础环境\r\n1.虚拟机 VirtualBox \r\n2.操作系统 Ubuntu 18.04.3 LTS\r\n3.容器引擎 Docker 19.03.5\r\n\r\n## 虚拟机设置\r\n在虚拟机上安装 Ubuntu 系统，安装完毕后需要将网卡设置为**混杂模式**。\r\n\r\n![](/upload/image/3ff9525ddf3432cf5296280207471a075167.png)\r\n\r\n## 配置网桥\r\n宿主机与docker如果要使用一样的网段，可以建立一个网桥，将宿主机网卡桥接到该网桥上。Ubuntu18.04的网络配置文件为/etc/netplan/50-cloud-init.yaml，编辑该文件，代码如下：\r\n```yaml\r\nnetwork:\r\n  version: 2\r\n  ethernets:\r\n    enp0s3:\r\n      dhcp4: no\r\n      dhcp6: no\r\n  bridges:\r\n    br0:\r\n      interfaces: [enp0s3]\r\n      dhcp4: no\r\n      addresses: [192.168.1.251/24]\r\n      gateway4: 192.168.1.1\r\n      nameservers:\r\n        addresses: [192.168.1.1,8.8.8.8]\r\n```\r\n新建了一个名字为br0的网桥，并将网卡enp0s3桥接上来，设置使用静态IP 192.168.1.251。使用命令`netplan apply`启用新的网络配置，使用命令`ifconfig`查看网络配置是否生效。\r\n\r\n![](/upload/image/ff9a4a00d6864c44c786a4dc674f19f08677.png)\r\n\r\n尝试ping外网确认配置的网络是通的。\r\n\r\n![](/upload/image/ad9298af2238956cd57015c5920154632146.png)\r\n\r\n## 配置docker\r\n默认情况下，docker启动时会创建一个名为docker0的网桥，并使用该网桥，需要修改docker的启动配置，不再使用docker0的默认网桥，转而使用新建的br0网桥。修改/etc/docker/daemon.json文件（文件不存在就创建一个），加入如下配置：\r\n```yaml\r\n{\r\n  \"bridge\":\"br0\"\r\n}\r\n```\r\n使用命令`systemctl restart docker`重启docker引擎。\r\n## 运行容器\r\n可以使用官方的busybox镜像来启一个容器进行测试。\r\n> Busybox是一个集成了一百多个最常用Linux命令和工具的软件工具箱，它在单一的可执行文件中提供了精简的Unix工具集。BusyBox可运行于多款POSIX环境操作系统中，如Linux（包括Andoroid）、Hurd、FreeBSD等。Busybox既包含了一些简单实用的工具，如cat和echo，也包含了一些更大，更复> 杂的工具，如grep、find、mount以及telnet。可以说BusyBox是Linux系统的瑞士军刀。\r\n\r\n执行命令\r\n```shell\r\nrun -it --rm --name test busybox\r\n```\r\n容器起来后，在容器里执行`ifconfig`命令查看IP地址。\r\n\r\n![](/upload/image/5812f4caa29f0cf99f33775626fd5fe13186.png)\r\n\r\n虽然分配了和宿主机一样的网段，但是分配的IP是192.168.1.1，docker会从依次往上分配IP，如果再启一个容器分配的就是192.168.1.2了，但这不是想要的，IP不能控制分配非常舒服。\r\n## 配置固定IP\r\n要固定IP需要使用到pipework。\r\n> pipework 是由 Docker 的工程师 Jérôme Petazzoni 开发的一个 Docker 网络配置工具，由 200 多行 shell 实现，方便易用。\r\n\r\n执行以下代码获取pipework：\r\n```shell\r\ngit clone https://github.com/jpetazzo/pipework\r\ncp pipework/pipework /usr/local/bin/\r\n```\r\n停止刚才创建的测试容器，它不符合要求，从新创建一个容器。\r\n```shell\r\ndocker run -it --rm --network none --name test busybox\r\n```\r\n使用`--network none`在创建的时候不分配IP，稍后使用pipwork分配。此时查看容器里是没有IP的。\r\n\r\n![](/upload/image/777e9eb53866032f27dd0297be590c294154.png)\r\n\r\n使用pipwork分配固定的IP，执行如下命令：\r\n```shell\r\npipework br0 test 192.168.1.100/24@192.168.1.251\r\n```\r\n在这里的br0是上面新建的网桥，test是新建的容器名称，@符合后面的是网关地址，需要写宿主机的IP地址。重新进入容器执行`ifconfig`查看。\r\n\r\n![](/upload/image/b2bbc3f4637e96c94fb7595045cf5c755854.png)\r\n\r\n此时，容器的IP就已经是刚才指定分配的了。其实固定分配IP也可以通过docker create network实现，那是另外一个故事了，现在先把这个故事讲完，最后，测试一下容器的网络情况。\r\n## 测试\r\n容器ping外网，结果`通`。\r\n\r\n![](/upload/image/b3f576b4f4b69166d526296a13f3b8444671.png)\r\n\r\n容器ping宿主机，结果`通`。\r\n\r\n![](/upload/image/a8dda1c576e854df1d70948263213ebb4403.png)\r\n\r\n宿主机ping容器，结果`通`。\r\n\r\n![](/upload/image/2b82b4c6d2e640afaf054453eef828689006.png)\r\n\r\n我的电脑ping容器，正在用的这个，非虚拟机(宿主机)，结果`通`。\r\n\r\n![](/upload/image/5e784aebc654d1f8382451cbbf1754952548.png)\r\n\r\n容器ping我的电脑，结果`通`，肯定通的，不用测试！！！', 0, 801, 2, '', NULL, '2020-01-07 22:50:48', 0),(127, 18, 1, '', 0, '', 1, 0, 'SpringBoot 操作 MongoDB GridFS', '/upload/image/de56348ec726495b6f7ebbdbb23d1b444629.png', '文件系统到了后期会变的很难管理，同时不利于扩展，此外想做分布式文件系统也显得不那么容易。而GridFS却正好相反，它基于MongoDB的文件系统，便于管理和扩展。', '<blockquote>\r\n<p>警告：以下操作均不适合在生产环境使用。<br>建议：生产环境请使用成熟 OSS 方案。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u51C6u5907u5DE5u4F5C\"><a name=\"准备工作\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>准备工作</h2><p>要操作 MongoDB，首先得有，安装参考 MongoDB 官方网站，选择自己对应的操作系统进行安装，<a href=\"https://www.mongodb.com/\" title=\"MongoDB官方网站\">MongoDB官方网站</a>。修改 MongoDB 配置，配置文件的路径是 /etc/mongod.conf，修改配置的bindIp选项，修改为 0.0.0.0，使得任何设备都可以连接。</p>\r\n<pre><code class=\"lang-yaml\"># network interfaces\r\nnet:\r\n  port: 27017\r\n  bindIp: 0.0.0.0\r\n</code></pre>\r\n<p>为什么先改bindIp，这样可以用客户端工具连接，执行添加用户和设置密码的命令，也可以使用命令<code>mongo</code>进入 MongoDB shell 设置，效果一样。依次执行如下代码。</p>\r\n<pre><code class=\"lang-javascript\">// 使用admin数据库\r\nuse admin\r\n// 创建root用户\r\ndb.createUser({user: &#39;root&#39;, pwd: &#39;********&#39;, roles: [&#39;root&#39;]})\r\n// 查看用户是否设置成功\r\ndb.system.users.find()\r\n</code></pre>\r\n<p>这里需要注意，密码设置要复杂一些，不推荐国际密码这种东西。再次编辑配置文件/etc/mongod.conf，开启安全认证。</p>\r\n<pre><code class=\"lang-yaml\">security:\r\n  authorization: enabled\r\n</code></pre>\r\n<h2 id=\"h2-springboot-mongodb-\"><a name=\"SpringBoot 加入 MongoDB 依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>SpringBoot 加入 MongoDB 依赖</h2><p>编辑工程 pom.xml 文件，加入依赖。</p>\r\n<pre><code class=\"lang-xml\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n</code></pre>\r\n<p>配置 MongoDB 数据库链接。</p>\r\n<pre><code class=\"lang-yaml\">spring:\r\n  data:\r\n    mongodb:\r\n      host: 10.249.1.140\r\n      database: static\r\n      authentication-database: admin\r\n      username: root\r\n      password: !国际密码\r\n</code></pre>\r\n<p>编写一个提供GridFS的service。</p>\r\n<pre><code class=\"lang-java\">public interface GridfsService {\r\n\r\n    String upload(MultipartFile file);\r\n\r\n    GridResource resource(String id);\r\n\r\n}\r\n</code></pre>\r\n<p>编写一个接口的实现类。</p>\r\n<pre><code class=\"lang-java\">@Service\r\npublic class GridsServiceImpl implements GridfsService {\r\n\r\n    @Autowired\r\n    private GridFsTemplate gridFsTemplate;\r\n\r\n    @Autowired\r\n    private MongoDbFactory mongoDbFactory;\r\n\r\n    @Override\r\n    public String upload(MultipartFile file) {\r\n        try {\r\n            ObjectId objectId = gridFsTemplate.store(file.getInputStream(), file.getOriginalFilename(), file.getContentType());\r\n            return objectId.toString();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public GridResource resource(String id) {\r\n        GridFSFile gridFSFile = gridFsTemplate.findOne(Query.query(Criteria.where(&quot;_id&quot;).is(id)));\r\n        String contentType = gridFSFile.getMetadata().getString(&quot;_contentType&quot;);\r\n        GridFSBucket bucket = GridFSBuckets.create(mongoDbFactory.getDb());\r\n        GridFSDownloadStream stream = bucket.openDownloadStream(gridFSFile.getObjectId());\r\n        GridFsResource resource = new GridFsResource(gridFSFile, stream);\r\n        return new GridResource().setMediaType(contentType).setResource(resource);\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<p>编写控制器，用于测试。</p>\r\n<pre><code class=\"lang-java\">@Api(tags = &quot;静态资源&quot;)\r\n@RestController(value = &quot;publishStaticController&quot;)\r\n@RequestMapping(value = &quot;static&quot;)\r\npublic class StaticController extends PublishController {\r\n\r\n    @Autowired\r\n    private GridfsService gridfsService;\r\n\r\n    @RequestMapping(value = &quot;resource&quot;, method = RequestMethod.GET)\r\n    public ResponseEntity&lt;?&gt; resource(\r\n            @RequestParam(value = &quot;id&quot;) String id\r\n    ) {\r\n        GridResource resource = gridfsService.resource(id);\r\n        return ResponseEntity.ok().contentType(MediaType.parseMediaType(resource.getMediaType())).body(resource.getResource());\r\n    }\r\n\r\n    @ApiOperation(value = &quot;上传文件&quot;)\r\n    @RequestMapping(value = &quot;upload&quot;, method = RequestMethod.POST)\r\n    public Object upload(@RequestParam(value = &quot;file&quot;) MultipartFile file) {\r\n        String objectId = gridfsService.upload(file);\r\n        if (!ObjectUtils.isEmpty(objectId)) {\r\n            return ResultFormat.success(&quot;上传成功&quot;, objectId);\r\n        }\r\n        return ResultFormat.error(&quot;上传失败&quot;);\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>打开swagger接口文档，已经看到刚才编写的控制器了。</p>\r\n<p><img src=\"/upload/image/c5ddc6564ebdfc793ff2e0ef0985165f7479.png\" alt=\"\"></p>\r\n<p>上传一个文件测试一下。</p>\r\n<p><img src=\"/upload/image/d09bbaa8063590a99c4eed8bee134af92412.png\" alt=\"\"></p>\r\n<p>上传成功了，并返回了ObjectID，使用这个ID去调用查询接口，测试是否可以查询到文件。</p>\r\n<p><img src=\"/upload/image/d97f37cb4dad0b61526f758c6e2a07314336.png\" alt=\"\"></p>\r\n<p>成功获取到刚才上传的文件了。查看数据库中，也相应的存储了上传的文件了。</p>\r\n<p><img src=\"/upload/image/8abdeecf81e6bb70c8f335dafec7904c4760.png\" alt=\"\"></p>\r\n', '> 警告：以下操作均不适合在生产环境使用。\r\n> 建议：生产环境请使用成熟 OSS 方案。\r\n\r\n## 准备工作\r\n要操作 MongoDB，首先得有，安装参考 MongoDB 官方网站，选择自己对应的操作系统进行安装，[MongoDB官方网站](https://www.mongodb.com/ \"MongoDB官方网站\")。修改 MongoDB 配置，配置文件的路径是 /etc/mongod.conf，修改配置的bindIp选项，修改为 0.0.0.0，使得任何设备都可以连接。\r\n```yaml\r\n# network interfaces\r\nnet:\r\n  port: 27017\r\n  bindIp: 0.0.0.0\r\n```\r\n为什么先改bindIp，这样可以用客户端工具连接，执行添加用户和设置密码的命令，也可以使用命令`mongo`进入 MongoDB shell 设置，效果一样。依次执行如下代码。\r\n```javascript\r\n// 使用admin数据库\r\nuse admin\r\n// 创建root用户\r\ndb.createUser({user: \'root\', pwd: \'********\', roles: [\'root\']})\r\n// 查看用户是否设置成功\r\ndb.system.users.find()\r\n```\r\n这里需要注意，密码设置要复杂一些，不推荐国际密码这种东西。再次编辑配置文件/etc/mongod.conf，开启安全认证。\r\n```yaml\r\nsecurity:\r\n  authorization: enabled\r\n```\r\n## SpringBoot 加入 MongoDB 依赖\r\n编辑工程 pom.xml 文件，加入依赖。\r\n```xml\r\n<dependency>\r\n	<groupId>org.springframework.boot</groupId>\r\n	<artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n</dependency>\r\n```\r\n配置 MongoDB 数据库链接。\r\n```yaml\r\nspring:\r\n  data:\r\n    mongodb:\r\n      host: 10.249.1.140\r\n      database: static\r\n      authentication-database: admin\r\n      username: root\r\n      password: !国际密码\r\n```\r\n编写一个提供GridFS的service。\r\n```java\r\npublic interface GridfsService {\r\n\r\n    String upload(MultipartFile file);\r\n\r\n    GridResource resource(String id);\r\n\r\n}\r\n```\r\n编写一个接口的实现类。\r\n```java\r\n@Service\r\npublic class GridsServiceImpl implements GridfsService {\r\n\r\n    @Autowired\r\n    private GridFsTemplate gridFsTemplate;\r\n\r\n    @Autowired\r\n    private MongoDbFactory mongoDbFactory;\r\n\r\n    @Override\r\n    public String upload(MultipartFile file) {\r\n        try {\r\n            ObjectId objectId = gridFsTemplate.store(file.getInputStream(), file.getOriginalFilename(), file.getContentType());\r\n            return objectId.toString();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public GridResource resource(String id) {\r\n        GridFSFile gridFSFile = gridFsTemplate.findOne(Query.query(Criteria.where(\"_id\").is(id)));\r\n        String contentType = gridFSFile.getMetadata().getString(\"_contentType\");\r\n        GridFSBucket bucket = GridFSBuckets.create(mongoDbFactory.getDb());\r\n        GridFSDownloadStream stream = bucket.openDownloadStream(gridFSFile.getObjectId());\r\n        GridFsResource resource = new GridFsResource(gridFSFile, stream);\r\n        return new GridResource().setMediaType(contentType).setResource(resource);\r\n    }\r\n\r\n}\r\n```\r\n编写控制器，用于测试。\r\n```java\r\n@Api(tags = \"静态资源\")\r\n@RestController(value = \"publishStaticController\")\r\n@RequestMapping(value = \"static\")\r\npublic class StaticController extends PublishController {\r\n\r\n    @Autowired\r\n    private GridfsService gridfsService;\r\n\r\n    @RequestMapping(value = \"resource\", method = RequestMethod.GET)\r\n    public ResponseEntity<?> resource(\r\n            @RequestParam(value = \"id\") String id\r\n    ) {\r\n        GridResource resource = gridfsService.resource(id);\r\n        return ResponseEntity.ok().contentType(MediaType.parseMediaType(resource.getMediaType())).body(resource.getResource());\r\n    }\r\n\r\n    @ApiOperation(value = \"上传文件\")\r\n    @RequestMapping(value = \"upload\", method = RequestMethod.POST)\r\n    public Object upload(@RequestParam(value = \"file\") MultipartFile file) {\r\n        String objectId = gridfsService.upload(file);\r\n        if (!ObjectUtils.isEmpty(objectId)) {\r\n            return ResultFormat.success(\"上传成功\", objectId);\r\n        }\r\n        return ResultFormat.error(\"上传失败\");\r\n    }\r\n\r\n}\r\n```\r\n## 测试\r\n打开swagger接口文档，已经看到刚才编写的控制器了。\r\n\r\n![](/upload/image/c5ddc6564ebdfc793ff2e0ef0985165f7479.png)\r\n\r\n上传一个文件测试一下。\r\n\r\n![](/upload/image/d09bbaa8063590a99c4eed8bee134af92412.png)\r\n\r\n上传成功了，并返回了ObjectID，使用这个ID去调用查询接口，测试是否可以查询到文件。\r\n\r\n![](/upload/image/d97f37cb4dad0b61526f758c6e2a07314336.png)\r\n\r\n成功获取到刚才上传的文件了。查看数据库中，也相应的存储了上传的文件了。\r\n\r\n![](/upload/image/8abdeecf81e6bb70c8f335dafec7904c4760.png)', 0, 1110, 3, '', NULL, '2020-01-09 00:34:09', 0),(128, 18, 1, '', 0, '', 1, 0, 'SpringBoot 按日期输出日志文件', '/upload/image/14b35b32a80bad83ad13f633421bc2ca6130.png', '在项目运行的过程中，通过在一些关键节点生成日志，可了解项目是否发生不可预期的异常，也方便在后期维护中，定位异常发生的位置，做出及时的判断和维护。', '<blockquote>\r\n<p>警告：该以下操作，只适合单点服务，不适合集群环境。<br>建议：集群环境下，请使用ELK等日志分析系统。</p>\r\n</blockquote>\r\n<h2 id=\"h2--logback\"><a name=\"配置 logback\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置 logback</h2><p>在 SpringBoot 环境下，应该尽量避免使用 xml 配置文件的，但是 logback 不支持代码配置，所以还是需要用 xml 配置的。</p>\r\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;configuration&gt;\r\n    &lt;!-- 日志文件主目录 --&gt;\r\n    &lt;define name=&quot;LOG_HOME&quot; class=&quot;com._365d1.config.logback.LogDirConfig&quot; /&gt;\r\n\r\n    &lt;!-- 默认配置 --&gt;\r\n    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot;/&gt;\r\n    &lt;!-- 配置控制台(Console) --&gt;\r\n    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot;/&gt;\r\n\r\n    &lt;!-- 配置日志文件(File) --&gt;\r\n    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\r\n        &lt;!-- 设置策略 --&gt;\r\n        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;\r\n            &lt;!-- 日志文件路径：这里%d{yyyyMMdd}表示按天分类日志 --&gt;\r\n            &lt;FileNamePattern&gt;${LOG_HOME}/%d{yyyy-MM-dd}/%i.log&lt;/FileNamePattern&gt;\r\n            &lt;!-- 启用日志清理 --&gt;\r\n            &lt;cleanHistoryOnStart&gt;true&lt;/cleanHistoryOnStart&gt;\r\n            &lt;!-- 日志保留天数 --&gt;\r\n            &lt;maxHistory&gt;30&lt;/maxHistory&gt;\r\n            &lt;!-- 日志文件最大的大小 --&gt;\r\n            &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;\r\n        &lt;/rollingPolicy&gt;\r\n        &lt;!-- 设置格式 --&gt;\r\n        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;\r\n            &lt;!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 --&gt;\r\n            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&lt;/pattern&gt;\r\n            &lt;!-- 或者使用默认配置 --&gt;\r\n            &lt;!-- &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt; --&gt;\r\n            &lt;charset&gt;utf8&lt;/charset&gt;\r\n        &lt;/encoder&gt;\r\n    &lt;/appender&gt;\r\n\r\n    &lt;!-- root节点 全局日志级别，用来指定最基础的日志输出级别 --&gt;\r\n    &lt;root level=&quot;INFO&quot;&gt;\r\n        &lt;appender-ref ref=&quot;FILE&quot;/&gt;\r\n        &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;\r\n    &lt;/root&gt;\r\n\r\n&lt;/configuration&gt;\r\n</code></pre>\r\n<p>主要是配置使用 RollingFileAppender 来控制日志的生成，配置日志生成目录的时候，需要用 define 来定义，否则日志生成的目录，不一定受控制，define 定义的变量代码。</p>\r\n<pre><code class=\"lang-java\">@Component\r\npublic class LogDirConfig extends PropertyDefinerBase {\r\n\r\n    private String LOG_HOME;\r\n\r\n    @Override\r\n    public String getPropertyValue() {\r\n        this.LOG_HOME = PathUtils.getAbsolutePath(&quot;log&quot;);\r\n        return this.LOG_HOME;\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<p>代码<code>PathUtils.getAbsolutePath</code>只是封装里获取 jar 包所在的目录而已。</p>\r\n', '> 警告：该以下操作，只适合单点服务，不适合集群环境。\r\n> 建议：集群环境下，请使用ELK等日志分析系统。\r\n\r\n## 配置 logback \r\n在 SpringBoot 环境下，应该尽量避免使用 xml 配置文件的，但是 logback 不支持代码配置，所以还是需要用 xml 配置的。\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration>\r\n    <!-- 日志文件主目录 -->\r\n    <define name=\"LOG_HOME\" class=\"com._365d1.config.logback.LogDirConfig\" />\r\n\r\n    <!-- 默认配置 -->\r\n    <include resource=\"org/springframework/boot/logging/logback/defaults.xml\"/>\r\n    <!-- 配置控制台(Console) -->\r\n    <include resource=\"org/springframework/boot/logging/logback/console-appender.xml\"/>\r\n\r\n    <!-- 配置日志文件(File) -->\r\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <!-- 设置策略 -->\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\r\n            <!-- 日志文件路径：这里%d{yyyyMMdd}表示按天分类日志 -->\r\n            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/%i.log</FileNamePattern>\r\n			<!-- 启用日志清理 -->\r\n            <cleanHistoryOnStart>true</cleanHistoryOnStart>\r\n            <!-- 日志保留天数 -->\r\n            <maxHistory>30</maxHistory>\r\n            <!-- 日志文件最大的大小 -->\r\n            <maxFileSize>10MB</maxFileSize>\r\n        </rollingPolicy>\r\n        <!-- 设置格式 -->\r\n        <encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\r\n            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->\r\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\r\n            <!-- 或者使用默认配置 -->\r\n            <!-- <pattern>${FILE_LOG_PATTERN}</pattern> -->\r\n            <charset>utf8</charset>\r\n        </encoder>\r\n    </appender>\r\n	\r\n    <!-- root节点 全局日志级别，用来指定最基础的日志输出级别 -->\r\n    <root level=\"INFO\">\r\n        <appender-ref ref=\"FILE\"/>\r\n        <appender-ref ref=\"CONSOLE\"/>\r\n    </root>\r\n\r\n</configuration>\r\n```\r\n\r\n主要是配置使用 RollingFileAppender 来控制日志的生成，配置日志生成目录的时候，需要用 define 来定义，否则日志生成的目录，不一定受控制，define 定义的变量代码。\r\n```java\r\n@Component\r\npublic class LogDirConfig extends PropertyDefinerBase {\r\n\r\n    private String LOG_HOME;\r\n\r\n    @Override\r\n    public String getPropertyValue() {\r\n        this.LOG_HOME = PathUtils.getAbsolutePath(\"log\");\r\n        return this.LOG_HOME;\r\n    }\r\n\r\n}\r\n```\r\n代码`PathUtils.getAbsolutePath`只是封装里获取 jar 包所在的目录而已。\r\n', 0, 1483, 1, '', NULL, '2020-01-09 22:55:45', 0),(129, 17, 1, '', 0, '', 1, 0, 'spring cloud alibaba (一) | Nacos 注册中心 ', '/upload/image/04bcad3ad06d5cc9bf56869f7a81adce2567.png', '发现、配置和管理微服务。敏捷和容易地构建、交付和管理微服务平台。', '<h2 id=\"h2-u4E0Bu8F7Du5B89u88C5u5305\"><a name=\"下载安装包\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载安装包</h2><p><a href=\"https://github.com/alibaba/nacos/releases\" title=\"最新安装包\">最新安装包</a></p>\r\n<h2 id=\"h2--nacos\"><a name=\"运行Nacos\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运行Nacos</h2><p>解压 Nacos 压缩包，进入 bin 目录，启动命令(standalone代表着单机模式运行，非集群模式)</p>\r\n<pre><code class=\"lang-shell\">sh startup.sh -m standalone\r\n</code></pre>\r\n<p>使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行</p>\r\n<pre><code class=\"lang-shell\">bash startup.sh -m standalone\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>输入网址：<a href=\"http://ip:8848/nacos\">http://ip:8848/nacos</a></p>\r\n<p><img src=\"/upload/image/6f3757ec8408e82a53d52a833b4317385068.png\" alt=\"\"></p>\r\n', '## 下载安装包\r\n[最新安装包](https://github.com/alibaba/nacos/releases \"最新安装包\")\r\n## 运行Nacos\r\n解压 Nacos 压缩包，进入 bin 目录，启动命令(standalone代表着单机模式运行，非集群模式)\r\n```shell\r\nsh startup.sh -m standalone\r\n```\r\n使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行\r\n```shell\r\nbash startup.sh -m standalone\r\n```\r\n## 测试\r\n输入网址：http://ip:8848/nacos\r\n\r\n![](/upload/image/6f3757ec8408e82a53d52a833b4317385068.png)', 0, 376, 1, '', NULL, '2020-03-31 12:19:15', 0),(130, 13, 1, '', 0, '', 1, 0, 'MySQL 开启远程登录 ', '/upload/image/fce511174ef2d8d47566ca0167b92cf83052.png', '以下操作适用于 Ubuntu 18.04 系统，MySQL 版本为 5.7.28。生产环境建议不要开启远程登录，测试或研发环境开启方便开发与调试。', '<h2 id=\"h2-u4FEEu6539u914Du7F6Eu6587u4EF6\"><a name=\"修改配置文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>修改配置文件</h2><p>编辑配置文件</p>\r\n<pre><code class=\"lang-shell\">vim /etc/mysql/mysql.conf.d/mysqld.cnf\r\n</code></pre>\r\n<p>将 bind-address 修改为</p>\r\n<pre><code class=\"lang-shell\">bind-address = 0.0.0.0\r\n</code></pre>\r\n<p>重启 MySQL 服务</p>\r\n<pre><code class=\"lang-shell\">systemctl restart mysql\r\n</code></pre>\r\n<h2 id=\"h2-u65B0u589Eu53EFu8FDCu7A0Bu767Bu5F55u7684u7528u6237\"><a name=\"新增可远程登录的用户\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>新增可远程登录的用户</h2><pre><code class=\"lang-shell\">grant all on *.* to root@&#39;%&#39; identified by &#39;123456&#39; with grant option;\r\nflush privileges;\r\n</code></pre>\r\n<p>重启 MySQL 服务</p>\r\n<pre><code class=\"lang-shell\">systemctl restart mysql\r\n</code></pre>\r\n', '## 修改配置文件\r\n编辑配置文件\r\n```shell\r\nvim /etc/mysql/mysql.conf.d/mysqld.cnf\r\n```\r\n将 bind-address 修改为\r\n```shell\r\nbind-address = 0.0.0.0\r\n```\r\n重启 MySQL 服务\r\n```shell\r\nsystemctl restart mysql\r\n```\r\n## 新增可远程登录的用户\r\n```shell\r\ngrant all on *.* to root@\'%\' identified by \'123456\' with grant option;\r\nflush privileges;\r\n```\r\n重启 MySQL 服务\r\n```shell\r\nsystemctl restart mysql\r\n```', 0, 374, 1, '', NULL, '2020-04-02 23:47:29', 0),(131, 42, 1, '', 0, '', 1, 0, 'Elasticsearch (一) | 安装 Elasticsearch', '/upload/image/a381aeaa796e591624d0379a339f7acd9541.png', 'Elasticsearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是最受欢迎的企业搜索引擎。', '<h2 id=\"h2-u73AFu5883u51C6u5907\"><a name=\"环境准备\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>环境准备</h2><table>\r\n<thead>\r\n<tr>\r\n<th>软件</th>\r\n<th>版本</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>虚拟机</td>\r\n<td>VirtualBox 6.1.6</td>\r\n</tr>\r\n<tr>\r\n<td>操作系统</td>\r\n<td>Ubuntu 18.04</td>\r\n</tr>\r\n<tr>\r\n<td>Elasticsearch</td>\r\n<td>7.6.2</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"h2-u4E0Bu8F7Du5B89u88C5u5305\"><a name=\"下载安装包\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载安装包</h2><p>官方网站 <a href=\"https://www.elastic.co/cn/\" title=\"https://www.elastic.co/cn/\">https://www.elastic.co/cn/</a></p>\r\n<h2 id=\"h2-u5B89u88C5u6B65u9AA4\"><a name=\"安装步骤\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装步骤</h2><p>上传安装包到<code>/software/</code>目录下，执行解压</p>\r\n<pre><code class=\"lang-shell\">tar -zxvf elasticsearch-7.6.2-linux-x86_64.tar.gz\r\n</code></pre>\r\n<p>elasticsearch 不能使用 root 用户运行，创建新用户 es 用于运行 elasticsearch</p>\r\n<pre><code class=\"lang-shell\">groupadd es\r\nuseradd es -g es -p es\r\n</code></pre>\r\n<p>将解压出来的 elasticsearch-7.6.2 目录拥有者设置为 es</p>\r\n<pre><code class=\"lang-shell\">chown -R es:es elasticsearch-7.6.2\r\n</code></pre>\r\n<p>切换用户为 es 进入 <code>elasticsearch-7.6.2/bin</code> 目录，执行启动命令</p>\r\n<pre><code class=\"lang-shell\">./elasticsearch -d\r\n</code></pre>\r\n<p>参数 -d 表示使用守护进程方式运行</p>\r\n<h2 id=\"h2-u7F51u7EDCu8BBEu7F6E\"><a name=\"网络设置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>网络设置</h2><p>进入<code>elasticsearch-7.6.2/config</code>目录，编辑elasticsearch.yml文件，修改如下</p>\r\n<pre><code class=\"lang-shell\">network.host: 0.0.0.0\r\ncluster.initial_master_nodes: [&quot;node-1&quot;]\r\n</code></pre>\r\n<p>重启 elasticsearch</p>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>浏览器访问 <a href=\"http://ip:9200\">http://ip:9200</a> 输出如下</p>\r\n<pre><code class=\"lang-json\">{\r\n    &quot;name&quot;: &quot;server&quot;,\r\n    &quot;cluster_name&quot;: &quot;elasticsearch&quot;,\r\n    &quot;cluster_uuid&quot;: &quot;xE6k6bkXSaK1ZkeNjwyrTw&quot;,\r\n    &quot;version&quot;: {\r\n        &quot;number&quot;: &quot;7.6.2&quot;,\r\n        &quot;build_flavor&quot;: &quot;default&quot;,\r\n        &quot;build_type&quot;: &quot;tar&quot;,\r\n        &quot;build_hash&quot;: &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,\r\n        &quot;build_date&quot;: &quot;2020-03-26T06:34:37.794943Z&quot;,\r\n        &quot;build_snapshot&quot;: false,\r\n        &quot;lucene_version&quot;: &quot;8.4.0&quot;,\r\n        &quot;minimum_wire_compatibility_version&quot;: &quot;6.8.0&quot;,\r\n        &quot;minimum_index_compatibility_version&quot;: &quot;6.0.0-beta1&quot;\r\n    },\r\n    &quot;tagline&quot;: &quot;You Know, for Search&quot;\r\n}\r\n</code></pre>\r\n<p>运行正常</p>\r\n<h2 id=\"h2-u542Fu52A8u5F02u5E38u89E3u51B3u529Eu6CD5\"><a name=\"启动异常解决办法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动异常解决办法</h2><p>异常 max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<br>解决，编辑 <code>/etc/security/limits.conf</code> 倒数第二行增加</p>\r\n<pre><code class=\"lang-shell\">* soft nofile 65536\r\n* hard nofile 65536\r\n# End of file\r\n</code></pre>\r\n<p>编辑<code>/etc/sysctl.conf</code>增加</p>\r\n<pre><code class=\"lang-shell\">vm.max_map_count=655360\r\n</code></pre>\r\n<p>保存后执行</p>\r\n<pre><code class=\"lang-shell\">sysctl -p\r\n</code></pre>\r\n<p>重启 elasticsearch</p>\r\n', '## 环境准备\r\n| 软件 | 版本 |\r\n| ------------ | ------------ |\r\n| 虚拟机 | VirtualBox 6.1.6 |\r\n| 操作系统 | Ubuntu 18.04 |\r\n| Elasticsearch | 7.6.2 |\r\n\r\n## 下载安装包\r\n官方网站 [https://www.elastic.co/cn/](https://www.elastic.co/cn/ \"https://www.elastic.co/cn/\")\r\n\r\n## 安装步骤\r\n上传安装包到`/software/`目录下，执行解压\r\n```shell\r\ntar -zxvf elasticsearch-7.6.2-linux-x86_64.tar.gz\r\n```\r\nelasticsearch 不能使用 root 用户运行，创建新用户 es 用于运行 elasticsearch\r\n```shell\r\ngroupadd es\r\nuseradd es -g es -p es\r\n```\r\n将解压出来的 elasticsearch-7.6.2 目录拥有者设置为 es\r\n```shell\r\nchown -R es:es elasticsearch-7.6.2\r\n```\r\n切换用户为 es 进入 `elasticsearch-7.6.2/bin` 目录，执行启动命令\r\n```shell\r\n./elasticsearch -d\r\n```\r\n参数 -d 表示使用守护进程方式运行\r\n## 网络设置\r\n进入`elasticsearch-7.6.2/config`目录，编辑elasticsearch.yml文件，修改如下\r\n```shell\r\nnetwork.host: 0.0.0.0\r\ncluster.initial_master_nodes: [\"node-1\"]\r\n```\r\n重启 elasticsearch\r\n## 测试\r\n浏览器访问 http://ip:9200 输出如下\r\n```json\r\n{\r\n    \"name\": \"server\",\r\n    \"cluster_name\": \"elasticsearch\",\r\n    \"cluster_uuid\": \"xE6k6bkXSaK1ZkeNjwyrTw\",\r\n    \"version\": {\r\n        \"number\": \"7.6.2\",\r\n        \"build_flavor\": \"default\",\r\n        \"build_type\": \"tar\",\r\n        \"build_hash\": \"ef48eb35cf30adf4db14086e8aabd07ef6fb113f\",\r\n        \"build_date\": \"2020-03-26T06:34:37.794943Z\",\r\n        \"build_snapshot\": false,\r\n        \"lucene_version\": \"8.4.0\",\r\n        \"minimum_wire_compatibility_version\": \"6.8.0\",\r\n        \"minimum_index_compatibility_version\": \"6.0.0-beta1\"\r\n    },\r\n    \"tagline\": \"You Know, for Search\"\r\n}\r\n```\r\n运行正常\r\n## 启动异常解决办法\r\n异常 max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\r\n解决，编辑 `/etc/security/limits.conf` 倒数第二行增加\r\n```shell\r\n* soft nofile 65536\r\n* hard nofile 65536\r\n# End of file\r\n```\r\n编辑`/etc/sysctl.conf`增加\r\n```shell\r\nvm.max_map_count=655360\r\n```\r\n保存后执行\r\n```shell\r\nsysctl -p\r\n```\r\n重启 elasticsearch', 0, 470, 1, '', NULL, '2020-05-11 00:37:39', 0),(132, 23, 1, '', 0, '', 1, 0, 'spring cloud alibaba (二) | 分布式事务 seata', '', '', '<p>111</p>\r\n', '111', 0, 0, 0, '', NULL, '2020-05-15 22:55:20', 1),(133, 42, 1, '', 0, '', 1, 0, 'Elasticsearch (二) | 安装 Kibana', '/upload/image/a064a1101914881d1e3576d5a78510607075.png', 'Kibana 是为 Elasticsearch设计的开源分析和可视化平台。可以使用 Kibana 来搜索，查看存储在 Elasticsearch 索引中的数据并与之交互。', '<h2 id=\"h2-u73AFu5883u51C6u5907\"><a name=\"环境准备\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>环境准备</h2><table>\r\n<thead>\r\n<tr>\r\n<th>软件</th>\r\n<th>版本</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>虚拟机</td>\r\n<td>VirtualBox 6.1.6</td>\r\n</tr>\r\n<tr>\r\n<td>操作系统</td>\r\n<td>Ubuntu 18.04</td>\r\n</tr>\r\n<tr>\r\n<td>Kibana</td>\r\n<td>7.6.2</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"h2-u4E0Bu8F7Du5B89u88C5u5305\"><a name=\"下载安装包\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载安装包</h2><p>官方网站 <a href=\"https://www.elastic.co/cn/\" title=\"https://www.elastic.co/cn/\">https://www.elastic.co/cn/</a></p>\r\n<h2 id=\"h2-u5B89u88C5u6B65u9AA4\"><a name=\"安装步骤\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装步骤</h2><p>上传安装包到<code>/software/</code>目录下，执行解压</p>\r\n<pre><code class=\"lang-shell\">tar -zxvf kibana-7.6.2-linux-x86_64.tar.gz\r\n</code></pre>\r\n<p>kibana 不能使用 root 用户运行，创建新用户 es 用于运行 kibana</p>\r\n<pre><code class=\"lang-shell\">groupadd es\r\nuseradd es -g es -p es\r\n</code></pre>\r\n<p>将解压出来的 kibana-7.6.2-linux-x86_64 目录拥有者设置为 es</p>\r\n<pre><code class=\"lang-shell\">chown -R es:es kibana-7.6.2-linux-x86_64\r\n</code></pre>\r\n<h2 id=\"h2-u914Du7F6E\"><a name=\"配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置</h2><p>进入<code>kibana-7.6.2-linux-x86_64/config</code>目录，kibana.yml文件，修改如下</p>\r\n<pre><code class=\"lang-shell\">server.host: &quot;0.0.0.0&quot;\r\nelasticsearch.hosts: [&quot;http://192.168.1.254:9200&quot;]\r\n</code></pre>\r\n<h2 id=\"h2-u542Fu52A8\"><a name=\"启动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动</h2><p>切换用户为 es 进入 <code>kibana-7.6.2-linux-x86_64/bin</code> 目录，执行启动命令</p>\r\n<pre><code class=\"lang-shell\">./kibana &amp;\r\n</code></pre>\r\n<h2 id=\"h2-u6D4Bu8BD5\"><a name=\"测试\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>测试</h2><p>浏览器访问 <a href=\"http://ip:5601\">http://ip:5601</a> 输出如下</p>\r\n<p><img src=\"/upload/image/299fc014fd67905b8d82359784a9f5c64571.png\" alt=\"\"></p>\r\n<p>运行正常</p>\r\n', '## 环境准备\r\n| 软件 | 版本 |\r\n| ------------ | ------------ |\r\n| 虚拟机 | VirtualBox 6.1.6 |\r\n| 操作系统 | Ubuntu 18.04 |\r\n| Kibana | 7.6.2 |\r\n\r\n## 下载安装包\r\n官方网站 [https://www.elastic.co/cn/](https://www.elastic.co/cn/ \"https://www.elastic.co/cn/\")\r\n\r\n## 安装步骤\r\n上传安装包到`/software/`目录下，执行解压\r\n```shell\r\ntar -zxvf kibana-7.6.2-linux-x86_64.tar.gz\r\n```\r\nkibana 不能使用 root 用户运行，创建新用户 es 用于运行 kibana\r\n```shell\r\ngroupadd es\r\nuseradd es -g es -p es\r\n```\r\n将解压出来的 kibana-7.6.2-linux-x86_64 目录拥有者设置为 es\r\n```shell\r\nchown -R es:es kibana-7.6.2-linux-x86_64\r\n```\r\n## 配置\r\n进入`kibana-7.6.2-linux-x86_64/config`目录，kibana.yml文件，修改如下\r\n```shell\r\nserver.host: \"0.0.0.0\"\r\nelasticsearch.hosts: [\"http://192.168.1.254:9200\"]\r\n```\r\n## 启动\r\n切换用户为 es 进入 `kibana-7.6.2-linux-x86_64/bin` 目录，执行启动命令\r\n```shell\r\n./kibana &\r\n```\r\n## 测试\r\n浏览器访问 http://ip:5601 输出如下\r\n\r\n![](/upload/image/299fc014fd67905b8d82359784a9f5c64571.png)\r\n\r\n运行正常', 0, 400, 0, '', NULL, '2020-05-16 00:02:29', 0),(134, 43, 1, '', 0, '', 1, 0, 'JavaScript 模块化规范 (一) | CommonJS', '/upload/image/d5312a25964de26ba70475a6546ea82c7571.png', 'JS模块化规范是现代前端自动化开发的基础知识，了解或熟练应用，将在日后的开发工作中有很大的帮助', '<h2 id=\"h2-u6982u8FF0\"><a name=\"概述\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>概述</h2><p>Node 应用由模块组成，采用 CommonJS 模块规范。</p>\r\n<p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。CommonJS规范规定，每个模块内部，<code>module</code>变量代表当前模块。这个变量是一个对象，它的<code>exports</code>属性（即<code>module.exports</code>）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。<code>require</code>方法用于加载模块。</p>\r\n<h2 id=\"h2-commonjs-\"><a name=\"CommonJS的服务端应用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>CommonJS的服务端应用</h2><p>编写模块 module1 </p>\r\n<pre><code class=\"lang-javascript\">module.exports = {\r\n    msg: &#39;hello world&#39;,\r\n    say() {\r\n        console.log(this.msg);\r\n    }\r\n}\r\n</code></pre>\r\n<p>编写模块 module2</p>\r\n<pre><code class=\"lang-javascript\">exports.arr = [0, 5, 1, 3, 5, 2, 9, 6, 7, 4]\r\n</code></pre>\r\n<p>编写 app.js</p>\r\n<pre><code class=\"lang-javascript\">let uniq = require(&#39;uniq&#39;);\r\nlet module1 = require(&#39;./modules/module1&#39;);\r\nlet module2 = require(&#39;./modules/module2&#39;);\r\n\r\nconsole.log(module1);\r\nconsole.log(module2);\r\n\r\nconsole.log(uniq(module2.arr))\r\n</code></pre>\r\n<p>引入项目中的模块需要指定相对路径，引入第三方模块只需要写模块名称即可。<br>在 NodeJS 环境下，可以直接使用 node xxx.js 的方式直接运行。</p>\r\n<pre><code class=\"lang-shell\">node app.js\r\n</code></pre>\r\n<p>输出如下</p>\r\n<p><img src=\"/upload/image/3c59f9d0a54a0e6517e86502bcf394543056.png\" alt=\"\"></p>\r\n<h2 id=\"h2-commonjs-\"><a name=\"CommonJS的浏览器端应用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>CommonJS的浏览器端应用</h2><p>由于浏览器不能直接识别<code>module.exports</code>和<code>require</code>，需要借助一个工具，将代码转化为浏览器可以执行的代码，安装 browserify</p>\r\n<pre><code class=\"lang-shell\">npm install -g browserify\r\n</code></pre>\r\n<p>使用命令将代码转换为浏览器可以执行代码</p>\r\n<pre><code class=\"lang-shell\">browserify src/app.js -o dist/bundle.js\r\n</code></pre>\r\n<p>新建 HTML 文件并引入 bundle.js 文件，用浏览器打开该 HTML 文件</p>\r\n<p><img src=\"/upload/image/3552356249c28a7281b0912f193d17ad8666.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4EE3u7801u4ED3u5E93\"><a name=\"代码仓库\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>代码仓库</h2><p><a href=\"https://github.com/365D1/javascript-modules.git\" title=\"https://github.com/365D1/javascript-modules.git\">https://github.com/365D1/javascript-modules.git</a></p>\r\n', '## 概述\r\nNode 应用由模块组成，采用 CommonJS 模块规范。\r\n\r\n每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。CommonJS规范规定，每个模块内部，`module`变量代表当前模块。这个变量是一个对象，它的`exports`属性（即`module.exports`）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。`require`方法用于加载模块。\r\n\r\n## CommonJS的服务端应用\r\n编写模块 module1 \r\n```javascript\r\nmodule.exports = {\r\n    msg: \'hello world\',\r\n    say() {\r\n        console.log(this.msg);\r\n    }\r\n}\r\n```\r\n编写模块 module2\r\n```javascript\r\nexports.arr = [0, 5, 1, 3, 5, 2, 9, 6, 7, 4]\r\n```\r\n编写 app.js\r\n```javascript\r\nlet uniq = require(\'uniq\');\r\nlet module1 = require(\'./modules/module1\');\r\nlet module2 = require(\'./modules/module2\');\r\n\r\nconsole.log(module1);\r\nconsole.log(module2);\r\n\r\nconsole.log(uniq(module2.arr))\r\n\r\n```\r\n引入项目中的模块需要指定相对路径，引入第三方模块只需要写模块名称即可。\r\n在 NodeJS 环境下，可以直接使用 node xxx.js 的方式直接运行。\r\n```shell\r\nnode app.js\r\n```\r\n输出如下\r\n\r\n![](/upload/image/3c59f9d0a54a0e6517e86502bcf394543056.png)\r\n## CommonJS的浏览器端应用\r\n由于浏览器不能直接识别`module.exports`和`require`，需要借助一个工具，将代码转化为浏览器可以执行的代码，安装 browserify\r\n```shell\r\nnpm install -g browserify\r\n```\r\n使用命令将代码转换为浏览器可以执行代码\r\n```shell\r\nbrowserify src/app.js -o dist/bundle.js\r\n```\r\n新建 HTML 文件并引入 bundle.js 文件，用浏览器打开该 HTML 文件\r\n\r\n![](/upload/image/3552356249c28a7281b0912f193d17ad8666.png)\r\n\r\n## 代码仓库\r\n[https://github.com/365D1/javascript-modules.git](https://github.com/365D1/javascript-modules.git \"https://github.com/365D1/javascript-modules.git\")', 0, 353, 0, '', NULL, '2020-05-17 16:52:09', 0),(135, 43, 1, '', 0, '', 1, 0, 'JavaScript 模块化规范 (二) | ES6', '/upload/image/b459888ab6b6ae1d916c57698fd443211488.png', '在 ES6 中，import、export 取代了 require、module.exports 用来引入和导出模块', '<h2 id=\"h2-u6982u8FF0\"><a name=\"概述\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>概述</h2><p>在 ES6 中，import、export 取代了 require、module.exports 用来引入和导出模块</p>\r\n<blockquote>\r\n<p>ES6 模块输出的是值的引用，输出接口动态绑定，而 CommonJS 输出的是值的拷贝<br>ES6 模块编译时执行，而 CommonJS 模块总是在运行时加载</p>\r\n</blockquote>\r\n<h2 id=\"h2-es6-\"><a name=\"ES6 模块化应用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>ES6 模块化应用</h2><p>由于浏览器不能完全支持 ES6 及以上语法，需要借助一个工具，将代码转化 ES5 语法，安装 Babel</p>\r\n<pre><code class=\"lang-shell\">npm install -g babel-cli\r\n</code></pre>\r\n<p>安装 ES5 转化</p>\r\n<pre><code class=\"lang-shell\">npm install --save-dev babel-preset-es2015\r\n</code></pre>\r\n<p>编写模块 module</p>\r\n<pre><code class=\"lang-javascript\">export default class {\r\n\r\n    constructor() {\r\n        this.msg = &#39;hello world&#39;;\r\n    }\r\n\r\n    say() {\r\n        console.log(this.msg);\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<p>编辑 app.js</p>\r\n<pre><code class=\"lang-javascript\">import Module from &#39;./module/module&#39;\r\nlet module = new Module();\r\nmodule.say();\r\n</code></pre>\r\n<p>新增 babel 配置文件 .babelrc</p>\r\n<pre><code class=\"lang-json\">{\r\n    &quot;presets&quot;: [\r\n        &quot;es2015&quot;\r\n    ]\r\n}\r\n</code></pre>\r\n<p>使用 babel 将 ES6 语法转化为 ES5 语法</p>\r\n<pre><code class=\"lang-shell\">babel src -d build\r\n</code></pre>\r\n<p>使用 browserify 将代码转化为浏览器可执行代码</p>\r\n<pre><code class=\"lang-shell\">browserify build\\app.js -o dist\\bundle,js\r\n</code></pre>\r\n<p>新建 HTML 文件并引入 bundle.js 文件，用浏览器打开该 HTML 文件</p>\r\n<p><img src=\"/upload/image/21f0bc60d6795c0ec51285384cd0fa826956.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4EE3u7801u4ED3u5E93\"><a name=\"代码仓库\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>代码仓库</h2><p><a href=\"https://github.com/365D1/javascript-modules.git\" title=\"https://github.com/365D1/javascript-modules.git\">https://github.com/365D1/javascript-modules.git</a></p>\r\n', '## 概述\r\n在 ES6 中，import、export 取代了 require、module.exports 用来引入和导出模块\r\n> ES6 模块输出的是值的引用，输出接口动态绑定，而 CommonJS 输出的是值的拷贝\r\n> ES6 模块编译时执行，而 CommonJS 模块总是在运行时加载\r\n\r\n## ES6 模块化应用\r\n由于浏览器不能完全支持 ES6 及以上语法，需要借助一个工具，将代码转化 ES5 语法，安装 Babel\r\n```shell\r\nnpm install -g babel-cli \r\n```\r\n安装 ES5 转化\r\n```shell\r\nnpm install --save-dev babel-preset-es2015\r\n```\r\n编写模块 module\r\n```javascript\r\nexport default class {\r\n\r\n    constructor() {\r\n        this.msg = \'hello world\';\r\n    }\r\n\r\n    say() {\r\n        console.log(this.msg);\r\n    }\r\n\r\n}\r\n```\r\n编辑 app.js\r\n```javascript\r\nimport Module from \'./module/module\'\r\nlet module = new Module();\r\nmodule.say();\r\n```\r\n新增 babel 配置文件 .babelrc\r\n```json\r\n{\r\n    \"presets\": [\r\n        \"es2015\"\r\n    ]\r\n}\r\n```\r\n使用 babel 将 ES6 语法转化为 ES5 语法\r\n```shell\r\nbabel src -d build\r\n```\r\n使用 browserify 将代码转化为浏览器可执行代码\r\n```shell\r\nbrowserify build\\app.js -o dist\\bundle,js\r\n```\r\n新建 HTML 文件并引入 bundle.js 文件，用浏览器打开该 HTML 文件\r\n\r\n![](/upload/image/21f0bc60d6795c0ec51285384cd0fa826956.png)\r\n\r\n## 代码仓库\r\n[https://github.com/365D1/javascript-modules.git](https://github.com/365D1/javascript-modules.git \"https://github.com/365D1/javascript-modules.git\")', 0, 441, 0, '', NULL, '2020-05-17 17:35:35', 0),(136, 37, 1, '', 0, '', 1, 0, '零基础学运营 (二十八) | 用户激励', '/upload/image/6c3d8a46b8dc3a8633114f8899fbc8c46268.png', '用户运营里最重要的两端，一端是引入用户，一端是避免流失，中间最健壮的躯干就是激励留存。用户激励设计的初衷都是为了刺激用户的持续活跃与留存，甚至是付费', '<p>用户运营里最重要的两端，一端是引入用户，一端是避免流失，如果把这两端比作头和尾，中间最健壮的躯干就是激励留存。</p>\r\n<h2 id=\"h2-u5934u8854\"><a name=\"头衔\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>头衔</h2><p>头衔是一种简单、易用，同时几乎没有其他运营成本得策略，用来体现用户的贡献或活跃度。<br>通常头衔会采用<strong>渐进式</strong>的设计，并且可能有一个较长的成长周期，头衔代表了一种虚拟荣誉，外露给其他用户查看，从而彰显头衔拥有者独特的地位和价值。<br>大多数的头衔设置都遵循一些原则：名称渐进、易懂；与用户贡献或者活跃度挂钩；可能代表一定的权限，也可能没有任何额外的权限。</p>\r\n<h2 id=\"h2-u7B49u7EA7\"><a name=\"等级\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>等级</h2><p>等级系统与头衔其实是一脉相承的，都是着眼于用户的活跃度或者贡献。等级系统现在更多的被制作为<strong>成长值系统</strong>，用户通过系统认可的行为来积攒成长值，达到系统规定的额度，就会自动升级。同时，等级和头衔有差别，头衔获得后不会被取消，但等级可以根据用户行为的变化而发生相应的变化，可以提升也可以下降。<br>等级机制之所以能够激励用户，是因为不同的等级会有对应的增值服务设计。所以，等级通常和“特权”同时出现。在整个会员等级体系中，最核心的并不是会员等级本身，而是<strong>对应的权益</strong>，只有权益设计合理，用户才会对等级有所追求。</p>\r\n<h2 id=\"h2-u52CBu7AE0\"><a name=\"勋章\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>勋章</h2><p>与头衔、等级不同，勋章非渐进式，它对应的是单一事件。用户获取的勋章可能有稀缺性，而勋章是一种可以被所有人查看的信息，所以用户通常会为了获取勋章而做出对应的行为。<br>勋章对应的是某一个事件，希望激励用户参与，有些勋章还有收集之后换奖品的作用。可兑换的勋章，比单一展示目的的勋章，对用户更有激励价值。<br>勋章的设计原则需要遵循：造型美观；用户获取勋章有明确的指引；勋章可以展示给其它用户或者收集后兑换额外的收益。</p>\r\n<h2 id=\"h2-u6210u5C31\"><a name=\"成就\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>成就</h2><p>成就也是稀缺的，但稀缺性低于勋章，适用于有纪念性意义、有大规模效应的场合。<br>成就设计应当遵循的原则：循环渐进的获取逻辑；可以展示给其他用户的渠道；部分成就应当具备稀缺性，并具有普适性。</p>\r\n<h2 id=\"h2-u6392u540Du4E0Eu7ADEu4E89\"><a name=\"排名与竞争\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>排名与竞争</h2><p>排名与竞争策略，运用正反激励的手段，刺激用户使用产品。设计这类激励策略，需要注意：正面激励与负面激励兼顾；放大正面激励的快感，控制负面激励带来的挫败感；从负面激励转向正面激励的操作成本较低，可以鼓励用户进行转向。</p>\r\n<h2 id=\"h2-u79EFu5206\"><a name=\"积分\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>积分</h2><p>积分大多数通过鼓励用户做出系统认可的行为获取，获取的积分可以兑换礼品或与等级关联。使用积分体系需要注意：积分应当对用户有价值；如果积分能够兑换实物，需要确定积分的成本承担方。</p>\r\n<h2 id=\"h2-u6FC0u52B1u7B56u7565u7684u8BBEu8BA1\"><a name=\"激励策略的设计\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>激励策略的设计</h2><p>用户激励还有很多其他措施，设计的初衷都是为了刺激用户的持续活跃与留存，甚至是付费。设计激励制度，需要考虑几个层面的内容：</p>\r\n<h4 id=\"h4-u4EA7u54C1u7279u70B9\"><a name=\"产品特点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>产品特点</h4><p>你的产品有什么特点，什么功能与哪些KPI相关联。</p>\r\n<h4 id=\"h4-u8FD0u8425u76EEu6807\"><a name=\"运营目标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运营目标</h4><p>用户的哪些行为应当被鼓励，哪些行为应当被遏制，激励手段分正、反向，奖惩有度才能更好激励用户。</p>\r\n<h4 id=\"h4-u5BA2u6237u7FA4u4F53u7684u7279u5F81\"><a name=\"客户群体的特征\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>客户群体的特征</h4><p>用户群体有哪些特征，能否顺势而为。</p>\r\n<h4 id=\"h4-u6210u672Cu7ED3u6784\"><a name=\"成本结构\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>成本结构</h4><p>一套激励机制是否需要付出成本，成本总计多少，分摊给单个用户是多少，这些都需要测算。</p>\r\n', '用户运营里最重要的两端，一端是引入用户，一端是避免流失，如果把这两端比作头和尾，中间最健壮的躯干就是激励留存。\r\n## 头衔\r\n头衔是一种简单、易用，同时几乎没有其他运营成本得策略，用来体现用户的贡献或活跃度。\r\n通常头衔会采用**渐进式**的设计，并且可能有一个较长的成长周期，头衔代表了一种虚拟荣誉，外露给其他用户查看，从而彰显头衔拥有者独特的地位和价值。\r\n大多数的头衔设置都遵循一些原则：名称渐进、易懂；与用户贡献或者活跃度挂钩；可能代表一定的权限，也可能没有任何额外的权限。\r\n## 等级\r\n等级系统与头衔其实是一脉相承的，都是着眼于用户的活跃度或者贡献。等级系统现在更多的被制作为**成长值系统**，用户通过系统认可的行为来积攒成长值，达到系统规定的额度，就会自动升级。同时，等级和头衔有差别，头衔获得后不会被取消，但等级可以根据用户行为的变化而发生相应的变化，可以提升也可以下降。\r\n等级机制之所以能够激励用户，是因为不同的等级会有对应的增值服务设计。所以，等级通常和“特权”同时出现。在整个会员等级体系中，最核心的并不是会员等级本身，而是**对应的权益**，只有权益设计合理，用户才会对等级有所追求。\r\n## 勋章\r\n与头衔、等级不同，勋章非渐进式，它对应的是单一事件。用户获取的勋章可能有稀缺性，而勋章是一种可以被所有人查看的信息，所以用户通常会为了获取勋章而做出对应的行为。\r\n勋章对应的是某一个事件，希望激励用户参与，有些勋章还有收集之后换奖品的作用。可兑换的勋章，比单一展示目的的勋章，对用户更有激励价值。\r\n勋章的设计原则需要遵循：造型美观；用户获取勋章有明确的指引；勋章可以展示给其它用户或者收集后兑换额外的收益。\r\n## 成就\r\n成就也是稀缺的，但稀缺性低于勋章，适用于有纪念性意义、有大规模效应的场合。\r\n成就设计应当遵循的原则：循环渐进的获取逻辑；可以展示给其他用户的渠道；部分成就应当具备稀缺性，并具有普适性。\r\n## 排名与竞争\r\n排名与竞争策略，运用正反激励的手段，刺激用户使用产品。设计这类激励策略，需要注意：正面激励与负面激励兼顾；放大正面激励的快感，控制负面激励带来的挫败感；从负面激励转向正面激励的操作成本较低，可以鼓励用户进行转向。\r\n## 积分\r\n积分大多数通过鼓励用户做出系统认可的行为获取，获取的积分可以兑换礼品或与等级关联。使用积分体系需要注意：积分应当对用户有价值；如果积分能够兑换实物，需要确定积分的成本承担方。\r\n## 激励策略的设计\r\n用户激励还有很多其他措施，设计的初衷都是为了刺激用户的持续活跃与留存，甚至是付费。设计激励制度，需要考虑几个层面的内容：\r\n#### 产品特点\r\n你的产品有什么特点，什么功能与哪些KPI相关联。\r\n#### 运营目标\r\n用户的哪些行为应当被鼓励，哪些行为应当被遏制，激励手段分正、反向，奖惩有度才能更好激励用户。\r\n#### 客户群体的特征\r\n用户群体有哪些特征，能否顺势而为。\r\n#### 成本结构\r\n一套激励机制是否需要付出成本，成本总计多少，分摊给单个用户是多少，这些都需要测算。', 0, 336, 0, '', NULL, '2020-05-23 23:18:58', 0),(137, 37, 1, '', 0, '', 1, 0, '零基础学运营 (二十九) | 分级管理，用户运营的必备手段', '/upload/image/34006495326319b3dc38b3e5418248722510.png', '消费频率高说明用户的满意度高，原意重复够买，更有价值；消费金额高则说明用户本身的价值高', '<p>传统商业的用户管理的做法种，最简单最广泛应用的就是建立RFM模型，RFM模型是一种工具和手段。R是Recency，最近一次消费；F是Frequency，消费频率；M是Monetary，消费金额。<br><img src=\"/upload/image/36a9a226647089a47993061142d8be961891.png\" alt=\"\"><br>在整个RFM模型中，最近一次消费的时间越近越好，因为这类用户更敏感，基于这类用户进行的运营和营销产生的效果会更好；而在限定时间内的消费频率越高越好，消费金额越高越好，原因是，<strong>消费频率</strong>高说明用户的满意度高，原意重复够买，更有价值；<strong>消费金额</strong>高则说明用户本身的价值高。</p>\r\n<h2 id=\"h2-u6848u4F8B\"><a name=\"案例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>案例</h2><p>对R进行分级<br><img src=\"/upload/image/9a7c8a0ed3d200a637daa596a701e0723718.png\" alt=\"\"><br>对F进行分级<br><img src=\"/upload/image/11a46f1461ce8de0242b7c028c90f6d83353.png\" alt=\"\"><br>对M进行分级<br><img src=\"/upload/image/004885d9bf29c41859a4cb85b6d9b3d55632.png\" alt=\"\"></p>\r\n', '传统商业的用户管理的做法种，最简单最广泛应用的就是建立RFM模型，RFM模型是一种工具和手段。R是Recency，最近一次消费；F是Frequency，消费频率；M是Monetary，消费金额。\r\n![](/upload/image/36a9a226647089a47993061142d8be961891.png)\r\n在整个RFM模型中，最近一次消费的时间越近越好，因为这类用户更敏感，基于这类用户进行的运营和营销产生的效果会更好；而在限定时间内的消费频率越高越好，消费金额越高越好，原因是，**消费频率**高说明用户的满意度高，原意重复够买，更有价值；**消费金额**高则说明用户本身的价值高。\r\n## 案例\r\n对R进行分级\r\n![](/upload/image/9a7c8a0ed3d200a637daa596a701e0723718.png)\r\n对F进行分级\r\n![](/upload/image/11a46f1461ce8de0242b7c028c90f6d83353.png)\r\n对M进行分级\r\n![](/upload/image/004885d9bf29c41859a4cb85b6d9b3d55632.png)', 0, 364, 0, '', NULL, '2020-06-01 23:10:15', 0),(138, 39, 1, '', 0, '', 1, 0, '摄影入门 (十六) | 认识光', '/upload/image/797fd8fe3ddad72c4a1020e79e1cd6d25752.png', '认识光线进而利用光线，光与影的关系来构成影像和影调，是摄影创作中一个重要环节，它直接影响到摄影作品的画面效果，影响到作品的感染力', '<h2 id=\"h2-u5149u7684u6982u5FF5\"><a name=\"光的概念\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光的概念</h2><p>在摄影中，光线是形成画面的根本，是构图、造型的重要手段。光线不同，产生的艺术效果就不同，给人的感觉也就不同。摄影其实是对光线的处理和把握，是一个正确选择和表现光线，生动、准确的表达主题思想的过程。<br><img src=\"/upload/image/dc42390925f7381783259695d566fba21869.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5149u7684u4F5Cu7528\"><a name=\"光的作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光的作用</h2><p>通过对光的选择、调度、控制，逼真的再现被摄对象的形状、颜色、质感和空间位置。运用特定的光线，还可以有选择的突出或者抑制被摄对象的某些内容的表现，以实现作者的创意。同时，光线的运用对于作品主题的表达、环境氛围的渲染，以及思想感情的传递起着重要作用。<br>因此，认识光线进而利用光线，光与影的关系来构成影像和影调，是摄影创作中一个重要环节，它直接影响到摄影作品的画面效果，影响到作品的感染力。</p>\r\n<p><img src=\"/upload/image/005b4d483758c420073d6176964e9e9b4253.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5149u5728u6444u5F71u4F5Cu54C1u4E2Du7684u4F5Cu7528\"><a name=\"光在摄影作品中的作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光在摄影作品中的作用</h2><blockquote>\r\n<p>表现形状、色彩、质感<br>表现立体感与空间感<br>营造气氛<br>特殊的光影效果</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/494e35beaf16385da19079ab730629357913.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5149u7684u5206u7C7B\"><a name=\"光的分类\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>光的分类</h2><p>光线可以分为自然光与人造光两大类。以自然光为例，可分为直射光，散射光，反射光。</p>\r\n<p><img src=\"/upload/image/c2fab8a93465412cf1e15ec3a8c8bc7f7036.png\" alt=\"\"></p>\r\n<p>通常来说摄影外拍时，上午9点到10点左右时段，下午3点到5点左右的光线亮度与角度较为适应，有利展示景物的质感与细节，而且照射的角度能更好的表现出景物的立体感与纵深感。</p>\r\n<h2 id=\"h2-u6563u5C04u5149\"><a name=\"散射光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>散射光</h2><p>散射光的光质柔和，光比小，而且投影浅，阴影少，层次丰富。<br>天空光：天空光主要是指太阳光在大气层中经过多次反射，形成柔和漫散射光。<br>薄云遮日：当太阳被薄薄的云雾遮挡时，便失去了直射光的性质，但仍有一定的方向性。<br>乌云密布：浓云密布的阴天、雨天或雪天，太阳光被厚厚的云雾遮挡，形成阴沉的漫射光，完全失去了方向性，光线分部均匀。</p>\r\n<h2 id=\"h2-u5BA4u5185u5916u81EAu7136u5149u7684u533Au522B\"><a name=\"室内外自然光的区别\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>室内外自然光的区别</h2><p>内室自然光与室外自然光有着明显的区别，它看起来像散射光，但有明显的方向性。</p>\r\n<blockquote>\r\n<p>受室外自然光的影响，室外自然光越强，室内越明亮，反之越暗。<br>受室外景物的影响，如果室外有高大的建筑物或者植物等遮挡了门窗，射入室内的光线就少，室内就阴暗，反之则明亮。<br>受门窗的影响，门窗越大，越多，射入室内的自然光就越多，室内就越明亮，反之，则越阴暗。<br>受被摄主体距离门窗远近影响，若被摄主体距离门窗近，则主体受光越多，显得明亮，阴暗反差大，反之则反差小。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u4EBAu5DE5u5149\"><a name=\"人工光\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>人工光</h2><p>人工光是摄影常用的光源，其光照强度、照明方向、照片高度和光线色温等都可以由摄影者调控。可以供摄影照明的人工光源有很多，除电子闪光灯以外，常用的还有聚光灯、漫散射灯、照相强光灯、适应碘钨灯、荧光灯、白炽灯以及火光、烛光等。<br>人工光可以弥补自然光源的不足，有些场合甚至完全使用人工光进行拍摄。</p>\r\n', '## 光的概念\r\n在摄影中，光线是形成画面的根本，是构图、造型的重要手段。光线不同，产生的艺术效果就不同，给人的感觉也就不同。摄影其实是对光线的处理和把握，是一个正确选择和表现光线，生动、准确的表达主题思想的过程。\r\n![](/upload/image/dc42390925f7381783259695d566fba21869.png)\r\n## 光的作用\r\n通过对光的选择、调度、控制，逼真的再现被摄对象的形状、颜色、质感和空间位置。运用特定的光线，还可以有选择的突出或者抑制被摄对象的某些内容的表现，以实现作者的创意。同时，光线的运用对于作品主题的表达、环境氛围的渲染，以及思想感情的传递起着重要作用。\r\n因此，认识光线进而利用光线，光与影的关系来构成影像和影调，是摄影创作中一个重要环节，它直接影响到摄影作品的画面效果，影响到作品的感染力。\r\n\r\n![](/upload/image/005b4d483758c420073d6176964e9e9b4253.png)\r\n## 光在摄影作品中的作用\r\n> 表现形状、色彩、质感\r\n> 表现立体感与空间感\r\n> 营造气氛\r\n> 特殊的光影效果\r\n\r\n![](/upload/image/494e35beaf16385da19079ab730629357913.png)\r\n## 光的分类\r\n光线可以分为自然光与人造光两大类。以自然光为例，可分为直射光，散射光，反射光。\r\n\r\n![](/upload/image/c2fab8a93465412cf1e15ec3a8c8bc7f7036.png)\r\n\r\n通常来说摄影外拍时，上午9点到10点左右时段，下午3点到5点左右的光线亮度与角度较为适应，有利展示景物的质感与细节，而且照射的角度能更好的表现出景物的立体感与纵深感。\r\n\r\n## 散射光\r\n散射光的光质柔和，光比小，而且投影浅，阴影少，层次丰富。\r\n天空光：天空光主要是指太阳光在大气层中经过多次反射，形成柔和漫散射光。\r\n薄云遮日：当太阳被薄薄的云雾遮挡时，便失去了直射光的性质，但仍有一定的方向性。\r\n乌云密布：浓云密布的阴天、雨天或雪天，太阳光被厚厚的云雾遮挡，形成阴沉的漫射光，完全失去了方向性，光线分部均匀。\r\n## 室内外自然光的区别\r\n内室自然光与室外自然光有着明显的区别，它看起来像散射光，但有明显的方向性。\r\n> 受室外自然光的影响，室外自然光越强，室内越明亮，反之越暗。\r\n> 受室外景物的影响，如果室外有高大的建筑物或者植物等遮挡了门窗，射入室内的光线就少，室内就阴暗，反之则明亮。\r\n> 受门窗的影响，门窗越大，越多，射入室内的自然光就越多，室内就越明亮，反之，则越阴暗。\r\n> 受被摄主体距离门窗远近影响，若被摄主体距离门窗近，则主体受光越多，显得明亮，阴暗反差大，反之则反差小。\r\n\r\n## 人工光\r\n人工光是摄影常用的光源，其光照强度、照明方向、照片高度和光线色温等都可以由摄影者调控。可以供摄影照明的人工光源有很多，除电子闪光灯以外，常用的还有聚光灯、漫散射灯、照相强光灯、适应碘钨灯、荧光灯、白炽灯以及火光、烛光等。\r\n人工光可以弥补自然光源的不足，有些场合甚至完全使用人工光进行拍摄。', 0, 419, 1, '', NULL, '2020-06-01 23:47:53', 0),(139, 39, 1, '', 0, '', 1, 0, '摄影入门 (十六) | 摄影用光和造型', '', '', '<p>11</p>\r\n', '11', 0, 0, 0, '', NULL, '2020-06-03 23:53:46', 1),(140, 14, 1, '', 0, '', 1, 0, 'spring boot 缓存 | 默认缓存', '/upload/image/59c6efe6122af52363837c25652ac0bc7189.png', 'spring boot 默认使用 ConcurrentMapCache 作为缓存，其实是一个map，项目重启缓存会随之失效', '<h2 id=\"h2-jsr107-\"><a name=\"JSR107规范\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>JSR107规范</h2><p>JSR107规范定义了一组接口：</p>\r\n<blockquote>\r\n<p>CachingProvider：定义了创建、配置、获取、管理和控制多个CacheManager。一个应用可以在运行期访问多个CacheManager。</p>\r\n<p>CacheManager：定义了创建、配置、获取、管理和控制多个唯一命名的Cache，这些Cache存在于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。</p>\r\n<p>Cache：临时存储以Key为索引的值。</p>\r\n<p>Entry：存储在Cache中的Key-value对。</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/35d4133cd8d217283fe4855b2ef5d98e9424.png\" alt=\"\"></p>\r\n<h2 id=\"h2-spring-boot-\"><a name=\"spring boot 缓存注解\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>spring boot 缓存注解</h2><p>spring boot 定义了一组注解用于在开发中快速实现缓存功能。</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>注解</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>Cache</td>\r\n<td>缓存接口，定义缓存操作。实现有 RedisCache、EhCacheCache、ConcurrentMapCache 等</td>\r\n</tr>\r\n<tr>\r\n<td>CacheManager</td>\r\n<td>缓存管理器，管理各种缓存（Cache）组件</td>\r\n</tr>\r\n<tr>\r\n<td><a href=\"https://github.com/Cacheable\" title=\"&#64;Cacheable\" class=\"at-link\">@Cacheable</a></td>\r\n<td>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</td>\r\n</tr>\r\n<tr>\r\n<td><a href=\"https://github.com/CacheEvict\" title=\"&#64;CacheEvict\" class=\"at-link\">@CacheEvict</a></td>\r\n<td>清空缓存</td>\r\n</tr>\r\n<tr>\r\n<td><a href=\"https://github.com/CachePut\" title=\"&#64;CachePut\" class=\"at-link\">@CachePut</a></td>\r\n<td>保证方法被调用，又希望被缓存</td>\r\n</tr>\r\n<tr>\r\n<td><a href=\"https://github.com/EnableCaching\" title=\"&#64;EnableCaching\" class=\"at-link\">@EnableCaching</a></td>\r\n<td>开启基于注解的缓存</td>\r\n</tr>\r\n<tr>\r\n<td>keyGenerator</td>\r\n<td>缓存数据时 key 生成策略</td>\r\n</tr>\r\n<tr>\r\n<td>serialize</td>\r\n<td>缓存数据时 value 序列化策略</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"h2--spel-\"><a name=\"缓存注解的 SpEL 表达式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>缓存注解的 SpEL 表达式</h2><table>\r\n<thead>\r\n<tr>\r\n<th>名字</th>\r\n<th>位置</th>\r\n<th>描述</th>\r\n<th>示例</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>methodName</td>\r\n<td>root object</td>\r\n<td>当前被调用的方法名</td>\r\n<td>#root.methodName</td>\r\n</tr>\r\n<tr>\r\n<td>method</td>\r\n<td>root object</td>\r\n<td>当前被调用的方法</td>\r\n<td>#root.method.name</td>\r\n</tr>\r\n<tr>\r\n<td>target</td>\r\n<td>root object</td>\r\n<td>当前被调用的目标对象</td>\r\n<td>#root.target</td>\r\n</tr>\r\n<tr>\r\n<td>targetClass</td>\r\n<td>root object</td>\r\n<td>当前被调用的目标对象类</td>\r\n<td>#root.targetClass</td>\r\n</tr>\r\n<tr>\r\n<td>args</td>\r\n<td>root object</td>\r\n<td>当前被调用的方法的参数列表</td>\r\n<td>#root.args[0]</td>\r\n</tr>\r\n<tr>\r\n<td>caches</td>\r\n<td>root object</td>\r\n<td>当前方法调用使用的缓存列表</td>\r\n<td>#root.caches[0].name</td>\r\n</tr>\r\n<tr>\r\n<td>argument name</td>\r\n<td>evaluation context</td>\r\n<td>方法参数的名称，可以直接 #参数名或者 #索引</td>\r\n<td>#id、#0</td>\r\n</tr>\r\n<tr>\r\n<td>result</td>\r\n<td>evaluation context</td>\r\n<td>方法执行后的返回值</td>\r\n<td>#result</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"h2-u793Au4F8B\"><a name=\"示例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>示例</h2><p>搭建好 spring boot web 项目，在启动类加上注解开启缓存</p>\r\n<pre><code class=\"lang-java\">@SpringBootApplication\r\n@EnableCaching\r\npublic class CacheApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(CacheApplication.class, args);\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<p>在 service 实现类中定义缓存名称，则该类的其它缓存方法将都使用该缓存名称</p>\r\n<pre><code class=\"lang-java\">@CacheConfig(cacheNames = &quot;user&quot;)\r\n@Service\r\npublic class UserServiceImpl implements UserService {\r\n}\r\n</code></pre>\r\n<p>查询结果缓存使用<code><a href=\"https://github.com/Cacheable\" title=\"&#64;Cacheable\" class=\"at-link\">@Cacheable</a></code>，定义 key 的规则和结果判断</p>\r\n<pre><code class=\"lang-java\">    @Cacheable(key = &quot;#id&quot;, unless = &quot;#result == null&quot;)\r\n    @Override\r\n    public User detail(Integer id) {\r\n        log.info(&quot;{}&quot;, &quot;执行查询&quot;);\r\n        return userDao.detail(id);\r\n    }\r\n</code></pre>\r\n<p>更新缓存使用<code><a href=\"https://github.com/CachePut\" title=\"&#64;CachePut\" class=\"at-link\">@CachePut</a></code>，定义要更新的 key ，<a href=\"https://github.com/CachePut\" title=\"&#64;CachePut\" class=\"at-link\">@CachePut</a>在方法后执行，所以被注解的方法一定会执行</p>\r\n<pre><code class=\"lang-java\">    @CachePut(key = &quot;#result.id&quot;)\r\n    @Override\r\n    public User update(User user) {\r\n        log.info(&quot;{}&quot;, &quot;执行更新&quot;);\r\n        userDao.update(user.getNickName(), user.getId());\r\n        return user;\r\n    }\r\n</code></pre>\r\n<p>删除缓存使用<code><a href=\"https://github.com/CacheEvict\" title=\"&#64;CacheEvict\" class=\"at-link\">@CacheEvict</a></code>，定义要删除的 key </p>\r\n<pre><code class=\"lang-java\">    @CacheEvict(key = &quot;#id&quot;)\r\n    @Override\r\n    public void delete(Integer id) {\r\n        log.info(&quot;{}&quot;, &quot;执行删除&quot;);\r\n        userDao.delete(id);\r\n    }\r\n</code></pre>\r\n<h2 id=\"h2-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>github</h2><p><a href=\"https://github.com/365D1/spring-boot-cache.git\" title=\"https://github.com/365D1/spring-boot-cache.git\">https://github.com/365D1/spring-boot-cache.git</a></p>\r\n', '## JSR107规范\r\nJSR107规范定义了一组接口：\r\n> CachingProvider：定义了创建、配置、获取、管理和控制多个CacheManager。一个应用可以在运行期访问多个CacheManager。\r\n\r\n> CacheManager：定义了创建、配置、获取、管理和控制多个唯一命名的Cache，这些Cache存在于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。\r\n\r\n> Cache：临时存储以Key为索引的值。\r\n\r\n> Entry：存储在Cache中的Key-value对。\r\n\r\n![](/upload/image/35d4133cd8d217283fe4855b2ef5d98e9424.png)\r\n\r\n## spring boot 缓存注解\r\nspring boot 定义了一组注解用于在开发中快速实现缓存功能。\r\n\r\n| 注解 | 说明 |\r\n| ------------ | ------------ |\r\n| Cache | 缓存接口，定义缓存操作。实现有 RedisCache、EhCacheCache、ConcurrentMapCache 等 |\r\n| CacheManager | 缓存管理器，管理各种缓存（Cache）组件 |\r\n| @Cacheable | 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存 |\r\n| @CacheEvict | 清空缓存 |\r\n| @CachePut | 保证方法被调用，又希望被缓存 |\r\n| @EnableCaching | 开启基于注解的缓存 |\r\n| keyGenerator | 缓存数据时 key 生成策略 |\r\n| serialize | 缓存数据时 value 序列化策略 |\r\n\r\n## 缓存注解的 SpEL 表达式\r\n| 名字 | 位置 | 描述 | 示例 |\r\n| ------------ | ------------ | ------------ | ------------ |\r\n| methodName | root object | 当前被调用的方法名 | #root.methodName |\r\n| method | root object | 当前被调用的方法 | #root.method.name |\r\n| target | root object | 当前被调用的目标对象 | #root.target |\r\n| targetClass | root object | 当前被调用的目标对象类 | #root.targetClass |\r\n| args | root object | 当前被调用的方法的参数列表 | #root.args[0] |\r\n| caches | root object | 当前方法调用使用的缓存列表 | #root.caches[0].name |\r\n| argument name | evaluation context | 方法参数的名称，可以直接 #参数名或者 #索引 | #id、#0 |\r\n| result | evaluation context | 方法执行后的返回值 | #result |\r\n\r\n## 示例\r\n搭建好 spring boot web 项目，在启动类加上注解开启缓存\r\n```java\r\n@SpringBootApplication\r\n@EnableCaching\r\npublic class CacheApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(CacheApplication.class, args);\r\n    }\r\n\r\n}\r\n```\r\n在 service 实现类中定义缓存名称，则该类的其它缓存方法将都使用该缓存名称\r\n```java\r\n@CacheConfig(cacheNames = \"user\")\r\n@Service\r\npublic class UserServiceImpl implements UserService {\r\n}\r\n```\r\n查询结果缓存使用`@Cacheable`，定义 key 的规则和结果判断\r\n```java\r\n	@Cacheable(key = \"#id\", unless = \"#result == null\")\r\n    @Override\r\n    public User detail(Integer id) {\r\n        log.info(\"{}\", \"执行查询\");\r\n        return userDao.detail(id);\r\n    }\r\n```\r\n更新缓存使用`@CachePut`，定义要更新的 key ，@CachePut在方法后执行，所以被注解的方法一定会执行\r\n```java\r\n    @CachePut(key = \"#result.id\")\r\n    @Override\r\n    public User update(User user) {\r\n        log.info(\"{}\", \"执行更新\");\r\n        userDao.update(user.getNickName(), user.getId());\r\n        return user;\r\n    }\r\n```\r\n删除缓存使用`@CacheEvict`，定义要删除的 key \r\n```java\r\n    @CacheEvict(key = \"#id\")\r\n    @Override\r\n    public void delete(Integer id) {\r\n        log.info(\"{}\", \"执行删除\");\r\n        userDao.delete(id);\r\n    }\r\n```\r\n## github\r\n[https://github.com/365D1/spring-boot-cache.git](https://github.com/365D1/spring-boot-cache.git \"https://github.com/365D1/spring-boot-cache.git\")', 0, 477, 0, '', NULL, '2020-06-07 16:10:33', 0),(141, 14, 1, '', 0, '', 1, 0, 'spring boot 缓存 | Redis 缓存', '/upload/image/01b101e00c8615f70ba227ef7370e9583916.png', '可以将一些常用数据、高频数据缓存到 redis 中，减少数据库查询，提高访问速度', '<h2 id=\"h2-u5F15u5165u4F9Du8D56\"><a name=\"引入依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>引入依赖</h2><pre><code class=\"lang-xml\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n</code></pre>\r\n<h2 id=\"h2--redis-\"><a name=\"配置 Redis 连接\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置 Redis 连接</h2><pre><code class=\"lang-yaml\">spring:\r\n  redis:\r\n    host: 192.168.1.254\r\n    port: 6379\r\n</code></pre>\r\n<h2 id=\"h2--redis-json\"><a name=\"配置 Redis 序列化使用 JSON\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置 Redis 序列化使用 JSON</h2><pre><code class=\"lang-java\">@EnableCaching\r\n@Configuration\r\npublic class RedisConfig extends CachingConfigurerSupport {\r\n\r\n    @Bean\r\n    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) {\r\n\r\n        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();\r\n\r\n        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();\r\n\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper om = new ObjectMapper();\r\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(om);\r\n\r\n        template.setConnectionFactory(factory);\r\n        // key 序列化方式\r\n        template.setKeySerializer(redisSerializer);\r\n        // value 序列化\r\n        template.setValueSerializer(jackson2JsonRedisSerializer);\r\n        // value hashmap 序列化\r\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\r\n\r\n        return template;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\r\n        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n\r\n        //解决查询缓存转换异常的问题\r\n        ObjectMapper om = new ObjectMapper();\r\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(om);\r\n\r\n        // 配置序列化（解决乱码的问题）,过期时间 1 小时\r\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\r\n                .entryTtl(Duration.ofHours(1))\r\n                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))\r\n                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))\r\n                .disableCachingNullValues();\r\n\r\n        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)\r\n                .cacheDefaults(config)\r\n                .build();\r\n        return cacheManager;\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<h2 id=\"h2-u67E5u8BE2u7F13u5B58\"><a name=\"查询缓存\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查询缓存</h2><pre><code class=\"lang-java\">    @Cacheable(key = &quot;#id&quot;, unless = &quot;#result == null&quot;)\r\n    @Override\r\n    public User query(Integer id) {\r\n        log.info(&quot;执行查询&quot;);\r\n        User user = new User();\r\n        user.setId(id);\r\n        user.setName(&quot;蔡徐坤&quot;);\r\n        return user;\r\n    }\r\n</code></pre>\r\n<p>查看 redis 数据</p>\r\n<p><img src=\"/upload/image/ac642f6b7b8678cc8aacad46101791f08778.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u4FEEu6539u7F13u5B58\"><a name=\"修改缓存\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>修改缓存</h2><pre><code class=\"lang-java\">    @CachePut(key = &quot;#user.id&quot;)\r\n    @Override\r\n    public User modify(User user) {\r\n        return user;\r\n    }\r\n</code></pre>\r\n<p>查看 redis 数据</p>\r\n<p><img src=\"/upload/image/e7d1ce2d8551e74a61e0b39d6958cbb35294.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u5220u9664u7F13u5B58\"><a name=\"删除缓存\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>删除缓存</h2><pre><code class=\"lang-java\">    @CacheEvict(key = &quot;#id&quot;)\r\n    @Override\r\n    public void remove(Integer id) {\r\n\r\n    }\r\n</code></pre>\r\n<p>查看 redis 数据</p>\r\n<p><img src=\"/upload/image/4fabb466e5e77670e85eec8aeb25bbcc9008.png\" alt=\"\"></p>\r\n<h2 id=\"h2-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>github</h2><p><a href=\"https://github.com/365D1/spring-boot-cache-redis.git\" title=\"https://github.com/365D1/spring-boot-cache-redis.git\">https://github.com/365D1/spring-boot-cache-redis.git</a></p>\r\n', '## 引入依赖\r\n```xml\r\n<dependency>\r\n	<groupId>org.springframework.boot</groupId>\r\n	<artifactId>spring-boot-starter-data-redis</artifactId>\r\n</dependency>\r\n```\r\n## 配置 Redis 连接\r\n```yaml\r\nspring:\r\n  redis:\r\n    host: 192.168.1.254\r\n    port: 6379\r\n```\r\n## 配置 Redis 序列化使用 JSON\r\n```java\r\n@EnableCaching\r\n@Configuration\r\npublic class RedisConfig extends CachingConfigurerSupport {\r\n\r\n    @Bean\r\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\r\n\r\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\r\n\r\n        RedisSerializer<String> redisSerializer = new StringRedisSerializer();\r\n\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper om = new ObjectMapper();\r\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(om);\r\n\r\n        template.setConnectionFactory(factory);\r\n        // key 序列化方式\r\n        template.setKeySerializer(redisSerializer);\r\n        // value 序列化\r\n        template.setValueSerializer(jackson2JsonRedisSerializer);\r\n        // value hashmap 序列化\r\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\r\n\r\n        return template;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\r\n        RedisSerializer<String> redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n\r\n        //解决查询缓存转换异常的问题\r\n        ObjectMapper om = new ObjectMapper();\r\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(om);\r\n\r\n        // 配置序列化（解决乱码的问题）,过期时间 1 小时\r\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\r\n                .entryTtl(Duration.ofHours(1))\r\n                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))\r\n                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))\r\n                .disableCachingNullValues();\r\n\r\n        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)\r\n                .cacheDefaults(config)\r\n                .build();\r\n        return cacheManager;\r\n    }\r\n	\r\n}\r\n```\r\n## 查询缓存\r\n```java\r\n	@Cacheable(key = \"#id\", unless = \"#result == null\")\r\n    @Override\r\n    public User query(Integer id) {\r\n        log.info(\"执行查询\");\r\n        User user = new User();\r\n        user.setId(id);\r\n        user.setName(\"蔡徐坤\");\r\n        return user;\r\n    }\r\n```\r\n查看 redis 数据\r\n\r\n![](/upload/image/ac642f6b7b8678cc8aacad46101791f08778.png)\r\n\r\n## 修改缓存\r\n```java\r\n    @CachePut(key = \"#user.id\")\r\n    @Override\r\n    public User modify(User user) {\r\n        return user;\r\n    }\r\n```\r\n查看 redis 数据\r\n\r\n![](/upload/image/e7d1ce2d8551e74a61e0b39d6958cbb35294.png)\r\n\r\n## 删除缓存\r\n```java\r\n    @CacheEvict(key = \"#id\")\r\n    @Override\r\n    public void remove(Integer id) {\r\n\r\n    }\r\n```\r\n查看 redis 数据\r\n\r\n![](/upload/image/4fabb466e5e77670e85eec8aeb25bbcc9008.png)\r\n\r\n## github\r\n[https://github.com/365D1/spring-boot-cache-redis.git](https://github.com/365D1/spring-boot-cache-redis.git \"https://github.com/365D1/spring-boot-cache-redis.git\")', 0, 567, 0, '', NULL, '2020-06-08 21:55:47', 0),(142, 44, 1, '', 0, '', 1, 0, '游戏辅助 (一) | FPS游戏查找人物坐标', '/upload/image/7adb3b84d3e844bb3e01752aa3e044f04763.png', '使用一款经典FPS游戏，学习游戏分析的过程，边看教程边做，很多地方也不是很理解，慢慢学习吧~', '<p>在FPS游戏中，每个人物都有在3D世界中的坐标，称为世界坐标，这些坐标一般都是以浮点数存储的，所以不断改变这些数值，再进行内存扫描就可以找到，可以通过不断改变 z 轴的数值来获取 z 轴的数据，而游戏的坐标一般是连续存放的，z 轴附近的数据就是 x y 轴的。</p>\r\n<h2 id=\"h2-u672Cu4EBAu5750u6807\"><a name=\"本人坐标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>本人坐标</h2><p>如下图所示，先找到一个有高度差距的地方。</p>\r\n<p><img src=\"/upload/image/61195d9fc6527802bd950f955356d64a3271.png\" alt=\"\"></p>\r\n<p>以<code>单浮点</code>和<code>未知的初始值</code>搜索一次游戏进程数据。</p>\r\n<p><img src=\"/upload/image/0fc868f16205819a6716f984b3073c005809.png\" alt=\"\"></p>\r\n<p>搜索得出的数据会非常多，然后改变游戏里人物所处位置的高度，使得所在位置高度变大。</p>\r\n<p><img src=\"/upload/image/c6555918b47d63c96dac4b275c7db9e83363.png\" alt=\"\"></p>\r\n<p>再次扫描<code>增加的数值</code>。</p>\r\n<p><img src=\"/upload/image/e446a970d61b6057f58a28c202d81ffd2093.png\" alt=\"\"></p>\r\n<p>搜索得出的数据依然很多，继续改变游戏里人物所处位置的高度，所得所在位置高度变小。</p>\r\n<p><img src=\"/upload/image/5e5735ad6e8f38f7138252d161d105a07914.png\" alt=\"\"></p>\r\n<p>再次扫描<code>减少的数值</code>。</p>\r\n<p><img src=\"/upload/image/5b5b81859c328140d258a3990701441f3163.png\" alt=\"\"></p>\r\n<p>依次重复上述步骤，直到搜索到的数据比较少，或者怎么改变数据搜索出来的数据都不再变少了。</p>\r\n<h2 id=\"h2-u67E5u627Eu57FAu5740\"><a name=\"查找基址\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查找基址</h2><p>经过不断的搜索，得到的数据已经在200多条且不会继续下降了，将这些数据添加到地址列表。</p>\r\n<p><img src=\"/upload/image/93a56214891015e21f0afcfbae3ab5a09337.png\" alt=\"\"></p>\r\n<p>先选中一些数据锁定，地址列表上越靠下的数据，越可能是正确的地址，看看游戏人物是否还可以改变高度(跳一下就知道了)。</p>\r\n<p><img src=\"/upload/image/889e5a927b0e6057b9a08926531dbc0f1109.png\" alt=\"\"></p>\r\n<p>锁定了这些数据，还能跳，说明人物坐标不在这些地址里，右键删除记录。继续锁定其他地址数据，直到发现不能跳了。经过筛选，最终得出一个地址锁定了会影响人物的高度变化。但这个地址不是基址(CE里为绿色的地址)，对该地址右键<code>找出是什么改写了该地址</code>。</p>\r\n<p><img src=\"/upload/image/8d4b00a1e109281d11f7fa3d1cac7f875486.png\" alt=\"\"></p>\r\n<p>在弹出的附加进程窗口中显示一条汇编指令</p>\r\n<p><img src=\"/upload/image/b0757f74749b34baf85c986d9928679e8148.png\" alt=\"\"></p>\r\n<p>汇编 fstp 指令是将寄存器 esi 加上 288 的偏移这个地址的数据出栈，双击该指令查看。</p>\r\n<p><img src=\"/upload/image/5ab9d6c4e38de50fb74a728d4de196f44840.png\" alt=\"\"></p>\r\n<p>寄存器 ESI=33EB3160，搜索一下 33EB3160 看看是哪个地址存放了这个值。</p>\r\n<p><img src=\"/upload/image/d190c29bcab233f87bbb02e034bb71e16872.png\" alt=\"\"></p>\r\n<p>搜索出现一些绿色的地址，显示为模块+偏移的格式。</p>\r\n<p><img src=\"/upload/image/39ea7d8f7fd8c796fbab0ea6befda46e1748.png\" alt=\"\"></p>\r\n<p>验证是否为正确的基址，双击该地址加入到地址列表，在地址列表双击该地址，添加上面找到的偏移值。</p>\r\n<p><img src=\"/upload/image/63b8a6f309e79544b44f695c838eca464674.png\" alt=\"\"></p>\r\n<p>重启游戏，重新附加进程，刚才找到的基址指向的数值依旧正确，确定该地址为正确的基址。</p>\r\n<p><img src=\"/upload/image/3815ab6e795517f8e04bf6a73bf81da33031.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u67E5u627Eu5176u4ED6u5750u6807\"><a name=\"查找其他坐标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查找其他坐标</h2><p>依照上述方法找到坐标 y 发现坐标 y 的偏移为 284 ，推理出 坐标 x 的坐标应该为偏移 280，至此，人物的 xyz 坐标地址已经得出。</p>\r\n<p><img src=\"/upload/image/7417f00d13b772dfa8dc48dae60f29005385.png\" alt=\"\"></p>\r\n', '在FPS游戏中，每个人物都有在3D世界中的坐标，称为世界坐标，这些坐标一般都是以浮点数存储的，所以不断改变这些数值，再进行内存扫描就可以找到，可以通过不断改变 z 轴的数值来获取 z 轴的数据，而游戏的坐标一般是连续存放的，z 轴附近的数据就是 x y 轴的。\r\n## 本人坐标\r\n如下图所示，先找到一个有高度差距的地方。\r\n\r\n![](/upload/image/61195d9fc6527802bd950f955356d64a3271.png)\r\n\r\n以`单浮点`和`未知的初始值`搜索一次游戏进程数据。\r\n\r\n![](/upload/image/0fc868f16205819a6716f984b3073c005809.png)\r\n\r\n搜索得出的数据会非常多，然后改变游戏里人物所处位置的高度，使得所在位置高度变大。\r\n\r\n![](/upload/image/c6555918b47d63c96dac4b275c7db9e83363.png)\r\n\r\n再次扫描`增加的数值`。\r\n\r\n![](/upload/image/e446a970d61b6057f58a28c202d81ffd2093.png)\r\n\r\n搜索得出的数据依然很多，继续改变游戏里人物所处位置的高度，所得所在位置高度变小。\r\n\r\n![](/upload/image/5e5735ad6e8f38f7138252d161d105a07914.png)\r\n\r\n再次扫描`减少的数值`。\r\n\r\n![](/upload/image/5b5b81859c328140d258a3990701441f3163.png)\r\n\r\n依次重复上述步骤，直到搜索到的数据比较少，或者怎么改变数据搜索出来的数据都不再变少了。\r\n\r\n## 查找基址\r\n经过不断的搜索，得到的数据已经在200多条且不会继续下降了，将这些数据添加到地址列表。\r\n\r\n![](/upload/image/93a56214891015e21f0afcfbae3ab5a09337.png)\r\n\r\n先选中一些数据锁定，地址列表上越靠下的数据，越可能是正确的地址，看看游戏人物是否还可以改变高度(跳一下就知道了)。\r\n\r\n![](/upload/image/889e5a927b0e6057b9a08926531dbc0f1109.png)\r\n\r\n锁定了这些数据，还能跳，说明人物坐标不在这些地址里，右键删除记录。继续锁定其他地址数据，直到发现不能跳了。经过筛选，最终得出一个地址锁定了会影响人物的高度变化。但这个地址不是基址(CE里为绿色的地址)，对该地址右键`找出是什么改写了该地址`。\r\n\r\n![](/upload/image/8d4b00a1e109281d11f7fa3d1cac7f875486.png)\r\n\r\n在弹出的附加进程窗口中显示一条汇编指令\r\n\r\n![](/upload/image/b0757f74749b34baf85c986d9928679e8148.png)\r\n\r\n汇编 fstp 指令是将寄存器 esi 加上 288 的偏移这个地址的数据出栈，双击该指令查看。\r\n\r\n![](/upload/image/5ab9d6c4e38de50fb74a728d4de196f44840.png)\r\n\r\n寄存器 ESI=33EB3160，搜索一下 33EB3160 看看是哪个地址存放了这个值。\r\n\r\n![](/upload/image/d190c29bcab233f87bbb02e034bb71e16872.png)\r\n\r\n搜索出现一些绿色的地址，显示为模块+偏移的格式。\r\n\r\n![](/upload/image/39ea7d8f7fd8c796fbab0ea6befda46e1748.png)\r\n\r\n验证是否为正确的基址，双击该地址加入到地址列表，在地址列表双击该地址，添加上面找到的偏移值。\r\n\r\n![](/upload/image/63b8a6f309e79544b44f695c838eca464674.png)\r\n\r\n重启游戏，重新附加进程，刚才找到的基址指向的数值依旧正确，确定该地址为正确的基址。\r\n\r\n![](/upload/image/3815ab6e795517f8e04bf6a73bf81da33031.png)\r\n\r\n## 查找其他坐标\r\n依照上述方法找到坐标 y 发现坐标 y 的偏移为 284 ，推理出 坐标 x 的坐标应该为偏移 280，至此，人物的 xyz 坐标地址已经得出。\r\n\r\n![](/upload/image/7417f00d13b772dfa8dc48dae60f29005385.png)\r\n', 0, 910, 9, '', NULL, '2020-07-28 22:49:05', 0),(143, 44, 1, '', 0, '', 1, 0, '游戏辅助 (二) | FPS游戏查找敌人坐标', '/upload/image/cba1e0587fa3e1e99028465ba215c3a51350.png', '通过一款经典的FPS游戏，分析学习游戏开发的原理，游戏辅助的原理，以及游戏数据是如何存储的，边学边思考', '<p>在游戏的编程设计中，一般都会使用列表或者数组来存放整个地图或者房间的游戏人物，那么，思路就是通过查找下一个游戏人物的地址，用来对比当前角色的地址，得到偏移多少数据，然后就可以通过不断的累加或递减该偏移得出所有人物的地址了。</p>\r\n<h2 id=\"h2-u654Cu4EBAu5750u6807\"><a name=\"敌人坐标\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>敌人坐标</h2><p>找敌人的基址，也是从敌人的坐标开始找，已知本人坐标，靠近敌人，那么敌人的坐标也应该在自己的坐标附近。</p>\r\n<p><img src=\"/upload/image/bac6420ab94dc5d8b54c8dd341e5f33a2019.png\" alt=\"\"></p>\r\n<p>可以通过搜索类似区间的值，快速确认敌人的坐标。</p>\r\n<p><img src=\"/upload/image/b8971d3b6f92bbde7108af29e9ba89998926.png\" alt=\"\"></p>\r\n<p>当敌人移动的时候，Z 轴数据发生变化了，再次搜索减少或者增加的数值，重复步骤直到数量比较少的时候。</p>\r\n<p><img src=\"/upload/image/8fa885d750e1bc1bbbe65021b19f186b4463.png\" alt=\"\"></p>\r\n<p>敌人已经移动到比原来低的位置了，此时再次搜索减少的数值。</p>\r\n<p><img src=\"/upload/image/96c9b8abdbbb58609333d0875125b7b84063.png\" alt=\"\"></p>\r\n<p>敌人再次移动，Z 轴数据发生变化了。</p>\r\n<p><img src=\"/upload/image/fdb09190ac208b86f3f421ad473b5d968050.png\" alt=\"\"></p>\r\n<p>位置比原来的高，此时再次搜索增加的数值。</p>\r\n<h2 id=\"h2-u5206u6790u6570u636E\"><a name=\"分析数据\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>分析数据</h2><p>重复搜索到比较少的数据后，分析一下哪些数据可能是敌人的坐标 Z 轴，将搜索到的地址加入到地址列表里，先锁定一部分地址的数值，观察敌人是否还可以改变高度位置，如果还可以，则不是这些地址决定敌人位置的 Z 轴，删除掉后继续锁定其余地址。</p>\r\n<p><img src=\"/upload/image/a580a8d88cc5f97ea5efaef5e35103495227.png\" alt=\"\"></p>\r\n<p>逐渐排除非正确的地址后，发现有一些数据锁定后，敌人无法改变高度位置了，例如人物进入地图里，或者腾空行走，就是锁定到影响 Z 轴的地址了。</p>\r\n<p><img src=\"/upload/image/19f1acf05ad576ed4a86d8bd6817cb397274.png\" alt=\"\"></p>\r\n<p>重复锁定排除，最终确定该地址的数值决定敌人的 Z 轴位置。</p>\r\n<p><img src=\"/upload/image/5f200ceb4a0ebeb87cc598973c08125c3260.png\" alt=\"\"></p>\r\n<p>这个地址并不是基址(CE 里面绿色的)，右键找出是什么访问了该地址。优先查看 mov 指令的代码，这里的偏移 288 和游戏里本人坐标的偏移一样。</p>\r\n<p><img src=\"/upload/image/588c5ae5c9f7752688e8ec55ce6685c67740.png\" alt=\"\"></p>\r\n<p>搜索指针的数值 2BD83270 得出一堆地址，其中就有一个绿色的基址，和本人坐标几乎一样，只有一点点差别。</p>\r\n<p><img src=\"/upload/image/c3f41cc6c4a7bef9fd6c1f40e29c00852249.png\" alt=\"\"></p>\r\n<p>将这个地址添加到地址列表，加上指针偏移。</p>\r\n<p><img src=\"/upload/image/7381f9870f7d19005aaa1cd6637093b73019.png\" alt=\"\"></p>\r\n<p>游戏里面反复跟随敌人跑动，验证数据确实是敌人正确的 Z 轴坐标。</p>\r\n<p><img src=\"/upload/image/d3d17107b1cefc00d7175ad2a0e6d1814440.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u63A8u65ADu6570u636E\"><a name=\"推断数据\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>推断数据</h2><p>本人的 Y Z 轴的数据分别是偏移减十六进制的 4 ，那么敌人的应该也是一样，因为写代码的时候人物对象的数据结构是一样的。</p>\r\n<p><img src=\"/upload/image/4321ab760bd2c0d9b94994b5b139c67c5595.png\" alt=\"\"></p>\r\n<p>再继续推断人物列表数据中，每一个人物对象的地址差是多少，本人的基址是 server.dll+4F2FEC 而敌人的基址是 server.dll+4F2FFC，两个偏移之间相差的是一个十六进制的 10 。因此，再下一个人物的地址偏移就应该是 server.dll+4F300C 了，十六进制运算 4F2FFC + 10 = 4F300C。</p>\r\n<p><img src=\"/upload/image/7e611d1e2676816d2816d708868cc0703372.png\" alt=\"\"></p>\r\n<p>在游戏里继续添加一个敌人，在 CE 里手动添加地址，验证推断数据，得出下一个敌人的坐标也是正确的。</p>\r\n<p><img src=\"/upload/image/67d86fe20e2acb8712027e79a6f96b838121.png\" alt=\"\"></p>\r\n', '在游戏的编程设计中，一般都会使用列表或者数组来存放整个地图或者房间的游戏人物，那么，思路就是通过查找下一个游戏人物的地址，用来对比当前角色的地址，得到偏移多少数据，然后就可以通过不断的累加或递减该偏移得出所有人物的地址了。\r\n\r\n## 敌人坐标\r\n找敌人的基址，也是从敌人的坐标开始找，已知本人坐标，靠近敌人，那么敌人的坐标也应该在自己的坐标附近。\r\n\r\n![](/upload/image/bac6420ab94dc5d8b54c8dd341e5f33a2019.png)\r\n\r\n可以通过搜索类似区间的值，快速确认敌人的坐标。\r\n\r\n![](/upload/image/b8971d3b6f92bbde7108af29e9ba89998926.png)\r\n\r\n当敌人移动的时候，Z 轴数据发生变化了，再次搜索减少或者增加的数值，重复步骤直到数量比较少的时候。\r\n\r\n![](/upload/image/8fa885d750e1bc1bbbe65021b19f186b4463.png)\r\n\r\n敌人已经移动到比原来低的位置了，此时再次搜索减少的数值。\r\n\r\n![](/upload/image/96c9b8abdbbb58609333d0875125b7b84063.png)\r\n\r\n敌人再次移动，Z 轴数据发生变化了。\r\n\r\n![](/upload/image/fdb09190ac208b86f3f421ad473b5d968050.png)\r\n\r\n位置比原来的高，此时再次搜索增加的数值。\r\n\r\n## 分析数据\r\n重复搜索到比较少的数据后，分析一下哪些数据可能是敌人的坐标 Z 轴，将搜索到的地址加入到地址列表里，先锁定一部分地址的数值，观察敌人是否还可以改变高度位置，如果还可以，则不是这些地址决定敌人位置的 Z 轴，删除掉后继续锁定其余地址。\r\n\r\n![](/upload/image/a580a8d88cc5f97ea5efaef5e35103495227.png)\r\n\r\n逐渐排除非正确的地址后，发现有一些数据锁定后，敌人无法改变高度位置了，例如人物进入地图里，或者腾空行走，就是锁定到影响 Z 轴的地址了。\r\n\r\n![](/upload/image/19f1acf05ad576ed4a86d8bd6817cb397274.png)\r\n\r\n重复锁定排除，最终确定该地址的数值决定敌人的 Z 轴位置。\r\n\r\n![](/upload/image/5f200ceb4a0ebeb87cc598973c08125c3260.png)\r\n\r\n这个地址并不是基址(CE 里面绿色的)，右键找出是什么访问了该地址。优先查看 mov 指令的代码，这里的偏移 288 和游戏里本人坐标的偏移一样。\r\n\r\n![](/upload/image/588c5ae5c9f7752688e8ec55ce6685c67740.png)\r\n\r\n搜索指针的数值 2BD83270 得出一堆地址，其中就有一个绿色的基址，和本人坐标几乎一样，只有一点点差别。\r\n\r\n![](/upload/image/c3f41cc6c4a7bef9fd6c1f40e29c00852249.png)\r\n\r\n将这个地址添加到地址列表，加上指针偏移。\r\n\r\n![](/upload/image/7381f9870f7d19005aaa1cd6637093b73019.png)\r\n\r\n游戏里面反复跟随敌人跑动，验证数据确实是敌人正确的 Z 轴坐标。\r\n\r\n![](/upload/image/d3d17107b1cefc00d7175ad2a0e6d1814440.png)\r\n\r\n## 推断数据\r\n本人的 Y Z 轴的数据分别是偏移减十六进制的 4 ，那么敌人的应该也是一样，因为写代码的时候人物对象的数据结构是一样的。\r\n\r\n![](/upload/image/4321ab760bd2c0d9b94994b5b139c67c5595.png)\r\n\r\n再继续推断人物列表数据中，每一个人物对象的地址差是多少，本人的基址是 server.dll+4F2FEC 而敌人的基址是 server.dll+4F2FFC，两个偏移之间相差的是一个十六进制的 10 。因此，再下一个人物的地址偏移就应该是 server.dll+4F300C 了，十六进制运算 4F2FFC + 10 = 4F300C。\r\n\r\n![](/upload/image/7e611d1e2676816d2816d708868cc0703372.png)\r\n\r\n在游戏里继续添加一个敌人，在 CE 里手动添加地址，验证推断数据，得出下一个敌人的坐标也是正确的。\r\n\r\n![](/upload/image/67d86fe20e2acb8712027e79a6f96b838121.png)', 0, 1329, 15, '', NULL, '2020-07-29 18:59:23', 0),(144, 23, 1, '', 0, '', 1, 0, 'JVM 深入理解 (一) | JVM 的概述及 java 代码执行流程', '/upload/image/d19665f2c5462cbffe5886b42ac9fc143065.png', '没有特别幸运，那么请先特别努力，别因为懒惰而失败，还矫情地将原因归于自己倒霉。你必须特别努力，才能显得毫不费力。', '<h2 id=\"h2-write-once-run-anywhere\"><a name=\"Write once run anywhere\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Write once run anywhere</h2><p>Java 之所以能成为跨平台的语言，其主要依赖与 JVM，只要在操作系统上安装有 JVM，通过 JVM 即可运行 Java 语言编译出来的字节码文件。一处编写，到处运行，完全依赖与 JVM 的支持，所以，也许 Java 并不是世界上最好的编程语言（不含 PHP ），但是 JVM 应该是世界上最好的虚拟机。</p>\r\n<p><img src=\"/upload/image/3089636571959a8dabbf4bc3db011a6c4537.png\" alt=\"\"></p>\r\n<h2 id=\"h2-u8DE8u8BEDu8A00u7684u865Au62DFu673A\"><a name=\"跨语言的虚拟机\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>跨语言的虚拟机</h2><p>JVM 运行的字节码文件都遵循着相应的 JVM 规范，如果有合适的编译器，遵循相应的 JVM 规范生成对应的字节码文件，JVM 是一样可以运行的，这也使得 JVM 成为一个跨语言的虚拟机成为可能。</p>\r\n<p><img src=\"/upload/image/f4f6fc6c418f746287b3a5e2dc4619c82246.png\" alt=\"\"></p>\r\n<h2 id=\"h2-jvm-\"><a name=\"JVM 整体结构\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>JVM 整体结构</h2><p><img src=\"/upload/image/627565a214337fa5b984f6348a778bf66193.png\" alt=\"\"></p>\r\n<p><strong>Class loader</strong> 最基本的功能就是将 Class 加载到 JVM 中，在加载过程中，Class loader 能够审查每个类应该由哪个 Class loader 加载，采用双亲委派模型来实现，除了加载外，class loader也负责将加载后的字节码重新解析成JVM同一要求的对象格式。</p>\r\n<p><strong>Runtime Data area</strong> 在执行的过程中，总会创建很多对象 必须有地方存放这些对象；还需要保存一些执行的状态，所以，必须有一个地方来保持执行的状态。 “地方” 指的就是内存区域， 程序运行起来之后， 就是一个动态的过程， 必须合理的划分内存区域， 来存放各种数据。</p>\r\n<p><strong>Execution Engine</strong> 执行引擎是 Java 虚拟机最核心的组成部分之一，“虚拟机”是一个相对于“物理机”的概念，这两种机器都具有执行代码的能力。其区别是物理机的执行引擎是直接建立在处理器、硬件、指令集和操作系统层面上的，而虚拟机的执行引擎则是由自己实现的，因此可以自行制定指令集和执行引擎的结构体系，并且能够执行那些不被硬件直接支持的指令集格式。</p>\r\n<h2 id=\"h2-java-\"><a name=\"Java 代码执行流程\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Java 代码执行流程</h2><p><img src=\"/upload/image/7d40aecf648f93f8e742593c900d7dff7017.png\" alt=\"\"></p>\r\n<p>编写一个 Hello.java 文件</p>\r\n<pre><code class=\"lang-java\">public class Hello {\r\n\r\n    public static void main(String[] args) {\r\n        int a = 1;\r\n        int b = 2;\r\n        int c = a + b;\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<p>通过命令行输入编译命令，生成 Hello.class 文件</p>\r\n<pre><code class=\"lang-shell\">javac Hello.java\r\n</code></pre>\r\n<p>通过命令行输入查看 Hello.class 的 jvm 指令</p>\r\n<pre><code class=\"lang-shell\">javap -v Hello.class\r\n</code></pre>\r\n<p>输出代码如下，其中 code 部分就是 jvm 执行时候的指令</p>\r\n<pre><code class=\"lang-java\">Classfile /F:/demo/out/production/demo01/com/_365d1/demo/Hello.class\r\n  Last modified 2020-8-5; size 456 bytes\r\n  MD5 checksum 2dba3366c299bd16497e4b547eca4902\r\n  Compiled from &quot;Hello.java&quot;\r\npublic class com._365d1.demo.Hello\r\n  minor version: 0\r\n  major version: 52\r\n  flags: ACC_PUBLIC, ACC_SUPER\r\nConstant pool:\r\n   #1 = Methodref          #3.#21         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V\r\n   #2 = Class              #22            // com/_365d1/demo/Hello\r\n   #3 = Class              #23            // java/lang/Object\r\n   #4 = Utf8               &lt;init&gt;\r\n   #5 = Utf8               ()V\r\n   #6 = Utf8               Code\r\n   #7 = Utf8               LineNumberTable\r\n   #8 = Utf8               LocalVariableTable\r\n   #9 = Utf8               this\r\n  #10 = Utf8               Lcom/_365d1/demo/Hello;\r\n  #11 = Utf8               main\r\n  #12 = Utf8               ([Ljava/lang/String;)V\r\n  #13 = Utf8               args\r\n  #14 = Utf8               [Ljava/lang/String;\r\n  #15 = Utf8               a\r\n  #16 = Utf8               I\r\n  #17 = Utf8               b\r\n  #18 = Utf8               c\r\n  #19 = Utf8               SourceFile\r\n  #20 = Utf8               Hello.java\r\n  #21 = NameAndType        #4:#5          // &quot;&lt;init&gt;&quot;:()V\r\n  #22 = Utf8               com/_365d1/demo/Hello\r\n  #23 = Utf8               java/lang/Object\r\n{\r\n  public com._365d1.demo.Hello();\r\n    descriptor: ()V\r\n    flags: ACC_PUBLIC\r\n    Code:\r\n      stack=1, locals=1, args_size=1\r\n         0: aload_0\r\n         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V\r\n         4: return\r\n      LineNumberTable:\r\n        line 3: 0\r\n      LocalVariableTable:\r\n        Start  Length  Slot  Name   Signature\r\n            0       5     0  this   Lcom/_365d1/demo/Hello;\r\n\r\n  public static void main(java.lang.String[]);\r\n    descriptor: ([Ljava/lang/String;)V\r\n    flags: ACC_PUBLIC, ACC_STATIC\r\n    Code:\r\n      stack=2, locals=4, args_size=1\r\n         0: iconst_1\r\n         1: istore_1\r\n         2: iconst_2\r\n         3: istore_2\r\n         4: iload_1\r\n         5: iload_2\r\n         6: iadd\r\n         7: istore_3\r\n         8: return\r\n      LineNumberTable:\r\n        line 6: 0\r\n        line 7: 2\r\n        line 8: 4\r\n        line 9: 8\r\n      LocalVariableTable:\r\n        Start  Length  Slot  Name   Signature\r\n            0       9     0  args   [Ljava/lang/String;\r\n            2       7     1     a   I\r\n            4       5     2     b   I\r\n            8       1     3     c   I\r\n}\r\nSourceFile: &quot;Hello.java&quot;\r\n</code></pre>\r\n<p>Code 部分代码看起来很像汇编，这就很有意思了哈~~</p>\r\n', '## Write once run anywhere\r\nJava 之所以能成为跨平台的语言，其主要依赖与 JVM，只要在操作系统上安装有 JVM，通过 JVM 即可运行 Java 语言编译出来的字节码文件。一处编写，到处运行，完全依赖与 JVM 的支持，所以，也许 Java 并不是世界上最好的编程语言（不含 PHP ），但是 JVM 应该是世界上最好的虚拟机。\r\n\r\n![](/upload/image/3089636571959a8dabbf4bc3db011a6c4537.png)\r\n\r\n## 跨语言的虚拟机\r\nJVM 运行的字节码文件都遵循着相应的 JVM 规范，如果有合适的编译器，遵循相应的 JVM 规范生成对应的字节码文件，JVM 是一样可以运行的，这也使得 JVM 成为一个跨语言的虚拟机成为可能。\r\n\r\n![](/upload/image/f4f6fc6c418f746287b3a5e2dc4619c82246.png)\r\n\r\n## JVM 整体结构\r\n\r\n![](/upload/image/627565a214337fa5b984f6348a778bf66193.png)\r\n\r\n**Class loader** 最基本的功能就是将 Class 加载到 JVM 中，在加载过程中，Class loader 能够审查每个类应该由哪个 Class loader 加载，采用双亲委派模型来实现，除了加载外，class loader也负责将加载后的字节码重新解析成JVM同一要求的对象格式。\r\n\r\n**Runtime Data area** 在执行的过程中，总会创建很多对象 必须有地方存放这些对象；还需要保存一些执行的状态，所以，必须有一个地方来保持执行的状态。 “地方” 指的就是内存区域， 程序运行起来之后， 就是一个动态的过程， 必须合理的划分内存区域， 来存放各种数据。\r\n\r\n**Execution Engine** 执行引擎是 Java 虚拟机最核心的组成部分之一，“虚拟机”是一个相对于“物理机”的概念，这两种机器都具有执行代码的能力。其区别是物理机的执行引擎是直接建立在处理器、硬件、指令集和操作系统层面上的，而虚拟机的执行引擎则是由自己实现的，因此可以自行制定指令集和执行引擎的结构体系，并且能够执行那些不被硬件直接支持的指令集格式。\r\n\r\n## Java 代码执行流程\r\n\r\n![](/upload/image/7d40aecf648f93f8e742593c900d7dff7017.png)\r\n\r\n编写一个 Hello.java 文件\r\n```java\r\npublic class Hello {\r\n\r\n    public static void main(String[] args) {\r\n        int a = 1;\r\n        int b = 2;\r\n        int c = a + b;\r\n    }\r\n\r\n}\r\n```\r\n通过命令行输入编译命令，生成 Hello.class 文件\r\n```shell\r\njavac Hello.java\r\n```\r\n通过命令行输入查看 Hello.class 的 jvm 指令\r\n```shell\r\njavap -v Hello.class\r\n```\r\n输出代码如下，其中 code 部分就是 jvm 执行时候的指令\r\n```java\r\nClassfile /F:/demo/out/production/demo01/com/_365d1/demo/Hello.class\r\n  Last modified 2020-8-5; size 456 bytes\r\n  MD5 checksum 2dba3366c299bd16497e4b547eca4902\r\n  Compiled from \"Hello.java\"\r\npublic class com._365d1.demo.Hello\r\n  minor version: 0\r\n  major version: 52\r\n  flags: ACC_PUBLIC, ACC_SUPER\r\nConstant pool:\r\n   #1 = Methodref          #3.#21         // java/lang/Object.\"<init>\":()V\r\n   #2 = Class              #22            // com/_365d1/demo/Hello\r\n   #3 = Class              #23            // java/lang/Object\r\n   #4 = Utf8               <init>\r\n   #5 = Utf8               ()V\r\n   #6 = Utf8               Code\r\n   #7 = Utf8               LineNumberTable\r\n   #8 = Utf8               LocalVariableTable\r\n   #9 = Utf8               this\r\n  #10 = Utf8               Lcom/_365d1/demo/Hello;\r\n  #11 = Utf8               main\r\n  #12 = Utf8               ([Ljava/lang/String;)V\r\n  #13 = Utf8               args\r\n  #14 = Utf8               [Ljava/lang/String;\r\n  #15 = Utf8               a\r\n  #16 = Utf8               I\r\n  #17 = Utf8               b\r\n  #18 = Utf8               c\r\n  #19 = Utf8               SourceFile\r\n  #20 = Utf8               Hello.java\r\n  #21 = NameAndType        #4:#5          // \"<init>\":()V\r\n  #22 = Utf8               com/_365d1/demo/Hello\r\n  #23 = Utf8               java/lang/Object\r\n{\r\n  public com._365d1.demo.Hello();\r\n    descriptor: ()V\r\n    flags: ACC_PUBLIC\r\n    Code:\r\n      stack=1, locals=1, args_size=1\r\n         0: aload_0\r\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\r\n         4: return\r\n      LineNumberTable:\r\n        line 3: 0\r\n      LocalVariableTable:\r\n        Start  Length  Slot  Name   Signature\r\n            0       5     0  this   Lcom/_365d1/demo/Hello;\r\n\r\n  public static void main(java.lang.String[]);\r\n    descriptor: ([Ljava/lang/String;)V\r\n    flags: ACC_PUBLIC, ACC_STATIC\r\n    Code:\r\n      stack=2, locals=4, args_size=1\r\n         0: iconst_1\r\n         1: istore_1\r\n         2: iconst_2\r\n         3: istore_2\r\n         4: iload_1\r\n         5: iload_2\r\n         6: iadd\r\n         7: istore_3\r\n         8: return\r\n      LineNumberTable:\r\n        line 6: 0\r\n        line 7: 2\r\n        line 8: 4\r\n        line 9: 8\r\n      LocalVariableTable:\r\n        Start  Length  Slot  Name   Signature\r\n            0       9     0  args   [Ljava/lang/String;\r\n            2       7     1     a   I\r\n            4       5     2     b   I\r\n            8       1     3     c   I\r\n}\r\nSourceFile: \"Hello.java\"\r\n```\r\nCode 部分代码看起来很像汇编，这就很有意思了哈~~', 0, 481, 1, '', NULL, '2020-08-04 12:41:49', 0),(145, 23, 1, '', 0, '', 1, 0, 'JVM 深入理解 (二) | JVM 指令集架构 及 JVM 生命周期', '/upload/image/44605305fe67a05e301fbcb5d41bca631303.png', '相信梦想是价值的源泉，相信眼光决定未来的一切，相信成功的信念比成功本身更重要，相信人生有挫折没有失败，相信生命的质量来自决不妥协的信念。', '<h2 id=\"h2-u6808u7684u6307u4EE4u96C6u67B6u6784\"><a name=\"栈的指令集架构\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>栈的指令集架构</h2><p>Java编译器输入的指令流基本上是基于<code>栈的指令集架构</code>，另外一种指令集架构则是基于<code>寄存器的指令集架构</code>。</p>\r\n<p><strong>基于栈式架构的特点</strong></p>\r\n<blockquote>\r\n<p>设计和实现更简单，适用于资源受限的系统<br>避开了寄存器的分配难题，使用零地址指令方式分配<br>指令流中的指令大部分是零地址指令，执行过程依赖于操作栈，指令集更小，编译器容易实现<br>不需要硬件支持，可移植性更好，更好实现跨平台</p>\r\n</blockquote>\r\n<p><strong>基于寄存器架构的特点</strong></p>\r\n<blockquote>\r\n<p>典型的应用是x86的二进制指令集，比如传统的 PC 以及 Android 的 Davlik 虚拟机<br>指令集架构完全依赖硬件，可移植性差<br>性能优秀和执行更高效<br>花费更少的指令去完成一项操作<br>大部分情况下指令集都以一地址指令、二地址指令和三地址指令为主。</p>\r\n</blockquote>\r\n<h2 id=\"h2-jvm-\"><a name=\"JVM 的生命周期\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>JVM 的生命周期</h2><p>JVM 生命周期一共分为<code>虚拟机启动</code>、<code>虚拟机执行</code>、<code>虚拟机退出</code>。</p>\r\n<p><strong>虚拟机启动</strong></p>\r\n<p>Java虚拟机的启动是通过引导类加载器（ bootstap class loader ）创建一个初始类（ initial class ）来完成的，这个类是由虚拟机的具体实现指定的。</p>\r\n<p><strong>虚拟机执行</strong></p>\r\n<p>1.一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。<br>2.程序开始执行时它才运行，程序结束时它就停止。<br>3.执行一个Java程序的时候，执行的是一个Java虚拟机进程。</p>\r\n<p><strong>虚拟机退出</strong></p>\r\n<p>1.程序正常执行结束。<br>2.程序在执行过程中遇到了异常或错误而异常终止。<br>3.由操作系统出现错误而导致Java虚拟机进程终止。<br>4.某线程调用 Runtime 类或 System 类的 exit 方法，或 Runtime 类的 halt 方法，并且 Java 安全管理器也允许这次 exit 或 halt 操作。<br>5.JNI（ Java Native Interface ）规范描述了 JNI Invocation Api 来加载或卸载 Java 虚拟机时。</p>\r\n', '## 栈的指令集架构\r\nJava编译器输入的指令流基本上是基于`栈的指令集架构`，另外一种指令集架构则是基于`寄存器的指令集架构`。\r\n\r\n**基于栈式架构的特点**\r\n> 设计和实现更简单，适用于资源受限的系统\r\n> 避开了寄存器的分配难题，使用零地址指令方式分配\r\n> 指令流中的指令大部分是零地址指令，执行过程依赖于操作栈，指令集更小，编译器容易实现\r\n> 不需要硬件支持，可移植性更好，更好实现跨平台\r\n\r\n**基于寄存器架构的特点**\r\n> 典型的应用是x86的二进制指令集，比如传统的 PC 以及 Android 的 Davlik 虚拟机\r\n> 指令集架构完全依赖硬件，可移植性差\r\n> 性能优秀和执行更高效\r\n> 花费更少的指令去完成一项操作\r\n> 大部分情况下指令集都以一地址指令、二地址指令和三地址指令为主。\r\n\r\n## JVM 的生命周期\r\nJVM 生命周期一共分为`虚拟机启动`、`虚拟机执行`、`虚拟机退出`。\r\n\r\n**虚拟机启动**\r\n\r\nJava虚拟机的启动是通过引导类加载器（ bootstap class loader ）创建一个初始类（ initial class ）来完成的，这个类是由虚拟机的具体实现指定的。\r\n\r\n**虚拟机执行**\r\n\r\n1.一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。\r\n2.程序开始执行时它才运行，程序结束时它就停止。\r\n3.执行一个Java程序的时候，执行的是一个Java虚拟机进程。\r\n\r\n**虚拟机退出**\r\n\r\n1.程序正常执行结束。\r\n2.程序在执行过程中遇到了异常或错误而异常终止。\r\n3.由操作系统出现错误而导致Java虚拟机进程终止。\r\n4.某线程调用 Runtime 类或 System 类的 exit 方法，或 Runtime 类的 halt 方法，并且 Java 安全管理器也允许这次 exit 或 halt 操作。\r\n5.JNI（ Java Native Interface ）规范描述了 JNI Invocation Api 来加载或卸载 Java 虚拟机时。', 0, 485, 0, '', NULL, '2020-08-05 23:11:06', 0),(146, 23, 1, '', 0, '', 1, 0, 'JVM 深入理解 (三) | 类加载器子系统', '/upload/image/b1054de6bc5140dfcf038d105f5f7f8d4846.png', '既然人生的幕布已经拉开，就一定要积极的演出；既然脚步已经跨出，风雨坎坷也不能退步；既然我已把希望播在这里，就一定要坚持到胜利的谢幕', '<h2 id=\"h2-u7C7Bu52A0u8F7Du5668u5B50u7CFBu7EDFu4F5Cu7528\"><a name=\"类加载器子系统作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>类加载器子系统作用</h2><p><img src=\"/upload/image/9be8b591a67d8ed6e581f02e933d55fe3151.png\" alt=\"\"></p>\r\n<p>类加载器子系统负责从文件系统或者网络中加载 Class 文件，Class 文件在文件开头有特定的文件标识。</p>\r\n<p>ClassLoader 只负责 class 文件的加载，至于是否运行，则由 ExecutionEngine决定。</p>\r\n<p>加载的类信息存放在一块称为方法区的内存空间。除了类的信息外，方法区还会存放运行时常量池信息，可能还包括字符串字面量和数字常量。</p>\r\n<h2 id=\"h2-class-\"><a name=\"Class 文件特定的文件标识\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Class 文件特定的文件标识</h2><p>使用二进制方式查看 Class 文件，会看到开头是以 ca fe ba be (咖啡宝贝)。</p>\r\n<p><img src=\"/upload/image/d5875f585551651a40a85e45156fdcf96452.png\" alt=\"\"></p>\r\n<h2 id=\"h2-loading-\"><a name=\"Loading 加载阶段\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Loading 加载阶段</h2><p>1.通过一个类的全限定名获取定义此类的二进制字节流。</p>\r\n<p>2.将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>\r\n<p>3.在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据访问入口。</p>\r\n<p>加载 .class 的方式</p>\r\n<blockquote>\r\n<p>从本地系统直接加载<br>通过网络获取<br>从zip包中读取，jar war 格式的基础<br>运行时候计算生成，动态代理技术<br>由其他文件生成，例如 JSP<br>从专有的数据库中读取<br>从加密文件中获取，典型的防 Class 文件被反编译</p>\r\n</blockquote>\r\n<h2 id=\"h2-linking-\"><a name=\"Linking 链接阶段\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Linking 链接阶段</h2><p>链接阶段主要做了三个事情，分别是验证、准备、解析。</p>\r\n<p><strong>验证( Verify )</strong></p>\r\n<ul>\r\n<li><p>确保 Class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</p>\r\n</li><li><p>主要包括四种验证，文件格式验证、元数据验证、字节码验证、符合引用验证。</p>\r\n</li></ul>\r\n<p><strong>准备( Prepare )</strong></p>\r\n<ul>\r\n<li><p>为类变量分配内存并且设置该类的默认初始值，即零值。</p>\r\n</li><li><p>不包含用 final 修饰的 static，final 在编译的时候就分配了，准备阶段会显式初始化</p>\r\n</li><li><p>不会为实例变量分配初始化，类变量会分配在方法区中，实例变量是会随着对象一起分配到 Java 堆中。</p>\r\n</li></ul>\r\n<p><strong>解析( Resolve )</strong></p>\r\n<ul>\r\n<li><p>将常量池内的符号引用转换为直接引用的过程。</p>\r\n</li><li><p>解析操作往往会伴随着 JVM 在执行完初始化之后再执行。</p>\r\n</li><li><p>符号引用就是一组符号来描述引用的目标。符合引用的字面量定义在《JAVA虚拟机规范》的 Class 文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p>\r\n</li><li><p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对常量池中的 CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info 等。</p>\r\n</li></ul>\r\n<h2 id=\"h2-initialization-\"><a name=\"Initialization 初始化阶段\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Initialization 初始化阶段</h2><ul>\r\n<li><p>初始化阶段就是执行类构造器方法 &lt;clinit&gt;() 的过程。</p>\r\n</li><li><p>此方法不需定义，是 javac 编译器自动收集类中的所有类变量赋值动作和静态代码块中的语句合并而来。</p>\r\n</li><li><p>构造器方法中指令按语句在源文件中出现的顺序执行。</p>\r\n</li><li><p>&lt;clinit&gt;() 不同于类的构造器。( 关联：构造器是虚拟机视角下的 &lt;init&gt;() )</p>\r\n</li><li><p>若该类具有父类，JVM 会保证子类的 &lt;clinit&gt;() 执行前，父类的 &lt;clinit&gt;() 已经执行完毕。</p>\r\n</li><li><p>虚拟机必须保证一个类的 &lt;clinit&gt;() 方法在多线程下被同步加锁。</p>\r\n</li></ul>\r\n<h2 id=\"h2-u5C0Fu6280u5DE7\"><a name=\"小技巧\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>小技巧</h2><p>IDEA 可以安装插件 jclasslib 来快速查看 .class 的内容。</p>\r\n<p><img src=\"/upload/image/a3b97e5c3e7f44e13ea9e6cd9cc453d44763.png\" alt=\"\"></p>\r\n', '## 类加载器子系统作用\r\n\r\n![](/upload/image/9be8b591a67d8ed6e581f02e933d55fe3151.png)\r\n\r\n类加载器子系统负责从文件系统或者网络中加载 Class 文件，Class 文件在文件开头有特定的文件标识。\r\n\r\nClassLoader 只负责 class 文件的加载，至于是否运行，则由 ExecutionEngine决定。\r\n\r\n加载的类信息存放在一块称为方法区的内存空间。除了类的信息外，方法区还会存放运行时常量池信息，可能还包括字符串字面量和数字常量。\r\n\r\n## Class 文件特定的文件标识\r\n使用二进制方式查看 Class 文件，会看到开头是以 ca fe ba be (咖啡宝贝)。\r\n\r\n![](/upload/image/d5875f585551651a40a85e45156fdcf96452.png)\r\n\r\n## Loading 加载阶段\r\n1.通过一个类的全限定名获取定义此类的二进制字节流。\r\n\r\n2.将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\r\n\r\n3.在内存中生成一个代表这个类的`java.lang.Class`对象，作为方法区这个类的各种数据访问入口。\r\n\r\n加载 .class 的方式\r\n> 从本地系统直接加载\r\n> 通过网络获取\r\n> 从zip包中读取，jar war 格式的基础\r\n> 运行时候计算生成，动态代理技术\r\n> 由其他文件生成，例如 JSP\r\n> 从专有的数据库中读取\r\n> 从加密文件中获取，典型的防 Class 文件被反编译\r\n\r\n## Linking 链接阶段\r\n链接阶段主要做了三个事情，分别是验证、准备、解析。\r\n\r\n**验证( Verify )**\r\n- 确保 Class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。\r\n\r\n- 主要包括四种验证，文件格式验证、元数据验证、字节码验证、符合引用验证。\r\n\r\n**准备( Prepare )**\r\n- 为类变量分配内存并且设置该类的默认初始值，即零值。\r\n\r\n- 不包含用 final 修饰的 static，final 在编译的时候就分配了，准备阶段会显式初始化\r\n\r\n- 不会为实例变量分配初始化，类变量会分配在方法区中，实例变量是会随着对象一起分配到 Java 堆中。\r\n\r\n**解析( Resolve )**\r\n- 将常量池内的符号引用转换为直接引用的过程。\r\n\r\n- 解析操作往往会伴随着 JVM 在执行完初始化之后再执行。\r\n\r\n- 符号引用就是一组符号来描述引用的目标。符合引用的字面量定义在《JAVA虚拟机规范》的 Class 文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。\r\n\r\n- 解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对常量池中的 CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info 等。\r\n\r\n## Initialization 初始化阶段\r\n- 初始化阶段就是执行类构造器方法 <clinit>() 的过程。\r\n\r\n- 此方法不需定义，是 javac 编译器自动收集类中的所有类变量赋值动作和静态代码块中的语句合并而来。\r\n\r\n- 构造器方法中指令按语句在源文件中出现的顺序执行。\r\n\r\n- <clinit>() 不同于类的构造器。( 关联：构造器是虚拟机视角下的 <init>() )\r\n\r\n- 若该类具有父类，JVM 会保证子类的 <clinit>() 执行前，父类的 <clinit>() 已经执行完毕。\r\n\r\n- 虚拟机必须保证一个类的 <clinit>() 方法在多线程下被同步加锁。\r\n\r\n## 小技巧\r\nIDEA 可以安装插件 jclasslib 来快速查看 .class 的内容。\r\n\r\n![](/upload/image/a3b97e5c3e7f44e13ea9e6cd9cc453d44763.png)\r\n', 0, 537, 0, '', NULL, '2020-08-08 00:08:24', 0),(147, 23, 1, '', 0, '', 1, 0, 'JVM 深入理解 (四) | 类加载器', '/upload/image/7bc178090bef7937fd6e6fc7888ea8a55458.png', '人活著就是為了解決困難。這才是生命的意義，也是生命的內容。逃避不是辦法，知難而上往往是解決問題的最好手段', '<h2 id=\"h2-u52A0u8F7Du5668u7684u5206u7C7B\"><a name=\"加载器的分类\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>加载器的分类</h2><p>JVM 支持两种类型的类加载器，分别为<strong>引导类加载器</strong> (BootStrap ClassLoader) 和 <strong>自定义类加载器</strong> (User-Defined ClassLoader)，所有派生于抽象类 ClassLoader 的类加载器都划分为自定义类加载器。</p>\r\n<p><img src=\"/upload/image/5e5ba88bd825e6eed0c718264ad9e9bd9458.png\" alt=\"\"></p>\r\n<h2 id=\"h2--bootstrap-classloader-\"><a name=\"引导类加载器（BootStrap ClassLoader）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>引导类加载器（BootStrap ClassLoader）</h2><p>1.这个类加载器使用 C/C++ 语言实现的，嵌套在 JVM 内部。</p>\r\n<p>2.它用来加载 Java 的核心库（ JAVA_HOME/jre/lib/rt.jar 、resource.jar 或 sun.boot.class.path 路径下的内容 ），用于提供 JVM 自身需要的类</p>\r\n<p>3.并不继承 java.lang.ClassLoader ，没有父加载器</p>\r\n<p>4.出于安全考虑，BootStrap 启动类加载器只加载包名为 java、javax、sun 等开头的类</p>\r\n<h2 id=\"h2--extension-classloader-\"><a name=\"扩展类加载器（Extension ClassLoader）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>扩展类加载器（Extension ClassLoader）</h2><p>1.Java 语言编写，由 sun.misc.Launcher$ExtClassLoader 实现</p>\r\n<p>2.派生于 ClassLoader 类</p>\r\n<p>3.父类加载器为启动类加载器</p>\r\n<p>4.从 java.ext.dirs 系统属性所指定的目录中加载类库，或从 JDK 安装目录的 jre/lib/ext 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会自动由扩展类加载器加载</p>\r\n<h2 id=\"h2--\"><a name=\"用户自定义类加载器（用途）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>用户自定义类加载器（用途）</h2><p>1.隔离加载类</p>\r\n<p>2.修改类的加载方式</p>\r\n<p>3.扩展加载源</p>\r\n<p>4.防止源码泄漏</p>\r\n', '## 加载器的分类\r\nJVM 支持两种类型的类加载器，分别为**引导类加载器** (BootStrap ClassLoader) 和 **自定义类加载器** (User-Defined ClassLoader)，所有派生于抽象类 ClassLoader 的类加载器都划分为自定义类加载器。\r\n\r\n![](/upload/image/5e5ba88bd825e6eed0c718264ad9e9bd9458.png)\r\n\r\n## 引导类加载器（BootStrap ClassLoader）\r\n1.这个类加载器使用 C/C++ 语言实现的，嵌套在 JVM 内部。\r\n\r\n2.它用来加载 Java 的核心库（ JAVA_HOME/jre/lib/rt.jar 、resource.jar 或 sun.boot.class.path 路径下的内容 ），用于提供 JVM 自身需要的类\r\n\r\n3.并不继承 java.lang.ClassLoader ，没有父加载器\r\n\r\n4.出于安全考虑，BootStrap 启动类加载器只加载包名为 java、javax、sun 等开头的类\r\n\r\n## 扩展类加载器（Extension ClassLoader）\r\n1.Java 语言编写，由 sun.misc.Launcher$ExtClassLoader 实现\r\n\r\n2.派生于 ClassLoader 类\r\n\r\n3.父类加载器为启动类加载器\r\n\r\n4.从 java.ext.dirs 系统属性所指定的目录中加载类库，或从 JDK 安装目录的 jre/lib/ext 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会自动由扩展类加载器加载\r\n\r\n## 用户自定义类加载器（用途）\r\n1.隔离加载类\r\n\r\n2.修改类的加载方式\r\n\r\n3.扩展加载源\r\n\r\n4.防止源码泄漏', 0, 453, 1, '', NULL, '2020-08-22 21:38:22', 0),(148, 18, 1, '', 0, '', 1, 0, '汇编语言 (一) | 基础知识', '/upload/image/dc4f877f78e06f06bc740e95885e8f507987.png', '有时，成功就在我们眼前，但却被我们所忽略，以致最终地丧失。把握眼前，坚持做好每件事，那么，成功将会离我们越来越近', '<h2 id=\"h2-u6C47u7F16u4EE3u7801u7684u7EC4u6210\"><a name=\"汇编代码的组成\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>汇编代码的组成</h2><blockquote>\r\n<p>汇编指令（机器码的助记符）<br>伪指令（由编译器执行）<br>其他符号（由编译器识别）</p>\r\n</blockquote>\r\n<p>汇编语言的核心就是汇编指令，决定了汇编语言的特性。</p>\r\n<h2 id=\"h2-u6307u4EE4u548Cu6570u636E\"><a name=\"指令和数据\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>指令和数据</h2><p>1.指令和数据是应用上的概念。</p>\r\n<p>2.在内存或硬盘上，指令和数据没有任何区别，都是二进制信息</p>\r\n<h2 id=\"h2-u5B58u50A8u5668\"><a name=\"存储器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>存储器</h2><p>存储器被划分为若干个存储单元，每个存储单元从 0 开始顺序编号</p>\r\n<h2 id=\"h2-cpu-\"><a name=\"CPU 对存储器的读写\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>CPU 对存储器的读写</h2><p>CPU想要进行数据的读写，必须和存储器进行三类通信交互：</p>\r\n<blockquote>\r\n<p>存储单元的地址（地址信息）<br>存储器的选择，读或写命令（控制信息）<br>读或写的数据（数据信息）</p>\r\n</blockquote>\r\n<h2 id=\"h2-u603Bu7EBF\"><a name=\"总线\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总线</h2><p>在计算机中专门有连接 CPU 和其它芯片的导线，通常称为总线。</p>\r\n<p><img src=\"/upload/image/1ceec6a75f9de3f4e413f21b9e9325195860.png\" alt=\"\"></p>\r\n<p><strong>地址总线</strong><br>一个 CPU 有 N 根地址总线，则 CPU 的地址总线宽度为 N，CPU 最多可以寻找 2 的 N 次方个内存单元。</p>\r\n<p><strong>数据总线</strong><br>CPU 与内存或其它器件之间的数据传送是通过数据总线进行的，数据总线的宽度决定了 CPU 和外界的数据传输速度。</p>\r\n<p><strong>控制总线</strong><br>CPU 对外部器件的控制是通过控制总线进行的，控制总线是一些不同的控制线的集合，有多少根控制总线，就意味着 CPU 提供了对外部器件的多少种控制。</p>\r\n<h2 id=\"h2-u5185u5B58u5730u5740u7A7Au95F4\"><a name=\"内存地址空间\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内存地址空间</h2><p>一个 CPU 的地址总线宽度为 10，那么可以寻找 1024 个内存地址单元，这 1024 个内存单元就构成这个 CPU 的内存地址空间。</p>\r\n<h2 id=\"h2-u5B58u50A8u5668u82AFu7247\"><a name=\"存储器芯片\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>存储器芯片</h2><p>按读写属性分类</p>\r\n<blockquote>\r\n<p>随机存储器（RAM）<br>只读存储器（ROM）</p>\r\n</blockquote>\r\n<p>按功能和连接上分类</p>\r\n<blockquote>\r\n<p>随机存储器 RAM<br>装有 BIOS 的 ROM<br>接口卡上的 RAM</p>\r\n</blockquote>\r\n<p><img src=\"/upload/image/66bdeee4374b2dfdc816aa8df60dc5998505.png\" alt=\"\"></p>\r\n<p>这些存储器在物理上是独立的器件，但是以下两点相同：</p>\r\n<p>1.都是和 CPU 总线相连</p>\r\n<p>2.CPU 它们进行读或写都是通过控制总线发出内存读写命令</p>\r\n<p>在 CPU 中所有的物理存储器被看作一个由若干个存储单元组成的逻辑存储器，每个物理存储器在逻辑存储器中占有一个地址段空间，CPU 在这段地址空间中读写，实际上就是对相应的物理存储器进行读写。</p>\r\n<p><img src=\"/upload/image/c2a8dd0510d48fef73fd56311f7549039720.png\" alt=\"\"></p>\r\n', '## 汇编代码的组成\r\n> 汇编指令（机器码的助记符）\r\n> 伪指令（由编译器执行）\r\n> 其他符号（由编译器识别）\r\n\r\n汇编语言的核心就是汇编指令，决定了汇编语言的特性。\r\n\r\n## 指令和数据\r\n1.指令和数据是应用上的概念。\r\n\r\n2.在内存或硬盘上，指令和数据没有任何区别，都是二进制信息\r\n\r\n## 存储器\r\n存储器被划分为若干个存储单元，每个存储单元从 0 开始顺序编号\r\n\r\n## CPU 对存储器的读写\r\nCPU想要进行数据的读写，必须和存储器进行三类通信交互：\r\n> 存储单元的地址（地址信息）\r\n> 存储器的选择，读或写命令（控制信息）\r\n> 读或写的数据（数据信息）\r\n\r\n## 总线\r\n在计算机中专门有连接 CPU 和其它芯片的导线，通常称为总线。\r\n\r\n![](/upload/image/1ceec6a75f9de3f4e413f21b9e9325195860.png)\r\n\r\n**地址总线**\r\n一个 CPU 有 N 根地址总线，则 CPU 的地址总线宽度为 N，CPU 最多可以寻找 2 的 N 次方个内存单元。\r\n\r\n**数据总线**\r\nCPU 与内存或其它器件之间的数据传送是通过数据总线进行的，数据总线的宽度决定了 CPU 和外界的数据传输速度。\r\n\r\n**控制总线**\r\nCPU 对外部器件的控制是通过控制总线进行的，控制总线是一些不同的控制线的集合，有多少根控制总线，就意味着 CPU 提供了对外部器件的多少种控制。\r\n\r\n## 内存地址空间\r\n一个 CPU 的地址总线宽度为 10，那么可以寻找 1024 个内存地址单元，这 1024 个内存单元就构成这个 CPU 的内存地址空间。\r\n\r\n## 存储器芯片\r\n按读写属性分类\r\n> 随机存储器（RAM）\r\n> 只读存储器（ROM）\r\n\r\n按功能和连接上分类\r\n> 随机存储器 RAM\r\n> 装有 BIOS 的 ROM\r\n> 接口卡上的 RAM\r\n\r\n![](/upload/image/66bdeee4374b2dfdc816aa8df60dc5998505.png)\r\n\r\n这些存储器在物理上是独立的器件，但是以下两点相同：\r\n\r\n1.都是和 CPU 总线相连\r\n\r\n2.CPU 它们进行读或写都是通过控制总线发出内存读写命令\r\n\r\n在 CPU 中所有的物理存储器被看作一个由若干个存储单元组成的逻辑存储器，每个物理存储器在逻辑存储器中占有一个地址段空间，CPU 在这段地址空间中读写，实际上就是对相应的物理存储器进行读写。\r\n\r\n![](/upload/image/c2a8dd0510d48fef73fd56311f7549039720.png)', 0, 563, 1, '', NULL, '2020-08-22 23:51:19', 0),(149, 23, 1, '', 0, '', 1, 0, 'JVM 深入理解 (五) | 双亲委派机制 & 沙箱安全机制', '/upload/image/b7fbd6152b4fc1f1ca6de20d557d3d322212.png', '一个人如果不到最高峰，他就没有片刻的安宁，他也就不会感到生命的恬静和光荣。', '<h2 id=\"h2-u53CCu4EB2u59D4u6D3Eu673Au5236\"><a name=\"双亲委派机制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>双亲委派机制</h2><p>1.如果一个类加载器收到了一个类加载请求，并不会先自己去加载，而是把这个请求委托给父类的加载器去执行。</p>\r\n<p>2.如果父类加载器还存在其他父类加载器，则进一步向上委托，依次递归，请求最终达到顶层的启动类加载器。</p>\r\n<p>3.如果父类加载器可以完成类加载任务，就返回成功，若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载。</p>\r\n<p><img src=\"/upload/image/a1ea22e0e94b3571710c71a3010b74584843.png\" alt=\"\"></p>\r\n<p>双亲委派机制的优势：</p>\r\n<blockquote>\r\n<p>避免类重复加载<br>保护程序安全，防止核心 API 被随意修改</p>\r\n</blockquote>\r\n<h2 id=\"h2-u6C99u7BB1u5B89u5168u673Au5236\"><a name=\"沙箱安全机制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>沙箱安全机制</h2><p>例如，在程序中自己定义了一个 String 类，但是加载自定义 String 类的时候会先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载 JDK 自带的文件（rt.jar 包中的 java\\lang\\String.class），这样可以保证对 java 核心源代码的保护，这就是沙箱安全机制。</p>\r\n<h2 id=\"h2-u7C7Bu7684u4E3Bu52A8u4F7Fu7528\"><a name=\"类的主动使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>类的主动使用</h2><blockquote>\r\n<p>创建类的实例<br>访问某个类或接口的静态变量，或者对该静态类变量赋值<br>调用类的静态方法<br>反射<br>初始化一个类的子类<br>Java 虚拟机启动时被表明为启动类的类<br>JDK 7 开始提供的动态语言支持:<br>java.lang.invoke.MethodHandle 实例的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应类没有初始化、则初始化</p>\r\n</blockquote>\r\n<p>除了以上情况，其他方式都将被看作是类的被动使用，都不会导致类的初始化。</p>\r\n<blockquote>\r\n</blockquote>\r\n', '## 双亲委派机制\r\n1.如果一个类加载器收到了一个类加载请求，并不会先自己去加载，而是把这个请求委托给父类的加载器去执行。\r\n\r\n2.如果父类加载器还存在其他父类加载器，则进一步向上委托，依次递归，请求最终达到顶层的启动类加载器。\r\n\r\n3.如果父类加载器可以完成类加载任务，就返回成功，若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载。\r\n\r\n![](/upload/image/a1ea22e0e94b3571710c71a3010b74584843.png)\r\n\r\n双亲委派机制的优势：\r\n> 避免类重复加载\r\n> 保护程序安全，防止核心 API 被随意修改\r\n\r\n## 沙箱安全机制\r\n例如，在程序中自己定义了一个 String 类，但是加载自定义 String 类的时候会先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载 JDK 自带的文件（rt.jar 包中的 java\\lang\\String.class），这样可以保证对 java 核心源代码的保护，这就是沙箱安全机制。\r\n\r\n## 类的主动使用\r\n> 创建类的实例\r\n> 访问某个类或接口的静态变量，或者对该静态类变量赋值\r\n> 调用类的静态方法\r\n> 反射\r\n> 初始化一个类的子类\r\n> Java 虚拟机启动时被表明为启动类的类\r\n> JDK 7 开始提供的动态语言支持:\r\n> java.lang.invoke.MethodHandle 实例的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应类没有初始化、则初始化\r\n\r\n除了以上情况，其他方式都将被看作是类的被动使用，都不会导致类的初始化。\r\n> ', 0, 794, 35, '', NULL, '2020-08-25 00:18:53', 0),(150, 37, 1, '', 0, '', 1, 0, '零基础学运营 (三十) | 如何获得种子用户', '/upload/image/05afcb6aa74a91e8c1636aa9e8a4d3967880.png', '人非要经历一番不同平时的劫难才能脱胎换骨，成为真正能解决问题的人。', '<p>如何获得最初的 xxx 个用户，可以说是一个永恒的问题，一直萦绕在产品经理、运营人员，甚至创始人脑中。而现实中，大多数产品还没有积累到足够多的用户就已经失败了，这里面有产品的问题，也有运营的问题。</p>\r\n<h2 id=\"h2-u5173u6CE8u6BCFu4E00u4E2Au65E9u671Fu8FDBu5165u8005\"><a name=\"关注每一个早期进入者\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>关注每一个早期进入者</h2><p>每个创始人都会与一些活跃度高的用户进行积极的互动，这在形成早期的社区氛围的过程中，非常重要。</p>\r\n<h2 id=\"h2-u60C5u611Fu7EF4u7CFB\"><a name=\"情感维系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>情感维系</h2><p>与高活跃度、高质量的用户积极进行私信互动，赠送小礼品，邀请他们参加线下活动、公司参观。任何关联都比情感关联弱，情感关联让早期用户更加愿意贡献内容，以及自发分享邀请自己的朋友进入。</p>\r\n<h2 id=\"h2-u79CDu5B50u7528u6237u7684u4E24u4E2Au7EF4u5EA6\"><a name=\"种子用户的两个维度\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>种子用户的两个维度</h2><p><strong>数量</strong>，其实少量的用户就够了，前提这些用户是种子用户，而不仅仅是初始用户。<br><strong>质量</strong>，种子用户不仅仅是传播产品最积极的用户，更是为产品出谋划策、提出建议的用户。正是因为这种既能帮助产品成长、协助优化运营策略，又能活跃分享产品的特性，才能让用户对产品具有重大价值。</p>\r\n<h2 id=\"h2-u9762u5BF9u79CDu5B50u7528u6237u505Au6709u4EF7u503Cu7684u8FD0u8425\"><a name=\"面对种子用户做有价值的运营\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>面对种子用户做有价值的运营</h2><p><strong>倾听种子用户的声音</strong>，种子用户通常很乐于沟通，而运营人员因为工作繁杂，有时无暇顾及与用户之间的沟通，其实沟通并不是简单的反馈，而是用户提了一个修改意见，你回复用户一些反馈信息，沟通的核心在于准确倾听后给予有价值的回应。</p>\r\n<p><strong>与种子用户的关系尽量保持亲密</strong>，在不破坏运营规则的前提下，通过一些小的运营策略，让用户感觉到社区的温暖气氛，因此更容易沉浸其中。</p>\r\n<p><strong>真诚的对待所有种子用户</strong>，由于每个人的个性不同，但种子用户的价值是相同的，所以运营人员应该摒弃个人偏见，不管是否喜欢某个种子用户，都要真诚的对待，因为这些种子用户，是产品可能爆发的源动力。</p>\r\n', '如何获得最初的 xxx 个用户，可以说是一个永恒的问题，一直萦绕在产品经理、运营人员，甚至创始人脑中。而现实中，大多数产品还没有积累到足够多的用户就已经失败了，这里面有产品的问题，也有运营的问题。\r\n## 关注每一个早期进入者\r\n每个创始人都会与一些活跃度高的用户进行积极的互动，这在形成早期的社区氛围的过程中，非常重要。\r\n## 情感维系\r\n与高活跃度、高质量的用户积极进行私信互动，赠送小礼品，邀请他们参加线下活动、公司参观。任何关联都比情感关联弱，情感关联让早期用户更加愿意贡献内容，以及自发分享邀请自己的朋友进入。\r\n## 种子用户的两个维度\r\n**数量**，其实少量的用户就够了，前提这些用户是种子用户，而不仅仅是初始用户。\r\n**质量**，种子用户不仅仅是传播产品最积极的用户，更是为产品出谋划策、提出建议的用户。正是因为这种既能帮助产品成长、协助优化运营策略，又能活跃分享产品的特性，才能让用户对产品具有重大价值。\r\n## 面对种子用户做有价值的运营\r\n**倾听种子用户的声音**，种子用户通常很乐于沟通，而运营人员因为工作繁杂，有时无暇顾及与用户之间的沟通，其实沟通并不是简单的反馈，而是用户提了一个修改意见，你回复用户一些反馈信息，沟通的核心在于准确倾听后给予有价值的回应。\r\n\r\n**与种子用户的关系尽量保持亲密**，在不破坏运营规则的前提下，通过一些小的运营策略，让用户感觉到社区的温暖气氛，因此更容易沉浸其中。\r\n\r\n**真诚的对待所有种子用户**，由于每个人的个性不同，但种子用户的价值是相同的，所以运营人员应该摒弃个人偏见，不管是否喜欢某个种子用户，都要真诚的对待，因为这些种子用户，是产品可能爆发的源动力。\r\n', 0, 416, 55, '', NULL, '2020-11-14 00:10:03', 0),(151, 23, 1, '', 0, '', 1, 0, 'JVM 深入理解 (六) | 类的主动使用与被动使用', '/upload/image/400947f6594c5e3ec4457d53d31e1c948601.png', '盛年不重来，一日难再晨。及时宜自勉，岁月不待人。', '<h2 id=\"h2-jvm-class-\"><a name=\"JVM 中 Class 是否为同一个类的判断\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>JVM 中 Class 是否为同一个类的判断</h2><blockquote>\r\n<p>类的完整名称必须一致</p>\r\n<p>加载类的 ClassLoader(实例对象)必须相同</p>\r\n</blockquote>\r\n<h2 id=\"h2-u7C7Bu7684u4E3Bu52A8u4F7Fu7528\"><a name=\"类的主动使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>类的主动使用</h2><blockquote>\r\n<p>创建类的实例</p>\r\n<p>访问类或接口的静态变量，或对静态变量赋值</p>\r\n<p>调用类的静态方法</p>\r\n<p>反射</p>\r\n<p>初始化一个类的子类</p>\r\n<p>Java虚拟机启动时候被标明为启动类的类</p>\r\n<p>JDK 7 开始提供的动态语言支持：<br>java.lang.invoke.MethodHandle 实例的解析结果<br>REF_getStatic、REF_putStatic、REF_invokeStatic 句柄对应的类没有初始化则初始化</p>\r\n</blockquote>\r\n<h2 id=\"h2-u7C7Bu7684u88ABu52A8u4F7Fu7528\"><a name=\"类的被动使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>类的被动使用</h2><blockquote>\r\n<p>除了以上主动情况，其他方式使用都被当作为被动使用</p>\r\n</blockquote>\r\n', '## JVM 中 Class 是否为同一个类的判断\r\n> 类的完整名称必须一致\r\n\r\n> 加载类的 ClassLoader(实例对象)必须相同\r\n\r\n## 类的主动使用\r\n> 创建类的实例\r\n\r\n> 访问类或接口的静态变量，或对静态变量赋值\r\n\r\n> 调用类的静态方法\r\n\r\n> 反射\r\n\r\n> 初始化一个类的子类\r\n\r\n> Java虚拟机启动时候被标明为启动类的类\r\n\r\n> JDK 7 开始提供的动态语言支持：\r\njava.lang.invoke.MethodHandle 实例的解析结果\r\nREF_getStatic、REF_putStatic、REF_invokeStatic 句柄对应的类没有初始化则初始化\r\n\r\n## 类的被动使用\r\n> 除了以上主动情况，其他方式使用都被当作为被动使用', 0, 306, 0, '', NULL, '2021-01-26 23:53:28', 0),(152, 42, 1, '', 0, '', 1, 0, 'Elasticsearch (三) | 基本的增删改查操作', '', '', '<p>在 Kibana 中的 Dev Tools 可以实现对 Elasticsearch 的增删改查等操作。</p>\r\n<h2 id=\"h2-u7D22u5F15\"><a name=\"索引\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>索引</h2>', '在 Kibana 中的 Dev Tools 可以实现对 Elasticsearch 的增删改查等操作。\r\n\r\n## 索引\r\n', 0, 0, 0, '', NULL, '2021-02-01 22:47:35', 1),(153, 23, 1, '', 0, '', 1, 0, 'JVM 深入理解 (七) | PC寄存器', '/upload/image/15d7ed256e9710f79de802f87b6fd60d1517.png', '有时候，坚持了你最不想干的事情之后，便可得到你最想要的东西。', '<h2 id=\"h2-u6982u8FF0\"><a name=\"概述\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>概述</h2><p><img src=\"/upload/image/21e6ec549bbffbefb844b9b36412e3a94596.png\" alt=\"\"></p>\r\n<p>JVM中的程序计数器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能运行。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。</p>\r\n<h2 id=\"h2-u4F5Cu7528\"><a name=\"作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>作用</h2><p><img src=\"/upload/image/882623eaa5128a43f24f6dfce28a691c3735.png\" alt=\"\"></p>\r\n<p>PC寄存器用来存储指向下一条指令的地址，也就是即将要指向的指令代码，由执行引擎读取下一条指令。</p>\r\n<blockquote>\r\n<p>1.PC寄存器是一块很小的内存空间，也是运行速度最快的存储区域。<br>2.在JVM规范中，每个线程都有自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。<br>3.任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的JAVA方法的JVM指令地址，如果是在执行native方法，则未指定值（undefined）。<br>4.PC寄存器是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器完成。<br>5.字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。<br>6.PC寄存器是唯一一个在JAVA虚拟机规范中没有任何OutOtMemoryError情况的区域。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u4E3Eu4F8B\"><a name=\"举例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>举例</h2><p><img src=\"/upload/image/db65cd92166c1a8511d16e69f788934c8546.png\" alt=\"\"></p>\r\n', '## 概述\r\n![](/upload/image/21e6ec549bbffbefb844b9b36412e3a94596.png)\r\n\r\nJVM中的程序计数器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能运行。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。\r\n## 作用\r\n![](/upload/image/882623eaa5128a43f24f6dfce28a691c3735.png)\r\n\r\nPC寄存器用来存储指向下一条指令的地址，也就是即将要指向的指令代码，由执行引擎读取下一条指令。\r\n\r\n> 1.PC寄存器是一块很小的内存空间，也是运行速度最快的存储区域。\r\n> 2.在JVM规范中，每个线程都有自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。\r\n> 3.任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的JAVA方法的JVM指令地址，如果是在执行native方法，则未指定值（undefined）。\r\n> 4.PC寄存器是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器完成。\r\n> 5.字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。\r\n> 6.PC寄存器是唯一一个在JAVA虚拟机规范中没有任何OutOtMemoryError情况的区域。\r\n\r\n## 举例\r\n![](/upload/image/db65cd92166c1a8511d16e69f788934c8546.png)', 0, 227, 1, '', NULL, '2021-03-15 22:40:59', 0),(154, 19, 1, '', 0, '', 1, 0, 'redis (八) | spring boot 整合 Redis', '/upload/image/deca3599525a49e9d744c711be7bbb0d9713.png', '梦想这东西和经典一样，永远不会因为时间而褪色，反而更显珍贵。', '<h2 id=\"h2-u76F8u5173u4F9Du8D56\"><a name=\"相关依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>相关依赖</h2><pre><code class=\"lang-xml\">&lt;!-- redis --&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n&lt;!-- redis 连接池 --&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\r\n    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;\r\n    &lt;version&gt;2.9.0&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n</code></pre>\r\n<h2 id=\"h2-redis-\"><a name=\"Redis 配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis 配置</h2><pre><code class=\"lang-java\">@EnableCaching\r\n@Configuration\r\npublic class RedisConfig extends CachingConfigurerSupport {\r\n\r\n    @Bean\r\n    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) {\r\n        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();\r\n        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\r\n        template.setConnectionFactory(factory);\r\n        template.setKeySerializer(redisSerializer);\r\n        template.setValueSerializer(jackson2JsonRedisSerializer);\r\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\r\n        return template;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\r\n        RedisSerializer&lt;String&gt; redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\r\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\r\n                .entryTtl(Duration.ofSeconds(600))\r\n                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))\r\n                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))\r\n                .disableCachingNullValues();\r\n        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)\r\n                .cacheDefaults(config)\r\n                .build();\r\n        return cacheManager;\r\n    }\r\n\r\n}\r\n</code></pre>\r\n<pre><code class=\"lang-yaml\">spring:\r\n  redis:\r\n    host: 192.168.1.254\r\n</code></pre>\r\n<h2 id=\"h2-u793Au4F8B\"><a name=\"示例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>示例</h2><pre><code class=\"lang-java\">@Autowired\r\nprivate RedisTemplate redisTemplate;\r\n\r\n@ApiOperation(value = &quot;设置&quot;)\r\n    @RequestMapping(value = &quot;test&quot;, method = RequestMethod.POST)\r\n    public Object test() {\r\n    redisTemplate.opsForValue().set(&quot;test&quot;, &quot;111111&quot;);\r\n    return ResultFormat.success(&quot;成功&quot;, &quot;&quot;);\r\n}\r\n\r\n@ApiOperation(value = &quot;获取&quot;)\r\n    @RequestMapping(value = &quot;detail&quot;, method = RequestMethod.GET)\r\n    public Object detail() {\r\n    String v = (String) redisTemplate.opsForValue().get(&quot;test&quot;);\r\n    return ResultFormat.success(&quot;查询成功&quot;, v);\r\n}\r\n</code></pre>\r\n', '## 相关依赖\r\n```xml\r\n<!-- redis -->\r\n<dependency>\r\n	<groupId>org.springframework.boot</groupId>\r\n	<artifactId>spring-boot-starter-data-redis</artifactId>\r\n</dependency>\r\n<!-- redis 连接池 -->\r\n<dependency>\r\n	<groupId>org.apache.commons</groupId>\r\n	<artifactId>commons-pool2</artifactId>\r\n	<version>2.9.0</version>\r\n</dependency>\r\n```\r\n\r\n## Redis 配置\r\n```java\r\n@EnableCaching\r\n@Configuration\r\npublic class RedisConfig extends CachingConfigurerSupport {\r\n\r\n    @Bean\r\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\r\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\r\n        RedisSerializer<String> redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\r\n        template.setConnectionFactory(factory);\r\n        template.setKeySerializer(redisSerializer);\r\n        template.setValueSerializer(jackson2JsonRedisSerializer);\r\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\r\n        return template;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\r\n        RedisSerializer<String> redisSerializer = new StringRedisSerializer();\r\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\r\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\r\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\r\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\r\n                .entryTtl(Duration.ofSeconds(600))\r\n                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))\r\n                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))\r\n                .disableCachingNullValues();\r\n        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)\r\n                .cacheDefaults(config)\r\n                .build();\r\n        return cacheManager;\r\n    }\r\n\r\n}\r\n```\r\n\r\n```yaml\r\nspring:\r\n  redis:\r\n    host: 192.168.1.254\r\n```\r\n\r\n## 示例\r\n```java\r\n@Autowired\r\nprivate RedisTemplate redisTemplate;\r\n\r\n@ApiOperation(value = \"设置\")\r\n	@RequestMapping(value = \"test\", method = RequestMethod.POST)\r\n	public Object test() {\r\n	redisTemplate.opsForValue().set(\"test\", \"111111\");\r\n	return ResultFormat.success(\"成功\", \"\");\r\n}\r\n\r\n@ApiOperation(value = \"获取\")\r\n	@RequestMapping(value = \"detail\", method = RequestMethod.GET)\r\n	public Object detail() {\r\n	String v = (String) redisTemplate.opsForValue().get(\"test\");\r\n	return ResultFormat.success(\"查询成功\", v);\r\n}\r\n```', 0, 172, 0, '', NULL, '2021-05-01 01:32:09', 0),(155, 13, 1, '', 0, '', 1, 0, 'MyCat | 读写分离', '/upload/image/7ba12f04550d6789f7cac700c7f1f3e19914.png', '做事有始有终值得开始的事就值得完成。聪明人做事总是有始有终', '<h2 id=\"h2-schema-xml-\"><a name=\"schema.xml 配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>schema.xml 配置</h2><pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot;?&gt;\r\n&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;\r\n&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;\r\n\r\n    &lt;schema name=&quot;mysql&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn_mysql&quot;&gt;&lt;/schema&gt;\r\n    &lt;schema name=&quot;cloud_advert&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn_advert&quot;&gt;&lt;/schema&gt;\r\n    &lt;schema name=&quot;cloud_hotel&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn_hotel&quot;&gt;&lt;/schema&gt;\r\n    &lt;schema name=&quot;cloud_scenic&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn_scenic&quot;&gt;&lt;/schema&gt;\r\n\r\n    &lt;dataNode name=&quot;dn_mysql&quot; dataHost=&quot;host_mysql&quot; database=&quot;mysql&quot; /&gt;\r\n    &lt;dataNode name=&quot;dn_advert&quot; dataHost=&quot;host_mysql&quot; database=&quot;cloud_advert&quot; /&gt;\r\n    &lt;dataNode name=&quot;dn_hotel&quot; dataHost=&quot;host_mysql&quot; database=&quot;cloud_hotel&quot; /&gt;\r\n    &lt;dataNode name=&quot;dn_scenic&quot; dataHost=&quot;host_mysql&quot; database=&quot;cloud_scenic&quot; /&gt;\r\n\r\n\r\n    &lt;dataHost name=&quot;host_mysql&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;3&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\r\n        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\r\n        &lt;writeHost host=&quot;hostM1&quot; url=&quot;10.249.1.251:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt;\r\n            &lt;readHost host=&quot;hostS1&quot; url=&quot;10.249.1.254:3306&quot; user=&quot;root&quot; password=&quot;123456&quot; /&gt;\r\n        &lt;/writeHost&gt;\r\n    &lt;/dataHost&gt;\r\n\r\n\r\n\r\n&lt;/mycat:schema&gt;\r\n</code></pre>\r\n<p>注意: schema dataNode dataHost 多个必须按照顺序写在一起，读写分离需要提前配置好 MySQL 的主从模式，balance=”3” 适用单主单从模式。</p>\r\n<h2 id=\"h2-server-xml-\"><a name=\"server.xml 配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>server.xml 配置</h2><pre><code class=\"lang-xml\">&lt;user name=&quot;root&quot; defaultAccount=&quot;true&quot;&gt;\r\n        &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;\r\n        &lt;property name=&quot;schemas&quot;&gt;mysql,cloud_advert,cloud_hotel,cloud_scenic&lt;/property&gt;        \r\n        &lt;property name=&quot;defaultSchema&quot;&gt;mysql&lt;/property&gt;\r\n&lt;/user&gt;\r\n</code></pre>\r\n<p>注意：多个 schemas 使用逗号分隔</p>\r\n', '## schema.xml 配置\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<!DOCTYPE mycat:schema SYSTEM \"schema.dtd\">\r\n<mycat:schema xmlns:mycat=\"http://io.mycat/\">\r\n	\r\n	<schema name=\"mysql\" checkSQLschema=\"true\" sqlMaxLimit=\"100\" dataNode=\"dn_mysql\"></schema>\r\n	<schema name=\"cloud_advert\" checkSQLschema=\"true\" sqlMaxLimit=\"100\" dataNode=\"dn_advert\"></schema>\r\n	<schema name=\"cloud_hotel\" checkSQLschema=\"true\" sqlMaxLimit=\"100\" dataNode=\"dn_hotel\"></schema>\r\n	<schema name=\"cloud_scenic\" checkSQLschema=\"true\" sqlMaxLimit=\"100\" dataNode=\"dn_scenic\"></schema>\r\n	\r\n	<dataNode name=\"dn_mysql\" dataHost=\"host_mysql\" database=\"mysql\" />\r\n	<dataNode name=\"dn_advert\" dataHost=\"host_mysql\" database=\"cloud_advert\" />\r\n	<dataNode name=\"dn_hotel\" dataHost=\"host_mysql\" database=\"cloud_hotel\" />\r\n	<dataNode name=\"dn_scenic\" dataHost=\"host_mysql\" database=\"cloud_scenic\" />\r\n	\r\n	\r\n	<dataHost name=\"host_mysql\" maxCon=\"1000\" minCon=\"10\" balance=\"3\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\" switchType=\"1\"  slaveThreshold=\"100\">\r\n		<heartbeat>select user()</heartbeat>\r\n		<writeHost host=\"hostM1\" url=\"10.249.1.251:3306\" user=\"root\" password=\"123456\">\r\n			<readHost host=\"hostS1\" url=\"10.249.1.254:3306\" user=\"root\" password=\"123456\" />\r\n		</writeHost>\r\n	</dataHost>\r\n\r\n	\r\n	\r\n</mycat:schema>\r\n\r\n```\r\n\r\n注意: schema dataNode dataHost 多个必须按照顺序写在一起，读写分离需要提前配置好 MySQL 的主从模式，balance=\"3\" 适用单主单从模式。\r\n\r\n## server.xml 配置\r\n```xml\r\n<user name=\"root\" defaultAccount=\"true\">\r\n		<property name=\"password\">123456</property>\r\n		<property name=\"schemas\">mysql,cloud_advert,cloud_hotel,cloud_scenic</property>		\r\n		<property name=\"defaultSchema\">mysql</property>\r\n</user>\r\n```\r\n注意：多个 schemas 使用逗号分隔', 0, 174, 0, '', NULL, '2021-05-11 23:03:06', 0),(156, 17, 1, '', 0, '', 1, 0, 'Spring Cloud Alibaba | Sentinel 流量监控与防御', '/upload/image/cc2073f3f3a87c4cee1c3aad7abae5299194.png', '质变的积累，才有量变的爆发。你没有时间可以浪费！', '<h2 id=\"h2-u5F15u5165u4F9Du8D56\"><a name=\"引入依赖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>引入依赖</h2><pre><code class=\"lang-xml\">&lt;dependency&gt;\r\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n</code></pre>\r\n<h2 id=\"h2-u914Du7F6E\"><a name=\"配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置</h2><pre><code class=\"lang-yaml\">spring:\r\n  cloud:\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        dashboard: 10.249.1.254:9080\r\n</code></pre>\r\n<p>port 为服务公布给 sentinel 访问的端口<br>dashboard sentinel监控控制台地址</p>\r\n<h2 id=\"h2-u6CE8u89E3u8D44u6E90\"><a name=\"注解资源\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>注解资源</h2><pre><code class=\"lang-java\">@SentinelResource(value = &quot;detail&quot;)\r\n</code></pre>\r\n<p>注解一般在方法上添加</p>\r\n<h2 id=\"h2-u63A7u5236u53F0\"><a name=\"控制台\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>控制台</h2><p><img src=\"/upload/image/4c1ad7ffd3ed10a43e253dee41965c019136.png\" alt=\"\"><br>访问一下相关资源，控制台才会显示</p>\r\n', '## 引入依赖\r\n```xml\r\n<dependency>\r\n	<groupId>com.alibaba.cloud</groupId>\r\n	<artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\r\n</dependency>\r\n```\r\n## 配置\r\n```yaml\r\nspring:\r\n  cloud:\r\n    sentinel:\r\n      transport:\r\n        port: 8719\r\n        dashboard: 10.249.1.254:9080\r\n```\r\nport 为服务公布给 sentinel 访问的端口\r\ndashboard sentinel监控控制台地址\r\n## 注解资源\r\n```java\r\n@SentinelResource(value = \"detail\")\r\n```\r\n注解一般在方法上添加\r\n## 控制台\r\n![](/upload/image/4c1ad7ffd3ed10a43e253dee41965c019136.png)\r\n访问一下相关资源，控制台才会显示', 0, 146, 0, '', NULL, '2021-05-23 13:32:28', 0),(157, 39, 1, '', 0, '', 1, 0, '绝世美姿 | 规范脊椎姿势', '/upload/image/6c785ffae7539129f37559436754b0215912.png', '世上并没有用来鼓励工作努力的赏赐，所有的赏赐都只是被用来奖励工作成果的。', '<p>拍摄对象的脊背必须保持端正，脊背端正是任何拍摄姿势取得理想效果的基础。</p>\r\n<h2 id=\"h2-u9888u690E\"><a name=\"颈椎\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>颈椎</h2><p>拍摄个人肖像时，使拍摄对象颈椎挺直、头部后仰，使锁骨露出；当拍摄两个人，如情侣，可以使其中一方的颈椎向另一方倾斜，从而创造一种浪漫、富有情趣的图像效果。<br><strong>身体的颈椎后仰或者倾斜时，必须以颈脖底部为轴点</strong>。假设颈脖和肩部的交接处是一个圆点，头部则是围绕着这个圆点旋转。而除枢轴点之外，颈脖应尽可能的保持修长。头部上仰或低垂时，只有下巴需要挪动。</p>\r\n<h2 id=\"h2-u80F8u690E\"><a name=\"胸椎\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>胸椎</h2><p>处理胸椎姿势时，往往容易遇到更多问题，因为弯腰、弓背与脊椎这一部分相连，拍摄对象的姿势看起来别扭不自然，往往是胸椎姿势不得体造成的。</p>\r\n<blockquote>\r\n<p>让拍摄对象将头的顶部向上提，使其尽可能接近天花板或者接近天空。强调上仰头顶的后部，而不是前额，因为强调后者，拍摄对象往往容易翘起下巴。期望的是挺直头部的同时，并不影响下巴的摆放，这一技巧能很好的延长颈椎线条。</p>\r\n</blockquote>\r\n<hr>\r\n<blockquote>\r\n<p>尽可能的吸气收腹，让人感觉浑身通透、舒展，通常让拍摄对象深吸气，吸到一半的时候按下快门，从而拍摄出自信满满、精神充沛的人像。</p>\r\n</blockquote>\r\n<hr>\r\n<blockquote>\r\n<p>让拍摄者将肩膀向下、向后微微下垂几厘米，对于延展颈部的线条有很好的效果。这不仅能突显人像头部、面部特点，还能使拍摄对象看起来更加自信、有力。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u8170u690E\"><a name=\"腰椎\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>腰椎</h2><p>腰椎位于人体臀部上方，从摄影的角度来说，由于腰椎具有明显的弧度，是脊椎中最吸引人的部分，在处理人物姿势时，应该特别值得关注。<br>人物腰椎部分有明显的弯曲度，看似一个侧置的微笑，拍摄时腰椎看似在微笑，是迷人的、性感的；反之如果完全没有微笑的弧度，则不好看。</p>\r\n', '拍摄对象的脊背必须保持端正，脊背端正是任何拍摄姿势取得理想效果的基础。\r\n\r\n## 颈椎\r\n拍摄个人肖像时，使拍摄对象颈椎挺直、头部后仰，使锁骨露出；当拍摄两个人，如情侣，可以使其中一方的颈椎向另一方倾斜，从而创造一种浪漫、富有情趣的图像效果。\r\n**身体的颈椎后仰或者倾斜时，必须以颈脖底部为轴点**。假设颈脖和肩部的交接处是一个圆点，头部则是围绕着这个圆点旋转。而除枢轴点之外，颈脖应尽可能的保持修长。头部上仰或低垂时，只有下巴需要挪动。\r\n\r\n## 胸椎\r\n处理胸椎姿势时，往往容易遇到更多问题，因为弯腰、弓背与脊椎这一部分相连，拍摄对象的姿势看起来别扭不自然，往往是胸椎姿势不得体造成的。\r\n> 让拍摄对象将头的顶部向上提，使其尽可能接近天花板或者接近天空。强调上仰头顶的后部，而不是前额，因为强调后者，拍摄对象往往容易翘起下巴。期望的是挺直头部的同时，并不影响下巴的摆放，这一技巧能很好的延长颈椎线条。\r\n\r\n------------\r\n\r\n> 尽可能的吸气收腹，让人感觉浑身通透、舒展，通常让拍摄对象深吸气，吸到一半的时候按下快门，从而拍摄出自信满满、精神充沛的人像。\r\n\r\n------------\r\n\r\n> 让拍摄者将肩膀向下、向后微微下垂几厘米，对于延展颈部的线条有很好的效果。这不仅能突显人像头部、面部特点，还能使拍摄对象看起来更加自信、有力。\r\n\r\n## 腰椎\r\n腰椎位于人体臀部上方，从摄影的角度来说，由于腰椎具有明显的弧度，是脊椎中最吸引人的部分，在处理人物姿势时，应该特别值得关注。\r\n人物腰椎部分有明显的弯曲度，看似一个侧置的微笑，拍摄时腰椎看似在微笑，是迷人的、性感的；反之如果完全没有微笑的弧度，则不好看。\r\n\r\n', 0, 81, 8, '', NULL, '2021-07-04 00:13:18', 0),(158, 4, 1, '', 0, '', 1, 0, '易经 (一) |  八卦定乾坤', '/upload/image/9c11bb135d0c4e4ab433bf2bf71772a97013.png', '中国古老文化的深奥概念，是一套用三组阴阳组成的形而上的哲学符号。其深邃的哲理解释自然、社会现象。八卦成列，象在其中矣。', '<h2 id=\"h2-u6613u7ECFu8BB2u7684u662Fu4EC0u4E48\"><a name=\"易经讲的是什么\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>易经讲的是什么</h2><p>世界上的文明都是从神话开始发展的，但是神话是虚无缥缈的，人不可能生活在神话的世界里，因此则需要一种与人类生活环境贴近的，那就是哲学，每个民族的哲学都是从神话里提升出来的，神话和哲学的目的都是为了解答宇宙和人生的问题。</p>\r\n<blockquote>\r\n<p>神话-&gt;哲学-&gt;智慧</p>\r\n</blockquote>\r\n<p>易经并不是讲知识的书，否则长时间的时代变迁，很多知识都改变了，相反的已经是讲智慧的书。</p>\r\n<blockquote>\r\n<p>一切都是人想出来的。</p>\r\n</blockquote>\r\n<p>人类正是因为有了想象，才有了大千世界，林林总总的发明和创造，才出现了各种各样的意识形态和思想流派。</p>\r\n<h2 id=\"h2-u4F0Fu7FB2u4E00u753Bu5F00u5929u5730\"><a name=\"伏羲一画开天地\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>伏羲一画开天地</h2><p>伏羲时常盘坐卦台山巅，苦思宇宙的奥秘。仰观日月星辰的变化，俯察山川风物的法则，不断地反省自己，追年逐月，风雨无阻，终于参悟天地竟是如此的简单明了，唯阴阳而已。在那个没有文字的年代，伏羲想将他的思想通过画来表示出来，于是就画了一个符号<code>—</code>，也就是伏羲用眼睛去观察宇宙万象，然后根据自己的想象构建出一套系统来，这套系统的总根源就是<code>—</code>，叫做太极。</p>\r\n<h2 id=\"h2-u592Au6781u751Fu4E24u4EEA\"><a name=\"太极生两仪\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>太极生两仪</h2><p>伏羲认为有一个阳，就有一个阴，有一个正的力量，就有一个反的力量；如果把太极<code>—</code>从中折断就成了<code>--</code>，把<code>--</code>连起来就是<code>—</code>，所谓阴中有阳，阳中有阴。祸兮福所倚，福兮祸所伏，世间很多事情都是有两面性的。</p>\r\n<h2 id=\"h2-u4E24u4EEAu751Fu56DBu8C61\"><a name=\"两仪生四象\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>两仪生四象</h2><p>而阴阳的互动、变化则产生了四象。<br><img src=\"/upload/image/b01e0700e1a0a59c3c844f42ee1415d57613.png\" alt=\"\"></p>\r\n<blockquote>\r\n<p>少阳：清晨刚开始，太阳刚出来，阳光还没有完全照射到地上，上面热下面凉。<br>老阳：到了中午，上下都很热，全都热。<br>少阴：黄昏时候，太阳已经落山了，上面已经开始凉了，地上还是热的。<br>老阴：深夜的时候，哪里都凉，全都凉了。</p>\r\n</blockquote>\r\n<h2 id=\"h2-u603Bu7ED3\"><a name=\"总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总结</h2><p><img src=\"/upload/image/658a470ec0b181334152ca93af6630ba6143.png\" alt=\"\"></p>\r\n', '## 易经讲的是什么\r\n世界上的文明都是从神话开始发展的，但是神话是虚无缥缈的，人不可能生活在神话的世界里，因此则需要一种与人类生活环境贴近的，那就是哲学，每个民族的哲学都是从神话里提升出来的，神话和哲学的目的都是为了解答宇宙和人生的问题。\r\n\r\n> 神话->哲学->智慧\r\n\r\n易经并不是讲知识的书，否则长时间的时代变迁，很多知识都改变了，相反的已经是讲智慧的书。\r\n\r\n> 一切都是人想出来的。\r\n\r\n人类正是因为有了想象，才有了大千世界，林林总总的发明和创造，才出现了各种各样的意识形态和思想流派。\r\n\r\n## 伏羲一画开天地\r\n伏羲时常盘坐卦台山巅，苦思宇宙的奥秘。仰观日月星辰的变化，俯察山川风物的法则，不断地反省自己，追年逐月，风雨无阻，终于参悟天地竟是如此的简单明了，唯阴阳而已。在那个没有文字的年代，伏羲想将他的思想通过画来表示出来，于是就画了一个符号`—`，也就是伏羲用眼睛去观察宇宙万象，然后根据自己的想象构建出一套系统来，这套系统的总根源就是`—`，叫做太极。\r\n## 太极生两仪\r\n伏羲认为有一个阳，就有一个阴，有一个正的力量，就有一个反的力量；如果把太极`—`从中折断就成了`--`，把`--`连起来就是`—`，所谓阴中有阳，阳中有阴。祸兮福所倚，福兮祸所伏，世间很多事情都是有两面性的。\r\n## 两仪生四象\r\n而阴阳的互动、变化则产生了四象。\r\n![](/upload/image/b01e0700e1a0a59c3c844f42ee1415d57613.png)\r\n> 少阳：清晨刚开始，太阳刚出来，阳光还没有完全照射到地上，上面热下面凉。\r\n> 老阳：到了中午，上下都很热，全都热。\r\n> 少阴：黄昏时候，太阳已经落山了，上面已经开始凉了，地上还是热的。\r\n> 老阴：深夜的时候，哪里都凉，全都凉了。\r\n\r\n## 总结\r\n![](/upload/image/658a470ec0b181334152ca93af6630ba6143.png)', 0, 27, 0, '', NULL, '2021-07-26 23:32:35', 0);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`cms_site` WRITE;
DELETE FROM `nunumao`.`cms_site`;
INSERT INTO `nunumao`.`cms_site` (`id`,`name`,`identifier`,`status`) VALUES (1, '默认站点', 'default', 1);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`cms_top` WRITE;
DELETE FROM `nunumao`.`cms_top`;
INSERT INTO `nunumao`.`cms_top` (`id`,`category_id`,`detail_id`) VALUES (1, 7, 3),(2, 7, 257);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_case` WRITE;
DELETE FROM `nunumao`.`crm_case`;
INSERT INTO `nunumao`.`crm_case` (`id`,`name`,`content`,`status`) VALUES ('1468977781409882114', '小程序研发方案', '需求调研,方案编写,原型设计', NULL);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_chance` WRITE;
DELETE FROM `nunumao`.`crm_chance`;
INSERT INTO `nunumao`.`crm_chance` (`id`,`user_id`,`assign_user_id`,`assign_time`,`creator_user_id`,`editor_user_id`,`serial`,`name`,`customer_id`,`contact_id`,`expect_income`,`expect_date`,`probability`,`actual_income`,`actual_time`,`progress`,`remark`,`create_time`,`update_time`,`status`) VALUES ('1460707566874316801', '1455405837959884802', '1', '2021-11-17 04:33:17', '1', NULL, 'SH11-', '小程序商城', '1450824073084170241', '1460456792357351425', 9000.00, '2021-11-27', 50, NULL, NULL, 4, '', NULL, '2021-11-17 06:32:40', 1),('1460729312444792834', '1452458091833524226', '1', '2021-11-17 05:59:42', '1', NULL, 'SH-2000', 'OA软件订制开发', '1450824073084170241', '1460448639301533698', 300000.00, '2021-11-17', 70, NULL, NULL, 3, '', '2021-11-17 05:59:42', NULL, 0);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_chance_condition` WRITE;
DELETE FROM `nunumao`.`crm_chance_condition`;
INSERT INTO `nunumao`.`crm_chance_condition` (`id`,`chance_id`,`content`,`status`) VALUES ('1461598317078491137', '1460729312444792834', '123', 0);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_contact` WRITE;
DELETE FROM `nunumao`.`crm_contact`;
INSERT INTO `nunumao`.`crm_contact` (`id`,`user_id`,`lead_id`,`assign_user_id`,`assign_time`,`creator_user_id`,`editor_user_id`,`customer_id`,`serial`,`name`,`initial`,`avatar`,`gender`,`company`,`position`,`department`,`role`,`relation`,`birthday`,`hobby`,`remark`,`create_time`,`update_time`,`last_time`,`status`) VALUES ('1460431564747046913', '1452458091833524226', NULL, '1', '2021-11-16 10:16:33', '1', NULL, NULL, 'LXR-0001', '张总', 'z', NULL, 0, NULL, '', '', NULL, NULL, NULL, '', '', '2021-11-16 10:16:33', NULL, NULL, NULL),('1460433994704539650', '1452458091833524226', NULL, '1', '2021-11-16 10:26:13', '1', NULL, '1450824073084170241', 'LXR-1123', '张总', 'z', NULL, 1, NULL, '', '', NULL, NULL, NULL, '', '', '2021-11-16 10:26:13', NULL, NULL, NULL),('1460448639301533698', '1455405837959884802', NULL, '1', '2021-11-16 11:24:24', '1', NULL, '1450824073084170241', 'GGGG', '王总', 'Z', NULL, 1, NULL, '副总裁', '总经办', 1, NULL, '2021-11-16', '抽烟', '备注', '2021-11-16 11:24:24', NULL, NULL, NULL),('1460449227712040961', '1452458091833524226', NULL, '1', '2021-11-16 11:26:44', '1', NULL, '1450824073084170241', 'AAA', '位置', 'Z', NULL, 1, NULL, '', '', 3, NULL, '2021-11-17', '', '', '2021-11-16 11:26:44', NULL, NULL, NULL),('1460456792357351425', '1455405837959884802', NULL, '1', '2021-11-16 11:56:48', '1', NULL, '1450824073084170241', 'LXR-0003', '伊泽瑞尔', 'Y', NULL, 1, NULL, 'ADC', '下路', 2, 1, '2021-11-10', '浪', '备注。。。', '2021-11-16 11:56:48', NULL, NULL, NULL),('1460458046236143617', '1452458091833524226', NULL, '1', '2021-11-16 12:01:47', '1', NULL, '1450824073084170241', 'LXR-2222', '亚索', 'Y', NULL, 1, NULL, '中单', '中路', NULL, NULL, '2021-11-22', '踏前斩(E)，浪', '', '2021-11-16 12:01:47', NULL, NULL, NULL),('1460468256967278594', '1452458091833524226', NULL, '1', '2021-11-17 06:49:12', '1', NULL, '1450824073084170241', 'LXooo', '梁总', 'L', NULL, 1, NULL, '', '', NULL, NULL, '2021-11-07', '', '', '2021-11-16 12:42:21', '2021-11-17 06:49:12', NULL, NULL);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_contact_link` WRITE;
DELETE FROM `nunumao`.`crm_contact_link`;
INSERT INTO `nunumao`.`crm_contact_link` (`id`,`contact_id`,`type`,`data_value`) VALUES ('1460741728658280450', '1460468256967278594', 0, '18966663333');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_contract` WRITE;
DELETE FROM `nunumao`.`crm_contract`;
INSERT INTO `nunumao`.`crm_contract` (`id`,`user_id`,`creator_user_id`,`editor_user_id`,`serial`,`name`,`customer_id`,`chance_id`,`type`,`total_price`,`collect_price`,`surplus_price`,`rebate_price`,`sign_date`,`expire_date`,`remark`,`create_time`,`update_time`,`status`) VALUES ('1465192185881214978', '1452458091833524226', '1', NULL, 'HT-5565', '测试合同', '1450824073084170241', '1460707566874316801', 0, 300000.00, NULL, NULL, 30000.00, '2021-11-29', '2022-11-29', '备注', '2021-11-29 13:33:34', NULL, 1);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_contract_order` WRITE;
DELETE FROM `nunumao`.`crm_contract_order`;
INSERT INTO `nunumao`.`crm_contract_order` (`id`,`contract_id`,`name`,`origin_price`,`price`,`quantity`,`unit`,`total_price`) VALUES ('1465192186170621953', '1465192185881214978', '商城程序', 300000.00, 300000.00, 1, '套', 300000.00);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_customer` WRITE;
DELETE FROM `nunumao`.`crm_customer`;
INSERT INTO `nunumao`.`crm_customer` (`id`,`user_id`,`lead_id`,`assign_user_id`,`assign_time`,`creator_user_id`,`editor_user_id`,`last_user_id`,`sea_id`,`serial`,`level`,`full_name`,`short_name`,`intro`,`website`,`phone`,`zipcode`,`address`,`create_time`,`update_time`,`move_time`,`status`) VALUES ('1450824073084170241', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'KH-0001', 4, '某商贸公司', '', '', '', '', '', '', '2021-10-20 21:59:49', NULL, NULL, 0);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_event` WRITE;
DELETE FROM `nunumao`.`crm_event`;
INSERT INTO `nunumao`.`crm_event` (`id`,`user_id`,`editor_user_id`,`content`,`customer_id`,`contact_id`,`chance_id`,`location`,`result`,`event_date`,`create_time`,`update_time`,`status`) VALUES ('1462553635472097281', '1', '1', '测试22333', '1450824073084170241', '1460448639301533698', '1460729312444792834', 3, 2, '2021-11-22', '2021-11-22 06:48:54', '2021-11-22 10:41:45', NULL),('1462567369821237250', '1', NULL, '一起打LOL', '1450824073084170241', '1460448639301533698', '1460729312444792834', 1, 1, '2021-11-22', '2021-11-22 07:43:29', NULL, NULL),('1462567544274923522', '1', NULL, 'EEEE', '1450824073084170241', '1460448639301533698', '1460729312444792834', 3, 2, '2021-11-22', '2021-11-22 07:44:10', NULL, NULL);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_lead` WRITE;
DELETE FROM `nunumao`.`crm_lead`;
INSERT INTO `nunumao`.`crm_lead` (`id`,`user_id`,`assign_user_id`,`assign_time`,`creator_user_id`,`editor_user_id`,`customer`,`telephone`,`contact`,`phone`,`email`,`address`,`remark`,`create_time`,`update_time`,`status`) VALUES ('1450459083095187457', NULL, NULL, NULL, NULL, NULL, '西途比科技', '0771-3320527', '努总', '18966668888', 'ctb@c2b666.com', '民族广场100号', '', NULL, NULL, 0);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_product` WRITE;
DELETE FROM `nunumao`.`crm_product`;
INSERT INTO `nunumao`.`crm_product` (`id`,`category_id`,`serial`,`name`,`cost_price`,`selling_price`,`unit`,`create_time`,`remark`,`status`) VALUES ('1463551361695105026', '1463332112934498306', '414', '414', 41.00, 214.00, '421', NULL, NULL, 1),('1463561563071119362', '1463560797912629249', '1241', '测试产品BBB', 456.00, 5456456.00, '个', '2021-11-25 01:34:03', '123123', 1);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_product_category` WRITE;
DELETE FROM `nunumao`.`crm_product_category`;
INSERT INTO `nunumao`.`crm_product_category` (`id`,`parent_id`,`name`,`sort`) VALUES ('1463332112934498306', '0', '一级分类A', 1),('1463560797912629249', '0', '一级分类B', 2),('1463856498636558337', '1463332112934498306', '二级分类A', 1);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`crm_receipt` WRITE;
DELETE FROM `nunumao`.`crm_receipt`;
INSERT INTO `nunumao`.`crm_receipt` (`id`,`user_id`,`creator_user_id`,`editor_user_id`,`contract_id`,`pay_type`,`price`,`price_date`,`plan_price`,`plan_date`,`diff`,`bill_type`,`bill_serial`,`remark`,`create_time`,`update_time`,`status`) VALUES ('1465216616263331842', '1455405837959884802', '1', NULL, '1465192185881214978', 1, 140000.00, '2021-12-26', NULL, NULL, NULL, 1, '', '尾款', '2021-11-29 21:31:15', NULL, NULL),('1465311772568195074', '1452458091833524226', '1', NULL, '1465192185881214978', 0, 130000.00, '2021-12-24', NULL, NULL, NULL, 1, '', '', '2021-11-29 21:28:45', NULL, NULL);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`file` WRITE;
DELETE FROM `nunumao`.`file`;
INSERT INTO `nunumao`.`file` (`id`,`folder_id`,`user_id`,`store_id`,`name`,`path`,`file_name`,`file_ext`,`file_full_name`,`file_size`,`create_time`) VALUES ('1447562926579081218', '0', NULL, NULL, '绘图1', 'upload\\', '635d31f195164d4fa964221b84a7f7c8.png', 'png', 'upload\\635d31f195164d4fa964221b84a7f7c8.png', 12992, '2021-10-11 22:01:11'),('1447620865633378306', '0', NULL, NULL, '微信图片_20211012015108', 'upload\\', '1eec23020bb740c18e6572355b7805b9.jpg', 'jpg', 'upload\\1eec23020bb740c18e6572355b7805b9.jpg', 89884, '2021-10-12 01:51:25');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`folder` WRITE;
DELETE FROM `nunumao`.`folder`;
INSERT INTO `nunumao`.`folder` (`id`,`prarent_id`,`user_id`,`store_id`,`name`,`is_system`,`create_time`) VALUES ('1', '0', NULL, NULL, '一级目录', 1, '2021-08-01 02:18:45');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_action_log` WRITE;
DELETE FROM `nunumao`.`system_action_log`;
INSERT INTO `nunumao`.`system_action_log` (`id`,`user_id`,`content`,`params`,`action`,`ip`,`url`,`exec_time`,`create_time`) VALUES ('1453800252965453826', '1452458091833524226', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 107, '2021-10-29 03:06:05'),('1453809070243864578', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 1404, '2021-10-29 03:41:07'),('1454174733540782081', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/position/list', 481, '2021-10-30 03:54:08'),('1454179290303950849', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/position/list', 440, '2021-10-30 04:12:15'),('1454189364121792514', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '116.8.37.41', '/manager/system/position/list', 37, '2021-10-30 04:52:17'),('1454691231457103873', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 55, '2021-10-31 14:06:31'),('1454920758408744962', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 81, '2021-11-01 05:18:35'),('1454922290155982850', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 109, '2021-11-01 05:24:40'),('1454922979494039553', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 64, '2021-11-01 05:27:24'),('1454930071713988610', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 115, '2021-11-01 05:55:35'),('1454930138160152577', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/profile/log', 138, '2021-11-01 05:55:51'),('1454930460995735553', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/profile/log', 672, '2021-11-01 05:57:08'),('1454931142989565953', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 575, '2021-11-01 05:59:50'),('1454931196659879937', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 66, '2021-11-01 06:00:03'),('1454931280877309954', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 11, '2021-11-01 06:00:23'),('1454931281200271362', '1', '个人中心查询日志', '{}', 'GET', '192.168.2.114', '/manager/system/profile/log', 90, '2021-11-01 06:00:23'),('1454934540388388865', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 63, '2021-11-01 06:13:20'),('1454934540430331905', '1', '个人中心查询日志', '{}', 'GET', '192.168.2.114', '/manager/system/profile/log', 84, '2021-11-01 06:13:20'),('1454935165796864002', '1', '个人中心查询日志', '{}', 'GET', '192.168.2.114', '/manager/system/profile/log', 63, '2021-11-01 06:15:50'),('1454935165884944385', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 90, '2021-11-01 06:15:50'),('1454935246918897666', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/position/list', 82, '2021-11-01 06:16:09'),('1454935265692602369', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 63, '2021-11-01 06:16:13'),('1454935265789071361', '1', '个人中心查询日志', '{}', 'GET', '192.168.2.114', '/manager/system/profile/log', 78, '2021-11-01 06:16:13'),('1454936730700075010', '1', '个人中心查询日志', '{}', 'GET', '192.168.2.114', '/manager/system/profile/log', 90, '2021-11-01 06:22:03'),('1454936730775572481', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 121, '2021-11-01 06:22:03'),('1454940663262728193', '1', '个人中心查询信息', '{}', 'GET', '192.168.2.114', '/manager/system/profile/detail', 64, '2021-11-01 06:37:40'),('1454940663501803522', '1', '个人中心查询日志', '{}', 'GET', '192.168.2.114', '/manager/system/profile/log', 125, '2021-11-01 06:37:40'),('1455033336100589569', '1', '个人中心查询日志', '{}', 'GET', '192.168.56.1', '/manager/system/profile/log', 123, '2021-11-01 12:45:55'),('1455033336150921217', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 143, '2021-11-01 12:45:55'),('1455041161761689602', '1', '个人中心查询日志', '{}', 'GET', '192.168.56.1', '/manager/system/profile/log', 70, '2021-11-01 13:17:01'),('1455041161849769986', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 90, '2021-11-01 13:17:01'),('1455041294071009282', '1', '个人中心查询日志', '{}', 'GET', '192.168.56.1', '/manager/system/profile/log', 45, '2021-11-01 13:17:33'),('1455041294071009283', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 45, '2021-11-01 13:17:33'),('1455042170269503490', '1', '个人中心查询日志', '{}', 'GET', '192.168.56.1', '/manager/system/profile/log', 94, '2021-11-01 13:21:01'),('1455042170378555393', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 121, '2021-11-01 13:21:01'),('1455042591314710529', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 68, '2021-11-01 13:22:42'),('1455042591398596610', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 89, '2021-11-01 13:22:42'),('1455043060531499010', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 63, '2021-11-01 13:24:34'),('1455043060602802177', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 81, '2021-11-01 13:24:34'),('1455043071390552065', '1', '个人中心查询日志', '{\"page\":[\"2\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 47, '2021-11-01 13:24:36'),('1455043076599877634', '1', '个人中心查询日志', '{\"page\":[\"3\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 45, '2021-11-01 13:24:38'),('1455043080223756289', '1', '个人中心查询日志', '{\"page\":[\"4\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 45, '2021-11-01 13:24:38'),('1455043093045743618', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 45, '2021-11-01 13:24:41'),('1455043104487804930', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"30\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 45, '2021-11-01 13:24:44'),('1455043118488391682', '1', '个人中心查询日志', '{\"page\":[\"2\"],\"size\":[\"30\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 46, '2021-11-01 13:24:47'),('1455043122972102658', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"30\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 47, '2021-11-01 13:24:49'),('1455043136280629250', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 46, '2021-11-01 13:24:52'),('1455046060557803522', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 37, '2021-11-01 13:36:29'),('1455046566936080386', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 272, '2021-11-01 13:38:30'),('1455047399627059201', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 29, '2021-11-01 13:41:48'),('1455047400113598466', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 142, '2021-11-01 13:41:48'),('1455047400369451010', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 202, '2021-11-01 13:41:48'),('1455047587594792961', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 31, '2021-11-01 13:42:33'),('1455047587636736001', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 41, '2021-11-01 13:42:33'),('1455047587645124609', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 45, '2021-11-01 13:42:33'),('1455048027057188865', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 69, '2021-11-01 13:44:18'),('1455048027149463553', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 92, '2021-11-01 13:44:18'),('1455048027241738241', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 113, '2021-11-01 13:44:18'),('1455048134666252289', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 46, '2021-11-01 13:44:43'),('1455048134678835202', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 48, '2021-11-01 13:44:43'),('1455048134750138370', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 65, '2021-11-01 13:44:43'),('1455048469212327937', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 53, '2021-11-01 13:46:03'),('1455048469292019713', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 72, '2021-11-01 13:46:03'),('1455048469354934274', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 87, '2021-11-01 13:46:03'),('1455097925009960962', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 64, '2021-11-01 17:02:34'),('1455097925102235649', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 86, '2021-11-01 17:02:34'),('1455097925190316033', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 106, '2021-11-01 17:02:34'),('1455098071516999681', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 43, '2021-11-01 17:03:09'),('1455098071516999682', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 45, '2021-11-01 17:03:09'),('1455098071600885762', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 64, '2021-11-01 17:03:09'),('1455098433963585538', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 69, '2021-11-01 17:04:36'),('1455098434051665922', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 93, '2021-11-01 17:04:36'),('1455098434143940610', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 114, '2021-11-01 17:04:36'),('1455100342145454081', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 39, '2021-11-01 17:12:11'),('1455100342636187649', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 163, '2021-11-01 17:12:11'),('1455100343026257922', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 255, '2021-11-01 17:12:11'),('1455101454739116033', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 50, '2021-11-01 17:16:36'),('1455101454944636929', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 98, '2021-11-01 17:16:36'),('1455101455045300225', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 121, '2021-11-01 17:16:36'),('1455101555377246209', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 50, '2021-11-01 17:17:00'),('1455101555377246210', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 50, '2021-11-01 17:17:00'),('1455101555469520897', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 73, '2021-11-01 17:17:00'),('1455101996429283330', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 70, '2021-11-01 17:18:45'),('1455101996550918145', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 98, '2021-11-01 17:18:45'),('1455101996668358657', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 125, '2021-11-01 17:18:45'),('1455102742814068737', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 46, '2021-11-01 17:21:43'),('1455102742889566209', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 65, '2021-11-01 17:21:43'),('1455102742948286465', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 82, '2021-11-01 17:21:43'),('1455102864385970177', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 38, '2021-11-01 17:22:12'),('1455102864423718914', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 47, '2021-11-01 17:22:12'),('1455102864448884738', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 54, '2021-11-01 17:22:12'),('1455105490414538753', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 48, '2021-11-01 17:32:38'),('1455105490452287490', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 56, '2021-11-01 17:32:38'),('1455105490502619138', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 70, '2021-11-01 17:32:38'),('1455105618911236097', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 24, '2021-11-01 17:33:09'),('1455105618953179137', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 36, '2021-11-01 17:33:09'),('1455105618953179138', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 37, '2021-11-01 17:33:09'),('1455105813594050561', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 25, '2021-11-01 17:33:55'),('1455105813635993602', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 36, '2021-11-01 17:33:55'),('1455105813652770818', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 38, '2021-11-01 17:33:55'),('1455105861920821250', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 25, '2021-11-01 17:34:07'),('1455105861979541505', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 37, '2021-11-01 17:34:07'),('1455105861979541506', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 37, '2021-11-01 17:34:07'),('1455106557143486465', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 64, '2021-11-01 17:36:52'),('1455106557256732673', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 90, '2021-11-01 17:36:52'),('1455106557336424449', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 110, '2021-11-01 17:36:52'),('1455107192756703234', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 36, '2021-11-01 17:39:24'),('1455107192907698177', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 72, '2021-11-01 17:39:24'),('1455107192974807041', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 88, '2021-11-01 17:39:24'),('1455107240735346689', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 37, '2021-11-01 17:39:35'),('1455107240735346690', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 37, '2021-11-01 17:39:35'),('1455107240806649857', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 54, '2021-11-01 17:39:35'),('1455109179959218178', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 31, '2021-11-01 17:47:18'),('1455109179967606786', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 35, '2021-11-01 17:47:18'),('1455109184216436737', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 1046, '2021-11-01 17:47:19'),('1455109213719171073', '1', '个人中心更新信息', '{\"account\":[\"jb18cm\"],\"avatar\":[\"https://wx.qlogo.cn/mmopen/vi_32/RTFEzBqQVO7AoGhY7XFkBuwcjflShmSgMVlyQfJG0S5qLZ058wqWlCgdSQ5fC9xWREOo3T2ORflxmOhbI3GgNw/132\"],\"birthday\":[\"\"],\"chief\":[\"\"],\"createTime\":[\"2021-10-02 19:00:29\"],\"departShow\":[\"无\"],\"email\":[\"292018748@qq.com\"],\"gender\":[\"2\"],\"groups\":[\"无\"],\"id\":[\"1\"],\"idCard\":[\"\"],\"isAdmin\":[\"1\"],\"lastLoginIp\":[\"116.252.20.184\"],\"lastLoginTime\":[\"2021-05-18 17:42:15\"],\"loginCount\":[\"3580\"],\"name\":[\"超级管理员\"],\"nickName\":[\"超管\"],\"origin\":[\"\"],\"phone\":[\"18978810172\"],\"position\":[\"\"],\"role\":[\"7\"],\"status\":[\"1\"],\"updateTime\":[\"2020-05-27 00:57:43\"],\"workNo\":[\"\"]}', 'PUT', '192.168.56.1', '/manager/system/profile/edit', 65, '2021-11-01 17:47:26'),('1455109218467123202', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 55, '2021-11-01 17:47:27'),('1455109229481365506', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 20, '2021-11-01 17:47:30'),('1455109229577834498', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 44, '2021-11-01 17:47:30'),('1455109229636554753', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 57, '2021-11-01 17:47:30'),('1455110060582703105', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 69, '2021-11-01 17:50:48'),('1455110060679172098', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 93, '2021-11-01 17:50:48'),('1455110060771446785', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 114, '2021-11-01 17:50:48'),('1455110390439546881', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 65, '2021-11-01 17:52:06'),('1455110390552793090', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 90, '2021-11-01 17:52:06'),('1455110390636679170', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 111, '2021-11-01 17:52:06'),('1455111677033910273', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 44, '2021-11-01 17:57:13'),('1455111677210071041', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 87, '2021-11-01 17:57:13'),('1455111677302345730', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 107, '2021-11-01 17:57:13'),('1455111701822246914', '1', '个人中心查询日志', '{\"page\":[\"2\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 44, '2021-11-01 17:57:19'),('1455111866993938433', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 45, '2021-11-01 17:57:58'),('1455111866993938434', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 46, '2021-11-01 17:57:58'),('1455111867082018817', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 66, '2021-11-01 17:57:58'),('1455111899432685569', '1', '个人中心查询日志', '{\"page\":[\"2\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 45, '2021-11-01 17:58:06'),('1455112493752979457', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 286, '2021-11-01 18:00:28'),('1455112676595273729', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"100\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 62, '2021-11-01 18:01:11'),('1455112712674676737', '1', '个人中心查询日志', '{\"page\":[\"2\"],\"size\":[\"100\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 42, '2021-11-01 18:01:20'),('1455112728399122433', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"100\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 62, '2021-11-01 18:01:24'),('1455112756240912385', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 38, '2021-11-01 18:01:30'),('1455113756280426498', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 72, '2021-11-01 18:05:29'),('1455113756355923970', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 90, '2021-11-01 18:05:29'),('1455113756444004354', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 111, '2021-11-01 18:05:29'),('1455113829655580673', '1', '个人中心更新信息', '{\"account\":[\"jb18cm\"],\"avatar\":[\"https://wx.qlogo.cn/mmopen/vi_32/RTFEzBqQVO7AoGhY7XFkBuwcjflShmSgMVlyQfJG0S5qLZ058wqWlCgdSQ5fC9xWREOo3T2ORflxmOhbI3GgNw/132\"],\"birthday\":[\"\"],\"chief\":[\"\"],\"createTime\":[\"2021-10-02 19:00:29\"],\"departShow\":[\"无\"],\"email\":[\"1837239261@qq.com\"],\"gender\":[\"2\"],\"groups\":[\"无\"],\"id\":[\"1\"],\"idCard\":[\"\"],\"isAdmin\":[\"1\"],\"lastLoginIp\":[\"116.252.20.184\"],\"lastLoginTime\":[\"2021-05-18 17:42:15\"],\"loginCount\":[\"3580\"],\"name\":[\"超级管理员\"],\"nickName\":[\"超管\"],\"origin\":[\"\"],\"phone\":[\"18978810172\"],\"position\":[\"\"],\"role\":[\"7\"],\"status\":[\"1\"],\"updateTime\":[\"2020-05-27 00:57:43\"],\"workNo\":[\"\"]}', 'PUT', '192.168.56.1', '/manager/system/profile/edit', 54, '2021-11-01 18:05:46'),('1455113834340618241', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 52, '2021-11-01 18:05:47'),('1455114353608036353', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 63, '2021-11-01 18:07:51'),('1455114353704505346', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 86, '2021-11-01 18:07:51'),('1455114353784197122', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 106, '2021-11-01 18:07:51'),('1455114774451916801', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 52, '2021-11-01 18:09:32'),('1455114774535802882', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 72, '2021-11-01 18:09:32'),('1455114774598717442', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 88, '2021-11-01 18:09:32'),('1455115575094218753', '1', '个人中心更新信息', '{\"account\":[\"jb18cm\"],\"avatar\":[\"https://wx.qlogo.cn/mmopen/vi_32/RTFEzBqQVO7AoGhY7XFkBuwcjflShmSgMVlyQfJG0S5qLZ058wqWlCgdSQ5fC9xWREOo3T2ORflxmOhbI3GgNw/132\"],\"birthday\":[\"\"],\"chief\":[\"\"],\"createTime\":[\"2021-10-02 19:00:29\"],\"departShow\":[\"无部门\"],\"email\":[\"1837239261@qq.com\"],\"gender\":[\"1\"],\"groups\":[\"无角色\"],\"id\":[\"1\"],\"idCard\":[\"\"],\"isAdmin\":[\"1\"],\"lastLoginIp\":[\"116.252.20.184\"],\"lastLoginTime\":[\"2021-05-18 17:42:15\"],\"loginCount\":[\"3580\"],\"name\":[\"超级管理员\"],\"nickName\":[\"超管\"],\"origin\":[\"\"],\"phone\":[\"18978810172\"],\"position\":[\"\"],\"role\":[\"7\"],\"status\":[\"1\"],\"updateTime\":[\"2020-05-27 00:57:43\"],\"workNo\":[\"\"]}', 'PUT', '192.168.56.1', '/manager/system/profile/edit', 369, '2021-11-01 18:12:42'),('1455115579699564546', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 46, '2021-11-01 18:12:44'),('1455115976447168513', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 54, '2021-11-01 18:14:18'),('1455117599923834882', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 291, '2021-11-01 18:20:45'),('1455117600007720961', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 310, '2021-11-01 18:20:45'),('1455117600443928578', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 416, '2021-11-01 18:20:45'),('1455187272992366593', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 34, '2021-11-01 22:57:37'),('1455187273546014722', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 173, '2021-11-01 22:57:37'),('1455187273671843842', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 205, '2021-11-01 22:57:37'),('1455188569942466561', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 404, '2021-11-01 23:02:46'),('1455188570282205185', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 486, '2021-11-01 23:02:46'),('1455188570647109634', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 575, '2021-11-01 23:02:46'),('1455189713167130625', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 322, '2021-11-01 23:07:18'),('1455189713427177474', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 387, '2021-11-01 23:07:18'),('1455189713699807234', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 451, '2021-11-01 23:07:19'),('1455189767181377537', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 53, '2021-11-01 23:07:31'),('1455189767189766146', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 56, '2021-11-01 23:07:31'),('1455189767282040834', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 77, '2021-11-01 23:07:31'),('1455189792829546498', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 25, '2021-11-01 23:07:37'),('1455189792909238274', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 44, '2021-11-01 23:07:37'),('1455189792909238275', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 44, '2021-11-01 23:07:37'),('1455190843448172545', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 55, '2021-11-01 23:11:48'),('1455190843523670017', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 76, '2021-11-01 23:11:48'),('1455190843599167489', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 92, '2021-11-01 23:11:48'),('1455191560489607170', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 37, '2021-11-01 23:14:39'),('1455191560628019202', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 72, '2021-11-01 23:14:39'),('1455191560716099586', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 91, '2021-11-01 23:14:39'),('1455199614824161281', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 38, '2021-11-01 23:46:39'),('1455199614962573313', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 72, '2021-11-01 23:46:39'),('1455199615029682177', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 88, '2021-11-01 23:46:39'),('1455199753265553410', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 21, '2021-11-01 23:47:12'),('1455199753320079361', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 35, '2021-11-01 23:47:12'),('1455199753538183170', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 87, '2021-11-01 23:47:12'),('1455200355177537538', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 65, '2021-11-01 23:49:36'),('1455200355274006530', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 88, '2021-11-01 23:49:36'),('1455200355366281218', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 109, '2021-11-01 23:49:36'),('1455200372353212418', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 36, '2021-11-01 23:49:40'),('1455200372390961154', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 44, '2021-11-01 23:49:40'),('1455200372428709889', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 52, '2021-11-01 23:49:40'),('1455201139982147586', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 67, '2021-11-01 23:52:43'),('1455201140078616577', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 91, '2021-11-01 23:52:43'),('1455201140170891265', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 112, '2021-11-01 23:52:43'),('1455201262984306689', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 44, '2021-11-01 23:53:12'),('1455201262992695298', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 46, '2021-11-01 23:53:12'),('1455201263068192769', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 65, '2021-11-01 23:53:12'),('1455201331099803650', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 25, '2021-11-01 23:53:28'),('1455201331129163778', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 32, '2021-11-01 23:53:28'),('1455201331179495425', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 43, '2021-11-01 23:53:28'),('1455201656930115585', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 52, '2021-11-01 23:54:46'),('1455201657110470658', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 96, '2021-11-01 23:54:46'),('1455201657211133954', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 119, '2021-11-01 23:54:46'),('1455201668053409794', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 44, '2021-11-01 23:54:49'),('1455201668070187009', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 48, '2021-11-01 23:54:49'),('1455201668145684481', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 66, '2021-11-01 23:54:49'),('1455201921116741634', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 77, '2021-11-01 23:55:49'),('1455201921234182145', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 104, '2021-11-01 23:55:49'),('1455201921330651138', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 129, '2021-11-01 23:55:49'),('1455202133247860737', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 29, '2021-11-01 23:56:40'),('1455202133319163905', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 46, '2021-11-01 23:56:40'),('1455202133331746817', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 50, '2021-11-01 23:56:40'),('1455202495581200386', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 50, '2021-11-01 23:58:06'),('1455202495660892162', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 70, '2021-11-01 23:58:06'),('1455202495732195330', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 86, '2021-11-01 23:58:06'),('1455202858145226753', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 54, '2021-11-01 23:59:32'),('1455202858216529921', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 72, '2021-11-01 23:59:32'),('1455202858292027393', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 89, '2021-11-01 23:59:32'),('1455204641584214017', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 64, '2021-11-02 00:06:38'),('1455204641919758337', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 150, '2021-11-02 00:06:38'),('1455204642007838721', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 173, '2021-11-02 00:06:38'),('1455205269618323457', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 72, '2021-11-02 00:09:07'),('1455205269723181057', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 98, '2021-11-02 00:09:07'),('1455205269815455745', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 119, '2021-11-02 00:09:07'),('1455205317454360578', '1', '个人中心修改密码', '{\"oldPwd\":[\"\"],\"phone\":[\"18978810172\"]}', 'PUT', '192.168.56.1', '/manager/system/profile/password', 56, '2021-11-02 00:09:19'),('1455205322089066497', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 51, '2021-11-02 00:09:20'),('1455205504952332289', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 38, '2021-11-02 00:10:03'),('1455205505006858241', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 50, '2021-11-02 00:10:03'),('1455205505015246850', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 53, '2021-11-02 00:10:03'),('1455212056014778370', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 36, '2021-11-02 00:36:05'),('1455212056065110017', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 48, '2021-11-02 00:36:05'),('1455212060167139329', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 1026, '2021-11-02 00:36:06'),('1455212684963246082', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 327, '2021-11-02 00:38:35'),('1455212685168766978', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 375, '2021-11-02 00:38:35'),('1455212685701443586', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 503, '2021-11-02 00:38:35'),('1455212757436624898', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 45, '2021-11-02 00:38:53'),('1455212757445013505', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 46, '2021-11-02 00:38:53'),('1455212757528899586', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 66, '2021-11-02 00:38:53'),('1455212876097679362', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 24, '2021-11-02 00:39:21'),('1455212876189954049', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 45, '2021-11-02 00:39:21'),('1455212876215119874', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 52, '2021-11-02 00:39:21'),('1455213169447301121', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 298, '2021-11-02 00:40:31'),('1455213169518604290', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 315, '2021-11-02 00:40:31'),('1455213169946423298', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 416, '2021-11-02 00:40:31'),('1455213188925648898', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 19, '2021-11-02 00:40:35'),('1455213189064060929', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 52, '2021-11-02 00:40:35'),('1455213189122781185', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 68, '2021-11-02 00:40:35'),('1455213335629819906', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 20, '2021-11-02 00:41:10'),('1455213335726288897', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 43, '2021-11-02 00:41:10'),('1455213335759843329', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 50, '2021-11-02 00:41:10'),('1455213557625942017', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 18, '2021-11-02 00:42:03'),('1455213557730799618', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 43, '2021-11-02 00:42:03'),('1455213557768548353', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 53, '2021-11-02 00:42:03'),('1455316129237991426', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 22, '2021-11-02 07:29:38'),('1455316129611284482', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 119, '2021-11-02 07:29:38'),('1455316129862942721', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 179, '2021-11-02 07:29:38'),('1455317314053373953', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 341, '2021-11-02 07:34:21'),('1455317314275672066', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 395, '2021-11-02 07:34:21'),('1455317314753822722', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 509, '2021-11-02 07:34:21'),('1455319324618162177', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 46, '2021-11-02 07:42:20'),('1455319324634939393', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 49, '2021-11-02 07:42:20'),('1455319324706242562', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 67, '2021-11-02 07:42:20'),('1455400947145633794', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 49, '2021-11-02 13:06:40'),('1455400947367931906', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 107, '2021-11-02 13:06:41'),('1455400947430846466', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 123, '2021-11-02 13:06:41'),('1455432102565695490', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 94, '2021-11-02 15:10:29'),('1455432202230747137', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 82, '2021-11-02 15:10:52'),('1455432304643067905', '1', '用户管理查询详情', '{\"id\":[\"1455405837959884802\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 70, '2021-11-02 15:11:17'),('1455432461098995713', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 39, '2021-11-02 15:11:54'),('1455432546310475778', '1452458091833524226', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 74, '2021-11-02 15:12:14'),('1455432791245246465', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 70, '2021-11-02 15:13:13'),('1455433547855745026', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 405, '2021-11-02 15:16:13'),('1455433564423245825', '1', '用户管理查询详情', '{\"id\":[\"1455405837959884802\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 98, '2021-11-02 15:16:17'),('1455433596992016386', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-02 15:16:25'),('1455433665606635522', '1', '用户管理编辑用户', '{\"account\":[\"jb18cm\"],\"avatar\":[\"1eec23020bb740c18e6572355b7805b9.jpg\"],\"birthday\":[\"\"],\"chief\":[\"\"],\"createTime\":[\"2021-10-02 19:00:29\"],\"departNames\":[\"\"],\"email\":[\"1837239261@qq.com\"],\"gender\":[\"1\"],\"groups\":[\"\"],\"groupsName\":[\"\"],\"id\":[\"1\"],\"idCard\":[\"\"],\"isAdmin\":[\"1\"],\"lastLoginIp\":[\"192.168.56.1\"],\"lastLoginTime\":[\"2021-11-02 14:27:05\"],\"leader\":[\"0\"],\"loginCount\":[\"3583\"],\"name\":[\"超级管理员\"],\"nickName\":[\"超管\"],\"origin\":[\"\"],\"phone\":[\"18978810172\"],\"position\":[\"\"],\"role\":[\"1\",\"2\",\"4\"],\"status\":[\"1\"],\"updateTime\":[\"2020-05-27 00:57:43\"],\"workNo\":[\"A8888\"]}', 'PUT', '192.168.56.1', '/manager/system/user/edit', 261, '2021-11-02 15:16:41'),('1455433670488805378', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 47, '2021-11-02 15:16:42'),('1455433683247878146', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 68, '2021-11-02 15:16:45'),('1455433781537198082', '1', '用户管理查询详情', '{\"id\":[\"1455405837959884802\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 92, '2021-11-02 15:17:09'),('1455433806434586625', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 68, '2021-11-02 15:17:15'),('1455438118925647874', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 116, '2021-11-02 15:34:23'),('1455438209983987714', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 65, '2021-11-02 15:34:45'),('1455438210244034562', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 129, '2021-11-02 15:34:45'),('1455438210726379521', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 244, '2021-11-02 15:34:45'),('1455637757459828738', '1', '用户管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/user/list', 717, '2021-11-03 04:47:40'),('1455644713843064833', '1', '用户管理查询列表', '{\"page\":[\"1\"],\"search\":[\"努\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/user/list', 471, '2021-11-03 05:15:19'),('1455654769502326786', '1', '用户管理查询列表', '{\"page\":[\"1\"],\"search\":[\"努\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/user/list', 121, '2021-11-03 05:55:16'),('1455654809490821122', '1', '用户管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/user/list', 70, '2021-11-03 05:55:26'),('1455655556848709633', '1', '用户管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/user/list', 47646, '2021-11-03 05:58:24'),('1455663325043646465', '1', '用户管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/user/list', 611, '2021-11-03 06:29:16'),('1456308259607228418', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 68, '2021-11-05 01:12:01'),('1456313249130319874', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 67, '2021-11-05 01:31:50'),('1456316212515147778', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 600, '2021-11-05 01:43:37'),('1456316459404464129', '1', '查询数据规则列表', '{\"ruleId\":[\"1443047248912232450\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 63, '2021-11-05 01:44:36'),('1456316626602004482', '1', '查询数据规则列表', '{\"ruleId\":[\"1441843159402545154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 66, '2021-11-05 01:45:15'),('1456316899391148033', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 58, '2021-11-05 01:46:21'),('1456317467056640002', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 50, '2021-11-05 01:48:36'),('1456317529161699330', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 61, '2021-11-05 01:48:51'),('1456317573680041986', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 57, '2021-11-05 01:49:01'),('1456321595434569730', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 60, '2021-11-05 02:05:00'),('1456321743992623105', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 58, '2021-11-05 02:05:36'),('1456322431074144258', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 50, '2021-11-05 02:08:19'),('1456322762772262913', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 64, '2021-11-05 02:09:38'),('1456322947980144642', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 63, '2021-11-05 02:10:23'),('1456323008185184258', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 75, '2021-11-05 02:10:37'),('1456323475573256193', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 66, '2021-11-05 02:12:28'),('1456323878817857538', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 120, '2021-11-05 02:14:05'),('1456323997910925314', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 53, '2021-11-05 02:14:33'),('1456324107499700226', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 70, '2021-11-05 02:14:59'),('1456324457073967106', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 56, '2021-11-05 02:16:22'),('1456325280562642946', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 54, '2021-11-05 02:19:39'),('1456325888854163457', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 52, '2021-11-05 02:22:04'),('1456326060434751489', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 69, '2021-11-05 02:22:45'),('1456326069502836738', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 51, '2021-11-05 02:22:47'),('1456326081838284802', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 48, '2021-11-05 02:22:50'),('1456326282636394497', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 53, '2021-11-05 02:23:38'),('1456326297236766721', '1', '查询数据规则列表', '{\"ruleId\":[\"1437100346605641729\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 53, '2021-11-05 02:23:41'),('1456326548827897858', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 65, '2021-11-05 02:24:41'),('1456326823475118081', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 50, '2021-11-05 02:25:47'),('1456326881473953794', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 49, '2021-11-05 02:26:00'),('1456328995998760962', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.42.63', '/manager/system/rule/dataRuleList', 550, '2021-11-05 02:34:25'),('1456591028753551362', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 71, '2021-11-05 19:55:38'),('1456591721509965825', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 306, '2021-11-05 19:58:23'),('1456592933986811905', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 32, '2021-11-05 20:03:12'),('1456710553792790529', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 26, '2021-11-06 03:50:35'),('1456711069818011650', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 25, '2021-11-06 03:52:38'),('1456711371380080641', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 24, '2021-11-06 03:53:50'),('1456711474010505218', '1', '新增数据规则', '{\"apiId\":[\"/manager/system/rule/list\"],\"field\":[\"login_count\"],\"name\":[\"登录次数\"],\"type\":[\"2\"],\"value\":[\"1000\"]}', 'POST', '192.168.56.1', '/manager/system/rule/dataRuleAdd', 51, '2021-11-06 03:54:14'),('1456716559956324353', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 71, '2021-11-06 04:14:27'),('1456720830680596481', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 76, '2021-11-06 04:31:25'),('1456731424775245826', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 76, '2021-11-06 05:13:31'),('1456734119540068354', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 2036, '2021-11-06 05:24:14'),('1456792449969135617', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 72, '2021-11-06 09:16:01'),('1456800447588216834', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 79, '2021-11-06 09:47:47'),('1456813897232232450', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 70, '2021-11-06 10:41:14'),('1456814554014101506', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 321, '2021-11-06 10:43:51'),('1456818471666040833', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 78, '2021-11-06 10:59:25'),('1456818605955072002', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 50, '2021-11-06 10:59:57'),('1457068856509607938', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 52, '2021-11-07 03:34:21'),('1457069095870148609', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 37, '2021-11-07 03:35:18'),('1457070260808724482', '1', '新增数据规则', '{\"apiId\":[\"/manager/system/profile/info\"],\"field\":[\"name\"],\"name\":[\"测试规则\"],\"ruleId\":[\"1441846243914678273\"],\"type\":[\"0\"],\"value\":[\"\"]}', 'POST', '192.168.2.114', '/manager/system/rule/dataRuleAdd', 408, '2021-11-07 03:39:56'),('1457071702667833345', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 45, '2021-11-07 03:45:40'),('1457073662259359745', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 51, '2021-11-07 03:53:27'),('1457073763677630466', '1', '新增数据规则', '{\"apiId\":[\"/manager/system/profile/info\"],\"field\":[\"name\"],\"name\":[\"隐藏名称\"],\"ruleId\":[\"1441846243914678273\"],\"type\":[\"0\"],\"value\":[\"\"]}', 'POST', '192.168.2.114', '/manager/system/rule/dataRuleAdd', 100, '2021-11-07 03:53:51'),('1457073925439352834', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 52, '2021-11-07 03:54:30'),('1457074506090409986', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 52, '2021-11-07 03:56:48'),('1457074766799958017', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 39, '2021-11-07 03:57:50'),('1457074929044025345', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 50, '2021-11-07 03:58:29'),('1457075245990801410', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 49, '2021-11-07 03:59:44'),('1457075524291260418', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 40, '2021-11-07 04:00:51'),('1457075711952809985', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 43, '2021-11-07 04:01:36'),('1457076118993235970', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 37, '2021-11-07 04:03:13'),('1457076182956371970', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 68, '2021-11-07 04:03:28'),('1457084140582744066', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 55, '2021-11-07 04:35:05'),('1457084149747298306', '1', '查询数据规则详情', '{\"id\":[\"1457073763266588674\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleDetail', 42, '2021-11-07 04:35:07'),('1457084663289573378', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 65, '2021-11-07 04:37:10'),('1457084673032941569', '1', '查询数据规则详情', '{\"id\":[\"1457073763266588674\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleDetail', 50, '2021-11-07 04:37:12'),('1457086441393356801', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 85, '2021-11-07 04:44:14'),('1457086449974902786', '1', '查询数据规则详情', '{\"id\":[\"1457073763266588674\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleDetail', 34, '2021-11-07 04:44:16'),('1457086473869852673', '1', '编辑数据规则', '{\"apiId\":[\"/manager/system/profile/info\"],\"field\":[\"name\"],\"id\":[\"1457073763266588674\"],\"name\":[\"隐藏名称22\"],\"ruleId\":[\"1441846243914678273\"],\"type\":[\"0\"],\"value\":[\"\"]}', 'PUT', '192.168.2.114', '/manager/system/rule/dataRuleEdit', 97, '2021-11-07 04:44:21'),('1457086478840102914', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 62, '2021-11-07 04:44:23'),('1457086931019628545', '1', '查询数据规则详情', '{\"id\":[\"1457073763266588674\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleDetail', 484, '2021-11-07 04:46:10'),('1457086945372536833', '1', '编辑数据规则', '{\"apiId\":[\"/manager/system/profile/info\"],\"field\":[\"name\"],\"id\":[\"1457073763266588674\"],\"name\":[\"隐藏名称\"],\"ruleId\":[\"1441846243914678273\"],\"type\":[\"0\"],\"value\":[\"\"]}', 'PUT', '192.168.2.114', '/manager/system/rule/dataRuleEdit', 67, '2021-11-07 04:46:14'),('1457086950216957954', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 52, '2021-11-07 04:46:15'),('1457089626308739073', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 492, '2021-11-07 04:56:53'),('1457089825420738561', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 46, '2021-11-07 04:57:40'),('1457089832823685121', '1', '删除数据规则', '{\"id\":[\"1457073763266588674\"]}', 'DELETE', '192.168.2.114', '/manager/system/rule/dataRuleDelete', 81, '2021-11-07 04:57:42'),('1457089837533888513', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 43, '2021-11-07 04:57:43'),('1457089961693675521', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 38, '2021-11-07 04:58:13'),('1457090080182763522', '1', '新增数据规则', '{\"apiId\":[\"/manager/system/profile/info\"],\"field\":[\"name\"],\"name\":[\"隐藏名称\"],\"ruleId\":[\"1441846243914678273\"],\"type\":[\"0\"],\"value\":[\"\"]}', 'POST', '192.168.2.114', '/manager/system/rule/dataRuleAdd', 71, '2021-11-07 04:58:41'),('1457090085228511234', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 74, '2021-11-07 04:58:42'),('1457090118728417281', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.2.114', '/manager/system/rule/dataRuleList', 89, '2021-11-07 04:58:50'),('1457090262039396354', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/user/list', 145, '2021-11-07 04:59:25'),('1457429068556361730', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 57, '2021-11-08 03:25:42'),('1457434371574292481', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 424, '2021-11-08 03:46:47'),('1457434371821756418', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 484, '2021-11-08 03:46:47'),('1457434372337655809', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 606, '2021-11-08 03:46:47'),('1457435041689853953', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 279, '2021-11-08 03:49:26'),('1457435041857626113', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 319, '2021-11-08 03:49:26'),('1457435042386108417', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 445, '2021-11-08 03:49:27'),('1457435189929140226', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 48, '2021-11-08 03:50:02'),('1457545118530674690', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 29, '2021-11-08 11:06:51'),('1457545134548721665', '1', '删除数据规则', '{\"id\":[\"1457090079914328066\"]}', 'DELETE', '192.168.56.1', '/manager/system/rule/dataRuleDelete', 58, '2021-11-08 11:06:55'),('1457545139141484546', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 32, '2021-11-08 11:06:56'),('1457545780073078785', '1', '新增数据规则', '{\"apiId\":[\"1457069077436182529\"],\"field\":[\"name\"],\"name\":[\"隐藏名称\"],\"ruleId\":[\"1441846243914678273\"],\"type\":[\"0\"],\"value\":[\"\"]}', 'POST', '192.168.56.1', '/manager/system/rule/dataRuleAdd', 386, '2021-11-08 11:09:29'),('1457545784703590401', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 29, '2021-11-08 11:09:30'),('1457545861409021954', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 30, '2021-11-08 11:09:48'),('1457546140925829122', '1', '新增数据规则', '{\"apiId\":[\"1457069077436182529\"],\"field\":[\"login_count\"],\"name\":[\"登录次数\"],\"ruleId\":[\"1441846243914678273\"],\"type\":[\"2\"],\"value\":[\"1000\"]}', 'POST', '192.168.56.1', '/manager/system/rule/dataRuleAdd', 279, '2021-11-08 11:10:55'),('1457546145472454658', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 20, '2021-11-08 11:10:56'),('1457546329002614786', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 20, '2021-11-08 11:11:39'),('1457565806658412545', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 407, '2021-11-08 12:29:03'),('1457565895435051009', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 31, '2021-11-08 12:29:24'),('1457566432096247810', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 390, '2021-11-08 12:31:32'),('1457566612958830593', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 23, '2021-11-08 12:32:15'),('1457566711021658114', '1', '查询数据规则列表', '{\"ruleId\":[\"1441843159402545154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 23, '2021-11-08 12:32:39'),('1457566774418563073', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888272542015490\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 24, '2021-11-08 12:32:54'),('1457568963123830785', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 379, '2021-11-08 12:41:36'),('1457569031151247362', '1', '新增数据规则', '{\"apiId\":[\"1457568283017437185\"],\"field\":[\"name\"],\"name\":[\"隐藏名称\"],\"ruleId\":[\"1435888084180017154\"],\"type\":[\"0\"],\"value\":[\"\"]}', 'POST', '192.168.56.1', '/manager/system/rule/dataRuleAdd', 55, '2021-11-08 12:41:52'),('1457569035773370370', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 27, '2021-11-08 12:41:53'),('1457569056677781506', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 53, '2021-11-08 12:41:58'),('1457569281672830977', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 54, '2021-11-08 12:42:52'),('1457569707277225985', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 13907, '2021-11-08 12:44:33'),('1457693215810473985', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 27, '2021-11-08 20:55:20'),('1457697274596458498', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 107, '2021-11-08 21:11:28'),('1457697387691671554', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 61, '2021-11-08 21:11:55'),('1457704801207881729', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 108, '2021-11-08 21:41:22'),('1457705075716689922', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 386, '2021-11-08 21:42:28'),('1457765932995751937', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 121, '2021-11-09 01:44:17'),('1457765987488149505', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 62, '2021-11-09 01:44:30'),('1457766226173407234', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 32, '2021-11-09 01:45:27'),('1457766397259067394', '1', '新增数据规则', '{\"apiId\":[\"1457568283017437185\"],\"field\":[\"phone\"],\"name\":[\"手机号\"],\"ruleId\":[\"1435888084180017154\"],\"type\":[\"1\"],\"value\":[\"18978810172\"]}', 'POST', '192.168.56.1', '/manager/system/rule/dataRuleAdd', 57, '2021-11-09 01:46:08'),('1457766401923133441', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 29, '2021-11-09 01:46:09'),('1457766511893590018', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 53, '2021-11-09 01:46:35'),('1457766632798597121', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 52, '2021-11-09 01:47:04'),('1457766653782700034', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 49, '2021-11-09 01:47:09'),('1457767331406065666', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 115, '2021-11-09 01:49:50'),('1457767509387161602', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 32, '2021-11-09 01:50:33'),('1457785941381959681', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 86, '2021-11-09 03:03:47'),('1458197120931688450', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 93, '2021-11-10 06:17:40'),('1458198287917084674', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 372, '2021-11-10 06:22:19'),('1458198308880216065', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 73, '2021-11-10 06:22:24'),('1458211532958605314', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 92, '2021-11-10 07:14:56'),('1458211565128916994', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 78, '2021-11-10 07:15:04'),('1458211812794179585', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 46, '2021-11-10 07:16:03'),('1458211822931812353', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-10 07:16:06'),('1458226349052272642', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 70, '2021-11-10 08:13:49'),('1458235635958554626', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 93, '2021-11-10 08:50:43'),('1458237788110516226', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 472, '2021-11-10 08:59:16'),('1458375627955539970', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 330, '2021-11-10 18:07:00'),('1458376840587546626', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 54, '2021-11-10 18:11:49'),('1458532963001073666', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 79, '2021-11-11 04:32:11'),('1458561385173651458', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 379, '2021-11-11 06:25:08'),('1458896604514836482', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 67, '2021-11-12 04:37:10'),('1458896614581166081', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 50, '2021-11-12 04:37:13'),('1458896685993385986', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 27, '2021-11-12 04:37:30'),('1458896686257627138', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 90, '2021-11-12 04:37:30'),('1458896686333124610', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 110, '2021-11-12 04:37:30'),('1458899371304247297', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 400, '2021-11-12 04:48:10'),('1458905223197188098', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 44, '2021-11-12 05:11:25'),('1458905223390126081', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 90, '2021-11-12 05:11:25'),('1458905223914414082', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 216, '2021-11-12 05:11:25'),('1458906187069218818', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 47, '2021-11-12 05:15:15'),('1458906374118400002', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-12 05:15:59'),('1458906952181571586', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 41, '2021-11-12 05:18:17'),('1458907083895300097', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 36, '2021-11-12 05:18:49'),('1458907084075655169', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 77, '2021-11-12 05:18:49'),('1458907084528640001', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 187, '2021-11-12 05:18:49'),('1458907954192408577', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 349, '2021-11-12 05:22:16'),('1458907954293071873', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 372, '2021-11-12 05:22:16'),('1458907954943188994', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 527, '2021-11-12 05:22:16'),('1458907973389737986', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 29, '2021-11-12 05:22:21'),('1458907973553315842', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 66, '2021-11-12 05:22:21'),('1458907973637201922', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 87, '2021-11-12 05:22:21'),('1458921201117257729', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 46, '2021-11-12 06:14:54'),('1458921201301807106', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 90, '2021-11-12 06:14:54'),('1458921201851260929', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 220, '2021-11-12 06:14:55'),('1458927493743468546', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 316, '2021-11-12 06:39:55'),('1458927493923823618', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 359, '2021-11-12 06:39:55'),('1458927494548774913', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 507, '2021-11-12 06:39:55'),('1458927539952115714', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 24, '2021-11-12 06:40:06'),('1458927540115693570', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 63, '2021-11-12 06:40:06'),('1458927540199579649', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 84, '2021-11-12 06:40:06'),('1458927558432219137', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 24, '2021-11-12 06:40:10'),('1458927558528688130', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 46, '2021-11-12 06:40:10'),('1458927558558048258', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 53, '2021-11-12 06:40:10'),('1458927627055226881', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 20, '2021-11-12 06:40:27'),('1458927627151695873', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 43, '2021-11-12 06:40:27'),('1458927627239776258', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 64, '2021-11-12 06:40:27'),('1458927656096587778', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 23, '2021-11-12 06:40:33'),('1458927656146919426', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 36, '2021-11-12 06:40:33'),('1458927656251777025', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 63, '2021-11-12 06:40:33'),('1458994637189423105', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 71, '2021-11-12 11:06:43'),('1458994665182208002', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 75, '2021-11-12 11:06:50'),('1458994696744345601', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 68, '2021-11-12 11:06:57'),('1458999852030595073', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 719, '2021-11-12 11:27:26'),('1458999938399703042', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 70, '2021-11-12 11:27:47'),('1459000228905586690', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 65, '2021-11-12 11:28:56'),('1459000235893297153', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 92, '2021-11-12 11:28:58'),('1459000621228199937', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 428, '2021-11-12 11:30:30'),('1459000776304201729', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 57, '2021-11-12 11:31:07'),('1459000807212027906', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 60, '2021-11-12 11:31:14'),('1459000818700226561', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 80, '2021-11-12 11:31:17'),('1459000935306072065', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 63, '2021-11-12 11:31:45'),('1459001003505455105', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 54, '2021-11-12 11:32:01'),('1459001021146697730', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 55, '2021-11-12 11:32:05'),('1459001027282964481', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 80, '2021-11-12 11:32:06'),('1459001132580966401', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 56, '2021-11-12 11:32:32'),('1459001900885184513', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 322, '2021-11-12 11:35:35'),('1459001905763160066', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 71, '2021-11-12 11:35:36'),('1459001944354951170', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 45, '2021-11-12 11:35:45'),('1459001955377582082', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 65, '2021-11-12 11:35:48'),('1459002467028144130', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 45, '2021-11-12 11:37:50'),('1459002491019563010', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 44, '2021-11-12 11:37:55'),('1459002520014786561', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-12 11:38:02'),('1459003588442451970', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 101, '2021-11-12 11:42:17'),('1459003604556967938', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 78, '2021-11-12 11:42:21'),('1459004009001050113', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 98, '2021-11-12 11:43:57'),('1459004052009443330', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 78, '2021-11-12 11:44:08'),('1459004586879721473', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 1448, '2021-11-12 11:46:15'),('1459004769461968898', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 37823, '2021-11-12 11:46:59'),('1459005128498585602', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 38171, '2021-11-12 11:48:24'),('1459101051190784002', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 97, '2021-11-12 18:09:34'),('1459101073139576833', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 79, '2021-11-12 18:09:39'),('1459101129158701058', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-12 18:09:53'),('1459101661294280706', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 100, '2021-11-12 18:12:00'),('1459101680558718978', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 78, '2021-11-12 18:12:04'),('1459101906061279233', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 50, '2021-11-12 18:12:58'),('1459101919915065346', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 68, '2021-11-12 18:13:01'),('1459101955906387969', '1', '用户管理查询详情', '{\"id\":[\"1455405837959884802\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 91, '2021-11-12 18:13:10'),('1459102551061356545', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 316, '2021-11-12 18:15:32'),('1459102651984760834', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 96, '2021-11-12 18:15:56'),('1459102660788604930', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 75, '2021-11-12 18:15:58'),('1459102677028950018', '1', '用户管理查询详情', '{\"id\":[\"1455405837959884802\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 90, '2021-11-12 18:16:02'),('1459102692568846338', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 69, '2021-11-12 18:16:05'),('1459102982160252930', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 115, '2021-11-12 18:17:14'),('1459103000606801922', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 87, '2021-11-12 18:17:19'),('1459103721561522178', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 326, '2021-11-12 18:20:11'),('1459104337511841793', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 415, '2021-11-12 18:22:38'),('1459104352900743170', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 79, '2021-11-12 18:22:41'),('1459104377928155137', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 57, '2021-11-12 18:22:47'),('1459104387491168257', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 79, '2021-11-12 18:22:49'),('1459104608191250433', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 66, '2021-11-12 18:23:42'),('1459104623810838530', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 82, '2021-11-12 18:23:46'),('1459104693901852674', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 62, '2021-11-12 18:24:03'),('1459104703913656322', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 57, '2021-11-12 18:24:05'),('1459104710997835777', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 87, '2021-11-12 18:24:07'),('1459105200670244865', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 46, '2021-11-12 18:26:03'),('1459105216050757633', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-12 18:26:07'),('1459105481625698306', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 47, '2021-11-12 18:27:10'),('1459105494330245122', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 65, '2021-11-12 18:27:13'),('1459105723502821377', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 46, '2021-11-12 18:28:08'),('1459105743329296386', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-12 18:28:13'),('1459105994144481282', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 47, '2021-11-12 18:29:13'),('1459106008937791489', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-12 18:29:16'),('1459106112474185729', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 46, '2021-11-12 18:29:41'),('1459106124163710977', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-12 18:29:44'),('1459106168317149186', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 45, '2021-11-12 18:29:54'),('1459106182879772673', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 69, '2021-11-12 18:29:58'),('1459106277775900674', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 45, '2021-11-12 18:30:20'),('1459106289071161345', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 65, '2021-11-12 18:30:23'),('1459106344817655810', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 45, '2021-11-12 18:30:36'),('1459106406763331585', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 47, '2021-11-12 18:30:51'),('1459106415936274433', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-12 18:30:53'),('1459106578708824066', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 46, '2021-11-12 18:31:32'),('1459106667539988481', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 45, '2021-11-12 18:31:53'),('1459106686607294466', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 69, '2021-11-12 18:31:58'),('1459106843033862145', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 47, '2021-11-12 18:32:35'),('1459106858678616065', '1', '用户管理查询详情', '{\"id\":[\"1455405837959884802\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 93, '2021-11-12 18:32:39'),('1459106950215106561', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 46, '2021-11-12 18:33:00'),('1459106962412142594', '1', '用户管理查询详情', '{\"id\":[\"1455405837959884802\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 97, '2021-11-12 18:33:03'),('1459106995521978369', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 46, '2021-11-12 18:33:11'),('1459107007714820097', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 67, '2021-11-12 18:33:14'),('1459107069589192706', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 45, '2021-11-12 18:33:29'),('1459107082406985729', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 75, '2021-11-12 18:33:32'),('1459107191471472641', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 45, '2021-11-12 18:33:58'),('1459107212761759745', '1', '用户管理查询详情', '{\"id\":[\"1455405837959884802\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 92, '2021-11-12 18:34:03'),('1459107434254565378', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 44, '2021-11-12 18:34:56'),('1459107453921656833', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 47, '2021-11-12 18:35:01'),('1459107466760421378', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 67, '2021-11-12 18:35:04'),('1459108278836396034', '1', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 286, '2021-11-12 18:38:17'),('1459108416367624194', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 48, '2021-11-12 18:38:50'),('1459109863117291522', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 41, '2021-11-12 18:44:35'),('1459109877688303617', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 62, '2021-11-12 18:44:38'),('1459110067958710274', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 61, '2021-11-12 18:45:24'),('1459110613981593602', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 426, '2021-11-12 18:47:34'),('1459110965443297282', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 44, '2021-11-12 18:48:58'),('1459110972800106498', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 74, '2021-11-12 18:49:00'),('1459113147169243138', '1', '用户管理查询详情', '{\"id\":[\"1455405837959884802\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 1379, '2021-11-12 18:57:38'),('1459113262239973377', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 43, '2021-11-12 18:58:05'),('1459113529513607170', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 46, '2021-11-12 18:59:09'),('1459113529702350850', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 92, '2021-11-12 18:59:09'),('1459113530226638849', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 217, '2021-11-12 18:59:09'),('1459115106014068738', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 346, '2021-11-12 19:05:25'),('1459115171537485826', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 41, '2021-11-12 19:05:41'),('1459115333924159489', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 41, '2021-11-12 19:06:19'),('1459115334091931649', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 82, '2021-11-12 19:06:19'),('1459115334683328514', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 222, '2021-11-12 19:06:19'),('1459116740999905282', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 54, '2021-11-12 19:11:55'),('1459116767080087553', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 52, '2021-11-12 19:12:01'),('1459117898447454209', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 43, '2021-11-12 19:16:31'),('1459117922174631938', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 43, '2021-11-12 19:16:36'),('1459117941640396802', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 63, '2021-11-12 19:16:41'),('1459540124669894658', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 79, '2021-11-13 23:14:17'),('1459540143095472129', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 76, '2021-11-13 23:14:22'),('1459543644622053378', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 112, '2021-11-13 23:28:17'),('1459546716219924481', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 60, '2021-11-13 23:40:29'),('1459554960946532353', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 26, '2021-11-14 00:13:15'),('1459554993808904194', '1', '删除数据规则', '{\"id\":[\"1457546139755618306\"]}', 'DELETE', '192.168.56.1', '/manager/system/rule/dataRuleDelete', 52, '2021-11-14 00:13:22'),('1459554998317780993', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 23, '2021-11-14 00:13:23'),('1459555003556466690', '1', '删除数据规则', '{\"id\":[\"1457545778445688833\"]}', 'DELETE', '192.168.56.1', '/manager/system/rule/dataRuleDelete', 45, '2021-11-14 00:13:25'),('1459555008061149185', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 22, '2021-11-14 00:13:26'),('1459555039497457665', '1', '查询数据规则列表', '{\"ruleId\":[\"1441846243914678273\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 22, '2021-11-14 00:13:33'),('1459555051228925953', '1', '查询数据规则列表', '{\"ruleId\":[\"1437100346605641729\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 22, '2021-11-14 00:13:36'),('1459555077007118338', '1', '查询数据规则列表', '{\"ruleId\":[\"1435888084180017154\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 22, '2021-11-14 00:13:42'),('1459555353856348161', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 49, '2021-11-14 00:14:48'),('1459583530733424641', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 86, '2021-11-14 02:06:46'),('1459584444110229506', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 308, '2021-11-14 02:10:24'),('1459584444181532674', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 326, '2021-11-14 02:10:24'),('1459584444617740290', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 430, '2021-11-14 02:10:24'),('1459590602590015490', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 25, '2021-11-14 02:34:52'),('1459590602757787650', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 65, '2021-11-14 02:34:52'),('1459590602904588289', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 99, '2021-11-14 02:34:52'),('1459590663499698178', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 24, '2021-11-14 02:35:07'),('1459590663612944386', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 53, '2021-11-14 02:35:07'),('1459590663730384897', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 80, '2021-11-14 02:35:07'),('1459590722375143426', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 32, '2021-11-14 02:35:21'),('1459590722417086466', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 43, '2021-11-14 02:35:21'),('1459590722580664321', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 82, '2021-11-14 02:35:21'),('1459590766209814530', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 30, '2021-11-14 02:35:31'),('1459590766251757569', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 39, '2021-11-14 02:35:31'),('1459590766427918338', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 81, '2021-11-14 02:35:31'),('1459591643649822721', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 354, '2021-11-14 02:39:00'),('1459591643846955009', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 401, '2021-11-14 02:39:00'),('1459591644400603138', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 534, '2021-11-14 02:39:01'),('1459670612536066050', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/user/list', 143, '2021-11-14 07:52:48'),('1460072035406356482', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 39, '2021-11-15 10:27:55'),('1460072035771260930', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 131, '2021-11-15 10:27:55'),('1460072036278771714', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 251, '2021-11-15 10:27:55'),('1460166954861293569', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 1046, '2021-11-15 16:45:05'),('1460323367227076609', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/profile/log', 403, '2021-11-16 03:06:37'),('1460323367315156994', '1', '个人中心查询权限', '{}', 'GET', '10.249.1.66', '/manager/system/profile/permission', 429, '2021-11-16 03:06:37'),('1460323367801696257', '1', '个人中心查询信息', '{}', 'GET', '10.249.1.66', '/manager/system/profile/detail', 544, '2021-11-16 03:06:37'),('1460741530297061378', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/profile/log', 468, '2021-11-17 06:48:15'),('1460741530406113281', '1', '个人中心查询权限', '{}', 'GET', '10.249.1.66', '/manager/system/profile/permission', 498, '2021-11-17 06:48:15'),('1460741531064619009', '1', '个人中心查询信息', '{}', 'GET', '10.249.1.66', '/manager/system/profile/detail', 655, '2021-11-17 06:48:15'),('1460857892084801537', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.2.114', '/manager/system/user/list', 527, '2021-11-17 14:30:38'),('1461019176062951425', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 82, '2021-11-18 01:11:31'),('1461275583223984130', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 53, '2021-11-18 18:10:23'),('1461275591025389569', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '10.249.1.66', '/manager/system/user/detail', 70, '2021-11-18 18:10:25'),('1461276156111384578', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 43, '2021-11-18 18:12:39'),('1461276536517980162', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 51, '2021-11-18 18:14:10'),('1461276556747108354', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 51, '2021-11-18 18:14:15'),('1461276593749258241', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/position/list', 52, '2021-11-18 18:14:24'),('1461277893383712770', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 46, '2021-11-18 18:19:34'),('1461278175933001729', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 55, '2021-11-18 18:20:41'),('1461278230391844866', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 55, '2021-11-18 18:20:54'),('1461278609640812546', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 53, '2021-11-18 18:22:24'),('1461279167214809089', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 62, '2021-11-18 18:24:37'),('1461279175955738626', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 58, '2021-11-18 18:24:39'),('1461279325021302785', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 58, '2021-11-18 18:25:15'),('1461279336903766017', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/position/list', 57, '2021-11-18 18:25:18'),('1461279392792866817', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 58, '2021-11-18 18:25:31'),('1461279567112335361', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 56, '2021-11-18 18:26:13'),('1461279677808406529', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 57, '2021-11-18 18:26:39'),('1461279696749883393', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 61, '2021-11-18 18:26:44'),('1461279714227548161', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 57, '2021-11-18 18:26:48'),('1461279736725794818', '1', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '10.249.1.66', '/manager/system/user/detail', 82, '2021-11-18 18:26:53'),('1461280037595803649', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 57, '2021-11-18 18:28:05'),('1461281582982918146', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.66', '/manager/system/user/list', 47, '2021-11-18 18:34:13'),('1464002535881965570', '1', '职务管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 63, '2021-11-26 06:46:19'),('1464002834310889474', '1', '职务管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 44, '2021-11-26 06:47:30'),('1464003461128650753', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 339, '2021-11-26 06:50:00'),('1464004306658394114', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 49, '2021-11-26 06:53:21'),('1464004355752722434', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 49, '2021-11-26 06:53:33'),('1464004617963831297', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 44, '2021-11-26 06:54:35'),('1464004946847596546', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 334, '2021-11-26 06:55:54'),('1464007099267940354', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 59, '2021-11-26 07:04:27'),('1464007396816060417', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 437, '2021-11-26 07:05:38'),('1464007830570008578', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 50, '2021-11-26 07:07:21'),('1464008225283375105', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 41, '2021-11-26 07:08:56'),('1464008596856766466', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 380, '2021-11-26 07:10:24'),('1464009496346230785', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 65, '2021-11-26 07:13:59'),('1464010023071121410', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 43, '2021-11-26 07:16:04'),('1464010250268180482', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 44, '2021-11-26 07:16:58'),('1464010316378800130', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 45, '2021-11-26 07:17:14'),('1464010665013542914', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 43, '2021-11-26 07:18:37'),('1464010939266498562', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 61, '2021-11-26 07:19:43'),('1464011327097012226', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 51, '2021-11-26 07:21:15'),('1464011487738855425', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 50, '2021-11-26 07:21:53'),('1464011626767450114', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 51, '2021-11-26 07:22:26'),('1464011753460596738', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 50, '2021-11-26 07:22:57'),('1464013260360777729', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 53, '2021-11-26 07:28:56'),('1464013457312710658', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 52, '2021-11-26 07:29:43'),('1464013528695570434', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 51, '2021-11-26 07:30:00'),('1464013619611303938', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 52, '2021-11-26 07:30:22'),('1464013874079727618', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 54, '2021-11-26 07:31:22'),('1464014485701525505', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 398, '2021-11-26 07:33:48'),('1464014536440020994', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 48, '2021-11-26 07:34:00'),('1464014795178246146', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 406, '2021-11-26 07:35:02'),('1464017008038510593', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 45, '2021-11-26 07:43:49'),('1464017845242560513', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 41, '2021-11-26 07:47:09'),('1464018019910156289', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 43, '2021-11-26 07:47:51'),('1464018080702398466', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 42, '2021-11-26 07:48:05'),('1464018230497771521', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 41, '2021-11-26 07:48:41'),('1464019037410557953', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 51, '2021-11-26 07:51:53'),('1464019176955052034', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 49, '2021-11-26 07:52:27'),('1464019758767931393', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 50, '2021-11-26 07:54:45'),('1464019863692640258', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 49, '2021-11-26 07:55:10'),('1464019899495219202', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 49, '2021-11-26 07:55:19'),('1464021124022272001', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 41, '2021-11-26 08:00:11'),('1464101864630239233', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 83, '2021-11-26 13:21:01'),('1464101928899559426', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 44, '2021-11-26 13:21:16'),('1464101943223107586', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 45, '2021-11-26 13:21:20'),('1464102758377701377', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 335, '2021-11-26 13:24:34'),('1464102782637555714', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 40, '2021-11-26 13:24:40'),('1464102822126927873', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 42, '2021-11-26 13:24:49'),('1464102939580022785', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 40, '2021-11-26 13:25:17'),('1464103351641030657', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 100, '2021-11-26 13:26:55'),('1464104394969956354', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 55, '2021-11-26 13:31:04'),('1464104432337010690', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 54, '2021-11-26 13:31:13'),('1464104477861986306', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 51, '2021-11-26 13:31:24'),('1464104534392815618', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 50, '2021-11-26 13:31:37'),('1464104607822495746', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 52, '2021-11-26 13:31:55'),('1464104757366210562', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 58, '2021-11-26 13:32:31'),('1464104992159154177', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 51, '2021-11-26 13:33:27'),('1464105005123747842', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 50, '2021-11-26 13:33:30'),('1464105943884382210', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 96, '2021-11-26 13:37:13'),('1464106053309579265', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 48, '2021-11-26 13:37:40'),('1464106317735280641', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '10.249.1.87', '/manager/system/position/list', 49, '2021-11-26 13:38:43'),('1465344916386222081', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 68, '2021-11-29 23:40:28'),('1465347030416146434', '1', '查询数据规则列表', '{\"ruleId\":[\"1453131599475417089\"]}', 'GET', '192.168.56.1', '/manager/system/rule/dataRuleList', 27, '2021-11-29 23:48:52'),('1465348599010344961', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 64, '2021-11-29 23:55:06'),('1465349072303996929', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 46, '2021-11-29 23:56:58'),('1465349368166006786', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 47, '2021-11-29 23:58:09'),('1465349386285400066', '1452458091833524226', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 72, '2021-11-29 23:58:13'),('1465349714833620994', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 46, '2021-11-29 23:59:32'),('1465349722442088449', '1452458091833524226', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 68, '2021-11-29 23:59:33'),('1465349809993990145', '1452458091833524226', '用户管理查询详情', '{\"id\":[\"1455405837959884802\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 91, '2021-11-29 23:59:54'),('1465349821738041345', '1452458091833524226', '用户管理查询详情', '{\"id\":[\"1\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 66, '2021-11-29 23:59:57'),('1465349963505516545', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"努努\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 49, '2021-11-30 00:00:31'),('1465349978181386242', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 49, '2021-11-30 00:00:34'),('1465363204273139714', '1452458091833524226', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 75, '2021-11-30 00:53:08'),('1465363271730130945', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 62, '2021-11-30 00:53:24'),('1465366001580306433', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 56, '2021-11-30 01:04:15'),('1465366021691994114', '1452458091833524226', '用户管理查询详情', '{\"id\":[\"1452458091833524226\"]}', 'GET', '192.168.56.1', '/manager/system/user/detail', 86, '2021-11-30 01:04:19'),('1465378272905830401', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/user/list', 93, '2021-11-30 01:53:00'),('1465575692419751938', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 465, '2021-11-30 14:57:29'),('1465575692847570945', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 574, '2021-11-30 14:57:29'),('1465575694768562177', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 1032, '2021-11-30 14:57:29'),('1465578667083063298', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 401, '2021-11-30 15:09:18'),('1465578667494105090', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 500, '2021-11-30 15:09:18'),('1465578669838721026', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 1058, '2021-11-30 15:09:19'),('1465582541051289601', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 31, '2021-11-30 15:24:42'),('1465582541248421890', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 79, '2021-11-30 15:24:42'),('1465582545358839809', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 1058, '2021-11-30 15:24:43'),('1465644988944637954', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 384, '2021-11-30 19:32:50'),('1465663013404041217', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 47, '2021-11-30 20:44:28'),('1465681744184238081', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 261, '2021-11-30 21:58:54'),('1465681744326844418', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 294, '2021-11-30 21:58:54'),('1465681744813383681', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 410, '2021-11-30 21:58:54'),('1465682037068292098', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 47, '2021-11-30 22:00:03'),('1465699472995540994', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 46, '2021-11-30 23:09:20'),('1465699473180090370', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 91, '2021-11-30 23:09:20'),('1465699473733738498', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 223, '2021-11-30 23:09:21'),('1465700843014610945', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 408, '2021-11-30 23:14:47'),('1465700843127857153', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 435, '2021-11-30 23:14:47'),('1465700843912192001', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 621, '2021-11-30 23:14:47'),('1465705849944059905', '1', '个人中心查询权限', '{}', 'GET', '124.227.43.61', '/manager/system/profile/permission', 130, '2021-11-30 23:34:41'),('1465705849944059906', '1', '个人中心查询信息', '{}', 'GET', '124.227.43.61', '/manager/system/profile/detail', 149, '2021-11-30 23:34:41'),('1465705850128609281', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/profile/log', 188, '2021-11-30 23:34:41'),('1467423023536562177', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/profile/log', 12, '2021-12-05 17:18:07'),('1467423023553339393', '1', '个人中心查询信息', '{}', 'GET', '124.227.43.61', '/manager/system/profile/detail', 13, '2021-12-05 17:18:07'),('1467423023586893826', '1', '个人中心查询权限', '{}', 'GET', '124.227.43.61', '/manager/system/profile/permission', 33, '2021-12-05 17:18:07'),('1467425077202018306', '1452458091833524226', '个人中心查询权限', '{}', 'GET', '124.227.43.61', '/manager/system/profile/permission', 7, '2021-12-05 17:26:17'),('1467425077302681601', '1452458091833524226', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/profile/log', 32, '2021-12-05 17:26:17'),('1467425077436899330', '1452458091833524226', '个人中心查询信息', '{}', 'GET', '124.227.43.61', '/manager/system/profile/detail', 63, '2021-12-05 17:26:17'),('1467431324701712385', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/user/list', 18, '2021-12-05 17:51:06'),('1467431383723958273', '1452458091833524226', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/user/list', 10, '2021-12-05 17:51:20'),('1467432406471434241', '1452458091833524226', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/position/list', 23, '2021-12-05 17:55:24'),('1467433192072962050', '1452458091833524226', '个人中心查询信息', '{}', 'GET', '124.227.43.61', '/manager/system/profile/detail', 19, '2021-12-05 17:58:31'),('1467433192156848130', '1452458091833524226', '个人中心查询权限', '{}', 'GET', '124.227.43.61', '/manager/system/profile/permission', 12, '2021-12-05 17:58:31'),('1467433192278482946', '1452458091833524226', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/profile/log', 15, '2021-12-05 17:58:31'),('1467433320821317633', '1', '个人中心查询权限', '{}', 'GET', '124.227.43.61', '/manager/system/profile/permission', 11, '2021-12-05 17:59:02'),('1467433320838094850', '1', '个人中心查询信息', '{}', 'GET', '124.227.43.61', '/manager/system/profile/detail', 15, '2021-12-05 17:59:02'),('1467433320859066370', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/profile/log', 21, '2021-12-05 17:59:02'),('1467433725420658689', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/user/list', 16, '2021-12-05 18:00:38'),('1467433888964960257', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/user/list', 16, '2021-12-05 18:01:17'),('1467434035849486338', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '124.227.43.61', '/manager/system/user/list', 14, '2021-12-05 18:01:52'),('1468780556507455490', '1', '个人中心修改密码', '{\"oldPwd\":[\"123456\"],\"password\":[\"123456\"],\"repassword\":[\"123456\"]}', 'PUT', '192.168.56.1', '/manager/system/profile/password', 336, '2021-12-09 11:12:28'),('1468780593761263617', '1', '个人中心修改密码', '{\"oldPwd\":[\"qwe123456.\"],\"password\":[\"123456\"],\"repassword\":[\"123456\"]}', 'PUT', '192.168.56.1', '/manager/system/profile/password', 268, '2021-12-09 11:12:37'),('1468781631583068162', '1', '个人中心修改密码', '{\"oldPwd\":[\"123456\"],\"password\":[\"qwe123456.\"],\"repassword\":[\"qwe123456.\"]}', 'PUT', '192.168.56.1', '/manager/system/profile/password', 239, '2021-12-09 11:16:44'),('1468782681346056194', '1452458091833524226', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 399, '2021-12-09 11:20:55'),('1468782681459302401', '1452458091833524226', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 426, '2021-12-09 11:20:55'),('1468782807586217986', '1452458091833524226', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 26, '2021-12-09 11:21:25'),('1468782807800127489', '1452458091833524226', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 79, '2021-12-09 11:21:25'),('1468783315113779201', '1452458091833524226', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 314, '2021-12-09 11:23:26'),('1468783315214442498', '1452458091833524226', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 337, '2021-12-09 11:23:26'),('1468783383380271105', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 28, '2021-12-09 11:23:42'),('1468783383422214145', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 39, '2021-12-09 11:23:42'),('1468783908939116545', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 42, '2021-12-09 11:25:47'),('1468783909455015937', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 170, '2021-12-09 11:25:47'),('1468783909966721025', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 295, '2021-12-09 11:25:47'),('1468784923415425025', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 333, '2021-12-09 11:29:49'),('1468784923713220610', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 404, '2021-12-09 11:29:49'),('1468784924174594049', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 512, '2021-12-09 11:29:49'),('1468785009314770945', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 67, '2021-12-09 11:30:10'),('1468786382479568897', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 73, '2021-12-09 11:35:37'),('1468786407821553666', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 69, '2021-12-09 11:35:43'),('1468786484787032066', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 70, '2021-12-09 11:36:01'),('1468836166942863361', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 88, '2021-12-09 14:53:27'),('1468836535144034305', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 74, '2021-12-09 14:54:54'),('1468836759245697025', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 70, '2021-12-09 14:55:48'),('1468836979639595009', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 69, '2021-12-09 14:56:40'),('1468837068151992322', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 69, '2021-12-09 14:57:01'),('1468837086757924865', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 69, '2021-12-09 14:57:06'),('1468839404555481089', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 79, '2021-12-09 15:06:18'),('1468839488475115521', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 78, '2021-12-09 15:06:38'),('1468840182787616769', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 90, '2021-12-09 15:09:24'),('1468840277755047937', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 70, '2021-12-09 15:09:47'),('1468842455991332866', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 417, '2021-12-09 15:18:26'),('1468842563248074754', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 82, '2021-12-09 15:18:52'),('1468842576535629826', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 79, '2021-12-09 15:18:55'),('1468842593778413570', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 31, '2021-12-09 15:18:59'),('1468842593996517378', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 81, '2021-12-09 15:18:59'),('1468842594097180673', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 106, '2021-12-09 15:18:59'),('1468842733981413377', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 68, '2021-12-09 15:19:32'),('1468842787500732418', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 67, '2021-12-09 15:19:45'),('1468842821814333441', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 68, '2021-12-09 15:19:53'),('1468843489056796673', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 378, '2021-12-09 15:22:32'),('1468843489157459969', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 401, '2021-12-09 15:22:32'),('1468843489694330881', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 531, '2021-12-09 15:22:32'),('1468844063814856706', '1', '个人中心查询日志', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/profile/log', 384, '2021-12-09 15:24:49'),('1468844064045543426', '1', '个人中心查询权限', '{}', 'GET', '192.168.56.1', '/manager/system/profile/permission', 440, '2021-12-09 15:24:49'),('1468844064397864962', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 523, '2021-12-09 15:24:49'),('1468844139794673665', '1', '用户管理查询列表', '{\"search\":[\"\"],\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/user/list', 60, '2021-12-09 15:25:07'),('1468844307499724802', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 61, '2021-12-09 15:25:47'),('1468844370439450626', '1', '职务管理查询列表', '{\"page\":[\"1\"],\"size\":[\"10\"]}', 'GET', '192.168.56.1', '/manager/system/position/list', 51, '2021-12-09 15:26:02'),('1468844371102150658', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 209, '2021-12-09 15:26:03'),('1468959434559467522', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 86, '2021-12-09 23:03:16'),('1468960169644797953', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 89, '2021-12-09 23:06:11'),('1468960204642070530', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 68, '2021-12-09 23:06:19'),('1468965059293114370', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 139, '2021-12-09 23:25:37'),('1468965433995456513', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 115, '2021-12-09 23:27:06'),('1468965755602104321', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 133, '2021-12-09 23:28:23'),('1468966214530265089', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 112, '2021-12-09 23:30:12'),('1468966322063831042', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 69, '2021-12-09 23:30:38'),('1468966525189779458', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 68, '2021-12-09 23:31:26'),('1468966614574592002', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 70, '2021-12-09 23:31:48'),('1468966694136344577', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 70, '2021-12-09 23:32:07'),('1468967319179915265', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 110, '2021-12-09 23:34:36'),('1468967470481043457', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 88, '2021-12-09 23:35:12'),('1468968346960556033', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 86, '2021-12-09 23:38:41'),('1468970212507283457', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 109, '2021-12-09 23:46:05'),('1468970485116071938', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 113, '2021-12-09 23:47:10'),('1468971621285916673', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 136, '2021-12-09 23:51:41'),('1468972420544098306', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 86, '2021-12-09 23:54:52'),('1468974437979168770', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 141, '2021-12-10 00:02:53'),('1468974913135091713', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 107, '2021-12-10 00:04:46'),('1468975678532657153', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 170, '2021-12-10 00:07:49'),('1468975942413099009', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 159, '2021-12-10 00:08:52'),('1468976336224690178', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 165, '2021-12-10 00:10:25'),('1468976394701676546', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 80, '2021-12-10 00:10:39'),('1468979553524293633', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 71, '2021-12-10 00:23:13'),('1468979580502056961', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 67, '2021-12-10 00:23:19'),('1468979629428613122', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 68, '2021-12-10 00:23:31'),('1468980534773325826', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 91, '2021-12-10 00:27:06'),('1468980591056691202', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 68, '2021-12-10 00:27:20'),('1469210254706233346', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 97, '2021-12-10 15:39:56'),('1469212175802322945', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 82, '2021-12-10 15:47:34'),('1469212223164403713', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 82, '2021-12-10 15:47:45'),('1469212333189386242', '1', '个人中心查询信息', '{}', 'GET', '192.168.56.1', '/manager/system/profile/detail', 80, '2021-12-10 15:48:12'),('1469281230051627009', '1', '个人中心修改密码', '{\"oldPwd\":[\"qwe123456.\"],\"password\":[\"123456\"],\"repassword\":[\"123456\"]}', 'PUT', '192.168.56.1', '/manager/system/profile/password', 531, '2021-12-10 20:21:58');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_area` WRITE;
DELETE FROM `nunumao`.`system_area`;
INSERT INTO `nunumao`.`system_area` (`id`,`level`,`zip_code`,`telephone_code`,`region`,`ad_code`,`name`,`full_name`,`merge_name`,`initial`,`pinyin`,`latitude`,`longitude`) VALUES ('110000', 1, '', '', '华北', '110000', '北京', '北京', '北京', 'B', 'Bei jing', 39.90469000, 116.40717000),('120000', 1, '', '', '华北', '120000', '天津', '天津', '天津', 'T', 'Tian jin', 39.08510000, 117.19937000),('130000', 1, '', '', '华北', '130000', '河北', '河北省', '河北省', 'H', 'He bei', 38.03599000, 114.46979000),('140000', 1, '', '', '华北', '140000', '山西', '山西省', '山西省', 'S', 'Shan xi', 37.87343000, 112.56272000),('150000', 1, '', '', '华北', '150000', '内蒙古', '内蒙古自治区', '内蒙古自治区', 'N', 'Nei meng gu', 40.81733000, 111.76522000),('210000', 1, '', '', '东北', '210000', '辽宁', '辽宁省', '辽宁省', 'L', 'Liao ning', 41.83571000, 123.42925000),('220000', 1, '', '', '东北', '220000', '吉林', '吉林省', '吉林省', 'J', 'Ji lin', 43.89616000, 125.32680000),('230000', 1, '', '', '东北', '230000', '黑龙江', '黑龙江省', '黑龙江省', 'H', 'Hei long jiang', 45.74208000, 126.66285000),('310000', 1, '', '', '华东', '310000', '上海', '上海', '上海', 'S', 'Shang hai', 31.23037000, 121.47370000),('320000', 1, '', '', '华东', '320000', '江苏', '江苏省', '江苏省', 'J', 'Jiang su', 32.06071000, 118.76295000),('330000', 1, '', '', '华东', '330000', '浙江', '浙江省', '浙江省', 'Z', 'Zhe jiang', 30.26555000, 120.15360000),('340000', 1, '', '', '华东', '340000', '安徽', '安徽省', '安徽省', 'A', 'An hui', 31.86157000, 117.28565000),('350000', 1, '', '', '华东', '350000', '福建', '福建省', '福建省', 'F', 'Fu jian', 26.09982000, 119.29659000),('360000', 1, '', '', '华东', '360000', '江西', '江西省', '江西省', 'J', 'Jiang xi', 28.67417000, 115.91004000),('370000', 1, '', '', '华东', '370000', '山东', '山东省', '山东省', 'S', 'Shan dong', 36.66826000, 117.02076000),('410000', 1, '', '', '华中', '410000', '河南', '河南省', '河南省', 'H', 'He nan', 34.76571000, 113.75322000),('420000', 1, '', '', '华中', '420000', '湖北', '湖北省', '湖北省', 'H', 'Hu bei', 30.54539000, 114.34234000),('430000', 1, '', '', '华中', '430000', '湖南', '湖南省', '湖南省', 'H', 'Hu nan', 28.11266000, 112.98340000),('440000', 1, '', '', '华南', '440000', '广东', '广东省', '广东省', 'G', 'Guang dong', 23.13171000, 113.26627000),('450000', 1, '', '', '华南', '450000', '广西', '广西壮族自治区', '广西壮族自治区', 'G', 'Guang xi', 22.81521000, 108.32754000),('460000', 1, '', '', '华南', '460000', '海南', '海南省', '海南省', 'H', 'Hai nan', 20.01997000, 110.34863000),('500000', 1, '', '', '西南', '500000', '重庆', '重庆', '重庆', 'C', 'Chong qing', 29.56471000, 106.55073000),('510000', 1, '', '', '西南', '510000', '四川', '四川省', '四川省', 'S', 'Si chuan', 30.65089000, 104.07572000),('520000', 1, '', '', '西南', '520000', '贵州', '贵州省', '贵州省', 'G', 'Gui zhou', 26.59820000, 106.70722000),('530000', 1, '', '', '西南', '530000', '云南', '云南省', '云南省', 'Y', 'Yun nan', 25.04530000, 102.70973000),('540000', 1, '', '', '西南', '540000', '西藏', '西藏自治区', '西藏自治区', 'X', 'Xi zang', 29.64725000, 91.11748000),('610000', 1, '', '', '西北', '610000', '陕西', '陕西省', '陕西省', 'S', 'Shan xi', 34.26486000, 108.95424000),('620000', 1, '', '', '西北', '620000', '甘肃', '甘肃省', '甘肃省', 'G', 'Gan su', 36.05942000, 103.82634000),('630000', 1, '', '', '西北', '630000', '青海', '青海省', '青海省', 'Q', 'Qing hai', 36.62087000, 101.78011000),('640000', 1, '', '', '西北', '640000', '宁夏', '宁夏回族自治区', '宁夏回族自治区', 'N', 'Ning xia', 38.47117000, 106.25867000),('650000', 1, '', '', '西北', '650000', '新疆', '新疆维吾尔自治区', '新疆维吾尔自治区', 'X', 'Xin jiang', 43.79343000, 87.62710000),('710000', 1, '', '', '港澳台', '710000', '台湾', '台湾省', '台湾省', 'T', 'Tai wan', 25.03072400, 121.52007600),('810000', 1, '', '', '港澳台', '810000', '香港', '香港特别行政区', '香港特别行政区', 'X', 'Xiang gang', 22.27534000, 114.16546000),('820000', 1, '', '', '港澳台', '820000', '澳门', '澳门特别行政区', '澳门特别行政区', 'A', 'Ao men', 22.19875000, 113.54913000),('110101', 3, '', '', '华北', '110101', '东城', '东城区', '北京,北京市,东城区', 'D', 'Dong cheng', 39.92855000, 116.41637000),('110102', 3, '', '', '华北', '110102', '西城', '西城区', '北京,北京市,西城区', 'X', 'Xi cheng', 39.91231000, 116.36611000),('110105', 3, '', '', '华北', '110105', '朝阳', '朝阳区', '北京,北京市,朝阳区', 'C', 'Chao yang', 39.92190000, 116.44355000),('110106', 3, '', '', '华北', '110106', '丰台', '丰台区', '北京,北京市,丰台区', 'F', 'Feng tai', 39.85856000, 116.28616000),('110107', 3, '', '', '华北', '110107', '石景山', '石景山区', '北京,北京市,石景山区', 'S', 'Shi jing shan', 39.90569000, 116.22299000),('110108', 3, '', '', '华北', '110108', '海淀', '海淀区', '北京,北京市,海淀区', 'H', 'Hai dian', 39.95933000, 116.29845000),('110109', 3, '', '', '华北', '110109', '门头沟', '门头沟区', '北京,北京市,门头沟区', 'M', 'Men tou gou', 39.94048000, 116.10146000),('110111', 3, '', '', '华北', '110111', '房山', '房山区', '北京,北京市,房山区', 'F', 'Fang shan', 39.74788000, 116.14294000),('110112', 3, '', '', '华北', '110112', '通州', '通州区', '北京,北京市,通州区', 'T', 'Tong zhou', 39.90998000, 116.65714000),('110113', 3, '', '', '华北', '110113', '顺义', '顺义区', '北京,北京市,顺义区', 'S', 'Shun yi', 40.13012000, 116.65477000),('110114', 3, '', '', '华北', '110114', '昌平', '昌平区', '北京,北京市,昌平区', 'C', 'Chang ping', 40.22077000, 116.23128000),('110115', 3, '', '', '华北', '110115', '大兴', '大兴区', '北京,北京市,大兴区', 'D', 'Da xing', 39.72684000, 116.34159000),('110116', 3, '', '', '华北', '110116', '怀柔', '怀柔区', '北京,北京市,怀柔区', 'H', 'Huai rou', 40.31600000, 116.63177000),('110117', 3, '', '', '华北', '110117', '平谷', '平谷区', '北京,北京市,平谷区', 'P', 'Ping gu', 40.14062000, 117.12141000),('110118', 3, '', '', '华北', '110118', '密云', '密云区', '北京,北京市,密云区', 'M', 'Mi yun', 40.37625000, 116.84317000),('110119', 3, '', '', '华北', '110119', '延庆', '延庆区', '北京,北京市,延庆区', 'Y', 'Yan qing', 40.45678000, 115.97503000),('120101', 3, '', '', '华北', '120101', '和平', '和平区', '天津,天津市,和平区', 'H', 'He ping', 39.11712000, 117.21470000),('120102', 3, '', '', '华北', '120102', '河东', '河东区', '天津,天津市,河东区', 'H', 'He dong', 39.12827000, 117.25228000),('120103', 3, '', '', '华北', '120103', '河西', '河西区', '天津,天津市,河西区', 'H', 'He xi', 39.10954000, 117.22336000),('120104', 3, '', '', '华北', '120104', '南开', '南开区', '天津,天津市,南开区', 'N', 'Nan kai', 39.13815000, 117.15011000),('120105', 3, '', '', '华北', '120105', '河北', '河北区', '天津,天津市,河北区', 'H', 'He bei', 39.14784000, 117.19674000),('120106', 3, '', '', '华北', '120106', '红桥', '红桥区', '天津,天津市,红桥区', 'H', 'Hong qiao', 39.16734000, 117.15161000),('120110', 3, '', '', '华北', '120110', '东丽', '东丽区', '天津,天津市,东丽区', 'D', 'Dong li', 39.08652000, 117.31428000),('120111', 3, '', '', '华北', '120111', '西青', '西青区', '天津,天津市,西青区', 'X', 'Xi qing', 39.14111000, 117.00739000),('120112', 3, '', '', '华北', '120112', '津南', '津南区', '天津,天津市,津南区', 'J', 'Jin nan', 38.93750000, 117.35710000),('120113', 3, '', '', '华北', '120113', '北辰', '北辰区', '天津,天津市,北辰区', 'B', 'Bei chen', 39.22393000, 117.13544000),('120114', 3, '', '', '华北', '120114', '武清', '武清区', '天津,天津市,武清区', 'W', 'Wu qing', 39.38408000, 117.04430000),('120115', 3, '', '', '华北', '120115', '宝坻', '宝坻区', '天津,天津市,宝坻区', 'B', 'Bao di', 39.71755000, 117.30983000),('120116', 3, '', '', '华北', '120116', '滨海', '滨海新区', '天津,天津市,滨海新区', 'B', 'Bin hai', 39.00320000, 117.71071000),('120117', 3, '', '', '华北', '120117', '宁河', '宁河区', '天津,天津市,宁河区', 'N', 'Ning he', 39.33091000, 117.82478000),('120118', 3, '', '', '华北', '120118', '静海', '静海区', '天津,天津市,静海区', 'J', 'Jing hai', 38.94737000, 116.97428000),('120119', 3, '', '', '华北', '120119', '蓟州', '蓟州区', '天津,天津市,蓟州区', 'J', 'Ji zhou', 40.04577000, 117.40829000),('130100', 2, '', '', '华北', '130100', '石家庄', '石家庄市', '河北省,石家庄市', 'S', 'Shi jia zhuang', 38.04276000, 114.51430000),('130200', 2, '', '', '华北', '130200', '唐山', '唐山市', '河北省,唐山市', 'T', 'Tang shan', 39.63048000, 118.18058000),('130300', 2, '', '', '华北', '130300', '秦皇岛', '秦皇岛市', '河北省,秦皇岛市', 'Q', 'Qin huang dao', 39.93545000, 119.59964000),('130400', 2, '', '', '华北', '130400', '邯郸', '邯郸市', '河北省,邯郸市', 'H', 'Han dan', 36.62556000, 114.53918000),('130500', 2, '', '', '华北', '130500', '邢台', '邢台市', '河北省,邢台市', 'X', 'Xing tai', 37.07055000, 114.50443000),('130600', 2, '', '', '华北', '130600', '保定', '保定市', '河北省,保定市', 'B', 'Bao ding', 38.87396000, 115.46459000),('130700', 2, '', '', '华北', '130700', '张家口', '张家口市', '河北省,张家口市', 'Z', 'Zhang jia kou', 40.82444000, 114.88755000),('130800', 2, '', '', '华北', '130800', '承德', '承德市', '河北省,承德市', 'C', 'Cheng de', 40.95150000, 117.96340000),('130900', 2, '', '', '华北', '130900', '沧州', '沧州市', '河北省,沧州市', 'C', 'Cang zhou', 38.30441000, 116.83869000),('131000', 2, '', '', '华北', '131000', '廊坊', '廊坊市', '河北省,廊坊市', 'L', 'Lang fang', 39.53775000, 116.68376000),('131100', 2, '', '', '华北', '131100', '衡水', '衡水市', '河北省,衡水市', 'H', 'Heng shui', 37.73886000, 115.67054000),('140100', 2, '', '', '华北', '140100', '太原', '太原市', '', 'T', 'Tai yuan', 37.87059000, 112.55067000),('140200', 2, '', '', '华北', '140200', '大同', '大同市', '', 'D', 'Da tong', 40.07637000, 113.30001000),('140300', 2, '', '', '华北', '140300', '阳泉', '阳泉市', '', 'Y', 'Yang quan', 37.85668000, 113.58047000),('140400', 2, '', '', '华北', '140400', '长治', '长治市', '', 'C', 'Chang zhi', 36.19581000, 113.11649000),('140500', 2, '', '', '华北', '140500', '晋城', '晋城市', '', 'J', 'Jin cheng', 35.49039000, 112.85113000),('140600', 2, '', '', '华北', '140600', '朔州', '朔州市', '', 'S', 'Shuo zhou', 39.33155000, 112.43286000),('140700', 2, '', '', '华北', '140700', '晋中', '晋中市', '', 'J', 'Jin zhong', 37.68702000, 112.75278000),('140800', 2, '', '', '华北', '140800', '运城', '运城市', '', 'Y', 'Yun cheng', 35.02628000, 111.00699000),('140900', 2, '', '', '华北', '140900', '忻州', '忻州市', '', 'X', 'Xin zhou', 38.41670000, 112.73418000),('141000', 2, '', '', '华北', '141000', '临汾', '临汾市', '', 'L', 'Lin fen', 36.08822000, 111.51962000),('141100', 2, '', '', '华北', '141100', '吕梁', '吕梁市', '', 'L', 'Lv liang', 37.51934000, 111.14165000),('150100', 2, '', '', '华北', '150100', '呼和浩特', '呼和浩特市', '', 'H', 'Hu he hao te', 40.84149000, 111.75199000),('150200', 2, '', '', '华北', '150200', '包头', '包头市', '', 'B', 'Bao tou', 40.65781000, 109.84021000),('150300', 2, '', '', '华北', '150300', '乌海', '乌海市', '', 'W', 'Wu hai', 39.65384000, 106.79546000),('150400', 2, '', '', '华北', '150400', '赤峰', '赤峰市', '', 'C', 'Chi feng', 42.25860000, 118.88894000),('150500', 2, '', '', '华北', '150500', '通辽', '通辽市', '', 'T', 'Tong liao', 43.65247000, 122.24469000),('150600', 2, '', '', '华北', '150600', '鄂尔多斯', '鄂尔多斯市', '', 'E', 'E er duo si', 39.60845000, 109.78087000),('150700', 2, '', '', '华北', '150700', '呼伦贝尔', '呼伦贝尔市', '', 'H', 'Hu lun bei er', 49.21163000, 119.76584000),('150800', 2, '', '', '华北', '150800', '巴彦淖尔', '巴彦淖尔市', '', 'B', 'Ba yan nao er', 40.74317000, 107.38773000),('150900', 2, '', '', '华北', '150900', '乌兰察布', '乌兰察布市', '', 'W', 'Wu lan cha bu', 40.99391000, 113.13376000),('152200', 2, '', '', '华北', '152200', '兴安', '兴安盟', '', 'X', 'Xing an', 46.08208000, 122.03818000),('152500', 2, '', '', '华北', '152500', '锡林郭勒', '锡林郭勒盟', '', 'X', 'Xi lin guo le', 43.93320000, 116.04775000),('152900', 2, '', '', '华北', '152900', '阿拉善', '阿拉善盟', '', 'A', 'A la shan', 38.85153000, 105.72898000),('210100', 2, '', '', '东北', '210100', '沈阳', '沈阳市', '', 'S', 'Shen yang', 41.67718000, 123.46310000),('210200', 2, '', '', '东北', '210200', '大连', '大连市', '', 'D', 'Da lian', 38.91369000, 121.61476000),('210300', 2, '', '', '东北', '210300', '鞍山', '鞍山市', '', 'A', 'An shan', 41.10777000, 122.99460000),('210400', 2, '', '', '东北', '210400', '抚顺', '抚顺市', '', 'F', 'Fu shun', 41.87971000, 123.95722000),('210500', 2, '', '', '东北', '210500', '本溪', '本溪市', '', 'B', 'Ben xi', 41.29413000, 123.76686000),('210600', 2, '', '', '东北', '210600', '丹东', '丹东市', '', 'D', 'Dan dong', 39.99980000, 124.35601000),('210700', 2, '', '', '东北', '210700', '锦州', '锦州市', '', 'J', 'Jin zhou', 41.09515000, 121.12703000),('210800', 2, '', '', '东北', '210800', '营口', '营口市', '', 'Y', 'Ying kou', 40.66683000, 122.23490000),('210900', 2, '', '', '东北', '210900', '阜新', '阜新市', '', 'F', 'Fu xin', 42.02166000, 121.67011000),('211000', 2, '', '', '东北', '211000', '辽阳', '辽阳市', '', 'L', 'Liao yang', 41.26809000, 123.23736000),('211100', 2, '', '', '东北', '211100', '盘锦', '盘锦市', '', 'P', 'Pan jin', 41.11996000, 122.07078000),('211200', 2, '', '', '东北', '211200', '铁岭', '铁岭市', '', 'T', 'Tie ling', 42.28620000, 123.84241000),('211300', 2, '', '', '东北', '211300', '朝阳', '朝阳市', '', 'C', 'Chao yang', 41.57347000, 120.45080000),('211400', 2, '', '', '东北', '211400', '葫芦岛', '葫芦岛市', '', 'H', 'Hu lu dao', 40.71100000, 120.83699000),('220100', 2, '', '', '东北', '220100', '长春', '长春市', '', 'C', 'Chang chun', 43.81602000, 125.32357000),('220200', 2, '', '', '东北', '220200', '吉林', '吉林市', '', 'J', 'Ji lin', 43.83784000, 126.54944000),('220300', 2, '', '', '东北', '220300', '四平', '四平市', '', 'S', 'Si ping', 43.16646000, 124.35036000),('220400', 2, '', '', '东北', '220400', '辽源', '辽源市', '', 'L', 'Liao yuan', 42.88805000, 125.14368000),('220500', 2, '', '', '东北', '220500', '通化', '通化市', '', 'T', 'Tong hua', 41.72829000, 125.93990000),('220600', 2, '', '', '东北', '220600', '白山', '白山市', '', 'B', 'Bai shan', 41.94080000, 126.42443000),('220700', 2, '', '', '东北', '220700', '松原', '松原市', '', 'S', 'Song yuan', 45.14110000, 124.82515000),('220800', 2, '', '', '东北', '220800', '白城', '白城市', '', 'B', 'Bai cheng', 45.61960000, 122.83871000),('222400', 2, '', '', '东北', '222400', '延边', '延边朝鲜族自治州', '', 'Y', 'Yan bian', 42.89119000, 129.50910000),('230100', 2, '', '', '东北', '230100', '哈尔滨', '哈尔滨市', '', 'H', 'Ha er bin', 45.80216000, 126.53580000),('230200', 2, '', '', '东北', '230200', '齐齐哈尔', '齐齐哈尔市', '', 'Q', 'Qi qi ha er', 47.35431000, 123.91796000),('230300', 2, '', '', '东北', '230300', '鸡西', '鸡西市', '', 'J', 'Ji xi', 45.29524000, 130.96954000),('230400', 2, '', '', '东北', '230400', '鹤岗', '鹤岗市', '', 'H', 'He gang', 47.34989000, 130.29785000),('230500', 2, '', '', '东北', '230500', '双鸭山', '双鸭山市', '', 'S', 'Shuang ya shan', 46.64658000, 131.15910000),('230600', 2, '', '', '东北', '230600', '大庆', '大庆市', '', 'D', 'Da qing', 46.58758000, 125.10307000),('230700', 2, '', '', '东北', '230700', '伊春', '伊春市', '', 'Y', 'Yi chun', 47.72752000, 128.84049000),('230800', 2, '', '', '东北', '230800', '佳木斯', '佳木斯市', '', 'J', 'Jia mu si', 46.79977000, 130.31882000),('230900', 2, '', '', '东北', '230900', '七台河', '七台河市', '', 'Q', 'Qi tai he', 45.77065000, 131.00306000),('231000', 2, '', '', '东北', '231000', '牡丹江', '牡丹江市', '', 'M', 'Mu dan jiang', 44.55269000, 129.63244000),('231100', 2, '', '', '东北', '231100', '黑河', '黑河市', '', 'H', 'Hei he', 50.24523000, 127.52852000),('231200', 2, '', '', '东北', '231200', '绥化', '绥化市', '', 'S', 'Sui hua', 46.65246000, 126.96932000),('232700', 2, '', '', '东北', '232700', '大兴安岭', '大兴安岭地区', '', 'D', 'Da xing an ling', 51.92398000, 124.59216000),('310101', 3, '', '', NULL, '310101', '黄浦', '黄浦区', '', 'H', 'Huang pu', 31.23162000, 121.48461000),('310104', 3, '', '', NULL, '310104', '徐汇', '徐汇区', '', 'X', 'Xu hui', 31.18826000, 121.43687000),('310105', 3, '', '', NULL, '310105', '长宁', '长宁区', '', 'C', 'Chang ning', 31.22024000, 121.42394000),('310106', 3, '', '', NULL, '310106', '静安', '静安区', '', 'J', 'Jing an', 31.22352000, 121.45591000),('310107', 3, '', '', NULL, '310107', '普陀', '普陀区', '', 'P', 'Pu tuo', 31.24940000, 121.39700000),('310109', 3, '', '', NULL, '310109', '虹口', '虹口区', '', 'H', 'Hong kou', 31.26451000, 121.50515000),('310110', 3, '', '', NULL, '310110', '杨浦', '杨浦区', '', 'Y', 'Yang pu', 31.25956000, 121.52609000),('310112', 3, '', '', NULL, '310112', '闵行', '闵行区', '', 'M', 'Min hang', 31.11325000, 121.38206000),('310113', 3, '', '', NULL, '310113', '宝山', '宝山区', '', 'B', 'Bao shan', 31.40527000, 121.48941000),('310114', 3, '', '', NULL, '310114', '嘉定', '嘉定区', '', 'J', 'Jia ding', 31.37482000, 121.26621000),('310115', 3, '', '', NULL, '310115', '浦东', '浦东新区', '', 'P', 'Pu dong', 31.22114000, 121.54409000),('310116', 3, '', '', NULL, '310116', '金山', '金山区', '', 'J', 'Jin shan', 30.74185000, 121.34242000),('310117', 3, '', '', NULL, '310117', '松江', '松江区', '', 'S', 'Song jiang', 31.03241000, 121.22654000),('310118', 3, '', '', NULL, '310118', '青浦', '青浦区', '', 'Q', 'Qing pu', 31.14979000, 121.12426000),('310120', 3, '', '', NULL, '310120', '奉贤', '奉贤区', '', 'F', 'Feng xian', 30.91803000, 121.47410000),('310151', 3, '', '', NULL, '310151', '崇明', '崇明区', '', 'C', 'Chong ming', 31.62290000, 121.39730000),('320100', 2, '', '', '华东', '320100', '南京', '南京市', '', 'N', 'Nan jing', 32.05838000, 118.79647000),('320200', 2, '', '', '华东', '320200', '无锡', '无锡市', '', 'W', 'Wu xi', 31.49099000, 120.31237000),('320300', 2, '', '', '华东', '320300', '徐州', '徐州市', '', 'X', 'Xu zhou', 34.20440000, 117.28577000),('320400', 2, '', '', '华东', '320400', '常州', '常州市', '', 'C', 'Chang zhou', 31.81072000, 119.97365000),('320500', 2, '', '', '华东', '320500', '苏州', '苏州市', '', 'S', 'Su zhou', 31.29834000, 120.58319000),('320600', 2, '', '', '华东', '320600', '南通', '南通市', '', 'N', 'Nan tong', 31.97958000, 120.89371000),('320700', 2, '', '', '华东', '320700', '连云港', '连云港市', '', 'L', 'Lian yun gang', 34.59669000, 119.22295000),('320800', 2, '', '', '华东', '320800', '淮安', '淮安市', '', 'H', 'Huai an', 33.61016000, 119.01595000),('320900', 2, '', '', '华东', '320900', '盐城', '盐城市', '', 'Y', 'Yan cheng', 33.34951000, 120.16164000),('321000', 2, '', '', '华东', '321000', '扬州', '扬州市', '', 'Y', 'Yang zhou', 32.39358000, 119.41269000),('321100', 2, '', '', '华东', '321100', '镇江', '镇江市', '', 'Z', 'Zhen jiang', 32.18959000, 119.42500000),('321200', 2, '', '', '华东', '321200', '泰州', '泰州市', '', 'T', 'Tai zhou', 32.45546000, 119.92554000),('321300', 2, '', '', '华东', '321300', '宿迁', '宿迁市', '', 'S', 'Su qian', 33.96193000, 118.27549000),('330100', 2, '', '', '华东', '330100', '杭州', '杭州市', '', 'H', 'Hang zhou', 30.27415000, 120.15515000),('330200', 2, '', '', '华东', '330200', '宁波', '宁波市', '', 'N', 'Ning bo', 29.87386000, 121.55027000),('330300', 2, '', '', '华东', '330300', '温州', '温州市', '', 'W', 'Wen zhou', 27.99492000, 120.69939000),('330400', 2, '', '', '华东', '330400', '嘉兴', '嘉兴市', '', 'J', 'Jia xing', 30.74501000, 120.75550000),('330500', 2, '', '', '华东', '330500', '湖州', '湖州市', '', 'H', 'Hu zhou', 30.89305000, 120.08805000),('330600', 2, '', '', '华东', '330600', '绍兴', '绍兴市', '', 'S', 'Shao xing', 30.03033000, 120.58020000),('330700', 2, '', '', '华东', '330700', '金华', '金华市', '', 'J', 'Jin hua', 29.07812000, 119.64759000),('330800', 2, '', '', '华东', '330800', '衢州', '衢州市', '', 'Q', 'Qu zhou', 28.93592000, 118.87419000),('330900', 2, '', '', '华东', '330900', '舟山', '舟山市', '', 'Z', 'Zhou shan', 29.98539000, 122.20778000),('331000', 2, '', '', '华东', '331000', '台州', '台州市', '', 'T', 'Tai zhou', 28.65611000, 121.42056000),('331100', 2, '', '', '华东', '331100', '丽水', '丽水市', '', 'L', 'Li shui', 28.46720000, 119.92293000),('340100', 2, '', '', '华东', '340100', '合肥', '合肥市', '', 'H', 'He fei', 31.82057000, 117.22901000),('340200', 2, '', '', '华东', '340200', '芜湖', '芜湖市', '', 'W', 'Wu hu', 31.35246000, 118.43313000),('340300', 2, '', '', '华东', '340300', '蚌埠', '蚌埠市', '', 'B', 'Beng bu', 32.91548000, 117.38932000),('340400', 2, '', '', '华东', '340400', '淮南', '淮南市', '', 'H', 'Huai nan', 32.62549000, 116.99980000),('340500', 2, '', '', '华东', '340500', '马鞍山', '马鞍山市', '', 'M', 'Ma an shan', 31.67067000, 118.50611000),('340600', 2, '', '', '华东', '340600', '淮北', '淮北市', '', 'H', 'Huai bei', 33.95479000, 116.79834000),('340700', 2, '', '', '华东', '340700', '铜陵', '铜陵市', '', 'T', 'Tong ling', 30.94486000, 117.81232000),('340800', 2, '', '', '华东', '340800', '安庆', '安庆市', '', 'A', 'An qing', 30.54294000, 117.06354000),('341000', 2, '', '', '华东', '341000', '黄山', '黄山市', '', 'H', 'Huang shan', 29.71517000, 118.33866000),('341100', 2, '', '', '华东', '341100', '滁州', '滁州市', '', 'C', 'Chu zhou', 32.30181000, 118.31683000),('341200', 2, '', '', '华东', '341200', '阜阳', '阜阳市', '', 'F', 'Fu yang', 32.88963000, 115.81495000),('341300', 2, '', '', '华东', '341300', '宿州', '宿州市', '', 'S', 'Su zhou', 33.64614000, 116.96391000),('341500', 2, '', '', '华东', '341500', '六安', '六安市', '', 'L', 'Liu an', 31.73488000, 116.52324000),('341600', 2, '', '', '华东', '341600', '亳州', '亳州市', '', 'B', 'Bo zhou', 33.84461000, 115.77931000),('341700', 2, '', '', '华东', '341700', '池州', '池州市', '', 'C', 'Chi zhou', 30.66469000, 117.49142000),('341800', 2, '', '', '华东', '341800', '宣城', '宣城市', '', 'X', 'Xuan cheng', 30.94078000, 118.75866000),('350100', 2, '', '', '华东', '350100', '福州', '福州市', '', 'F', 'Fu zhou', 26.07421000, 119.29647000),('350200', 2, '', '', '华东', '350200', '厦门', '厦门市', '', 'X', 'Xia men', 24.47951000, 118.08948000),('350300', 2, '', '', '华东', '350300', '莆田', '莆田市', '', 'P', 'Pu tian', 25.45400000, 119.00771000),('350400', 2, '', '', '华东', '350400', '三明', '三明市', '', 'S', 'San ming', 26.26385000, 117.63922000),('350500', 2, '', '', '华东', '350500', '泉州', '泉州市', '', 'Q', 'Quan zhou', 24.87389000, 118.67587000),('350600', 2, '', '', '华东', '350600', '漳州', '漳州市', '', 'Z', 'Zhang zhou', 24.51347000, 117.64725000),('350700', 2, '', '', '华东', '350700', '南平', '南平市', '', 'N', 'Nan ping', 27.33175000, 118.12043000),('350800', 2, '', '', '华东', '350800', '龙岩', '龙岩市', '', 'L', 'Long yan', 25.07504000, 117.01722000),('350900', 2, '', '', '华东', '350900', '宁德', '宁德市', '', 'N', 'Ning de', 26.66571000, 119.54819000),('360100', 2, '', '', '华东', '360100', '南昌', '南昌市', '', 'N', 'Nan chang', 28.68202000, 115.85794000),('360200', 2, '', '', '华东', '360200', '景德镇', '景德镇市', '', 'J', 'Jing de zhen', 29.26869000, 117.17839000),('360300', 2, '', '', '华东', '360300', '萍乡', '萍乡市', '', 'P', 'Ping xiang', 27.62289000, 113.85427000),('360400', 2, '', '', '华东', '360400', '九江', '九江市', '', 'J', 'Jiu jiang', 29.70548000, 116.00146000),('360500', 2, '', '', '华东', '360500', '新余', '新余市', '', 'X', 'Xin yu', 27.81776000, 114.91713000),('360600', 2, '', '', '华东', '360600', '鹰潭', '鹰潭市', '', 'Y', 'Ying tan', 28.26019000, 117.06919000),('360700', 2, '', '', '华东', '360700', '赣州', '赣州市', '', 'G', 'Gan zhou', 25.83109000, 114.93476000),('360800', 2, '', '', '华东', '360800', '吉安', '吉安市', '', 'J', 'Ji an', 27.11382000, 114.99376000),('360900', 2, '', '', '华东', '360900', '宜春', '宜春市', '', 'Y', 'Yi chun', 27.81443000, 114.41612000),('361000', 2, '', '', '华东', '361000', '抚州', '抚州市', '', 'F', 'Fu zhou', 27.94781000, 116.35809000),('361100', 2, '', '', '华东', '361100', '上饶', '上饶市', '', 'S', 'Shang rao', 28.45463000, 117.94357000),('370100', 2, '', '', '华东', '370100', '济南', '济南市', '', 'J', 'Ji nan', 36.65184000, 117.12009000),('370200', 2, '', '', '华东', '370200', '青岛', '青岛市', '', 'Q', 'Qing dao', 36.06623000, 120.38299000),('370300', 2, '', '', '华东', '370300', '淄博', '淄博市', '', 'Z', 'Zi bo', 36.81310000, 118.05480000),('370400', 2, '', '', '华东', '370400', '枣庄', '枣庄市', '', 'Z', 'Zao zhuang', 34.81071000, 117.32196000),('370500', 2, '', '', '华东', '370500', '东营', '东营市', '', 'D', 'Dong ying', 37.43365000, 118.67466000),('370600', 2, '', '', '华东', '370600', '烟台', '烟台市', '', 'Y', 'Yan tai', 37.46353000, 121.44801000),('370700', 2, '', '', '华东', '370700', '潍坊', '潍坊市', '', 'W', 'Wei fang', 36.70686000, 119.16176000),('370800', 2, '', '', '华东', '370800', '济宁', '济宁市', '', 'J', 'Ji ning', 35.41459000, 116.58724000),('370900', 2, '', '', '华东', '370900', '泰安', '泰安市', '', 'T', 'Tai an', 36.19994000, 117.08840000),('371000', 2, '', '', '华东', '371000', '威海', '威海市', '', 'W', 'Wei hai', 37.51348000, 122.12171000),('371100', 2, '', '', '华东', '371100', '日照', '日照市', '', 'R', 'Ri zhao', 35.41646000, 119.52719000),('371300', 2, '', '', '华东', '371300', '临沂', '临沂市', '', 'L', 'Lin yi', 35.10465000, 118.35646000),('371400', 2, '', '', '华东', '371400', '德州', '德州市', '', 'D', 'De zhou', 37.43550000, 116.35927000),('371500', 2, '', '', '华东', '371500', '聊城', '聊城市', '', 'L', 'Liao cheng', 36.45702000, 115.98549000),('371600', 2, '', '', '华东', '371600', '滨州', '滨州市', '', 'B', 'Bin zhou', 37.38211000, 117.97279000),('371700', 2, '', '', '华东', '371700', '菏泽', '菏泽市', '', 'H', 'He ze', 35.23363000, 115.48115000),('410100', 2, '', '', '华中', '410100', '郑州', '郑州市', '', 'Z', 'Zheng zhou', 34.74725000, 113.62493000),('410200', 2, '', '', '华中', '410200', '开封', '开封市', '', 'K', 'Kai feng', 34.79726000, 114.30731000),('410300', 2, '', '', '华中', '410300', '洛阳', '洛阳市', '', 'L', 'Luo yang', 34.61812000, 112.45361000),('410400', 2, '', '', '华中', '410400', '平顶山', '平顶山市', '', 'P', 'Ping ding shan', 33.76609000, 113.19241000),('410500', 2, '', '', '华中', '410500', '安阳', '安阳市', '', 'A', 'An yang', 36.09771000, 114.39310000),('410600', 2, '', '', '华中', '410600', '鹤壁', '鹤壁市', '', 'H', 'He bi', 35.74700000, 114.29745000),('410700', 2, '', '', '华中', '410700', '新乡', '新乡市', '', 'X', 'Xin xiang', 35.30323000, 113.92675000),('410800', 2, '', '', '华中', '410800', '焦作', '焦作市', '', 'J', 'Jiao zuo', 35.21563000, 113.24201000),('410900', 2, '', '', '华中', '410900', '濮阳', '濮阳市', '', 'P', 'Pu yang', 35.76189000, 115.02932000),('411000', 2, '', '', '华中', '411000', '许昌', '许昌市', '', 'X', 'Xu chang', 34.03570000, 113.85233000),('411100', 2, '', '', '华中', '411100', '漯河', '漯河市', '', 'L', 'Luo he', 33.58149000, 114.01681000),('411200', 2, '', '', '华中', '411200', '三门峡', '三门峡市', '', 'S', 'San men xia', 34.77261000, 111.20030000),('411300', 2, '', '', '华中', '411300', '南阳', '南阳市', '', 'N', 'Nan yang', 32.99073000, 112.52851000),('411400', 2, '', '', '华中', '411400', '商丘', '商丘市', '', 'S', 'Shang qiu', 34.41427000, 115.65635000),('411500', 2, '', '', '华中', '411500', '信阳', '信阳市', '', 'X', 'Xin yang', 32.14714000, 114.09279000),('411600', 2, '', '', '华中', '411600', '周口', '周口市', '', 'Z', 'Zhou kou', 33.62583000, 114.69695000),('411700', 2, '', '', '华中', '411700', '驻马店', '驻马店市', '', 'Z', 'Zhu ma dian', 33.01142000, 114.02299000),('419001', 2, '', '', '华中', '419001', '济源', '济源市', '', 'J', 'Ji yuan', 35.06707000, 112.60273000),('420100', 2, '', '', '华中', '420100', '武汉', '武汉市', '', 'W', 'Wu han', 30.59276000, 114.30525000),('420200', 2, '', '', '华中', '420200', '黄石', '黄石市', '', 'H', 'Huang shi', 30.19953000, 115.03890000),('420300', 2, '', '', '华中', '420300', '十堰', '十堰市', '', 'S', 'Shi yan', 32.62918000, 110.79801000),('420500', 2, '', '', '华中', '420500', '宜昌', '宜昌市', '', 'Y', 'Yi chang', 30.69186000, 111.28642000),('420600', 2, '', '', '华中', '420600', '襄阳', '襄阳市', '', 'X', 'Xiang yang', 32.00900000, 112.12255000),('420700', 2, '', '', '华中', '420700', '鄂州', '鄂州市', '', 'E', 'E zhou', 30.39085000, 114.89495000),('420800', 2, '', '', '华中', '420800', '荆门', '荆门市', '', 'J', 'Jing men', 31.03546000, 112.19945000),('420900', 2, '', '', '华中', '420900', '孝感', '孝感市', '', 'X', 'Xiao gan', 30.92483000, 113.91645000),('421000', 2, '', '', '华中', '421000', '荆州', '荆州市', '', 'J', 'Jing zhou', 30.33479000, 112.24069000),('421100', 2, '', '', '华中', '421100', '黄冈', '黄冈市', '', 'H', 'Huang gang', 30.45347000, 114.87238000),('421200', 2, '', '', '华中', '421200', '咸宁', '咸宁市', '', 'X', 'Xian ning', 29.84126000, 114.32245000),('421300', 2, '', '', '华中', '421300', '随州', '随州市', '', 'S', 'Sui zhou', 31.69013000, 113.38262000),('422800', 2, '', '', '华中', '422800', '恩施', '恩施土家族苗族自治州', '', 'E', 'En shi', 30.27217000, 109.48817000),('429004', 2, '', '', '华中', '429004', '仙桃', '仙桃市', '', 'X', 'Xian tao', 30.36251000, 113.45450000),('429005', 2, '', '', '华中', '429005', '潜江', '潜江市', '', 'Q', 'Qian jiang', 30.40147000, 112.89930000),('429006', 2, '', '', '华中', '429006', '天门', '天门市', '', 'T', 'Tian men', 30.66339000, 113.16614000),('429021', 2, '', '', '华中', '429021', '神农架', '神农架林区', '', 'S', 'Shen nong jia', 31.74452000, 110.67598000),('430100', 2, '', '', '华中', '430100', '长沙', '长沙市', '', 'C', 'Chang sha', 28.22778000, 112.93886000),('430200', 2, '', '', '华中', '430200', '株洲', '株洲市', '', 'Z', 'Zhu zhou', 27.82767000, 113.13396000),('430300', 2, '', '', '华中', '430300', '湘潭', '湘潭市', '', 'X', 'Xiang tan', 27.82975000, 112.94411000),('430400', 2, '', '', '华中', '430400', '衡阳', '衡阳市', '', 'H', 'Heng yang', 26.89324000, 112.57195000),('430500', 2, '', '', '华中', '430500', '邵阳', '邵阳市', '', 'S', 'Shao yang', 27.23890000, 111.46770000),('430600', 2, '', '', '华中', '430600', '岳阳', '岳阳市', '', 'Y', 'Yue yang', 29.35728000, 113.12919000),('430700', 2, '', '', '华中', '430700', '常德', '常德市', '', 'C', 'Chang de', 29.03158000, 111.69854000),('430800', 2, '', '', '华中', '430800', '张家界', '张家界市', '', 'Z', 'Zhang jia jie', 29.11667000, 110.47839000),('430900', 2, '', '', '华中', '430900', '益阳', '益阳市', '', 'Y', 'Yi yang', 28.55391000, 112.35516000),('431000', 2, '', '', '华中', '431000', '郴州', '郴州市', '', 'C', 'Chen zhou', 25.77063000, 113.01485000),('431100', 2, '', '', '华中', '431100', '永州', '永州市', '', 'Y', 'Yong zhou', 26.42034000, 111.61225000),('431200', 2, '', '', '华中', '431200', '怀化', '怀化市', '', 'H', 'Huai hua', 27.56974000, 110.00160000),('431300', 2, '', '', '华中', '431300', '娄底', '娄底市', '', 'L', 'Lou di', 27.69728000, 111.99458000),('433100', 2, '', '', '华中', '433100', '湘西', '湘西土家族苗族自治州', '', 'X', 'Xiang xi', 28.31173000, 109.73893000),('440100', 2, '', '', '华南', '440100', '广州', '广州市', '', 'G', 'Guang zhou', 23.12908000, 113.26436000),('440200', 2, '', '', '华南', '440200', '韶关', '韶关市', '', 'S', 'Shao guan', 24.81039000, 113.59723000),('440300', 2, '', '', '华南', '440300', '深圳', '深圳市', '', 'S', 'Shen zhen', 22.54286000, 114.05956000),('440400', 2, '', '', '华南', '440400', '珠海', '珠海市', '', 'Z', 'Zhu hai', 22.27073000, 113.57668000),('440500', 2, '', '', '华南', '440500', '汕头', '汕头市', '', 'S', 'Shan tou', 23.35350000, 116.68221000),('440600', 2, '', '', '华南', '440600', '佛山', '佛山市', '', 'F', 'Fo shan', 23.02185000, 113.12192000),('440700', 2, '', '', '华南', '440700', '江门', '江门市', '', 'J', 'Jiang men', 22.57865000, 113.08161000),('440800', 2, '', '', '华南', '440800', '湛江', '湛江市', '', 'Z', 'Zhan jiang', 21.27134000, 110.35894000),('440900', 2, '', '', '华南', '440900', '茂名', '茂名市', '', 'M', 'Mao ming', 21.66329000, 110.92523000),('441200', 2, '', '', '华南', '441200', '肇庆', '肇庆市', '', 'Z', 'Zhao qing', 23.04690000, 112.46528000),('441300', 2, '', '', '华南', '441300', '惠州', '惠州市', '', 'H', 'Hui zhou', 23.11075000, 114.41679000),('441400', 2, '', '', '华南', '441400', '梅州', '梅州市', '', 'M', 'Mei zhou', 24.28844000, 116.12264000),('441500', 2, '', '', '华南', '441500', '汕尾', '汕尾市', '', 'S', 'Shan wei', 22.78566000, 115.37514000),('441600', 2, '', '', '华南', '441600', '河源', '河源市', '', 'H', 'He yuan', 23.74365000, 114.70065000),('441700', 2, '', '', '华南', '441700', '阳江', '阳江市', '', 'Y', 'Yang jiang', 21.85829000, 111.98256000),('441800', 2, '', '', '华南', '441800', '清远', '清远市', '', 'Q', 'Qing yuan', 23.68201000, 113.05615000),('441900', 2, '', '', '华南', '441900', '东莞', '东莞市', '', 'D', 'Dong guan', 23.02067000, 113.75179000),('442000', 2, '', '', '华南', '442000', '中山', '中山市', '', 'Z', 'Zhong shan', 22.51595000, 113.39260000),('445100', 2, '', '', '华南', '445100', '潮州', '潮州市', '', 'C', 'Chao zhou', 23.65670000, 116.62296000),('445200', 2, '', '', '华南', '445200', '揭阳', '揭阳市', '', 'J', 'Jie yang', 23.54972000, 116.37271000),('445300', 2, '', '', '华南', '445300', '云浮', '云浮市', '', 'Y', 'Yun fu', 22.91525000, 112.04453000),('450100', 2, '', '', '华南', '450100', '南宁', '南宁市', '', 'N', 'Nan ning', 22.81673000, 108.36690000),('450200', 2, '', '', '华南', '450200', '柳州', '柳州市', '', 'L', 'Liu zhou', 24.32543000, 109.41552000),('450300', 2, '', '', '华南', '450300', '桂林', '桂林市', '', 'G', 'Gui lin', 25.27361000, 110.29002000),('450400', 2, '', '', '华南', '450400', '梧州', '梧州市', '', 'W', 'Wu zhou', 23.47691000, 111.27917000),('450500', 2, '', '', '华南', '450500', '北海', '北海市', '', 'B', 'Bei hai', 21.48112000, 109.12008000),('450600', 2, '', '', '华南', '450600', '防城港', '防城港市', '', 'F', 'Fang cheng gang', 21.68713000, 108.35472000),('450700', 2, '', '', '华南', '450700', '钦州', '钦州市', '', 'Q', 'Qin zhou', 21.97970000, 108.65431000),('450800', 2, '', '', '华南', '450800', '贵港', '贵港市', '', 'G', 'Gui gang', 23.11306000, 109.59764000),('450900', 2, '', '', '华南', '450900', '玉林', '玉林市', '', 'Y', 'Yu lin', 22.65451000, 110.18098000),('451000', 2, '', '', '华南', '451000', '百色', '百色市', '', 'B', 'Bai se', 23.90216000, 106.61838000),('451100', 2, '', '', '华南', '451100', '贺州', '贺州市', '', 'H', 'He zhou', 24.40346000, 111.56655000),('451200', 2, '', '', '华南', '451200', '河池', '河池市', '', 'H', 'He chi', 24.69291000, 108.08540000),('451300', 2, '', '', '华南', '451300', '来宾', '来宾市', '', 'L', 'Lai bin', 23.75210000, 109.22238000),('451400', 2, '', '', '华南', '451400', '崇左', '崇左市', '', 'C', 'Chong zuo', 22.37895000, 107.36485000),('460100', 2, '', '', '华南', '460100', '海口', '海口市', '', 'H', 'Hai kou', 20.04422000, 110.19989000),('460200', 2, '', '', '华南', '460200', '三亚', '三亚市', '', 'S', 'San ya', 18.25248000, 109.51209000),('460300', 2, '', '', '华南', '460300', '三沙', '三沙市', '', 'S', 'San sha', 16.83272000, 112.33356000),('460400', 2, '', '', '华南', '460400', '儋州', '儋州市', '', 'D', 'Dan zhou', 19.52093000, 109.58069000),('469001', 2, '', '', '华南', '469001', '五指山', '五指山市', '', 'W', 'Wu zhi shan', 18.77515000, 109.51696000),('469002', 2, '', '', '华南', '469002', '琼海', '琼海市', '', 'Q', 'Qiong hai', 19.25838000, 110.47464000),('469005', 2, '', '', '华南', '469005', '文昌', '文昌市', '', 'W', 'Wen chang', 19.54329000, 110.79774000),('469006', 2, '', '', '华南', '469006', '万宁', '万宁市', '', 'W', 'Wan ning', 18.79532000, 110.38975000),('469007', 2, '', '', '华南', '469007', '东方', '东方市', '', 'D', 'Dong fang', 19.09614000, 108.65367000),('469021', 2, '', '', '华南', '469021', '定安', '定安县', '', 'D', 'Ding an', 19.68121000, 110.35930000),('469022', 2, '', '', '华南', '469022', '屯昌', '屯昌县', '', 'T', 'Tun chang', 19.35182000, 110.10347000),('469023', 2, '', '', '华南', '469023', '澄迈', '澄迈县', '', 'C', 'Cheng mai', 19.73849000, 110.00487000),('469024', 2, '', '', '华南', '469024', '临高', '临高县', '', 'L', 'Lin gao', 19.91243000, 109.69077000),('469025', 2, '', '', '华南', '469025', '白沙', '白沙黎族自治县', '', 'B', 'Bai sha', 19.22543000, 109.45167000),('469026', 2, '', '', '华南', '469026', '昌江', '昌江黎族自治县', '', 'C', 'Chang jiang', 19.29828000, 109.05559000),('469027', 2, '', '', '华南', '469027', '乐东', '乐东黎族自治县', '', 'L', 'Le dong', 18.74986000, 109.17361000),('469028', 2, '', '', '华南', '469028', '陵水', '陵水黎族自治县', '', 'L', 'Ling shui', 18.50596000, 110.03720000),('469029', 2, '', '', '华南', '469029', '保亭', '保亭黎族苗族自治县', '', 'B', 'Bao ting', 18.63905000, 109.70259000),('469030', 2, '', '', '华南', '469030', '琼中', '琼中黎族苗族自治县', '', 'Q', 'Qiong zhong', 19.03334000, 109.83839000),('500101', 3, '', '', NULL, '500101', '万州', '万州区', '', 'W', 'Wan zhou', 30.80790000, 108.40873000),('500102', 3, '', '', NULL, '500102', '涪陵', '涪陵区', '', 'F', 'Fu ling', 29.70239000, 107.38779000),('500103', 3, '', '', NULL, '500103', '渝中', '渝中区', '', 'Y', 'Yu zhong', 29.55314000, 106.56860000),('500104', 3, '', '', NULL, '500104', '大渡口', '大渡口区', '', 'D', 'Da du kou', 29.48408000, 106.48225000),('500105', 3, '', '', NULL, '500105', '江北', '江北区', '', 'J', 'Jiang bei', 29.60661000, 106.57439000),('500106', 3, '', '', NULL, '500106', '沙坪坝', '沙坪坝区', '', 'S', 'Sha ping ba', 29.54098000, 106.45773000),('500107', 3, '', '', NULL, '500107', '九龙坡', '九龙坡区', '', 'J', 'Jiu long po', 29.50207000, 106.51140000),('500108', 3, '', '', NULL, '500108', '南岸', '南岸区', '', 'N', 'Nan an', 29.52168000, 106.56256000),('500109', 3, '', '', NULL, '500109', '北碚', '北碚区', '', 'B', 'Bei bei', 29.80583000, 106.39628000),('500110', 3, '', '', NULL, '500110', '綦江', '綦江区', '', 'Q', 'Qi jiang', 28.96463000, 106.92852000),('500111', 3, '', '', NULL, '500111', '大足', '大足区', '', 'D', 'Da zu', 29.48604000, 105.78017000),('500112', 3, '', '', NULL, '500112', '渝北', '渝北区', '', 'Y', 'Yu bei', 29.71798000, 106.63043000),('500113', 3, '', '', NULL, '500113', '巴南', '巴南区', '', 'B', 'Ba nan', 29.40268000, 106.54041000),('500114', 3, '', '', NULL, '500114', '黔江', '黔江区', '', 'Q', 'Qian jiang', 29.53322000, 108.77108600),('500115', 3, '', '', NULL, '500115', '长寿', '长寿区', '', 'C', 'Chang shou', 29.85781000, 107.08105000),('500116', 3, '', '', NULL, '500116', '江津', '江津区', '', 'J', 'Jiang jin', 29.29014000, 106.25936000),('500117', 3, '', '', NULL, '500117', '合川', '合川区', '', 'H', 'He chuan', 29.97288000, 106.27679000),('500118', 3, '', '', NULL, '500118', '永川', '永川区', '', 'Y', 'Yong chuan', 29.35600000, 105.92709000),('500119', 3, '', '', NULL, '500119', '南川', '南川区', '', 'N', 'Nan chuan', 29.15788000, 107.09896000),('500120', 3, '', '', NULL, '500120', '璧山', '璧山区', '', 'B', 'Bi shan', 29.59202000, 106.22742000),('500151', 3, '', '', NULL, '500151', '铜梁', '铜梁区', '', 'T', 'Tong liang', 29.84475000, 106.05638000),('500152', 3, '', '', NULL, '500152', '潼南', '潼南区', '', 'T', 'Tong nan', 30.19054000, 105.83952000),('500153', 3, '', '', NULL, '500153', '荣昌', '荣昌区', '', 'R', 'Rong chang', 29.41671000, 105.61188000),('500154', 3, '', '', NULL, '500154', '开州', '开州区', '', 'K', 'Kai zhou', 31.16098000, 108.39311000),('500155', 3, '', '', NULL, '500155', '梁平', '梁平区', '', 'L', 'Liang ping', 30.67373000, 107.80235000),('500156', 3, '', '', NULL, '500156', '武隆', '武隆区', '', 'W', 'Wu long', 29.32543000, 107.75993000),('500229', 3, '', '', NULL, '500129', '城口', '城口县', '', 'C', 'Cheng kou', 31.94767000, 108.66433000),('500230', 3, '', '', NULL, '500130', '丰都', '丰都县', '', 'F', 'Feng du', 29.86352000, 107.73085000),('500231', 3, '', '', NULL, '500131', '垫江', '垫江县', '', 'D', 'Dian jiang', 30.32680000, 107.33515000),('500233', 3, '', '', NULL, '500133', '忠县', '忠县', '', 'Z', 'Zhong xian', 30.30026000, 108.03767000),('500235', 3, '', '', NULL, '500135', '云阳', '云阳县', '', 'Y', 'Yun yang', 30.93063000, 108.69698000),('500236', 3, '', '', NULL, '500136', '奉节', '奉节县', '', 'F', 'Feng jie', 31.01855100, 109.40093000),('500237', 3, '', '', NULL, '500137', '巫山', '巫山县', '', 'W', 'Wu shan', 31.07462000, 109.87880000),('500238', 3, '', '', NULL, '500138', '巫溪', '巫溪县', '', 'W', 'Wu xi', 31.39860000, 109.57016000),('500240', 3, '', '', NULL, '500140', '石柱', '石柱土家族自治县', '', 'S', 'Shi zhu', 29.99968000, 108.11415000),('500241', 3, '', '', NULL, '500141', '秀山', '秀山土家族苗族自治县', '', 'X', 'Xiu shan', 28.44832000, 109.00714000),('500242', 3, '', '', NULL, '500142', '酉阳', '酉阳土家族苗族自治县', '', 'Y', 'You yang', 28.84126000, 108.76778000),('500243', 3, '', '', NULL, '500143', '彭水', '彭水苗族土家族自治县', '', 'P', 'Peng shui', 29.29376000, 108.16555000),('510100', 2, '', '', '西南', '510100', '成都', '成都市', '', 'C', 'Cheng du', 30.57020000, 104.06476000),('510300', 2, '', '', '西南', '510300', '自贡', '自贡市', '', 'Z', 'Zi gong', 29.33920000, 104.77844000),('510400', 2, '', '', '西南', '510400', '攀枝花', '攀枝花市', '', 'P', 'Pan zhi hua', 26.58228000, 101.71872000),('510500', 2, '', '', '西南', '510500', '泸州', '泸州市', '', 'L', 'Lu zhou', 28.87170000, 105.44257000),('510600', 2, '', '', '西南', '510600', '德阳', '德阳市', '', 'D', 'De yang', 31.12679000, 104.39790000),('510700', 2, '', '', '西南', '510700', '绵阳', '绵阳市', '', 'M', 'Mian yang', 31.46751000, 104.67960000),('510800', 2, '', '', '西南', '510800', '广元', '广元市', '', 'G', 'Guang yuan', 32.43549000, 105.84357000),('510900', 2, '', '', '西南', '510900', '遂宁', '遂宁市', '', 'S', 'Sui ning', 30.53286000, 105.59273000),('511000', 2, '', '', '西南', '511000', '内江', '内江市', '', 'N', 'Nei jiang', 29.58015000, 105.05844000),('511100', 2, '', '', '西南', '511100', '乐山', '乐山市', '', 'L', 'Le shan', 29.55221000, 103.76539000),('511300', 2, '', '', '西南', '511300', '南充', '南充市', '', 'N', 'Nan chong', 30.83731000, 106.11073000),('511400', 2, '', '', '西南', '511400', '眉山', '眉山市', '', 'M', 'Mei shan', 30.07563000, 103.84851000),('511500', 2, '', '', '西南', '511500', '宜宾', '宜宾市', '', 'Y', 'Yi bin', 28.75130000, 104.64170000),('511600', 2, '', '', '西南', '511600', '广安', '广安市', '', 'G', 'Guang an', 30.45596000, 106.63322000),('511700', 2, '', '', '西南', '511700', '达州', '达州市', '', 'D', 'Da zhou', 31.20864000, 107.46791000),('511800', 2, '', '', '西南', '511800', '雅安', '雅安市', '', 'Y', 'Ya an', 30.01053000, 103.04240000),('511900', 2, '', '', '西南', '511900', '巴中', '巴中市', '', 'B', 'Ba zhong', 31.86715000, 106.74733000),('512000', 2, '', '', '西南', '512000', '资阳', '资阳市', '', 'Z', 'Zi yang', 30.12859000, 104.62798000),('513200', 2, '', '', '西南', '513200', '阿坝', '阿坝藏族羌族自治州', '', 'A', 'A ba', 31.89940000, 102.22477000),('513300', 2, '', '', '西南', '513300', '甘孜', '甘孜藏族自治州', '', 'G', 'Gan zi', 30.04932000, 101.96254000),('513400', 2, '', '', '西南', '513400', '凉山', '凉山彝族自治州', '', 'L', 'Liang shan', 27.88164000, 102.26746000),('520100', 2, '', '', '西南', '520100', '贵阳', '贵阳市', '', 'G', 'Gui yang', 26.64702000, 106.63024000),('520200', 2, '', '', '西南', '520200', '六盘水', '六盘水市', '', 'L', 'Liu pan shui', 26.59336000, 104.83023000),('520300', 2, '', '', '西南', '520300', '遵义', '遵义市', '', 'Z', 'Zun yi', 27.72545000, 106.92723000),('520400', 2, '', '', '西南', '520400', '安顺', '安顺市', '', 'A', 'An shun', 26.25367000, 105.94620000),('520500', 2, '', '', '西南', '520500', '毕节', '毕节市', '', 'B', 'Bi jie', 27.29847000, 105.30504000),('520600', 2, '', '', '西南', '520600', '铜仁', '铜仁市', '', 'T', 'Tong ren', 27.69066000, 109.18099000),('522300', 2, '', '', '西南', '522300', '黔西南', '黔西南布依族苗族自治州', '', 'Q', 'Qian xi nan', 25.08988000, 104.90437000),('522600', 2, '', '', '西南', '522600', '黔东南', '黔东南苗族侗族自治州', '', 'Q', 'Qian dong nan', 26.58364000, 107.98416000),('522700', 2, '', '', '西南', '522700', '黔南', '黔南布依族苗族自治州', '', 'Q', 'Qian nan', 26.25427000, 107.52226000),('530100', 2, '', '', '西南', '530100', '昆明', '昆明市', '', 'K', 'Kun ming', 24.87966000, 102.83322000),('530300', 2, '', '', '西南', '530300', '曲靖', '曲靖市', '', 'Q', 'Qu jing', 25.49002000, 103.79625000),('530400', 2, '', '', '西南', '530400', '玉溪', '玉溪市', '', 'Y', 'Yu xi', 24.35180000, 102.54714000),('530500', 2, '', '', '西南', '530500', '保山', '保山市', '', 'B', 'Bao shan', 25.11205000, 99.16181000),('530600', 2, '', '', '西南', '530600', '昭通', '昭通市', '', 'Z', 'Zhao tong', 27.33817000, 103.71680000),('530700', 2, '', '', '西南', '530700', '丽江', '丽江市', '', 'L', 'Li jiang', 26.85648000, 100.22710000),('530800', 2, '', '', '西南', '530800', '普洱', '普洱市', '', 'P', 'Pu er', 22.82521000, 100.96624000),('530900', 2, '', '', '西南', '530900', '临沧', '临沧市', '', 'L', 'Lin cang', 23.88426000, 100.08884000),('532300', 2, '', '', '西南', '532300', '楚雄', '楚雄彝族自治州', '', 'C', 'Chu xiong', 25.04495000, 101.52767000),('532500', 2, '', '', '西南', '532500', '红河', '红河哈尼族彝族自治州', '', 'H', 'Hong he', 23.36422000, 103.37560000),('532600', 2, '', '', '西南', '532600', '文山', '文山壮族苗族自治州', '', 'W', 'Wen shan', 23.39849000, 104.21504000),('532800', 2, '', '', '西南', '532800', '西双版纳', '西双版纳傣族自治州', '', 'X', 'Xi shuang ban na', 22.00749000, 100.79739000),('532900', 2, '', '', '西南', '532900', '大理', '大理白族自治州', '', 'D', 'Da li', 25.60648000, 100.26764000),('533100', 2, '', '', '西南', '533100', '德宏', '德宏傣族景颇族自治州', '', 'D', 'De hong', 24.43232000, 98.58486000),('533300', 2, '', '', '西南', '533300', '怒江', '怒江傈僳族自治州', '', 'N', 'Nu jiang', 25.81763000, 98.85670000),('533400', 2, '', '', '西南', '533400', '迪庆', '迪庆藏族自治州', '', 'D', 'Di qing', 27.81908000, 99.70305000),('540100', 2, '', '', '西南', '540100', '拉萨', '拉萨市', '', 'L', 'La sa', 29.64415000, 91.11450000),('540200', 2, '', '', '西南', '540200', '日喀则', '日喀则市', '', 'R', 'Ri ka ze', 29.26705000, 88.88116000),('540300', 2, '', '', '西南', '540300', '昌都', '昌都市', '', 'C', 'Chang du', 31.14073000, 97.17225000),('540400', 2, '', '', '西南', '540400', '林芝', '林芝市', '', 'L', 'Lin zhi', 29.64895000, 94.36155000),('540500', 2, '', '', '西南', '540500', '山南', '山南市', '', 'S', 'Shan nan', 29.23705000, 91.77313000),('540600', 2, '', '', '西南', '540600', '那曲', '那曲市', '', 'N', 'Na qu', 31.47614000, 92.05136000),('542500', 2, '', '', '西南', '542500', '阿里', '阿里地区', '', 'A', 'A li', 30.40051000, 81.14540000),('610100', 2, '', '', '西北', '610100', '西安', '西安市', '', 'X', 'Xi an', 34.34127000, 108.93984000),('610200', 2, '', '', '西北', '610200', '铜川', '铜川市', '', 'T', 'Tong chuan', 34.89673000, 108.94515000),('610300', 2, '', '', '西北', '610300', '宝鸡', '宝鸡市', '', 'B', 'Bao ji', 34.36194000, 107.23732000),('610400', 2, '', '', '西北', '610400', '咸阳', '咸阳市', '', 'X', 'Xian yang', 34.32932000, 108.70929000),('610500', 2, '', '', '西北', '610500', '渭南', '渭南市', '', 'W', 'Wei nan', 34.49997000, 109.51015000),('610600', 2, '', '', '西北', '610600', '延安', '延安市', '', 'Y', 'Yan an', 36.58529000, 109.48978000),('610700', 2, '', '', '西北', '610700', '汉中', '汉中市', '', 'H', 'Han zhong', 33.06761000, 107.02377000),('610800', 2, '', '', '西北', '610800', '榆林', '榆林市', '', 'Y', 'Yu lin', 38.28520000, 109.73458000),('610900', 2, '', '', '西北', '610900', '安康', '安康市', '', 'A', 'An kang', 32.68486000, 109.02932000),('611000', 2, '', '', '西北', '611000', '商洛', '商洛市', '', 'S', 'Shang luo', 33.87036000, 109.94041000),('620100', 2, '', '', '西北', '620100', '兰州', '兰州市', '', 'L', 'Lan zhou', 36.06138000, 103.83417000),('620200', 2, '', '', '西北', '620200', '嘉峪关', '嘉峪关市', '', 'J', 'Jia yu guan', 39.77194000, 98.28971000),('620300', 2, '', '', '西北', '620300', '金昌', '金昌市', '', 'J', 'Jin chang', 38.52006000, 102.18759000),('620400', 2, '', '', '西北', '620400', '白银', '白银市', '', 'B', 'Bai yin', 36.54470000, 104.13773000),('620500', 2, '', '', '西北', '620500', '天水', '天水市', '', 'T', 'Tian shui', 34.58085000, 105.72486000),('620600', 2, '', '', '西北', '620600', '武威', '武威市', '', 'W', 'Wu wei', 37.92820000, 102.63797000),('620700', 2, '', '', '西北', '620700', '张掖', '张掖市', '', 'Z', 'Zhang ye', 38.92592000, 100.44981000),('620800', 2, '', '', '西北', '620800', '平凉', '平凉市', '', 'P', 'Ping liang', 35.54303000, 106.66530000),('620900', 2, '', '', '西北', '620900', '酒泉', '酒泉市', '', 'J', 'Jiu quan', 39.73255000, 98.49394000),('621000', 2, '', '', '西北', '621000', '庆阳', '庆阳市', '', 'Q', 'Qing yang', 35.70978000, 107.64292000),('621100', 2, '', '', '西北', '621100', '定西', '定西市', '', 'D', 'Ding xi', 35.58113000, 104.62524000),('621200', 2, '', '', '西北', '621200', '陇南', '陇南市', '', 'L', 'Long nan', 33.40100000, 104.92166000),('622900', 2, '', '', '西北', '622900', '临夏', '临夏回族自治州', '', 'L', 'Lin xia', 35.60122000, 103.21091000),('623000', 2, '', '', '西北', '623000', '甘南', '甘南藏族自治州', '', 'G', 'Gan nan', 34.98327000, 102.91102000),('630100', 2, '', '', '西北', '630100', '西宁', '西宁市', '', 'X', 'Xi ning', 36.61729000, 101.77782000),('630200', 2, '', '', '西北', '630200', '海东', '海东市', '', 'H', 'Hai dong', 36.48209000, 102.40173000),('632200', 2, '', '', '西北', '632200', '海北', '海北藏族自治州', '', 'H', 'Hai bei', 36.95454000, 100.90096000),('632300', 2, '', '', '西北', '632300', '黄南', '黄南藏族自治州', '', 'H', 'Huang nan', 35.51991000, 102.01507000),('632500', 2, '', '', '西北', '632500', '海南', '海南藏族自治州', '', 'H', 'Hai nan', 36.28663000, 100.62037000),('632600', 2, '', '', '西北', '632600', '果洛', '果洛藏族自治州', '', 'G', 'Guo luo', 34.47141000, 100.24475000),('632700', 2, '', '', '西北', '632700', '玉树', '玉树藏族自治州', '', 'Y', 'Yu shu', 33.00528000, 97.00650000),('632800', 2, '', '', '西北', '632800', '海西', '海西蒙古族藏族自治州', '', 'H', 'Hai xi', 37.37710000, 97.37122000),('640100', 2, '', '', '西北', '640100', '银川', '银川市', '', 'Y', 'Yin chuan', 38.48644000, 106.23248000),('640200', 2, '', '', '西北', '640200', '石嘴山', '石嘴山市', '', 'S', 'Shi zui shan', 38.98410000, 106.38418000),('640300', 2, '', '', '西北', '640300', '吴忠', '吴忠市', '', 'W', 'Wu zhong', 37.99755000, 106.19879000),('640400', 2, '', '', '西北', '640400', '固原', '固原市', '', 'G', 'Gu yuan', 36.01580000, 106.24259000),('640500', 2, '', '', '西北', '640500', '中卫', '中卫市', '', 'Z', 'Zhong wei', 37.50026000, 105.19676000),('650100', 2, '', '', '西北', '650100', '乌鲁木齐', '乌鲁木齐市', '', 'W', 'Wu lu mu qi', 43.82663000, 87.61688000),('650200', 2, '', '', '西北', '650200', '克拉玛依', '克拉玛依市', '', 'K', 'Ke la ma yi', 45.57999000, 84.88927000),('650400', 2, '', '', '西北', '650400', '吐鲁番', '吐鲁番市', '', 'T', 'Tu lu fan', 42.95130000, 89.18954000),('650500', 2, '', '', '西北', '650500', '哈密', '哈密市', '', 'H', 'Ha mi', 42.81855000, 93.51538000),('652300', 2, '', '', '西北', '652300', '昌吉', '昌吉回族自治州', '', 'C', 'Chang ji', 44.01117000, 87.30822000),('652700', 2, '', '', '西北', '652700', '博州', '博尔塔拉蒙古自治州', '', 'B', 'Bo zhou', 44.90597000, 82.06665000),('652800', 2, '', '', '西北', '652800', '巴州', '巴音郭楞蒙古自治州', '', 'B', 'Ba zhou', 41.76404000, 86.14517000),('652900', 2, '', '', '西北', '652900', '阿克苏', '阿克苏地区', '', 'A', 'A ke su', 41.16842000, 80.26008000),('653000', 2, '', '', '西北', '653000', '克州', '克孜勒苏柯尔克孜自治州', '', 'K', 'Ke zhou', 39.71530000, 76.16661000),('653100', 2, '', '', '西北', '653100', '喀什', '喀什地区', '', 'K', 'Ka shi', 39.47042000, 75.98976000),('653200', 2, '', '', '西北', '653200', '和田', '和田地区', '', 'H', 'He tian', 37.11431000, 79.92247000),('654000', 2, '', '', '西北', '654000', '伊犁', '伊犁哈萨克自治州', '', 'Y', 'Yi li', 43.91689000, 81.32416000),('654200', 2, '', '', '西北', '654200', '塔城', '塔城地区', '', 'T', 'Ta cheng', 46.74532000, 82.98046000),('654300', 2, '', '', '西北', '654300', '阿勒泰', '阿勒泰地区', '', 'A', 'A le tai', 47.84564000, 88.14023000),('659001', 2, '', '', '西北', '659001', '石河子', '石河子市', '', 'S', 'Shi he zi', 44.30653000, 86.07893000),('659002', 2, '', '', '西北', '659002', '阿拉尔', '阿拉尔市', '', 'A', 'A la er', 40.54798000, 81.28067000),('659003', 2, '', '', '西北', '659003', '图木舒克', '图木舒克市', '', 'T', 'Tu mu shu ke', 39.86495000, 79.06902000),('659004', 2, '', '', '西北', '659004', '五家渠', '五家渠市', '', 'W', 'Wu jia qu', 44.16799000, 87.54017000),('659005', 2, '', '', '西北', '659005', '北屯', '北屯市', '', 'B', 'Bei tun', 47.36327000, 87.80014000),('659006', 2, '', '', '西北', '659006', '铁门关', '铁门关市', '', 'T', 'Tie men guan', 41.86868000, 85.67583000),('659007', 2, '', '', '西北', '659007', '双河', '双河市', '', 'S', 'Shuang he', 44.84418000, 82.35501000),('659008', 2, '', '', '西北', '659008', '可克达拉', '可克达拉市', '', 'K', 'Ke ke da la', 43.94799000, 81.04476000),('659009', 2, '', '', '西北', '659009', '昆玉', '昆玉市', '', 'K', 'Kun yu', 37.20948000, 79.29133000),('710100', 2, '', '', '港澳台', '710100', '台北', '台北市', '', 'T', 'Tai bei', 25.03072400, 121.52007600),('710200', 2, '', '', '港澳台', '710200', '高雄', '高雄市', '', 'G', 'Gao xiong', 22.63057600, 120.30683900),('710300', 2, '', '', '港澳台', '710300', '台南', '台南市', '', 'T', 'Tai nan', 22.99860100, 120.18781700),('710400', 2, '', '', '港澳台', '710400', '台中', '台中市', '', 'T', 'Tai zhong', 24.14317100, 120.67988200),('710600', 2, '', '', '港澳台', '710600', '南投', '南投县', '', 'N', 'Nan tou', 23.91961900, 120.67000800),('710700', 2, '', '', '港澳台', '710700', '基隆', '基隆市', '', 'J', 'Ji long', 25.12210500, 121.74152600),('710800', 2, '', '', '港澳台', '710800', '新竹', '新竹市', '', 'X', 'Xin zhu', 24.78492400, 120.99074500),('710900', 2, '', '', '港澳台', '710900', '嘉义', '嘉义市', '', 'J', 'Jia yi', 23.48507900, 120.47246200),('711100', 2, '', '', '港澳台', '711100', '新北', '新北市', '', 'X', 'Xin bei', 25.18530000, 121.66367500),('711200', 2, '', '', '港澳台', '711200', '宜兰', '宜兰县', '', 'Y', 'Yi lan', 24.75970700, 121.75444200),('711300', 2, '', '', '港澳台', '711300', '新竹', '新竹县', '', 'X', 'Xin zhu', 24.83923300, 121.00201200),('711400', 2, '', '', '港澳台', '711400', '桃园', '桃园市', '', 'T', 'Tao yuan', 24.98275700, 121.21360800),('711500', 2, '', '', '港澳台', '711500', '苗栗', '苗栗县', '', 'M', 'Miao li', 24.69676200, 120.88433700),('711700', 2, '', '', '港澳台', '711700', '彰化', '彰化县', '', 'Z', 'Zhang hua', 24.06852300, 120.55747900),('711900', 2, '', '', '港澳台', '711900', '嘉义', '嘉义县', '', 'J', 'Jia yi', 23.43447300, 120.62425500),('712100', 2, '', '', '港澳台', '712100', '云林', '云林县', '', 'Y', 'Yun lin', 23.66494300, 120.48073800),('712400', 2, '', '', '港澳台', '712400', '屏东', '屏东县', '', 'P', 'Ping dong', 22.66671600, 120.49200500),('712500', 2, '', '', '港澳台', '712500', '台东', '台东县', '', 'T', 'Tai dong', 22.76436400, 121.11320700),('712600', 2, '', '', '港澳台', '712600', '花莲', '花莲县', '', 'H', 'Hua lian', 24.00067400, 121.59729000),('712700', 2, '', '', '港澳台', '712700', '澎湖', '澎湖县', '', 'P', 'Peng hu', 23.55235100, 119.58457000),('810101', 2, '', '', '港澳台', '810101', '中西区', '中西区', '', 'Z', 'Zhong xi qu', 22.27629000, 114.16368000),('810102', 2, '', '', '港澳台', '810102', '东区', '东区', '', 'D', 'Dong qu', 22.28137000, 114.22914000),('810103', 2, '', '', '港澳台', '810103', '九龙', '九龙城区', '', 'J', 'Jiu long', 22.30818000, 114.18895000),('810104', 2, '', '', '港澳台', '810104', '观塘区', '观塘区', '', 'G', 'Guan tang qu', 22.31057000, 114.23060000),('810105', 2, '', '', '港澳台', '810105', '南区', '南区', '', 'N', 'Nan qu', 22.24543000, 114.15806000),('810106', 2, '', '', '港澳台', '810106', '深水埗区', '深水埗区', '', 'S', 'Shen shui bu qu', 22.32921000, 114.16856000),('810107', 2, '', '', '港澳台', '810107', '湾仔区', '湾仔区', '', 'W', 'Wan zi qu', 22.27469000, 114.17778000),('810108', 2, '', '', '港澳台', '810108', '黄大仙区', '黄大仙区', '', 'H', 'Huang da xian qu', 22.34003000, 114.19584000),('810109', 2, '', '', '港澳台', '810109', '油尖旺区', '油尖旺区', '', 'Y', 'You jian wang qu', 22.31898000, 114.17738000),('810110', 2, '', '', '港澳台', '810110', '离岛区', '离岛区', '', 'L', 'Li dao qu', 22.28170000, 113.94691000),('810111', 2, '', '', '港澳台', '810111', '葵青区', '葵青区', '', 'K', 'Kui qing qu', 22.36055000, 114.13654000),('810112', 2, '', '', '港澳台', '810112', '北区', '北区', '', 'B', 'Bei qu', 22.49181000, 114.14312000),('810113', 2, '', '', '港澳台', '810113', '西贡区', '西贡区', '', 'X', 'Xi gong qu', 22.37943000, 114.27699000),('810114', 2, '', '', '港澳台', '810114', '沙田区', '沙田区', '', 'S', 'Sha tian qu', 22.38270000, 114.19191000),('810115', 2, '', '', '港澳台', '810115', '屯门区', '屯门区', '', 'T', 'Tun men qu', 22.38767000, 113.98029000),('810116', 2, '', '', '港澳台', '810116', '大埔区', '大埔区', '', 'D', 'Da pu qu', 22.44800000, 114.16946000),('810117', 2, '', '', '港澳台', '810117', '荃湾区', '荃湾区', '', 'Q', 'Quan wan qu', 22.37145000, 114.12001000),('810118', 2, '', '', '港澳台', '810118', '元朗区', '元朗区', '', 'Y', 'Yuan lang qu', 22.44243000, 114.03181000),('820101', 2, '', '', '港澳台', '820101', '澳门半岛', '澳门半岛', '', 'A', 'Ao men ban dao', 22.18684000, 113.54294000),('820102', 2, '', '', '港澳台', '820102', '凼仔', '凼仔', '', 'D', 'Dang zi', 22.15473000, 113.55929000),('820103', 2, '', '', '港澳台', '820103', '路凼城', '路凼城', '', 'L', 'Lu dang cheng', 22.13867000, 113.56828000),('820104', 2, '', '', '港澳台', '820104', '路环', '路环', '', 'L', 'Lu huan', 22.11501000, 113.55724000),('712712', 3, '', '', NULL, '712712', '', '湖西乡', '', '', '', 23.58199800, 119.63524500),('712711', 3, '', '', NULL, '712711', '', '白沙乡', '', '', '', 23.65348900, 119.58631700),('712710', 3, '', '', NULL, '712710', '', '七美乡', '', '', '', 23.20282200, 119.42999500),('712709', 3, '', '', NULL, '712709', '', '望安乡', '', '', '', 23.37087400, 119.50172900),('712708', 3, '', '', NULL, '712708', '', '西屿乡', '', '', '', 23.59916500, 119.50736900),('712707', 3, '', '', NULL, '712707', '', '马公市', '', '', '', 23.55235100, 119.58457000),('712628', 3, '', '', NULL, '712628', '', '富里乡', '', '', '', 23.19724200, 121.29973700),('712627', 3, '', '', NULL, '712627', '', '卓溪乡', '', '', '', 23.38753600, 121.18787100),('712626', 3, '', '', NULL, '712626', '', '玉里镇', '', '', '', 23.36682000, 121.35880700),('712625', 3, '', '', NULL, '712625', '', '万荣乡', '', '', '', 23.70474400, 121.32602400),('712624', 3, '', '', NULL, '712624', '', '瑞穗乡', '', '', '', 23.51919200, 121.41073500),('712623', 3, '', '', NULL, '712623', '', '丰滨乡', '', '', '', 23.57757400, 121.49301700),('712622', 3, '', '', NULL, '712622', '', '光复乡', '', '', '', 23.65254900, 121.44889100),('712621', 3, '', '', NULL, '712621', '', '凤林镇', '', '', '', 23.74239600, 121.46668400),('712620', 3, '', '', NULL, '712620', '', '寿丰乡', '', '', '', 23.83680200, 121.53028500),('712619', 3, '', '', NULL, '712619', '', '吉安乡', '', '', '', 23.96047200, 121.56562100),('712618', 3, '', '', NULL, '712618', '', '秀林乡', '', '', '', 24.15176800, 121.49835900),('712616', 3, '', '', NULL, '712616', '', '新城乡', '', '', '', 24.05706800, 121.61241400),('712615', 3, '', '', NULL, '712615', '', '花莲市', '', '', '', 24.00067400, 121.59729000),('712532', 3, '', '', NULL, '712532', '', '太麻里乡', '', '', '', 22.58747200, 120.97209900),('712531', 3, '', '', NULL, '712531', '', '达仁乡', '', '', '', 22.37340200, 120.84579100),('712530', 3, '', '', NULL, '712530', '', '大武乡', '', '', '', 22.38183200, 120.89347200),('712529', 3, '', '', NULL, '712529', '', '金峰乡', '', '', '', 22.60231600, 120.90571300),('712528', 3, '', '', NULL, '712528', '', '长滨乡', '', '', '', 23.32792500, 121.41998100),('712527', 3, '', '', NULL, '712527', '', '成功镇', '', '', '', 23.11728900, 121.34597500),('712526', 3, '', '', NULL, '712526', '', '东河乡', '', '', '', 22.97374200, 121.24939600),('712525', 3, '', '', NULL, '712525', '', '池上乡', '', '', '', 23.08867300, 121.21697700),('712524', 3, '', '', NULL, '712524', '', '海端乡', '', '', '', 23.10411500, 121.03131600),('712523', 3, '', '', NULL, '712523', '', '关山镇', '', '', '', 23.03725300, 121.17544400),('712522', 3, '', '', NULL, '712522', '', '鹿野乡', '', '', '', 22.94935600, 121.15235100),('712521', 3, '', '', NULL, '712521', '', '卑南乡', '', '', '', 22.75862200, 121.01173800),('712520', 3, '', '', NULL, '712520', '', '延平乡', '', '', '', 22.90859700, 121.02191100),('712519', 3, '', '', NULL, '712519', '', '兰屿乡', '', '', '', 22.04116900, 121.55010700),('712518', 3, '', '', NULL, '712518', '', '绿岛乡', '', '', '', 22.66291900, 121.49340700),('712517', 3, '', '', NULL, '712517', '', '台东市', '', '', '', 22.76436400, 121.11320700),('712466', 3, '', '', NULL, '712466', '', '满州乡', '', '', '', 22.05046200, 120.83515200),('712465', 3, '', '', NULL, '712465', '', '恒春镇', '', '', '', 21.98980300, 120.73920000),('712464', 3, '', '', NULL, '712464', '', '牡丹乡', '', '', '', 22.15295000, 120.81706700),('712463', 3, '', '', NULL, '712463', '', '车城乡', '', '', '', 22.07920500, 120.72788500),('712462', 3, '', '', NULL, '712462', '', '狮子乡', '', '', '', 22.24614100, 120.73595500),('712461', 3, '', '', NULL, '712461', '', '春日乡', '', '', '', 22.39660800, 120.67532900),('712460', 3, '', '', NULL, '712460', '', '枋山乡', '', '', '', 22.25544300, 120.65700400),('712459', 3, '', '', NULL, '712459', '', '枋寮乡', '', '', '', 22.39450600, 120.60646500),('712458', 3, '', '', NULL, '712458', '', '新园乡', '', '', '', 22.53403200, 120.46474100),('712457', 3, '', '', NULL, '712457', '', '佳冬乡', '', '', '', 22.42704300, 120.54861400),('712456', 3, '', '', NULL, '712456', '', '琉球乡', '', '', '', 22.33990200, 120.37129100),('712455', 3, '', '', NULL, '712455', '', '东港镇', '', '', '', 22.46741800, 120.48854100),('712454', 3, '', '', NULL, '712454', '', '林边乡', '', '', '', 22.44496300, 120.51188800),('712453', 3, '', '', NULL, '712453', '', '南州乡', '', '', '', 22.48154600, 120.51721400),('712452', 3, '', '', NULL, '712452', '', '新埤乡', '', '', '', 22.47546100, 120.59999600),('712451', 3, '', '', NULL, '712451', '', '崁顶乡', '', '', '', 22.51403200, 120.50557400),('712450', 3, '', '', NULL, '712450', '', '万峦乡', '', '', '', 22.58091000, 120.61230500),('712449', 3, '', '', NULL, '712449', '', '来义乡', '', '', '', 22.49380200, 120.65483600),('712448', 3, '', '', NULL, '712448', '', '泰武乡', '', '', '', 22.59264300, 120.65825900),('712447', 3, '', '', NULL, '712447', '', '潮州镇', '', '', '', 22.54354000, 120.54435900),('712446', 3, '', '', NULL, '712446', '', '万丹乡', '', '', '', 22.57836100, 120.48366400),('712445', 3, '', '', NULL, '712445', '', '内埔乡', '', '', '', 22.64180200, 120.59611600),('712444', 3, '', '', NULL, '712444', '', '竹田乡', '', '', '', 22.58493900, 120.52156600),('712443', 3, '', '', NULL, '712443', '', '麟洛乡', '', '', '', 22.65031000, 120.52547000),('712442', 3, '', '', NULL, '712442', '', '长治乡', '', '', '', 22.68574000, 120.54265700),('712441', 3, '', '', NULL, '712441', '', '盐埔乡', '', '', '', 22.74091000, 120.56046300),('712440', 3, '', '', NULL, '712440', '', '高树乡', '', '', '', 22.79863300, 120.61430100),('712439', 3, '', '', NULL, '712439', '', '里港乡', '', '', '', 22.80035300, 120.50941900),('712438', 3, '', '', NULL, '712438', '', '九如乡', '', '', '', 22.72919800, 120.48969300),('712437', 3, '', '', NULL, '712437', '', '玛家乡', '', '', '', 22.66511800, 120.67249700),('712436', 3, '', '', NULL, '712436', '', '雾台乡', '', '', '', 22.75620900, 120.79304600),('712435', 3, '', '', NULL, '712435', '', '三地门乡', '', '', '', 22.78942300, 120.67811100),('712434', 3, '', '', NULL, '712434', '', '屏东市', '', '', '', 22.66671600, 120.49200500),('712140', 3, '', '', NULL, '712140', '', '元长乡', '', '', '', 23.64537600, 120.32565200),('712139', 3, '', '', NULL, '712139', '', '四湖乡', '', '', '', 23.64652500, 120.21056100),('712138', 3, '', '', NULL, '712138', '', '口湖乡', '', '', '', 23.57919000, 120.17822700),('712137', 3, '', '', NULL, '712137', '', '水林乡', '', '', '', 23.56802800, 120.23913000),('712136', 3, '', '', NULL, '712136', '', '北港镇', '', '', '', 23.58489400, 120.28885500),('712135', 3, '', '', NULL, '712135', '', '二仑乡', '', '', '', 23.79031600, 120.39394400),('712134', 3, '', '', NULL, '712134', '', '西螺镇', '', '', '', 23.78474900, 120.45785400),('712133', 3, '', '', NULL, '712133', '', '莿桐乡', '', '', '', 23.77119000, 120.54166000),('712132', 3, '', '', NULL, '712132', '', '古坑乡', '', '', '', 23.62812100, 120.61467500),('712131', 3, '', '', NULL, '712131', '', '林内乡', '', '', '', 23.74312400, 120.61696000),('712130', 3, '', '', NULL, '712130', '', '斗六市', '', '', '', 23.69752900, 120.58650100),('712129', 3, '', '', NULL, '712129', '', '麦寮乡', '', '', '', 23.77592900, 120.25593100),('712128', 3, '', '', NULL, '712128', '', '仑背乡', '', '', '', 23.77289400, 120.33501500),('712127', 3, '', '', NULL, '712127', '', '台西乡', '', '', '', 23.70255600, 120.21318000),('712126', 3, '', '', NULL, '712126', '', '东势乡', '', '', '', 23.69840200, 120.25817200),('712125', 3, '', '', NULL, '712125', '', '褒忠乡', '', '', '', 23.71633700, 120.30900300),('712124', 3, '', '', NULL, '712124', '', '土库镇', '', '', '', 23.69974100, 120.36593200),('712123', 3, '', '', NULL, '712123', '', '虎尾镇', '', '', '', 23.71453500, 120.42285400),('712122', 3, '', '', NULL, '712122', '', '大埤乡', '', '', '', 23.64588000, 120.43107400),('712121', 3, '', '', NULL, '712121', '', '斗南镇', '', '', '', 23.66494300, 120.48073800),('711936', 3, '', '', NULL, '711936', '', '布袋镇', '', '', '', 23.39627500, 120.20091700),('711935', 3, '', '', NULL, '711935', '', '义竹乡', '', '', '', 23.34963600, 120.22860900),('711934', 3, '', '', NULL, '711934', '', '溪口乡', '', '', '', 23.59480000, 120.40386100),('711933', 3, '', '', NULL, '711933', '', '大林镇', '', '', '', 23.59354900, 120.48166400),('711932', 3, '', '', NULL, '711932', '', '民雄乡', '', '', '', 23.54041800, 120.46053700),('711931', 3, '', '', NULL, '711931', '', '新港乡', '', '', '', 23.54050100, 120.35400500),('711930', 3, '', '', NULL, '711930', '', '六脚乡', '', '', '', 23.50897800, 120.26777600),('711929', 3, '', '', NULL, '711929', '', '东石乡', '', '', '', 23.46008300, 120.19903500),('711928', 3, '', '', NULL, '711928', '', '朴子市', '', '', '', 23.43805300, 120.25252000),('711927', 3, '', '', NULL, '711927', '', '太保市', '', '', '', 23.47393300, 120.35193000),('711926', 3, '', '', NULL, '711926', '', '鹿草乡', '', '', '', 23.41572000, 120.30087700),('711925', 3, '', '', NULL, '711925', '', '水上乡', '', '', '', 23.42140600, 120.43926600),('711924', 3, '', '', NULL, '711924', '', '大埔乡', '', '', '', 23.28744400, 120.59547500),('711923', 3, '', '', NULL, '711923', '', '中埔乡', '', '', '', 23.39845000, 120.51944100),('711922', 3, '', '', NULL, '711922', '', '阿里山乡', '', '', '', 23.43654900, 120.77420300),('711921', 3, '', '', NULL, '711921', '', '竹崎乡', '', '', '', 23.50518600, 120.58434100),('711920', 3, '', '', NULL, '711920', '', '梅山乡', '', '', '', 23.55749100, 120.61201600),('711919', 3, '', '', NULL, '711919', '', '番路乡', '', '', '', 23.43447300, 120.62425500),('711752', 3, '', '', NULL, '711752', '', '二水乡', '', '', '', 23.81319900, 120.62823800),('711751', 3, '', '', NULL, '711751', '', '芳苑乡', '', '', '', 23.94306900, 120.35568700),('711750', 3, '', '', NULL, '711750', '', '大城乡', '', '', '', 23.86675700, 120.31805900),('711749', 3, '', '', NULL, '711749', '', '二林镇', '', '', '', 23.90624700, 120.39439000),('711748', 3, '', '', NULL, '711748', '', '竹塘乡', '', '', '', 23.85740700, 120.41151600),('711747', 3, '', '', NULL, '711747', '', '溪州乡', '', '', '', 23.83511100, 120.51942000),('711746', 3, '', '', NULL, '711746', '', '埤头乡', '', '', '', 23.87357000, 120.46852700),('711745', 3, '', '', NULL, '711745', '', '田尾乡', '', '', '', 23.89976800, 120.52409300),('711744', 3, '', '', NULL, '711744', '', '北斗镇', '', '', '', 23.86816500, 120.53191800),('711743', 3, '', '', NULL, '711743', '', '田中镇', '', '', '', 23.85855000, 120.60918100),('711742', 3, '', '', NULL, '711742', '', '埔盐乡', '', '', '', 23.99303100, 120.46546300),('711741', 3, '', '', NULL, '711741', '', '大村乡', '', '', '', 23.99308500, 120.56345600),('711740', 3, '', '', NULL, '711740', '', '溪湖镇', '', '', '', 23.95219000, 120.48755500),('711739', 3, '', '', NULL, '711739', '', '埔心乡', '', '', '', 23.95441100, 120.52898100),('711738', 3, '', '', NULL, '711738', '', '永靖乡', '', '', '', 23.92475800, 120.53107800),('711737', 3, '', '', NULL, '711737', '', '社头乡', '', '', '', 23.90855200, 120.62080600),('711736', 3, '', '', NULL, '711736', '', '员林市', '', '', '', 23.95691500, 120.61026000),('711735', 3, '', '', NULL, '711735', '', '伸港乡', '', '', '', 24.15639000, 120.48277000),('711734', 3, '', '', NULL, '711734', '', '和美镇', '', '', '', 24.10936900, 120.50469000),('711733', 3, '', '', NULL, '711733', '', '线西乡', '', '', '', 24.12308000, 120.45956000),('711732', 3, '', '', NULL, '711732', '', '福兴乡', '', '', '', 24.02875500, 120.44278600),('711731', 3, '', '', NULL, '711731', '', '鹿港镇', '', '', '', 24.08473400, 120.43759600),('711730', 3, '', '', NULL, '711730', '', '秀水乡', '', '', '', 24.02826200, 120.50449500),('711729', 3, '', '', NULL, '711729', '', '花坛乡', '', '', '', 24.03304500, 120.56236100),('711728', 3, '', '', NULL, '711728', '', '芬园乡', '', '', '', 23.99800800, 120.62741000),('711727', 3, '', '', NULL, '711727', '', '彰化市', '', '', '', 24.06852300, 120.55747900),('711536', 3, '', '', NULL, '711536', '', '卓兰镇', '', '', '', 24.32722400, 120.83551500),('711535', 3, '', '', NULL, '711535', '', '西湖乡', '', '', '', 24.53772400, 120.76089300),('711534', 3, '', '', NULL, '711534', '', '三义乡', '', '', '', 24.37576300, 120.77013300),('711533', 3, '', '', NULL, '711533', '', '铜锣乡', '', '', '', 24.45605900, 120.79846000),('711532', 3, '', '', NULL, '711532', '', '泰安乡', '', '', '', 24.39307900, 121.04939000),('711531', 3, '', '', NULL, '711531', '', '大湖乡', '', '', '', 24.38378900, 120.84662500),('711530', 3, '', '', NULL, '711530', '', '公馆乡', '', '', '', 24.50355300, 120.85677100),('711529', 3, '', '', NULL, '711529', '', '头屋乡', '', '', '', 24.57517400, 120.88231900),('711528', 3, '', '', NULL, '711528', '', '造桥乡', '', '', '', 24.61758000, 120.88350900),('711527', 3, '', '', NULL, '711527', '', '苗栗市', '', '', '', 24.55739600, 120.80196600),('711526', 3, '', '', NULL, '711526', '', '苑里镇', '', '', '', 24.41299700, 120.69240700),('711525', 3, '', '', NULL, '711525', '', '通霄镇', '', '', '', 24.48094900, 120.72330300),('711524', 3, '', '', NULL, '711524', '', '后龙镇', '', '', '', 24.60302100, 120.78012700),('711523', 3, '', '', NULL, '711523', '', '狮潭乡', '', '', '', 24.52645100, 120.92478700),('711522', 3, '', '', NULL, '711522', '', '南庄乡', '', '', '', 24.57505300, 120.99591500),('711521', 3, '', '', NULL, '711521', '', '三湾乡', '', '', '', 24.63278500, 120.95096200),('711520', 3, '', '', NULL, '711520', '', '头份市', '', '', '', 24.67869200, 120.92583500),('711519', 3, '', '', NULL, '711519', '', '竹南镇', '', '', '', 24.69676200, 120.88433700),('711426', 3, '', '', NULL, '711426', '', '芦竹区', '', '', '', 25.04865300, 121.28868000),('711425', 3, '', '', NULL, '711425', '', '大园区', '', '', '', 25.05050200, 121.21119000),('711424', 3, '', '', NULL, '711424', '', '复兴区', '', '', '', 24.73552100, 121.37334700),('711423', 3, '', '', NULL, '711423', '', '大溪区', '', '', '', 24.87141600, 121.29795700),('711422', 3, '', '', NULL, '711422', '', '八德区', '', '', '', 24.95089000, 121.28661600),('711421', 3, '', '', NULL, '711421', '', '龟山区', '', '', '', 25.02794200, 121.36117500),('711420', 3, '', '', NULL, '711420', '', '桃园区', '', '', '', 24.99705800, 121.29771100),('711419', 3, '', '', NULL, '711419', '', '观音区', '', '', '', 25.01914500, 121.10404800),('711418', 3, '', '', NULL, '711418', '', '新屋区', '', '', '', 24.96608600, 121.06154500),('711417', 3, '', '', NULL, '711417', '', '杨梅区', '', '', '', 24.90936600, 121.13089200),('711416', 3, '', '', NULL, '711416', '', '龙潭区', '', '', '', 24.86420700, 121.21269100),('711415', 3, '', '', NULL, '711415', '', '平镇区', '', '', '', 24.91069900, 121.21784100),('711414', 3, '', '', NULL, '711414', '', '中坜区', '', '', '', 24.98275700, 121.21360800),('711326', 3, '', '', NULL, '711326', '', '峨眉乡', '', '', '', 24.68488300, 121.00120300),('711325', 3, '', '', NULL, '711325', '', '北埔乡', '', '', '', 24.68932600, 121.06209500),('711324', 3, '', '', NULL, '711324', '', '尖石乡', '', '', '', 24.58162600, 121.28933100),('711323', 3, '', '', NULL, '711323', '', '横山乡', '', '', '', 24.72127800, 121.15731700),('711322', 3, '', '', NULL, '711322', '', '五峰乡', '', '', '', 24.58911400, 121.14555200),('711321', 3, '', '', NULL, '711321', '', '竹东镇', '', '', '', 24.73634700, 121.08671400),('711320', 3, '', '', NULL, '711320', '', '宝山乡', '', '', '', 24.73090800, 120.99830300),('711319', 3, '', '', NULL, '711319', '', '芎林乡', '', '', '', 24.76821000, 121.11030100),('711318', 3, '', '', NULL, '711318', '', '关西镇', '', '', '', 24.78733800, 121.17854400),('711317', 3, '', '', NULL, '711317', '', '新埔镇', '', '', '', 24.84722200, 121.10569900),('711316', 3, '', '', NULL, '711316', '', '新丰乡', '', '', '', 24.90470600, 120.99771000),('711315', 3, '', '', NULL, '711315', '', '湖口乡', '', '', '', 24.88866000, 121.06023000),('711314', 3, '', '', NULL, '711314', '', '竹北市', '', '', '', 24.83923300, 121.00201200),('711225', 3, '', '', NULL, '711225', '', '南澳乡', '', '', '', 24.46172700, 121.66814800),('711224', 3, '', '', NULL, '711224', '', '苏澳镇', '', '', '', 24.55064800, 121.83587700),('711223', 3, '', '', NULL, '711223', '', '冬山乡', '', '', '', 24.64404900, 121.75337200),('711222', 3, '', '', NULL, '711222', '', '五结乡', '', '', '', 24.68218000, 121.79443200),('711221', 3, '', '', NULL, '711221', '', '大同乡', '', '', '', 24.56318800, 121.53563700),('711220', 3, '', '', NULL, '711220', '', '三星乡', '', '', '', 24.66396400, 121.67005400),('711219', 3, '', '', NULL, '711219', '', '罗东镇', '', '', '', 24.67835700, 121.77153900),('711218', 3, '', '', NULL, '711218', '', '员山乡', '', '', '', 24.74132400, 121.66273600),('711217', 3, '', '', NULL, '711217', '', '壮围乡', '', '', '', 24.76283300, 121.79949500),('711216', 3, '', '', NULL, '711216', '', '礁溪乡', '', '', '', 24.80807300, 121.73569300),('711215', 3, '', '', NULL, '711215', '', '头城镇', '', '', '', 24.91128300, 121.85085000),('711214', 3, '', '', NULL, '711214', '', '宜兰市', '', '', '', 24.75970700, 121.75444200),('711158', 3, '', '', NULL, '711158', '', '石门区', '', '', '', 25.26521800, 121.55519700),('711157', 3, '', '', NULL, '711157', '', '三芝区', '', '', '', 25.23751100, 121.51303600),('711156', 3, '', '', NULL, '711156', '', '淡水区', '', '', '', 25.19804600, 121.47366600),('711155', 3, '', '', NULL, '711155', '', '八里区', '', '', '', 25.11222700, 121.39973900),('711154', 3, '', '', NULL, '711154', '', '五股区', '', '', '', 25.09221600, 121.42529900),('711153', 3, '', '', NULL, '711153', '', '芦洲区', '', '', '', 25.08552900, 121.47063400),('711152', 3, '', '', NULL, '711152', '', '林口区', '', '', '', 25.08914300, 121.38267900),('711151', 3, '', '', NULL, '711151', '', '泰山区', '', '', '', 25.05936500, 121.40782000),('711150', 3, '', '', NULL, '711150', '', '新庄区', '', '', '', 25.03383900, 121.42690200),('711149', 3, '', '', NULL, '711149', '', '三重区', '', '', '', 25.06458900, 121.48033700),('711148', 3, '', '', NULL, '711148', '', '莺歌区', '', '', '', 24.96151100, 121.34128300),('711147', 3, '', '', NULL, '711147', '', '树林区', '', '', '', 24.98801600, 121.40368800),('711146', 3, '', '', NULL, '711146', '', '三峡区', '', '', '', 24.87901700, 121.40793500),('711145', 3, '', '', NULL, '711145', '', '土城区', '', '', '', 24.97076400, 121.45429400),('711144', 3, '', '', NULL, '711144', '', '中和区', '', '', '', 24.98785700, 121.49308000),('711143', 3, '', '', NULL, '711143', '', '永和区', '', '', '', 25.00464200, 121.51336600),('711142', 3, '', '', NULL, '711142', '', '乌来区', '', '', '', 24.78385500, 121.56111500),('711141', 3, '', '', NULL, '711141', '', '坪林区', '', '', '', 24.92701500, 121.73270800),('711140', 3, '', '', NULL, '711140', '', '新店区', '', '', '', 24.93733200, 121.53035000),('711139', 3, '', '', NULL, '711139', '', '贡寮区', '', '', '', 25.03419900, 121.92195000),('711138', 3, '', '', NULL, '711138', '', '双溪区', '', '', '', 24.99623600, 121.83318200),('711137', 3, '', '', NULL, '711137', '', '平溪区', '', '', '', 25.01605100, 121.75553900),('711136', 3, '', '', NULL, '711136', '', '瑞芳区', '', '', '', 25.10211000, 121.83440100),('711135', 3, '', '', NULL, '711135', '', '石碇区', '', '', '', 24.96272900, 121.65365500),('711134', 3, '', '', NULL, '711134', '', '深坑区', '', '', '', 25.00095000, 121.62531800),('711133', 3, '', '', NULL, '711133', '', '汐止区', '', '', '', 25.06850500, 121.65666500),('711132', 3, '', '', NULL, '711132', '', '板桥区', '', '', '', 24.99960700, 121.45505200),('711131', 3, '', '', NULL, '711131', '', '金山区', '', '', '', 25.22371700, 121.61428900),('711130', 3, '', '', NULL, '711130', '', '万里区', '', '', '', 25.18530000, 121.66367500),('710902', 3, '', '', NULL, '710902', '', '西区', '', '', '', 23.47703000, 120.42007500),('710901', 3, '', '', NULL, '710901', '', '东区', '', '', '', 23.48507900, 120.47246200),('710803', 3, '', '', NULL, '710803', '', '香山区', '', '', '', 24.76446500, 120.92949000),('710802', 3, '', '', NULL, '710802', '', '北区', '', '', '', 24.81327000, 120.95276700),('710801', 3, '', '', NULL, '710801', '', '东区', '', '', '', 24.78492400, 120.99074500),('710707', 3, '', '', NULL, '710707', '', '七堵区', '', '', '', 25.11439800, 121.68191700),('710706', 3, '', '', NULL, '710706', '', '暖暖区', '', '', '', 25.08110300, 121.74579300),('710705', 3, '', '', NULL, '710705', '', '安乐区', '', '', '', 25.14401000, 121.71007800),('710704', 3, '', '', NULL, '710704', '', '中山区', '', '', '', 25.14860800, 121.72943000),('710703', 3, '', '', NULL, '710703', '', '中正区', '', '', '', 25.14090300, 121.78382500),('710702', 3, '', '', NULL, '710702', '', '信义区', '', '', '', 25.12248100, 121.77229200),('710701', 3, '', '', NULL, '710701', '', '仁爱区', '', '', '', 25.12210500, 121.74152600),('710626', 3, '', '', NULL, '710626', '', '鹿谷乡', '', '', '', 23.72753200, 120.74994500),('710625', 3, '', '', NULL, '710625', '', '竹山镇', '', '', '', 23.71679800, 120.71768700),('710624', 3, '', '', NULL, '710624', '', '信义乡', '', '', '', 23.60279700, 121.03622400),('710623', 3, '', '', NULL, '710623', '', '鱼池乡', '', '', '', 23.89565600, 120.93536100),('710622', 3, '', '', NULL, '710622', '', '水里乡', '', '', '', 23.79965700, 120.87962800),('710621', 3, '', '', NULL, '710621', '', '集集镇', '', '', '', 23.83760700, 120.74978000),('710620', 3, '', '', NULL, '710620', '', '名间乡', '', '', '', 23.84793300, 120.64852300),('710619', 3, '', '', NULL, '710619', '', '仁爱乡', '', '', '', 24.10421500, 121.14536600),('710618', 3, '', '', NULL, '710618', '', '埔里镇', '', '', '', 23.96992000, 120.96266900),('710617', 3, '', '', NULL, '710617', '', '国姓乡', '', '', '', 24.06378900, 120.84824200),('710616', 3, '', '', NULL, '710616', '', '草屯镇', '', '', '', 23.98340200, 120.74493200),('710615', 3, '', '', NULL, '710615', '', '中寮乡', '', '', '', 23.92817600, 120.74218900),('710614', 3, '', '', NULL, '710614', '', '南投市', '', '', '', 23.91961900, 120.67000800),('710451', 3, '', '', NULL, '710451', '', '大安区', '', '', '', 24.35885500, 120.59128700),('710450', 3, '', '', NULL, '710450', '', '外埔区', '', '', '', 24.33458600, 120.68415800),('710449', 3, '', '', NULL, '710449', '', '大甲区', '', '', '', 24.37451900, 120.62810200),('710448', 3, '', '', NULL, '710448', '', '清水区', '', '', '', 24.30097800, 120.57491100),('710447', 3, '', '', NULL, '710447', '', '梧栖区', '', '', '', 24.24657100, 120.52433100),('710446', 3, '', '', NULL, '710446', '', '龙井区', '', '', '', 24.20067200, 120.53002200),('710445', 3, '', '', NULL, '710445', '', '沙鹿区', '', '', '', 24.22981800, 120.58434600),('710444', 3, '', '', NULL, '710444', '', '大肚区', '', '', '', 24.14792600, 120.56181900),('710443', 3, '', '', NULL, '710443', '', '神冈区', '', '', '', 24.25425100, 120.67999200),('710442', 3, '', '', NULL, '710442', '', '大雅区', '', '', '', 24.22515300, 120.65007800),('710441', 3, '', '', NULL, '710441', '', '潭子区', '', '', '', 24.21178400, 120.70928800),('710440', 3, '', '', NULL, '710440', '', '新社区', '', '', '', 24.18437200, 120.82726700),('710439', 3, '', '', NULL, '710439', '', '和平区', '', '', '', 24.24937900, 121.09565600),('710438', 3, '', '', NULL, '710438', '', '东势区', '', '', '', 24.25932200, 120.83667100),('710437', 3, '', '', NULL, '710437', '', '石冈区', '', '', '', 24.25862300, 120.78941300),('710436', 3, '', '', NULL, '710436', '', '后里区', '', '', '', 24.31981000, 120.72620600),('710435', 3, '', '', NULL, '710435', '', '丰原区', '', '', '', 24.24381900, 120.73431400),('710434', 3, '', '', NULL, '710434', '', '乌日区', '', '', '', 24.08097300, 120.64169900),('710433', 3, '', '', NULL, '710433', '', '雾峰区', '', '', '', 24.04708300, 120.72379100),('710432', 3, '', '', NULL, '710432', '', '大里区', '', '', '', 24.09987000, 120.69365700),('710431', 3, '', '', NULL, '710431', '', '太平区', '', '', '', 24.10642800, 120.77720300),('710408', 3, '', '', NULL, '710408', '', '南屯区', '', '', '', 24.14025900, 120.61600200),('710407', 3, '', '', NULL, '710407', '', '西屯区', '', '', '', 24.19092900, 120.63625400),('710406', 3, '', '', NULL, '710406', '', '北屯区', '', '', '', 24.18823600, 120.72541500),('710405', 3, '', '', NULL, '710405', '', '北区', '', '', '', 24.15608500, 120.68176700),('710404', 3, '', '', NULL, '710404', '', '西区', '', '', '', 24.14955900, 120.66703100),('710403', 3, '', '', NULL, '710403', '', '南区', '', '', '', 24.11605400, 120.66544600),('710402', 3, '', '', NULL, '710402', '', '东区', '', '', '', 24.13875300, 120.69765000),('710401', 3, '', '', NULL, '710401', '', '中区', '', '', '', 24.14317100, 120.67988200),('710369', 3, '', '', NULL, '710369', '', '安定区', '', '', '', 23.09568400, 120.23485500),('710368', 3, '', '', NULL, '710368', '', '新市区', '', '', '', 23.08298900, 120.29517100),('710367', 3, '', '', NULL, '710367', '', '山上区', '', '', '', 23.09402400, 120.37463600),('710366', 3, '', '', NULL, '710366', '', '大内区', '', '', '', 23.13664900, 120.41223600),('710365', 3, '', '', NULL, '710365', '', '善化区', '', '', '', 23.12655700, 120.29296700),('710364', 3, '', '', NULL, '710364', '', '盐水区', '', '', '', 23.30485800, 120.25491000),('710363', 3, '', '', NULL, '710363', '', '柳营区', '', '', '', 23.25822600, 120.37018200),('710362', 3, '', '', NULL, '710362', '', '下营区', '', '', '', 23.23306900, 120.27606200),('710361', 3, '', '', NULL, '710361', '', '六甲区', '', '', '', 23.22852500, 120.37626600),('710360', 3, '', '', NULL, '710360', '', '东山区', '', '', '', 23.27846100, 120.44630200),('710359', 3, '', '', NULL, '710359', '', '白河区', '', '', '', 23.34960700, 120.46730700),('710358', 3, '', '', NULL, '710358', '', '后壁区', '', '', '', 23.36247600, 120.34541700),('710357', 3, '', '', NULL, '710357', '', '新营区', '', '', '', 23.31466600, 120.29266100),('710356', 3, '', '', NULL, '710356', '', '北门区', '', '', '', 23.27984600, 120.13272700),('710355', 3, '', '', NULL, '710355', '', '学甲区', '', '', '', 23.25763600, 120.18466200),('710354', 3, '', '', NULL, '710354', '', '将军区', '', '', '', 23.20457600, 120.12794900),('710353', 3, '', '', NULL, '710353', '', '七股区', '', '', '', 23.14511700, 120.12461200),('710352', 3, '', '', NULL, '710352', '', '西港区', '', '', '', 23.12515000, 120.20159900),('710351', 3, '', '', NULL, '710351', '', '佳里区', '', '', '', 23.16780000, 120.17345400),('710350', 3, '', '', NULL, '710350', '', '麻豆区', '', '', '', 23.18654300, 120.23956200),('710349', 3, '', '', NULL, '710349', '', '官田区', '', '', '', 23.19334200, 120.35862000),('710348', 3, '', '', NULL, '710348', '', '龙崎区', '', '', '', 22.95622500, 120.38246800),('710347', 3, '', '', NULL, '710347', '', '关庙区', '', '', '', 22.94903200, 120.33968800),('710346', 3, '', '', NULL, '710346', '', '仁德区', '', '', '', 22.94204500, 120.24830900),('710345', 3, '', '', NULL, '710345', '', '南化区', '', '', '', 23.10982700, 120.53257500),('710344', 3, '', '', NULL, '710344', '', '楠西区', '', '', '', 23.17215700, 120.50146500),('710343', 3, '', '', NULL, '710343', '', '玉井区', '', '', '', 23.12205100, 120.45423000),('710342', 3, '', '', NULL, '710342', '', '左镇区', '', '', '', 23.03317200, 120.40826200),('710341', 3, '', '', NULL, '710341', '', '新化区', '', '', '', 23.03642500, 120.34361100),('710340', 3, '', '', NULL, '710340', '', '归仁区', '', '', '', 22.94841300, 120.29525100),('710339', 3, '', '', NULL, '710339', '', '永康区', '', '', '', 23.02649500, 120.25300700),('710306', 3, '', '', NULL, '710306', '', '安南区', '', '', '', 23.04967600, 120.17146200),('710305', 3, '', '', NULL, '710305', '', '安平区', '', '', '', 22.98785700, 120.16196000),('710304', 3, '', '', NULL, '710304', '', '北区', '', '', '', 23.00941700, 120.20967900),('710303', 3, '', '', NULL, '710303', '', '南区', '', '', '', 22.94699400, 120.18819400),('710302', 3, '', '', NULL, '710302', '', '东区', '', '', '', 22.98143200, 120.23365400),('710301', 3, '', '', NULL, '710301', '', '中西区', '', '', '', 22.99860100, 120.18781700),('710268', 3, '', '', NULL, '710268', '', '茄萣区', '', '', '', 22.88774900, 120.19689400),('710267', 3, '', '', NULL, '710267', '', '茂林区', '', '', '', 22.91125200, 120.76276700),('710266', 3, '', '', NULL, '710266', '', '那玛夏区', '', '', '', 23.27386100, 120.71957500),('710265', 3, '', '', NULL, '710265', '', '桃源区', '', '', '', 23.16742000, 120.79543800),('710264', 3, '', '', NULL, '710264', '', '甲仙区', '', '', '', 23.11201300, 120.62032000),('710263', 3, '', '', NULL, '710263', '', '杉林区', '', '', '', 22.98105300, 120.55994600),('710262', 3, '', '', NULL, '710262', '', '内门区', '', '', '', 22.94310200, 120.47196800),('710261', 3, '', '', NULL, '710261', '', '六龟区', '', '', '', 23.04511200, 120.68185100),('710260', 3, '', '', NULL, '710260', '', '美浓区', '', '', '', 22.92820600, 120.56745600),('710259', 3, '', '', NULL, '710259', '', '旗山区', '', '', '', 22.89424000, 120.48090300),('710258', 3, '', '', NULL, '710258', '', '大树区', '', '', '', 22.71072300, 120.41331700),('710257', 3, '', '', NULL, '710257', '', '鸟松区', '', '', '', 22.66530300, 120.37333100),('710256', 3, '', '', NULL, '710256', '', '林园区', '', '', '', 22.51287800, 120.38912800),('710255', 3, '', '', NULL, '710255', '', '大寮区', '', '', '', 22.58793800, 120.39525600),('710254', 3, '', '', NULL, '710254', '', '凤山区', '', '', '', 22.61232900, 120.35467800),('710253', 3, '', '', NULL, '710253', '', '湖内区', '', '', '', 22.89079400, 120.22796500),('710252', 3, '', '', NULL, '710252', '', '永安区', '', '', '', 22.81883100, 120.23625000),('710251', 3, '', '', NULL, '710251', '', '弥陀区', '', '', '', 22.77488900, 120.24153700),('710250', 3, '', '', NULL, '710250', '', '梓官区', '', '', '', 22.75090500, 120.25881600),('710249', 3, '', '', NULL, '710249', '', '桥头区', '', '', '', 22.75213700, 120.30245700),('710248', 3, '', '', NULL, '710248', '', '燕巢区', '', '', '', 22.78982900, 120.37064900),('710247', 3, '', '', NULL, '710247', '', '田寮区', '', '', '', 22.86688200, 120.39378600),('710246', 3, '', '', NULL, '710246', '', '阿莲区', '', '', '', 22.86883000, 120.32213100),('710245', 3, '', '', NULL, '710245', '', '路竹区', '', '', '', 22.86043600, 120.26761900),('710244', 3, '', '', NULL, '710244', '', '冈山区', '', '', '', 22.80618200, 120.30362900),('710243', 3, '', '', NULL, '710243', '', '大社区', '', '', '', 22.74086700, 120.37275700),('710242', 3, '', '', NULL, '710242', '', '仁武区', '', '', '', 22.70354300, 120.36257700),('710211', 3, '', '', NULL, '710211', '', '小港区', '', '', '', 22.55723600, 120.37258400),('710210', 3, '', '', NULL, '710210', '', '楠梓区', '', '', '', 22.72573300, 120.31022900),('710209', 3, '', '', NULL, '710209', '', '左营区', '', '', '', 22.67906400, 120.29276200),('710208', 3, '', '', NULL, '710208', '', '三民区', '', '', '', 22.65946100, 120.32088600),('710207', 3, '', '', NULL, '710207', '', '前镇区', '', '', '', 22.59047700, 120.30908000),('710206', 3, '', '', NULL, '710206', '', '旗津区', '', '', '', 22.59055100, 120.28319000),('710205', 3, '', '', NULL, '710205', '', '鼓山区', '', '', '', 22.65180200, 120.27530800),('710204', 3, '', '', NULL, '710204', '', '盐埕区', '', '', '', 22.62560800, 120.28401900),('710203', 3, '', '', NULL, '710203', '', '苓雅区', '', '', '', 22.62401800, 120.32305500),('710202', 3, '', '', NULL, '710202', '', '前金区', '', '', '', 22.62641900, 120.29352000),('710201', 3, '', '', NULL, '710201', '', '新兴区', '', '', '', 22.63057600, 120.30683900),('710112', 3, '', '', NULL, '710112', '', '文山区', '', '', '', 24.98988600, 121.57289500),('710111', 3, '', '', NULL, '710111', '', '南港区', '', '', '', 25.03250500, 121.61815900),('710110', 3, '', '', NULL, '710110', '', '内湖区', '', '', '', 25.08603600, 121.58651300),('710109', 3, '', '', NULL, '710109', '', '北投区', '', '', '', 25.14910800, 121.52782300),('710108', 3, '', '', NULL, '710108', '', '士林区', '', '', '', 25.12759300, 121.54446300),('710107', 3, '', '', NULL, '710107', '', '信义区', '', '', '', 25.02972200, 121.57615000),('710106', 3, '', '', NULL, '710106', '', '万华区', '', '', '', 25.02993400, 121.49906500),('710105', 3, '', '', NULL, '710105', '', '大安区', '', '', '', 25.02342000, 121.54648800),('710104', 3, '', '', NULL, '710104', '', '松山区', '', '', '', 25.05894700, 121.55666800),('710103', 3, '', '', NULL, '710103', '', '中山区', '', '', '', 25.07470800, 121.54176600),('710102', 3, '', '', NULL, '710102', '', '大同区', '', '', '', 25.06272900, 121.51392900),('710101', 3, '', '', NULL, '710101', '', '中正区', '', '', '', 25.03072400, 121.52007600),('654326', 3, '', '', NULL, '654326', '', '吉木乃县', '', '', '', 47.44310000, 85.87540000),('654325', 3, '', '', NULL, '654325', '', '青河县', '', '', '', 46.67911000, 90.37558000),('654324', 3, '', '', NULL, '654324', '', '哈巴河县', '', '', '', 48.06069000, 86.41920000),('654323', 3, '', '', NULL, '654323', '', '福海县', '', '', '', 47.11243400, 87.48682800),('654322', 3, '', '', NULL, '654322', '', '富蕴县', '', '', '', 46.99362000, 89.52553000),('654321', 3, '', '', NULL, '654321', '', '布尔津县', '', '', '', 47.69989000, 86.86313000),('654301', 3, '', '', NULL, '654301', '', '阿勒泰市', '', '', '', 47.82700000, 88.13243000),('654226', 3, '', '', NULL, '654226', '', '和布克赛尔蒙古自治县', '', '', '', 46.79302000, 85.72856000),('654225', 3, '', '', NULL, '654225', '', '裕民县', '', '', '', 46.20109000, 82.98277000),('654224', 3, '', '', NULL, '654224', '', '托里县', '', '', '', 45.93677000, 83.60621000),('654223', 3, '', '', NULL, '654223', '', '沙湾县', '', '', '', 44.32628000, 85.61959000),('654221', 3, '', '', NULL, '654221', '', '额敏县', '', '', '', 46.52457000, 83.62822000),('654202', 3, '', '', NULL, '654202', '', '乌苏市', '', '', '', 44.43556000, 84.67851000),('654201', 3, '', '', NULL, '654201', '', '塔城市', '', '', '', 46.75145000, 82.98703000),('654028', 3, '', '', NULL, '654028', '', '尼勒克县', '', '', '', 43.79904000, 82.51190000),('654027', 3, '', '', NULL, '654027', '', '特克斯县', '', '', '', 43.21799000, 81.83603000),('654026', 3, '', '', NULL, '654026', '', '昭苏县', '', '', '', 43.15724000, 81.13102000),('654025', 3, '', '', NULL, '654025', '', '新源县', '', '', '', 43.42988000, 83.26157000),('654024', 3, '', '', NULL, '654024', '', '巩留县', '', '', '', 43.48257000, 82.23175000),('654023', 3, '', '', NULL, '654023', '', '霍城县', '', '', '', 44.05599000, 80.87899000),('654022', 3, '', '', NULL, '654022', '', '察布查尔锡伯自治县', '', '', '', 43.84072000, 81.15128000),('654021', 3, '', '', NULL, '654021', '', '伊宁县', '', '', '', 43.97715000, 81.52732000),('654004', 3, '', '', NULL, '654004', '', '霍尔果斯市', '', '', '', 44.19865000, 80.41317000),('654003', 3, '', '', NULL, '654003', '', '奎屯市', '', '', '', 44.42689000, 84.90167000),('654002', 3, '', '', NULL, '654002', '', '伊宁市', '', '', '', 43.90950000, 81.27725000),('653227', 3, '', '', NULL, '653227', '', '民丰县', '', '', '', 37.06419000, 82.69595000),('653226', 3, '', '', NULL, '653226', '', '于田县', '', '', '', 36.85728000, 81.67712000),('653225', 3, '', '', NULL, '653225', '', '策勒县', '', '', '', 36.99846000, 80.81005000),('653224', 3, '', '', NULL, '653224', '', '洛浦县', '', '', '', 37.07370000, 80.18889000),('653223', 3, '', '', NULL, '653223', '', '皮山县', '', '', '', 37.62139000, 78.28300000),('653222', 3, '', '', NULL, '653222', '', '墨玉县', '', '', '', 37.27720000, 79.72895000),('653221', 3, '', '', NULL, '653221', '', '和田县', '', '', '', 36.57246000, 79.90141000),('653201', 3, '', '', NULL, '653201', '', '和田市', '', '', '', 37.11178000, 79.91321000),('653131', 3, '', '', NULL, '653131', '', '塔什库尔干塔吉克自治县', '', '', '', 37.77297000, 75.22470000),('653130', 3, '', '', NULL, '653130', '', '巴楚县', '', '', '', 39.78519000, 78.54906000),('653129', 3, '', '', NULL, '653129', '', '伽师县', '', '', '', 39.48806000, 76.72379000),('653128', 3, '', '', NULL, '653128', '', '岳普湖县', '', '', '', 39.23330000, 76.77796000),('653127', 3, '', '', NULL, '653127', '', '麦盖提县', '', '', '', 38.90493000, 77.65273000),('653126', 3, '', '', NULL, '653126', '', '叶城县', '', '', '', 37.88299000, 77.41367000),('653125', 3, '', '', NULL, '653125', '', '莎车县', '', '', '', 38.41432000, 77.24629000),('653124', 3, '', '', NULL, '653124', '', '泽普县', '', '', '', 38.19174000, 77.27095000),('653123', 3, '', '', NULL, '653123', '', '英吉沙县', '', '', '', 38.92956000, 76.17561000),('653122', 3, '', '', NULL, '653122', '', '疏勒县', '', '', '', 39.40134000, 76.04797000),('653121', 3, '', '', NULL, '653121', '', '疏附县', '', '', '', 39.37516000, 75.86296000),('653101', 3, '', '', NULL, '653101', '', '喀什市', '', '', '', 39.46772000, 75.99381000),('653024', 3, '', '', NULL, '653024', '', '乌恰县', '', '', '', 39.71909000, 75.25841000),('653023', 3, '', '', NULL, '653023', '', '阿合奇县', '', '', '', 40.93704000, 78.44626000),('653022', 3, '', '', NULL, '653022', '', '阿克陶县', '', '', '', 39.14786000, 75.94740000),('653001', 3, '', '', NULL, '653001', '', '阿图什市', '', '', '', 39.71610000, 76.16839000),('652929', 3, '', '', NULL, '652929', '', '柯坪县', '', '', '', 40.50826000, 79.04681000),('652928', 3, '', '', NULL, '652928', '', '阿瓦提县', '', '', '', 40.64451000, 80.37306000),('652927', 3, '', '', NULL, '652927', '', '乌什县', '', '', '', 41.21472000, 79.22457000),('652926', 3, '', '', NULL, '652926', '', '拜城县', '', '', '', 41.79685000, 81.87347000),('652925', 3, '', '', NULL, '652925', '', '新和县', '', '', '', 41.54833000, 82.60912000),('652924', 3, '', '', NULL, '652924', '', '沙雅县', '', '', '', 41.22160000, 82.78209000),('652922', 3, '', '', NULL, '652922', '', '温宿县', '', '', '', 41.27706000, 80.23914000),('652902', 3, '', '', NULL, '652902', '', '库车市', '', '', '', 41.71741000, 82.96212000),('652901', 3, '', '', NULL, '652901', '', '阿克苏市', '', '', '', 41.16763000, 80.26338000),('652829', 3, '', '', NULL, '652829', '', '博湖县', '', '', '', 41.98009000, 86.63254000),('652828', 3, '', '', NULL, '652828', '', '和硕县', '', '', '', 42.26817000, 86.86397000),('652827', 3, '', '', NULL, '652827', '', '和静县', '', '', '', 42.32266000, 86.38307000),('652826', 3, '', '', NULL, '652826', '', '焉耆回族自治县', '', '', '', 42.05910000, 86.57425000),('652825', 3, '', '', NULL, '652825', '', '且末县', '', '', '', 38.14538000, 85.52977000),('652824', 3, '', '', NULL, '652824', '', '若羌县', '', '', '', 39.02374000, 88.16728000),('652823', 3, '', '', NULL, '652823', '', '尉犁县', '', '', '', 41.34392000, 86.26075000),('652822', 3, '', '', NULL, '652822', '', '轮台县', '', '', '', 41.77763000, 84.25191000),('652801', 3, '', '', NULL, '652801', '', '库尔勒市', '', '', '', 41.72643000, 86.17369000),('652723', 3, '', '', NULL, '652723', '', '温泉县', '', '', '', 44.96882000, 81.02478000),('652722', 3, '', '', NULL, '652722', '', '精河县', '', '', '', 44.60055000, 82.89417000),('652702', 3, '', '', NULL, '652702', '', '阿拉山口市', '', '', '', 45.17328000, 82.55447000),('652701', 3, '', '', NULL, '652701', '', '博乐市', '', '', '', 44.85387000, 82.05112000),('652328', 3, '', '', NULL, '652328', '', '木垒哈萨克自治县', '', '', '', 43.83464000, 90.28598000),('652327', 3, '', '', NULL, '652327', '', '吉木萨尔县', '', '', '', 44.00061000, 89.18076000),('652325', 3, '', '', NULL, '652325', '', '奇台县', '', '', '', 44.02197000, 89.59399000),('652324', 3, '', '', NULL, '652324', '', '玛纳斯县', '', '', '', 44.30413000, 86.21421000),('652323', 3, '', '', NULL, '652323', '', '呼图壁县', '', '', '', 44.19160000, 86.89887000),('652302', 3, '', '', NULL, '652302', '', '阜康市', '', '', '', 44.15706000, 87.98738000),('652301', 3, '', '', NULL, '652301', '', '昌吉市', '', '', '', 44.01437000, 87.26749000),('650522', 3, '', '', NULL, '650522', '', '伊吾县', '', '', '', 43.25451000, 94.69741000),('650521', 3, '', '', NULL, '650521', '', '巴里坤哈萨克自治县', '', '', '', 43.59873000, 93.01654000),('650502', 3, '', '', NULL, '650502', '', '伊州区', '', '', '', 42.82699000, 93.51465000),('650422', 3, '', '', NULL, '650422', '', '托克逊县', '', '', '', 42.79181000, 88.65384000),('650421', 3, '', '', NULL, '650421', '', '鄯善县', '', '', '', 42.86887000, 90.21341000),('650402', 3, '', '', NULL, '650402', '', '高昌区', '', '', '', 42.94244000, 89.18596000),('650205', 3, '', '', NULL, '650205', '', '乌尔禾区', '', '', '', 46.08908000, 85.69377000),('650204', 3, '', '', NULL, '650204', '', '白碱滩区', '', '', '', 45.68734000, 85.13208000),('650203', 3, '', '', NULL, '650203', '', '克拉玛依区', '', '', '', 45.60243000, 84.86782000),('650202', 3, '', '', NULL, '650202', '', '独山子区', '', '', '', 44.32870000, 84.88675000),('650121', 3, '', '', NULL, '650121', '', '乌鲁木齐县', '', '', '', 43.47129000, 87.40931000),('650109', 3, '', '', NULL, '650109', '', '米东区', '', '', '', 43.97365000, 87.65591000),('650107', 3, '', '', NULL, '650107', '', '达坂城区', '', '', '', 43.36378000, 88.31104000),('650106', 3, '', '', NULL, '650106', '', '头屯河区', '', '', '', 43.87711000, 87.42812000),('650105', 3, '', '', NULL, '650105', '', '水磨沟区', '', '', '', 43.83244000, 87.64248000),('650104', 3, '', '', NULL, '650104', '', '新市区', '', '', '', 43.84367000, 87.57400000),('650103', 3, '', '', NULL, '650103', '', '沙依巴克区', '', '', '', 43.80095000, 87.59811000),('650102', 3, '', '', NULL, '650102', '', '天山区', '', '', '', 43.79547000, 87.63356000),('640522', 3, '', '', NULL, '640522', '', '海原县', '', '', '', 36.56524000, 105.64359000),('640521', 3, '', '', NULL, '640521', '', '中宁县', '', '', '', 37.49157000, 105.68518000),('640502', 3, '', '', NULL, '640502', '', '沙坡头区', '', '', '', 37.51700000, 105.17362000),('640425', 3, '', '', NULL, '640425', '', '彭阳县', '', '', '', 35.84960000, 106.63808000),('640424', 3, '', '', NULL, '640424', '', '泾源县', '', '', '', 35.49823000, 106.33067000),('640423', 3, '', '', NULL, '640423', '', '隆德县', '', '', '', 35.61812000, 106.12332000),('640422', 3, '', '', NULL, '640422', '', '西吉县', '', '', '', 35.96385000, 105.72911000),('640402', 3, '', '', NULL, '640402', '', '原州区', '', '', '', 36.00341000, 106.28779000),('640381', 3, '', '', NULL, '640381', '', '青铜峡市', '', '', '', 38.02121000, 106.07875000),('640324', 3, '', '', NULL, '640324', '', '同心县', '', '', '', 36.98064000, 105.91448000),('640323', 3, '', '', NULL, '640323', '', '盐池县', '', '', '', 37.78294000, 107.40789000),('640303', 3, '', '', NULL, '640303', '', '红寺堡区', '', '', '', 37.42533000, 106.06243000),('640302', 3, '', '', NULL, '640302', '', '利通区', '', '', '', 37.98472000, 106.21251000),('640221', 3, '', '', NULL, '640221', '', '平罗县', '', '', '', 38.91335000, 106.52304000),('640205', 3, '', '', NULL, '640205', '', '惠农区', '', '', '', 39.23909000, 106.78132000),('640202', 3, '', '', NULL, '640202', '', '大武口区', '', '', '', 39.01895000, 106.36803000),('640181', 3, '', '', NULL, '640181', '', '灵武市', '', '', '', 38.10269000, 106.34005000),('640122', 3, '', '', NULL, '640122', '', '贺兰县', '', '', '', 38.55443000, 106.34985000),('640121', 3, '', '', NULL, '640121', '', '永宁县', '', '', '', 38.27749000, 106.25318000),('640106', 3, '', '', NULL, '640106', '', '金凤区', '', '', '', 38.47314000, 106.24284000),('640105', 3, '', '', NULL, '640105', '', '西夏区', '', '', '', 38.49589000, 106.15652000),('640104', 3, '', '', NULL, '640104', '', '兴庆区', '', '', '', 38.47371000, 106.28847000),('632825', 3, '', '', NULL, '632825', '', '大柴旦行政委员会', '', '', '', 37.85044000, 95.36210000),('632823', 3, '', '', NULL, '632823', '', '天峻县', '', '', '', 37.30096000, 99.02293000),('632822', 3, '', '', NULL, '632822', '', '都兰县', '', '', '', 36.30386000, 98.09531000),('632821', 3, '', '', NULL, '632821', '', '乌兰县', '', '', '', 36.92975000, 98.48003000),('632803', 3, '', '', NULL, '632803', '', '茫崖市', '', '', '', 38.24763000, 90.85616000),('632802', 3, '', '', NULL, '632802', '', '德令哈市', '', '', '', 37.36947000, 97.36087000),('632801', 3, '', '', NULL, '632801', '', '格尔木市', '', '', '', 36.40240000, 94.90330000),('632726', 3, '', '', NULL, '632726', '', '曲麻莱县', '', '', '', 34.12639000, 95.79722000),('632725', 3, '', '', NULL, '632725', '', '囊谦县', '', '', '', 32.20295000, 96.48063000),('632724', 3, '', '', NULL, '632724', '', '治多县', '', '', '', 33.84420000, 95.61900000),('632723', 3, '', '', NULL, '632723', '', '称多县', '', '', '', 33.36823000, 97.10865000),('632722', 3, '', '', NULL, '632722', '', '杂多县', '', '', '', 32.89295000, 95.30102000),('632701', 3, '', '', NULL, '632701', '', '玉树市', '', '', '', 32.99336000, 97.00862000),('632626', 3, '', '', NULL, '632626', '', '玛多县', '', '', '', 34.91508000, 98.20934000),('632625', 3, '', '', NULL, '632625', '', '久治县', '', '', '', 33.42928000, 101.48289000),('632624', 3, '', '', NULL, '632624', '', '达日县', '', '', '', 33.74924000, 99.65153000),('632623', 3, '', '', NULL, '632623', '', '甘德县', '', '', '', 33.96921000, 99.90075000),('632622', 3, '', '', NULL, '632622', '', '班玛县', '', '', '', 32.93269000, 100.73740000),('632621', 3, '', '', NULL, '632621', '', '玛沁县', '', '', '', 34.47733000, 100.23956000),('632525', 3, '', '', NULL, '632525', '', '贵南县', '', '', '', 35.58765000, 100.74784000),('632524', 3, '', '', NULL, '632524', '', '兴海县', '', '', '', 35.58868000, 99.98818000),('632523', 3, '', '', NULL, '632523', '', '贵德县', '', '', '', 36.04004000, 101.43360000),('632522', 3, '', '', NULL, '632522', '', '同德县', '', '', '', 35.25386000, 100.57876000),('632521', 3, '', '', NULL, '632521', '', '共和县', '', '', '', 36.28300000, 100.62012000),('632324', 3, '', '', NULL, '632324', '', '河南蒙古族自治县', '', '', '', 34.73421000, 101.61649000),('632323', 3, '', '', NULL, '632323', '', '泽库县', '', '', '', 35.03605000, 101.46594000),('632322', 3, '', '', NULL, '632322', '', '尖扎县', '', '', '', 35.93817000, 102.03102000),('632321', 3, '', '', NULL, '632321', '', '同仁县', '', '', '', 35.51630000, 102.01954000),('632224', 3, '', '', NULL, '632224', '', '刚察县', '', '', '', 37.32162000, 100.14682000),('632223', 3, '', '', NULL, '632223', '', '海晏县', '', '', '', 36.89700000, 100.99504000),('632222', 3, '', '', NULL, '632222', '', '祁连县', '', '', '', 38.17709000, 100.25305000),('632221', 3, '', '', NULL, '632221', '', '门源回族自治县', '', '', '', 37.38828000, 101.61170000),('630225', 3, '', '', NULL, '630225', '', '循化撒拉族自治县', '', '', '', 35.85080000, 102.48910000),('630224', 3, '', '', NULL, '630224', '', '化隆回族自治县', '', '', '', 36.09493000, 102.26404000),('630223', 3, '', '', NULL, '630223', '', '互助土族自治县', '', '', '', 36.84412000, 101.95842000),('630222', 3, '', '', NULL, '630222', '', '民和回族土族自治县', '', '', '', 36.32026000, 102.83087000),('630203', 3, '', '', NULL, '630203', '', '平安区', '', '', '', 36.50029000, 102.10848000),('630202', 3, '', '', NULL, '630202', '', '乐都区', '', '', '', 36.48209000, 102.40173000),('630123', 3, '', '', NULL, '630123', '', '湟源县', '', '', '', 36.68246000, 101.25648000),('630122', 3, '', '', NULL, '630122', '', '湟中县', '', '', '', 36.50087000, 101.57164000),('630121', 3, '', '', NULL, '630121', '', '大通回族土族自治县', '', '', '', 36.92694000, 101.68545000),('630105', 3, '', '', NULL, '630105', '', '城北区', '', '', '', 36.65020000, 101.76628000),('630104', 3, '', '', NULL, '630104', '', '城西区', '', '', '', 36.62830000, 101.76585000),('630103', 3, '', '', NULL, '630103', '', '城中区', '', '', '', 36.58660000, 101.77013000),('630102', 3, '', '', NULL, '630102', '', '城东区', '', '', '', 36.59976000, 101.80319000),('623027', 3, '', '', NULL, '623027', '', '夏河县', '', '', '', 35.20233000, 102.52158000),('623026', 3, '', '', NULL, '623026', '', '碌曲县', '', '', '', 34.59103000, 102.48699000),('623025', 3, '', '', NULL, '623025', '', '玛曲县', '', '', '', 33.99770000, 102.07226000),('623024', 3, '', '', NULL, '623024', '', '迭部县', '', '', '', 34.05587000, 103.22175000),('623023', 3, '', '', NULL, '623023', '', '舟曲县', '', '', '', 33.78491000, 104.37155000),('623022', 3, '', '', NULL, '623022', '', '卓尼县', '', '', '', 34.58922000, 103.50710000),('623021', 3, '', '', NULL, '623021', '', '临潭县', '', '', '', 34.69275000, 103.35362000),('623001', 3, '', '', NULL, '623001', '', '合作市', '', '', '', 35.00027000, 102.91012000),('622927', 3, '', '', NULL, '622927', '', '积石山县', '', '', '', 35.71768000, 102.87581000),('622926', 3, '', '', NULL, '622926', '', '东乡族自治县', '', '', '', 35.66375500, 103.38932900),('622925', 3, '', '', NULL, '622925', '', '和政县', '', '', '', 35.42535000, 103.35143000),('622924', 3, '', '', NULL, '622924', '', '广河县', '', '', '', 35.48100000, 103.56935000),('622923', 3, '', '', NULL, '622923', '', '永靖县', '', '', '', 35.94173000, 103.31587000),('622922', 3, '', '', NULL, '622922', '', '康乐县', '', '', '', 35.36973000, 103.70894000),('622921', 3, '', '', NULL, '622921', '', '临夏县', '', '', '', 35.49157000, 102.99563000),('622901', 3, '', '', NULL, '622901', '', '临夏市', '', '', '', 35.60450000, 103.24317000),('621228', 3, '', '', NULL, '621228', '', '两当县', '', '', '', 33.90900000, 106.30494000),('621227', 3, '', '', NULL, '621227', '', '徽县', '', '', '', 33.76884000, 106.08785000),('621226', 3, '', '', NULL, '621226', '', '礼县', '', '', '', 34.18907000, 105.17844000),('621225', 3, '', '', NULL, '621225', '', '西和县', '', '', '', 34.01085000, 105.30143000),('621224', 3, '', '', NULL, '621224', '', '康县', '', '', '', 33.32937000, 105.60855000),('621223', 3, '', '', NULL, '621223', '', '宕昌县', '', '', '', 34.04735000, 104.39354000),('621222', 3, '', '', NULL, '621222', '', '文县', '', '', '', 32.94396000, 104.68343000),('621221', 3, '', '', NULL, '621221', '', '成县', '', '', '', 33.75062000, 105.74222000),('621202', 3, '', '', NULL, '621202', '', '武都区', '', '', '', 33.39189000, 104.92667000),('621126', 3, '', '', NULL, '621126', '', '岷县', '', '', '', 34.43811000, 104.03697000),('621125', 3, '', '', NULL, '621125', '', '漳县', '', '', '', 34.84853000, 104.47170000),('621124', 3, '', '', NULL, '621124', '', '临洮县', '', '', '', 35.39509000, 103.85954000),('621123', 3, '', '', NULL, '621123', '', '渭源县', '', '', '', 35.13626000, 104.21502000),('621122', 3, '', '', NULL, '621122', '', '陇西县', '', '', '', 35.00391000, 104.63480000),('621121', 3, '', '', NULL, '621121', '', '通渭县', '', '', '', 35.21087000, 105.24219000),('621102', 3, '', '', NULL, '621102', '', '安定区', '', '', '', 35.57934000, 104.61093000),('621027', 3, '', '', NULL, '621027', '', '镇原县', '', '', '', 35.67728000, 107.20060000),('621026', 3, '', '', NULL, '621026', '', '宁县', '', '', '', 35.50223000, 107.92824000),('621025', 3, '', '', NULL, '621025', '', '正宁县', '', '', '', 35.49170000, 108.36010000),('621024', 3, '', '', NULL, '621024', '', '合水县', '', '', '', 35.81927000, 108.01953000),('621023', 3, '', '', NULL, '621023', '', '华池县', '', '', '', 36.46130000, 107.99016000),('621022', 3, '', '', NULL, '621022', '', '环县', '', '', '', 36.56850000, 107.30839000),('621021', 3, '', '', NULL, '621021', '', '庆城县', '', '', '', 36.01526000, 107.88248000),('621002', 3, '', '', NULL, '621002', '', '西峰区', '', '', '', 35.73062000, 107.65114000),('620982', 3, '', '', NULL, '620982', '', '敦煌市', '', '', '', 40.14219000, 94.66197000),('620981', 3, '', '', NULL, '620981', '', '玉门市', '', '', '', 40.29176000, 97.04542000),('620924', 3, '', '', NULL, '620924', '', '阿克塞哈萨克族自治县', '', '', '', 39.63372000, 94.34023000),('620923', 3, '', '', NULL, '620923', '', '肃北蒙古族自治县', '', '', '', 39.51244000, 94.87684000),('620922', 3, '', '', NULL, '620922', '', '瓜州县', '', '', '', 40.52023000, 95.78238000),('620921', 3, '', '', NULL, '620921', '', '金塔县', '', '', '', 39.98593000, 98.90271000),('620902', 3, '', '', NULL, '620902', '', '肃州区', '', '', '', 39.74502000, 98.50801000),('620881', 3, '', '', NULL, '620881', '', '华亭市', '', '', '', 35.21756000, 106.65352000),('620826', 3, '', '', NULL, '620826', '', '静宁县', '', '', '', 35.52223000, 105.73245000),('620825', 3, '', '', NULL, '620825', '', '庄浪县', '', '', '', 35.20239000, 106.03666000),('620823', 3, '', '', NULL, '620823', '', '崇信县', '', '', '', 35.30229000, 107.03536000),('620822', 3, '', '', NULL, '620822', '', '灵台县', '', '', '', 35.06541000, 107.62126000),('620821', 3, '', '', NULL, '620821', '', '泾川县', '', '', '', 35.33262000, 107.36775000),('620802', 3, '', '', NULL, '620802', '', '崆峒区', '', '', '', 35.54258000, 106.67477000),('620725', 3, '', '', NULL, '620725', '', '山丹县', '', '', '', 38.78449000, 101.08861000),('620724', 3, '', '', NULL, '620724', '', '高台县', '', '', '', 39.37772000, 99.81943000),('620723', 3, '', '', NULL, '620723', '', '临泽县', '', '', '', 39.15257000, 100.16449000),('620722', 3, '', '', NULL, '620722', '', '民乐县', '', '', '', 38.43064000, 100.81317000),('620721', 3, '', '', NULL, '620721', '', '肃南裕固族自治县', '', '', '', 38.83690000, 99.61558000),('620702', 3, '', '', NULL, '620702', '', '甘州区', '', '', '', 38.92967000, 100.47801000),('620623', 3, '', '', NULL, '620623', '', '天祝藏族自治县', '', '', '', 36.97184000, 103.14178000),('620622', 3, '', '', NULL, '620622', '', '古浪县', '', '', '', 37.47013000, 102.89765000),('620621', 3, '', '', NULL, '620621', '', '民勤县', '', '', '', 38.62434000, 103.09366000),('620602', 3, '', '', NULL, '620602', '', '凉州区', '', '', '', 37.92818000, 102.64198000),('620525', 3, '', '', NULL, '620525', '', '张家川回族自治县', '', '', '', 34.98843000, 106.20577000),('620524', 3, '', '', NULL, '620524', '', '武山县', '', '', '', 34.72134000, 104.89089000),('620523', 3, '', '', NULL, '620523', '', '甘谷县', '', '', '', 34.73200000, 105.33564000),('620522', 3, '', '', NULL, '620522', '', '秦安县', '', '', '', 34.85918000, 105.67566000),('620521', 3, '', '', NULL, '620521', '', '清水县', '', '', '', 34.74981000, 106.13737000),('620503', 3, '', '', NULL, '620503', '', '麦积区', '', '', '', 34.57024000, 105.88965000),('620502', 3, '', '', NULL, '620502', '', '秦州区', '', '', '', 34.58088000, 105.72417000),('620423', 3, '', '', NULL, '620423', '', '景泰县', '', '', '', 37.18137000, 104.06312000),('620422', 3, '', '', NULL, '620422', '', '会宁县', '', '', '', 35.69291000, 105.05334000),('620421', 3, '', '', NULL, '620421', '', '靖远县', '', '', '', 36.56529000, 104.68700000),('620403', 3, '', '', NULL, '620403', '', '平川区', '', '', '', 36.72774000, 104.82503000),('620402', 3, '', '', NULL, '620402', '', '白银区', '', '', '', 36.53454000, 104.17240000),('620321', 3, '', '', NULL, '620321', '', '永昌县', '', '', '', 38.24704000, 101.97300000),('620302', 3, '', '', NULL, '620302', '', '金川区', '', '', '', 38.52014000, 102.19409000),('620299', 3, '', '', NULL, '620299', '', '嘉峪关市', '', '', '', 39.77194000, 98.28971000),('620123', 3, '', '', NULL, '620123', '', '榆中县', '', '', '', 35.84327000, 104.11261000),('620122', 3, '', '', NULL, '620122', '', '皋兰县', '', '', '', 36.33216000, 103.94751000),('620121', 3, '', '', NULL, '620121', '', '永登县', '', '', '', 36.73640000, 103.26051000),('620111', 3, '', '', NULL, '620111', '', '红古区', '', '', '', 36.34578000, 102.85936000),('620105', 3, '', '', NULL, '620105', '', '安宁区', '', '', '', 36.10396000, 103.71878000),('620104', 3, '', '', NULL, '620104', '', '西固区', '', '', '', 36.08842000, 103.62810000),('620103', 3, '', '', NULL, '620103', '', '七里河区', '', '', '', 36.06592000, 103.78576000),('620102', 3, '', '', NULL, '620102', '', '城关区', '', '', '', 36.05709000, 103.82538000),('611026', 3, '', '', NULL, '611026', '', '柞水县', '', '', '', 33.68607000, 109.11420000),('611025', 3, '', '', NULL, '611025', '', '镇安县', '', '', '', 33.42337000, 109.15258000),('611024', 3, '', '', NULL, '611024', '', '山阳县', '', '', '', 33.53218000, 109.88193000),('611023', 3, '', '', NULL, '611023', '', '商南县', '', '', '', 33.53112000, 110.88158000),('611022', 3, '', '', NULL, '611022', '', '丹凤县', '', '', '', 33.69585000, 110.32721000),('611021', 3, '', '', NULL, '611021', '', '洛南县', '', '', '', 34.09082000, 110.14842000),('611002', 3, '', '', NULL, '611002', '', '商州区', '', '', '', 33.86273000, 109.94107000),('610929', 3, '', '', NULL, '610929', '', '白河县', '', '', '', 32.80906000, 110.11261000),('610928', 3, '', '', NULL, '610928', '', '旬阳县', '', '', '', 32.83417000, 109.36520000),('610927', 3, '', '', NULL, '610927', '', '镇坪县', '', '', '', 31.88376000, 109.52677000),('610926', 3, '', '', NULL, '610926', '', '平利县', '', '', '', 32.38903000, 109.36180000),('610925', 3, '', '', NULL, '610925', '', '岚皋县', '', '', '', 32.30715000, 108.90222000),('610924', 3, '', '', NULL, '610924', '', '紫阳县', '', '', '', 32.52025000, 108.53419000),('610923', 3, '', '', NULL, '610923', '', '宁陕县', '', '', '', 33.31049000, 108.31428000),('610922', 3, '', '', NULL, '610922', '', '石泉县', '', '', '', 33.03829000, 108.24843000),('610921', 3, '', '', NULL, '610921', '', '汉阴县', '', '', '', 32.89314000, 108.50866000),('610902', 3, '', '', NULL, '610902', '', '汉滨区', '', '', '', 32.69550000, 109.02697000),('610881', 3, '', '', NULL, '610881', '', '神木市', '', '', '', 38.84239000, 110.49896000),('610831', 3, '', '', NULL, '610831', '', '子洲县', '', '', '', 37.61075000, 110.03526000),('610830', 3, '', '', NULL, '610830', '', '清涧县', '', '', '', 37.08890000, 110.12114000),('610829', 3, '', '', NULL, '610829', '', '吴堡县', '', '', '', 37.45224000, 110.73967000),('610828', 3, '', '', NULL, '610828', '', '佳县', '', '', '', 38.01959000, 110.49136000),('610827', 3, '', '', NULL, '610827', '', '米脂县', '', '', '', 37.75484000, 110.18394000),('610826', 3, '', '', NULL, '610826', '', '绥德县', '', '', '', 37.50278000, 110.26317000),('610825', 3, '', '', NULL, '610825', '', '定边县', '', '', '', 37.59454000, 107.60128000),('610824', 3, '', '', NULL, '610824', '', '靖边县', '', '', '', 37.59931000, 108.79568000),('610822', 3, '', '', NULL, '610822', '', '府谷县', '', '', '', 39.02806000, 111.06764000),('610803', 3, '', '', NULL, '610803', '', '横山区', '', '', '', 37.95871000, 109.29315000),('610802', 3, '', '', NULL, '610802', '', '榆阳区', '', '', '', 38.27658000, 109.72126000),('610730', 3, '', '', NULL, '610730', '', '佛坪县', '', '', '', 33.52449000, 107.99050000),('610729', 3, '', '', NULL, '610729', '', '留坝县', '', '', '', 33.61758000, 106.92076000),('610728', 3, '', '', NULL, '610728', '', '镇巴县', '', '', '', 32.53666000, 107.89502000),('610727', 3, '', '', NULL, '610727', '', '略阳县', '', '', '', 33.32733000, 106.15660000),('610726', 3, '', '', NULL, '610726', '', '宁强县', '', '', '', 32.82962000, 106.25720000),('610725', 3, '', '', NULL, '610725', '', '勉县', '', '', '', 33.15362000, 106.67314000),('610724', 3, '', '', NULL, '610724', '', '西乡县', '', '', '', 32.98306000, 107.76669000),('610723', 3, '', '', NULL, '610723', '', '洋县', '', '', '', 33.22275000, 107.54565000),('610722', 3, '', '', NULL, '610722', '', '城固县', '', '', '', 33.15665000, 107.33372000),('610703', 3, '', '', NULL, '610703', '', '南郑区', '', '', '', 32.99932000, 106.93624000),('610702', 3, '', '', NULL, '610702', '', '汉台区', '', '', '', 33.06784000, 107.03194000),('610681', 3, '', '', NULL, '610681', '', '子长市', '', '', '', 37.14258000, 109.67538000),('610632', 3, '', '', NULL, '610632', '', '黄陵县', '', '', '', 35.57937000, 109.26291000),('610631', 3, '', '', NULL, '610631', '', '黄龙县', '', '', '', 35.58432000, 109.84018000),('610630', 3, '', '', NULL, '610630', '', '宜川县', '', '', '', 36.05026000, 110.16899000),('610629', 3, '', '', NULL, '610629', '', '洛川县', '', '', '', 35.76190000, 109.43238000),('610628', 3, '', '', NULL, '610628', '', '富县', '', '', '', 35.98779000, 109.37976000),('610627', 3, '', '', NULL, '610627', '', '甘泉县', '', '', '', 36.27673000, 109.35130000),('610626', 3, '', '', NULL, '610626', '', '吴起县', '', '', '', 36.92728000, 108.17587000),('610625', 3, '', '', NULL, '610625', '', '志丹县', '', '', '', 36.82235000, 108.76845000),('610622', 3, '', '', NULL, '610622', '', '延川县', '', '', '', 36.87813000, 110.19375000),('610621', 3, '', '', NULL, '610621', '', '延长县', '', '', '', 36.57930000, 110.01242000),('610603', 3, '', '', NULL, '610603', '', '安塞区', '', '', '', 36.86373000, 109.32897000),('610602', 3, '', '', NULL, '610602', '', '宝塔区', '', '', '', 36.59141000, 109.49303000),('610582', 3, '', '', NULL, '610582', '', '华阴市', '', '', '', 34.56602000, 110.09207000),('610581', 3, '', '', NULL, '610581', '', '韩城市', '', '', '', 35.47669000, 110.44243000),('610528', 3, '', '', NULL, '610528', '', '富平县', '', '', '', 34.75114000, 109.18025000),('610527', 3, '', '', NULL, '610527', '', '白水县', '', '', '', 35.17710000, 109.59102000),('610526', 3, '', '', NULL, '610526', '', '蒲城县', '', '', '', 34.95517000, 109.58646000),('610525', 3, '', '', NULL, '610525', '', '澄城县', '', '', '', 35.19024000, 109.93226000),('610524', 3, '', '', NULL, '610524', '', '合阳县', '', '', '', 35.23752000, 110.14928000),('610523', 3, '', '', NULL, '610523', '', '大荔县', '', '', '', 34.79566000, 109.94217000),('610522', 3, '', '', NULL, '610522', '', '潼关县', '', '', '', 34.54438000, 110.24656000),('610503', 3, '', '', NULL, '610503', '', '华州区', '', '', '', 34.51259000, 109.77190000),('610502', 3, '', '', NULL, '610502', '', '临渭区', '', '', '', 34.49823000, 109.49217000),('610482', 3, '', '', NULL, '610482', '', '彬州市', '', '', '', 35.03565000, 108.08108000),('610481', 3, '', '', NULL, '610481', '', '兴平市', '', '', '', 34.29932000, 108.49040000),('610431', 3, '', '', NULL, '610431', '', '武功县', '', '', '', 34.26036000, 108.20018000),('610430', 3, '', '', NULL, '610430', '', '淳化县', '', '', '', 34.79873000, 108.58059000),('610429', 3, '', '', NULL, '610429', '', '旬邑县', '', '', '', 35.11184000, 108.33371000),('610428', 3, '', '', NULL, '610428', '', '长武县', '', '', '', 35.20571000, 107.79866000),('610426', 3, '', '', NULL, '610426', '', '永寿县', '', '', '', 34.69192000, 108.14216000),('610425', 3, '', '', NULL, '610425', '', '礼泉县', '', '', '', 34.48165000, 108.42496000),('610424', 3, '', '', NULL, '610424', '', '乾县', '', '', '', 34.52761000, 108.23940000),('610423', 3, '', '', NULL, '610423', '', '泾阳县', '', '', '', 34.52709000, 108.84262000),('610422', 3, '', '', NULL, '610422', '', '三原县', '', '', '', 34.61704000, 108.94040000),('610404', 3, '', '', NULL, '610404', '', '渭城区', '', '', '', 34.36126000, 108.73751000),('610403', 3, '', '', NULL, '610403', '', '杨陵区', '', '', '', 34.27221000, 108.08455000),('610402', 3, '', '', NULL, '610402', '', '秦都区', '', '', '', 34.32908000, 108.70641000),('610331', 3, '', '', NULL, '610331', '', '太白县', '', '', '', 34.05919000, 107.31940000),('610330', 3, '', '', NULL, '610330', '', '凤县', '', '', '', 33.91227000, 106.52203000),('610329', 3, '', '', NULL, '610329', '', '麟游县', '', '', '', 34.67793000, 107.79339000),('610328', 3, '', '', NULL, '610328', '', '千阳县', '', '', '', 34.64260000, 107.13237000),('610327', 3, '', '', NULL, '610327', '', '陇县', '', '', '', 34.89305000, 106.86430000),('610326', 3, '', '', NULL, '610326', '', '眉县', '', '', '', 34.27410000, 107.74992000),('610324', 3, '', '', NULL, '610324', '', '扶风县', '', '', '', 34.37527000, 107.90022000),('610323', 3, '', '', NULL, '610323', '', '岐山县', '', '', '', 34.44346000, 107.62101000),('610322', 3, '', '', NULL, '610322', '', '凤翔县', '', '', '', 34.52114000, 107.40076000),('610304', 3, '', '', NULL, '610304', '', '陈仓区', '', '', '', 34.35454000, 107.38745000),('610303', 3, '', '', NULL, '610303', '', '金台区', '', '', '', 34.39029000, 107.13126000),('610302', 3, '', '', NULL, '610302', '', '渭滨区', '', '', '', 34.35513000, 107.15526000),('610222', 3, '', '', NULL, '610222', '', '宜君县', '', '', '', 35.39877000, 109.11689000),('610204', 3, '', '', NULL, '610204', '', '耀州区', '', '', '', 34.90978000, 108.98011000),('610203', 3, '', '', NULL, '610203', '', '印台区', '', '', '', 35.11473000, 109.09986000),('610202', 3, '', '', NULL, '610202', '', '王益区', '', '', '', 35.06914000, 109.07593000),('610124', 3, '', '', NULL, '610124', '', '周至县', '', '', '', 34.16340000, 108.22213000),('610122', 3, '', '', NULL, '610122', '', '蓝田县', '', '', '', 34.15132000, 109.32345000),('610118', 3, '', '', NULL, '610118', '', '鄠邑区', '', '', '', 34.10847000, 108.60494000),('610117', 3, '', '', NULL, '610117', '', '高陵区', '', '', '', 34.53487000, 109.08822000),('610116', 3, '', '', NULL, '610116', '', '长安区', '', '', '', 34.15775000, 108.90688000),('610115', 3, '', '', NULL, '610115', '', '临潼区', '', '', '', 34.36670000, 109.21421000),('610114', 3, '', '', NULL, '610114', '', '阎良区', '', '', '', 34.66225000, 109.22620000),('610113', 3, '', '', NULL, '610113', '', '雁塔区', '', '', '', 34.22259000, 108.94878000),('610112', 3, '', '', NULL, '610112', '', '未央区', '', '', '', 34.29318000, 108.94712000),('610111', 3, '', '', NULL, '610111', '', '灞桥区', '', '', '', 34.27270000, 109.06458000),('610104', 3, '', '', NULL, '610104', '', '莲湖区', '', '', '', 34.26703000, 108.94020000),('610103', 3, '', '', NULL, '610103', '', '碑林区', '', '', '', 34.23053000, 108.93425000),('610102', 3, '', '', NULL, '610102', '', '新城区', '', '', '', 34.26665000, 108.96074000),('542527', 3, '', '', NULL, '542527', '', '措勤县', '', '', '', 31.01640000, 85.15253000),('542526', 3, '', '', NULL, '542526', '', '改则县', '', '', '', 32.30455000, 84.06305000),('542525', 3, '', '', NULL, '542525', '', '革吉县', '', '', '', 32.39645000, 81.15106000),('542524', 3, '', '', NULL, '542524', '', '日土县', '', '', '', 33.38747000, 79.71317000),('542523', 3, '', '', NULL, '542523', '', '噶尔县', '', '', '', 32.50028000, 80.09590000),('542522', 3, '', '', NULL, '542522', '', '札达县', '', '', '', 31.47865000, 79.80321000),('542521', 3, '', '', NULL, '542521', '', '普兰县', '', '', '', 30.29326000, 81.17739000),('540630', 3, '', '', NULL, '540630', '', '双湖县', '', '', '', 33.18763000, 88.83691000),('540629', 3, '', '', NULL, '540629', '', '尼玛县', '', '', '', 31.78448000, 87.23691000),('540628', 3, '', '', NULL, '540628', '', '巴青县', '', '', '', 31.91840000, 94.05345000),('540627', 3, '', '', NULL, '540627', '', '班戈县', '', '', '', 31.39199000, 90.00987000),('540626', 3, '', '', NULL, '540626', '', '索县', '', '', '', 31.88673000, 93.78556000),('540625', 3, '', '', NULL, '540625', '', '申扎县', '', '', '', 30.93043000, 88.70982000),('540624', 3, '', '', NULL, '540624', '', '安多县', '', '', '', 32.26500000, 91.68258000),('540623', 3, '', '', NULL, '540623', '', '聂荣县', '', '', '', 32.10784000, 92.30327000),('540622', 3, '', '', NULL, '540622', '', '比如县', '', '', '', 31.47785000, 93.68130000),('540621', 3, '', '', NULL, '540621', '', '嘉黎县', '', '', '', 30.64087000, 93.23236000),('540602', 3, '', '', NULL, '540602', '', '色尼区', '', '', '', 31.46988000, 92.05355000),('540531', 3, '', '', NULL, '540531', '', '浪卡子县', '', '', '', 28.96768000, 90.40011000),('540530', 3, '', '', NULL, '540530', '', '错那县', '', '', '', 27.99099000, 91.95710000),('540529', 3, '', '', NULL, '540529', '', '隆子县', '', '', '', 28.40681000, 92.46177000),('540528', 3, '', '', NULL, '540528', '', '加查县', '', '', '', 29.14023000, 92.59387000),('540527', 3, '', '', NULL, '540527', '', '洛扎县', '', '', '', 28.38569000, 90.85998000),('540526', 3, '', '', NULL, '540526', '', '措美县', '', '', '', 28.43793000, 91.43361000),('540525', 3, '', '', NULL, '540525', '', '曲松县', '', '', '', 29.06277000, 92.20222000),('540524', 3, '', '', NULL, '540524', '', '琼结县', '', '', '', 29.02464000, 91.68385000),('540523', 3, '', '', NULL, '540523', '', '桑日县', '', '', '', 29.25906000, 92.01579000),('540522', 3, '', '', NULL, '540522', '', '贡嘎县', '', '', '', 29.28947000, 90.98421000),('540521', 3, '', '', NULL, '540521', '', '扎囊县', '', '', '', 29.24500000, 91.33735000),('540502', 3, '', '', NULL, '540502', '', '乃东区', '', '', '', 29.22484000, 91.76141000),('540426', 3, '', '', NULL, '540426', '', '朗县', '', '', '', 29.04607000, 93.07482000),('540425', 3, '', '', NULL, '540425', '', '察隅县', '', '', '', 28.66154000, 97.46687000),('540424', 3, '', '', NULL, '540424', '', '波密县', '', '', '', 29.85903000, 95.76761000),('540423', 3, '', '', NULL, '540423', '', '墨脱县', '', '', '', 29.32521000, 95.33304000),('540422', 3, '', '', NULL, '540422', '', '米林县', '', '', '', 29.21607000, 94.21315000),('540421', 3, '', '', NULL, '540421', '', '工布江达县', '', '', '', 29.88531000, 93.24611000),('540402', 3, '', '', NULL, '540402', '', '巴宜区', '', '', '', 29.63654000, 94.36119000),('540330', 3, '', '', NULL, '540330', '', '边坝县', '', '', '', 30.93345000, 94.70790000),('540329', 3, '', '', NULL, '540329', '', '洛隆县', '', '', '', 30.74181000, 95.82482000),('540328', 3, '', '', NULL, '540328', '', '芒康县', '', '', '', 29.68008000, 98.59312000),('540327', 3, '', '', NULL, '540327', '', '左贡县', '', '', '', 29.67091000, 97.84085000),('540326', 3, '', '', NULL, '540326', '', '八宿县', '', '', '', 30.05320000, 96.91785000),('540325', 3, '', '', NULL, '540325', '', '察雅县', '', '', '', 30.65363000, 97.56877000),('540324', 3, '', '', NULL, '540324', '', '丁青县', '', '', '', 31.41250000, 95.59572000),('540323', 3, '', '', NULL, '540323', '', '类乌齐县', '', '', '', 31.21155000, 96.60020000),('540322', 3, '', '', NULL, '540322', '', '贡觉县', '', '', '', 30.86016000, 98.27080000),('540321', 3, '', '', NULL, '540321', '', '江达县', '', '', '', 31.49968000, 98.21822000),('540302', 3, '', '', NULL, '540302', '', '卡若区', '', '', '', 31.13831000, 97.18039000),('540237', 3, '', '', NULL, '540237', '', '岗巴县', '', '', '', 28.27460000, 88.52015000),('540236', 3, '', '', NULL, '540236', '', '萨嘎县', '', '', '', 29.32943000, 85.23421000),('540235', 3, '', '', NULL, '540235', '', '聂拉木县', '', '', '', 28.15499000, 85.98232000),('540234', 3, '', '', NULL, '540234', '', '吉隆县', '', '', '', 28.85254000, 85.29737000),('540233', 3, '', '', NULL, '540233', '', '亚东县', '', '', '', 27.48592000, 88.90708000),('540232', 3, '', '', NULL, '540232', '', '仲巴县', '', '', '', 29.72419000, 84.02454000),('540231', 3, '', '', NULL, '540231', '', '定结县', '', '', '', 28.36408000, 87.76606000),('540230', 3, '', '', NULL, '540230', '', '康马县', '', '', '', 28.55567000, 89.68169000),('540229', 3, '', '', NULL, '540229', '', '仁布县', '', '', '', 29.23089000, 89.84200000),('540228', 3, '', '', NULL, '540228', '', '白朗县', '', '', '', 29.10919000, 89.26156000),('540227', 3, '', '', NULL, '540227', '', '谢通门县', '', '', '', 29.43234000, 88.26166000),('540226', 3, '', '', NULL, '540226', '', '昂仁县', '', '', '', 29.29482000, 87.23617000),('540225', 3, '', '', NULL, '540225', '', '拉孜县', '', '', '', 29.08164000, 87.63718000),('540224', 3, '', '', NULL, '540224', '', '萨迦县', '', '', '', 28.89919000, 88.02172000),('540223', 3, '', '', NULL, '540223', '', '定日县', '', '', '', 28.65874000, 87.12607000),('540222', 3, '', '', NULL, '540222', '', '江孜县', '', '', '', 28.91152000, 89.60558000),('540221', 3, '', '', NULL, '540221', '', '南木林县', '', '', '', 29.68224000, 89.09936000),('540202', 3, '', '', NULL, '540202', '', '桑珠孜区', '', '', '', 29.26969000, 88.88697000),('540127', 3, '', '', NULL, '540127', '', '墨竹工卡县', '', '', '', 29.83375000, 91.73065000),('540124', 3, '', '', NULL, '540124', '', '曲水县', '', '', '', 29.35300000, 90.74367000),('540123', 3, '', '', NULL, '540123', '', '尼木县', '', '', '', 29.43184000, 90.16464000),('540122', 3, '', '', NULL, '540122', '', '当雄县', '', '', '', 30.47192000, 91.10130000),('540121', 3, '', '', NULL, '540121', '', '林周县', '', '', '', 29.89469000, 91.26190000),('540104', 3, '', '', NULL, '540104', '', '达孜区', '', '', '', 29.66933000, 91.34979000),('540103', 3, '', '', NULL, '540103', '', '堆龙德庆区', '', '', '', 29.64602000, 91.00338000),('540102', 3, '', '', NULL, '540102', '', '城关区', '', '', '', 29.65262000, 91.13775000),('533423', 3, '', '', NULL, '533423', '', '维西傈僳族自治县', '', '', '', 27.17739000, 99.28705000),('533422', 3, '', '', NULL, '533422', '', '德钦县', '', '', '', 28.46357000, 98.91699000),('533401', 3, '', '', NULL, '533401', '', '香格里拉市', '', '', '', 27.84254000, 99.74317000),('533325', 3, '', '', NULL, '533325', '', '兰坪白族普米族自治县', '', '', '', 26.45353000, 99.41671000),('533324', 3, '', '', NULL, '533324', '', '贡山独龙族怒族自治县', '', '', '', 27.74104000, 98.66579000),('533323', 3, '', '', NULL, '533323', '', '福贡县', '', '', '', 26.90185000, 98.86905000),('533301', 3, '', '', NULL, '533301', '', '泸水市', '', '', '', 25.82306000, 98.85804000),('533124', 3, '', '', NULL, '533124', '', '陇川县', '', '', '', 24.18305000, 97.79203000),('533123', 3, '', '', NULL, '533123', '', '盈江县', '', '', '', 24.70519000, 97.93184000),('533122', 3, '', '', NULL, '533122', '', '梁河县', '', '', '', 24.80435000, 98.29670000),('533103', 3, '', '', NULL, '533103', '', '芒市', '', '', '', 24.43379000, 98.58815000),('533102', 3, '', '', NULL, '533102', '', '瑞丽市', '', '', '', 24.01278000, 97.85189000),('532932', 3, '', '', NULL, '532932', '', '鹤庆县', '', '', '', 26.56013000, 100.17644000),('532931', 3, '', '', NULL, '532931', '', '剑川县', '', '', '', 26.53692000, 99.90550000),('532930', 3, '', '', NULL, '532930', '', '洱源县', '', '', '', 26.11113000, 99.95088000),('532929', 3, '', '', NULL, '532929', '', '云龙县', '', '', '', 25.88573000, 99.37096000),('532928', 3, '', '', NULL, '532928', '', '永平县', '', '', '', 25.46454000, 99.54098000),('532927', 3, '', '', NULL, '532927', '', '巍山彝族回族自治县', '', '', '', 25.22714000, 100.30711000),('532926', 3, '', '', NULL, '532926', '', '南涧彝族自治县', '', '', '', 25.04282000, 100.50974000),('532925', 3, '', '', NULL, '532925', '', '弥渡县', '', '', '', 25.34365000, 100.49131000),('532924', 3, '', '', NULL, '532924', '', '宾川县', '', '', '', 25.82700000, 100.57265000),('532923', 3, '', '', NULL, '532923', '', '祥云县', '', '', '', 25.48381000, 100.55059000),('532922', 3, '', '', NULL, '532922', '', '漾濞彝族自治县', '', '', '', 25.66992000, 99.95814000),('532901', 3, '', '', NULL, '532901', '', '大理市', '', '', '', 25.59158000, 100.22976000),('532823', 3, '', '', NULL, '532823', '', '勐腊县', '', '', '', 21.45941000, 101.56461000),('532822', 3, '', '', NULL, '532822', '', '勐海县', '', '', '', 21.95753000, 100.45223000),('532801', 3, '', '', NULL, '532801', '', '景洪市', '', '', '', 22.00008000, 100.77163000),('532628', 3, '', '', NULL, '532628', '', '富宁县', '', '', '', 23.62539000, 105.63053000),('532627', 3, '', '', NULL, '532627', '', '广南县', '', '', '', 24.04645000, 105.05516000),('532626', 3, '', '', NULL, '532626', '', '丘北县', '', '', '', 24.04186000, 104.19581000),('532625', 3, '', '', NULL, '532625', '', '马关县', '', '', '', 23.01298000, 104.39387000),('532624', 3, '', '', NULL, '532624', '', '麻栗坡县', '', '', '', 23.12525000, 104.70252000),('532623', 3, '', '', NULL, '532623', '', '西畴县', '', '', '', 23.43712000, 104.67220000),('532622', 3, '', '', NULL, '532622', '', '砚山县', '', '', '', 23.60586000, 104.33709000),('532601', 3, '', '', NULL, '532601', '', '文山市', '', '', '', 23.38678000, 104.23300000),('532532', 3, '', '', NULL, '532532', '', '河口瑶族自治县', '', '', '', 22.52931000, 103.93936000),('532531', 3, '', '', NULL, '532531', '', '绿春县', '', '', '', 22.99346000, 102.39293000),('532530', 3, '', '', NULL, '532530', '', '金平苗族瑶族傣族自治县', '', '', '', 22.77966000, 103.22648000),('532529', 3, '', '', NULL, '532529', '', '红河县', '', '', '', 23.36907000, 102.42079000),('532528', 3, '', '', NULL, '532528', '', '元阳县', '', '', '', 23.21999000, 102.83528000),('532527', 3, '', '', NULL, '532527', '', '泸西县', '', '', '', 24.53210000, 103.76623000),('532525', 3, '', '', NULL, '532525', '', '石屏县', '', '', '', 23.70556000, 102.49621000),('532524', 3, '', '', NULL, '532524', '', '建水县', '', '', '', 23.63499000, 102.82699000),('532523', 3, '', '', NULL, '532523', '', '屏边苗族自治县', '', '', '', 22.98372000, 103.68721000),('532504', 3, '', '', NULL, '532504', '', '弥勒市', '', '', '', 24.41059000, 103.41499000),('532503', 3, '', '', NULL, '532503', '', '蒙自市', '', '', '', 23.39622000, 103.36481000),('532502', 3, '', '', NULL, '532502', '', '开远市', '', '', '', 23.71434000, 103.26676000),('532501', 3, '', '', NULL, '532501', '', '个旧市', '', '', '', 23.35899000, 103.16004000),('532331', 3, '', '', NULL, '532331', '', '禄丰县', '', '', '', 25.15100000, 102.07910000),('532329', 3, '', '', NULL, '532329', '', '武定县', '', '', '', 25.53038000, 102.40442000),('532328', 3, '', '', NULL, '532328', '', '元谋县', '', '', '', 25.70436000, 101.87449000),('532327', 3, '', '', NULL, '532327', '', '永仁县', '', '', '', 26.05615000, 101.66982000),('532326', 3, '', '', NULL, '532326', '', '大姚县', '', '', '', 25.72179000, 101.32440000),('532325', 3, '', '', NULL, '532325', '', '姚安县', '', '', '', 25.50423000, 101.24158000),('532324', 3, '', '', NULL, '532324', '', '南华县', '', '', '', 25.19229000, 101.27354000),('532323', 3, '', '', NULL, '532323', '', '牟定县', '', '', '', 25.31241000, 101.54697000),('532322', 3, '', '', NULL, '532322', '', '双柏县', '', '', '', 24.68867000, 101.64165000),('532301', 3, '', '', NULL, '532301', '', '楚雄市', '', '', '', 25.03288000, 101.54582000),('530927', 3, '', '', NULL, '530927', '', '沧源佤族自治县', '', '', '', 23.14681000, 99.24583000),('530926', 3, '', '', NULL, '530926', '', '耿马傣族佤族自治县', '', '', '', 23.53786000, 99.39767000),('530925', 3, '', '', NULL, '530925', '', '双江县', '', '', '', 23.47360000, 99.82768000),('530924', 3, '', '', NULL, '530924', '', '镇康县', '', '', '', 23.76310000, 98.82543000),('530923', 3, '', '', NULL, '530923', '', '永德县', '', '', '', 24.01828000, 99.25929000),('530922', 3, '', '', NULL, '530922', '', '云县', '', '', '', 24.44460000, 100.13111000),('530921', 3, '', '', NULL, '530921', '', '凤庆县', '', '', '', 24.58038000, 99.92841000),('530902', 3, '', '', NULL, '530902', '', '临翔区', '', '', '', 23.89516000, 100.08233000),('530829', 3, '', '', NULL, '530829', '', '西盟佤族自治县', '', '', '', 22.64435000, 99.59018000),('530828', 3, '', '', NULL, '530828', '', '澜沧拉祜族自治县', '', '', '', 22.55577000, 99.93208000),('530827', 3, '', '', NULL, '530827', '', '孟连县', '', '', '', 22.32911000, 99.58441000),('530826', 3, '', '', NULL, '530826', '', '江城哈尼族彝族自治县', '', '', '', 22.58518000, 101.86237000),('530825', 3, '', '', NULL, '530825', '', '镇沅县', '', '', '', 24.00461000, 101.10843000),('530824', 3, '', '', NULL, '530824', '', '景谷傣族彝族自治县', '', '', '', 23.49704000, 100.70290000),('530823', 3, '', '', NULL, '530823', '', '景东彝族自治县', '', '', '', 24.44697000, 100.83390000),('530822', 3, '', '', NULL, '530822', '', '墨江哈尼族自治县', '', '', '', 23.43185000, 101.69223000),('530821', 3, '', '', NULL, '530821', '', '宁洱哈尼族彝族自治县', '', '', '', 23.06167000, 101.04539000),('530802', 3, '', '', NULL, '530802', '', '思茅区', '', '', '', 22.78684000, 100.97692000),('530724', 3, '', '', NULL, '530724', '', '宁蒗彝族自治县', '', '', '', 27.28196000, 100.85198000),('530723', 3, '', '', NULL, '530723', '', '华坪县', '', '', '', 26.62921000, 101.26630000),('530722', 3, '', '', NULL, '530722', '', '永胜县', '', '', '', 26.68431000, 100.75086000),('530721', 3, '', '', NULL, '530721', '', '玉龙纳西族自治县', '', '', '', 26.82152000, 100.23695000),('530702', 3, '', '', NULL, '530702', '', '古城区', '', '', '', 26.87721000, 100.22549000),('530681', 3, '', '', NULL, '530681', '', '水富市', '', '', '', 28.63002000, 104.41562000),('530629', 3, '', '', NULL, '530629', '', '威信县', '', '', '', 27.84685000, 105.04906000),('530628', 3, '', '', NULL, '530628', '', '彝良县', '', '', '', 27.62550800, 104.04805000),('530627', 3, '', '', NULL, '530627', '', '镇雄县', '', '', '', 27.44150000, 104.87360000),('530626', 3, '', '', NULL, '530626', '', '绥江县', '', '', '', 28.59840000, 103.95841000),('530625', 3, '', '', NULL, '530625', '', '永善县', '', '', '', 28.22909000, 103.63817000),('530624', 3, '', '', NULL, '530624', '', '大关县', '', '', '', 27.74806000, 103.89111000),('530623', 3, '', '', NULL, '530623', '', '盐津县', '', '', '', 28.10859000, 104.23467000),('530622', 3, '', '', NULL, '530622', '', '巧家县', '', '', '', 26.90861000, 102.93006000),('530621', 3, '', '', NULL, '530621', '', '鲁甸县', '', '', '', 27.18664000, 103.55792000),('530602', 3, '', '', NULL, '530602', '', '昭阳区', '', '', '', 27.32027000, 103.70594000),('530581', 3, '', '', NULL, '530581', '', '腾冲市', '', '', '', 25.02053000, 98.49097000),('530524', 3, '', '', NULL, '530524', '', '昌宁县', '', '', '', 24.82745000, 99.60567000),('530523', 3, '', '', NULL, '530523', '', '龙陵县', '', '', '', 24.58682000, 98.68927000),('530521', 3, '', '', NULL, '530521', '', '施甸县', '', '', '', 24.72308000, 99.18902000),('530502', 3, '', '', NULL, '530502', '', '隆阳区', '', '', '', 25.12107000, 99.16579000),('530428', 3, '', '', NULL, '530428', '', '元江县', '', '', '', 23.59667000, 101.99809000),('530427', 3, '', '', NULL, '530427', '', '新平彝族傣族自治县', '', '', '', 24.07000000, 101.99014000),('530426', 3, '', '', NULL, '530426', '', '峨山彝族自治县', '', '', '', 24.16908000, 102.40579000),('530425', 3, '', '', NULL, '530425', '', '易门县', '', '', '', 24.67108000, 102.16273000),('530424', 3, '', '', NULL, '530424', '', '华宁县', '', '', '', 24.19340000, 102.92849000),('530423', 3, '', '', NULL, '530423', '', '通海县', '', '', '', 24.11367000, 102.76647000),('530422', 3, '', '', NULL, '530422', '', '澄江县', '', '', '', 24.67379000, 102.90819000),('530403', 3, '', '', NULL, '530403', '', '江川区', '', '', '', 24.28744000, 102.75376000),('530402', 3, '', '', NULL, '530402', '', '红塔区', '', '', '', 24.34128000, 102.54025000),('530381', 3, '', '', NULL, '530381', '', '宣威市', '', '', '', 26.21989000, 104.10448000),('530326', 3, '', '', NULL, '530326', '', '会泽县', '', '', '', 26.41791000, 103.29737000),('530325', 3, '', '', NULL, '530325', '', '富源县', '', '', '', 25.67422000, 104.25485000),('530324', 3, '', '', NULL, '530324', '', '罗平县', '', '', '', 24.88468000, 104.30870000),('530323', 3, '', '', NULL, '530323', '', '师宗县', '', '', '', 24.82851000, 103.98990000),('530322', 3, '', '', NULL, '530322', '', '陆良县', '', '', '', 25.02941000, 103.66683000),('530304', 3, '', '', NULL, '530304', '', '马龙区', '', '', '', 25.42807000, 103.57834000),('530303', 3, '', '', NULL, '530303', '', '沾益区', '', '', '', 25.60167000, 103.82183000),('530302', 3, '', '', NULL, '530302', '', '麒麟区', '', '', '', 25.49513000, 103.80481000),('530181', 3, '', '', NULL, '530181', '', '安宁市', '', '', '', 24.91954000, 102.47800000),('530129', 3, '', '', NULL, '530129', '', '寻甸回族彝族自治县', '', '', '', 25.55818000, 103.25668000),('530128', 3, '', '', NULL, '530128', '', '禄劝彝族苗族自治县', '', '', '', 25.55128000, 102.47145000),('530127', 3, '', '', NULL, '530127', '', '嵩明县', '', '', '', 25.33872000, 103.03687000),('530126', 3, '', '', NULL, '530126', '', '石林彝族自治县', '', '', '', 24.77082000, 103.28890000),('530125', 3, '', '', NULL, '530125', '', '宜良县', '', '', '', 24.92005000, 103.14119000),('530124', 3, '', '', NULL, '530124', '', '富民县', '', '', '', 25.22199000, 102.49767000),('530115', 3, '', '', NULL, '530115', '', '晋宁区', '', '', '', 24.66982000, 102.59559000),('530114', 3, '', '', NULL, '530114', '', '呈贡区', '', '', '', 24.88554000, 102.82147000),('530113', 3, '', '', NULL, '530113', '', '东川区', '', '', '', 26.08294000, 103.18773000),('530112', 3, '', '', NULL, '530112', '', '西山区', '', '', '', 25.03845000, 102.66481000),('530111', 3, '', '', NULL, '530111', '', '官渡区', '', '', '', 25.01503000, 102.74370000),('530103', 3, '', '', NULL, '530103', '', '盘龙区', '', '', '', 25.11624000, 102.75205000),('530102', 3, '', '', NULL, '530102', '', '五华区', '', '', '', 25.04347000, 102.70737000),('522732', 3, '', '', NULL, '522732', '', '三都水族自治县', '', '', '', 25.98326000, 107.86971000),('522731', 3, '', '', NULL, '522731', '', '惠水县', '', '', '', 26.13290000, 106.65670000),('522730', 3, '', '', NULL, '522730', '', '龙里县', '', '', '', 26.45325000, 106.97981000),('522729', 3, '', '', NULL, '522729', '', '长顺县', '', '', '', 26.02214000, 106.45244000),('522728', 3, '', '', NULL, '522728', '', '罗甸县', '', '', '', 25.42536000, 106.75171000),('522727', 3, '', '', NULL, '522727', '', '平塘县', '', '', '', 25.82249000, 107.32287000),('522726', 3, '', '', NULL, '522726', '', '独山县', '', '', '', 25.82279000, 107.54578000),('522725', 3, '', '', NULL, '522725', '', '瓮安县', '', '', '', 27.07790000, 107.47106000),('522723', 3, '', '', NULL, '522723', '', '贵定县', '', '', '', 26.58498000, 107.23447000),('522722', 3, '', '', NULL, '522722', '', '荔波县', '', '', '', 25.41144000, 107.88725000),('522702', 3, '', '', NULL, '522702', '', '福泉市', '', '', '', 26.68651000, 107.52070000),('522701', 3, '', '', NULL, '522701', '', '都匀市', '', '', '', 26.25979000, 107.51867000),('522636', 3, '', '', NULL, '522636', '', '丹寨县', '', '', '', 26.19841000, 107.78871000),('522635', 3, '', '', NULL, '522635', '', '麻江县', '', '', '', 26.49115000, 107.58937000),('522634', 3, '', '', NULL, '522634', '', '雷山县', '', '', '', 26.37834000, 108.07758000),('522633', 3, '', '', NULL, '522633', '', '从江县', '', '', '', 25.75418000, 108.90532000),('522632', 3, '', '', NULL, '522632', '', '榕江县', '', '', '', 25.93189000, 108.52251000),('522631', 3, '', '', NULL, '522631', '', '黎平县', '', '', '', 26.22924000, 109.13718000),('522630', 3, '', '', NULL, '522630', '', '台江县', '', '', '', 26.66903000, 108.32009000),('522629', 3, '', '', NULL, '522629', '', '剑河县', '', '', '', 26.72860000, 108.44137000),('522628', 3, '', '', NULL, '522628', '', '锦屏县', '', '', '', 26.67631000, 109.20051000),('522627', 3, '', '', NULL, '522627', '', '天柱县', '', '', '', 26.90948000, 109.20776000),('522626', 3, '', '', NULL, '522626', '', '岑巩县', '', '', '', 27.17385000, 108.81570000),('522625', 3, '', '', NULL, '522625', '', '镇远县', '', '', '', 27.04914000, 108.42968000),('522624', 3, '', '', NULL, '522624', '', '三穗县', '', '', '', 26.95291000, 108.67533000),('522623', 3, '', '', NULL, '522623', '', '施秉县', '', '', '', 27.03327000, 108.12413000),('522622', 3, '', '', NULL, '522622', '', '黄平县', '', '', '', 26.90533000, 107.91638000),('522601', 3, '', '', NULL, '522601', '', '凯里市', '', '', '', 26.56756000, 107.98040000),('522328', 3, '', '', NULL, '522328', '', '安龙县', '', '', '', 25.09811000, 105.44333000),('522327', 3, '', '', NULL, '522327', '', '册亨县', '', '', '', 24.98368000, 105.81173000),('522326', 3, '', '', NULL, '522326', '', '望谟县', '', '', '', 25.17824000, 106.09962000),('522325', 3, '', '', NULL, '522325', '', '贞丰县', '', '', '', 25.38558000, 105.65043000),('522324', 3, '', '', NULL, '522324', '', '晴隆县', '', '', '', 25.83474000, 105.21904000),('522323', 3, '', '', NULL, '522323', '', '普安县', '', '', '', 25.78429000, 104.95324000),('522302', 3, '', '', NULL, '522302', '', '兴仁市', '', '', '', 25.43511000, 105.18639000),('522301', 3, '', '', NULL, '522301', '', '兴义市', '', '', '', 25.09192000, 104.89553000),('520628', 3, '', '', NULL, '520628', '', '松桃苗族自治县', '', '', '', 28.15414000, 109.20316000),('520627', 3, '', '', NULL, '520627', '', '沿河土家族自治县', '', '', '', 28.56397000, 108.50301000),('520626', 3, '', '', NULL, '520626', '', '德江县', '', '', '', 28.26408000, 108.11987000),('520625', 3, '', '', NULL, '520625', '', '印江土家族苗族自治县', '', '', '', 27.99410000, 108.40958000),('520624', 3, '', '', NULL, '520624', '', '思南县', '', '', '', 27.93886000, 108.25280000),('520623', 3, '', '', NULL, '520623', '', '石阡县', '', '', '', 27.51382000, 108.22330000),('520622', 3, '', '', NULL, '520622', '', '玉屏侗族自治县', '', '', '', 27.23637000, 108.91212000),('520621', 3, '', '', NULL, '520621', '', '江口县', '', '', '', 27.69956000, 108.83967000),('520603', 3, '', '', NULL, '520603', '', '万山区', '', '', '', 27.51796000, 109.21369000),('520602', 3, '', '', NULL, '520602', '', '碧江区', '', '', '', 27.81621000, 109.26433000),('520527', 3, '', '', NULL, '520527', '', '赫章县', '', '', '', 27.12328000, 104.72740000),('520526', 3, '', '', NULL, '520526', '', '威宁彝族回族苗族自治县', '', '', '', 26.85641000, 104.27872000),('520525', 3, '', '', NULL, '520525', '', '纳雍县', '', '', '', 26.77770000, 105.38269000),('520524', 3, '', '', NULL, '520524', '', '织金县', '', '', '', 26.66301000, 105.77488000),('520523', 3, '', '', NULL, '520523', '', '金沙县', '', '', '', 27.45922000, 106.22014000),('520522', 3, '', '', NULL, '520522', '', '黔西县', '', '', '', 27.00866000, 106.03230000),('520521', 3, '', '', NULL, '520521', '', '大方县', '', '', '', 27.14161000, 105.61300000),('520502', 3, '', '', NULL, '520502', '', '七星关区', '', '', '', 27.29847000, 105.30504000),('520425', 3, '', '', NULL, '520425', '', '紫云苗族布依族自治县', '', '', '', 25.75107000, 106.08432000),('520424', 3, '', '', NULL, '520424', '', '关岭布依族苗族自治县', '', '', '', 25.94369000, 105.61916000),('520423', 3, '', '', NULL, '520423', '', '镇宁布依族苗族自治县', '', '', '', 26.05716000, 105.77048000),('520422', 3, '', '', NULL, '520422', '', '普定县', '', '', '', 26.30144000, 105.74291000),('520403', 3, '', '', NULL, '520403', '', '平坝区', '', '', '', 26.40574000, 106.25530000),('520402', 3, '', '', NULL, '520402', '', '西秀区', '', '', '', 26.24532000, 105.96533000),('520382', 3, '', '', NULL, '520382', '', '仁怀市', '', '', '', 27.79234000, 106.40156000),('520381', 3, '', '', NULL, '520381', '', '赤水市', '', '', '', 28.59055000, 105.69744000),('520330', 3, '', '', NULL, '520330', '', '习水县', '', '', '', 28.32740000, 106.20385000),('520329', 3, '', '', NULL, '520329', '', '余庆县', '', '', '', 27.22536000, 107.88825000),('520328', 3, '', '', NULL, '520328', '', '湄潭县', '', '', '', 27.74889000, 107.46551000),('520327', 3, '', '', NULL, '520327', '', '凤冈县', '', '', '', 27.95465000, 107.71689000),('520326', 3, '', '', NULL, '520326', '', '务川仡佬族苗族自治县', '', '', '', 28.56295000, 107.89888000),('520325', 3, '', '', NULL, '520325', '', '道真仡佬族苗族自治县', '', '', '', 28.86264000, 107.61316000),('520324', 3, '', '', NULL, '520324', '', '正安县', '', '', '', 28.55011000, 107.44402000),('520323', 3, '', '', NULL, '520323', '', '绥阳县', '', '', '', 27.94705000, 107.19070000),('520322', 3, '', '', NULL, '520322', '', '桐梓县', '', '', '', 28.13321000, 106.82502000),('520304', 3, '', '', NULL, '520304', '', '播州区', '', '', '', 27.53625000, 106.82922000),('520303', 3, '', '', NULL, '520303', '', '汇川区', '', '', '', 27.74979000, 106.93252000),('520302', 3, '', '', NULL, '520302', '', '红花岗区', '', '', '', 27.64481000, 106.89380000),('520281', 3, '', '', NULL, '520281', '', '盘州市', '', '', '', 25.70993000, 104.47158000),('520221', 3, '', '', NULL, '520221', '', '水城县', '', '', '', 26.54658000, 104.95764000),('520203', 3, '', '', NULL, '520203', '', '六枝特区', '', '', '', 26.20141000, 105.48025000),('520201', 3, '', '', NULL, '520201', '', '钟山区', '', '', '', 26.57585000, 104.84447000),('520181', 3, '', '', NULL, '520181', '', '清镇市', '', '', '', 26.55607000, 106.47057000),('520123', 3, '', '', NULL, '520123', '', '修文县', '', '', '', 26.83890000, 106.59203000),('520122', 3, '', '', NULL, '520122', '', '息烽县', '', '', '', 27.09053000, 106.74040000),('520121', 3, '', '', NULL, '520121', '', '开阳县', '', '', '', 27.05759000, 106.96486000),('520115', 3, '', '', NULL, '520115', '', '观山湖区', '', '', '', 26.60150000, 106.62254000),('520113', 3, '', '', NULL, '520113', '', '白云区', '', '', '', 26.67865000, 106.62298000),('520112', 3, '', '', NULL, '520112', '', '乌当区', '', '', '', 26.62959000, 106.75208000),('520111', 3, '', '', NULL, '520111', '', '花溪区', '', '', '', 26.40985000, 106.67034000),('520103', 3, '', '', NULL, '520103', '', '云岩区', '', '', '', 26.60491000, 106.72566000),('520102', 3, '', '', NULL, '520102', '', '南明区', '', '', '', 26.56822000, 106.71410000),('513437', 3, '', '', NULL, '513437', '', '雷波县', '', '', '', 28.26272000, 103.57150000),('513436', 3, '', '', NULL, '513436', '', '美姑县', '', '', '', 28.32885000, 103.13229000),('513435', 3, '', '', NULL, '513435', '', '甘洛县', '', '', '', 28.95873000, 102.77033000),('513434', 3, '', '', NULL, '513434', '', '越西县', '', '', '', 28.63999000, 102.50750000),('513433', 3, '', '', NULL, '513433', '', '冕宁县', '', '', '', 28.55018000, 102.17678000),('513432', 3, '', '', NULL, '513432', '', '喜德县', '', '', '', 28.30666000, 102.41231000),('513431', 3, '', '', NULL, '513431', '', '昭觉县', '', '', '', 28.01425000, 102.84265000),('513430', 3, '', '', NULL, '513430', '', '金阳县', '', '', '', 27.69654000, 103.24903000),('513429', 3, '', '', NULL, '513429', '', '布拖县', '', '', '', 27.70622000, 102.81149000),('513428', 3, '', '', NULL, '513428', '', '普格县', '', '', '', 27.37650000, 102.54092000),('513427', 3, '', '', NULL, '513427', '', '宁南县', '', '', '', 27.06667000, 102.76052000),('513426', 3, '', '', NULL, '513426', '', '会东县', '', '', '', 26.63460000, 102.57817000),('513425', 3, '', '', NULL, '513425', '', '会理县', '', '', '', 26.65527000, 102.24457000),('513424', 3, '', '', NULL, '513424', '', '德昌县', '', '', '', 27.40289000, 102.17559000),('513423', 3, '', '', NULL, '513423', '', '盐源县', '', '', '', 27.42241000, 101.50919000),('513422', 3, '', '', NULL, '513422', '', '木里藏族自治县', '', '', '', 27.92859000, 101.28048000),('513401', 3, '', '', NULL, '513401', '', '西昌市', '', '', '', 27.89449000, 102.26305000),('513338', 3, '', '', NULL, '513338', '', '得荣县', '', '', '', 28.71307000, 99.28639000),('513337', 3, '', '', NULL, '513337', '', '稻城县', '', '', '', 29.03704000, 100.29829000),('513336', 3, '', '', NULL, '513336', '', '乡城县', '', '', '', 28.93118000, 99.79842000),('513335', 3, '', '', NULL, '513335', '', '巴塘县', '', '', '', 30.00537000, 99.11050000),('513334', 3, '', '', NULL, '513334', '', '理塘县', '', '', '', 29.99603000, 100.26963000),('513333', 3, '', '', NULL, '513333', '', '色达县', '', '', '', 32.26814000, 100.33264000),('513332', 3, '', '', NULL, '513332', '', '石渠县', '', '', '', 32.97834000, 98.10294000),('513331', 3, '', '', NULL, '513331', '', '白玉县', '', '', '', 31.21014000, 98.82418000),('513330', 3, '', '', NULL, '513330', '', '德格县', '', '', '', 31.80612000, 98.58088000),('513329', 3, '', '', NULL, '513329', '', '新龙县', '', '', '', 30.93932000, 100.31152000),('513328', 3, '', '', NULL, '513328', '', '甘孜县', '', '', '', 31.62300000, 99.99266000),('513327', 3, '', '', NULL, '513327', '', '炉霍县', '', '', '', 31.39005000, 100.67703000),('513326', 3, '', '', NULL, '513326', '', '道孚县', '', '', '', 30.97936000, 101.12508000),('513325', 3, '', '', NULL, '513325', '', '雅江县', '', '', '', 30.03145000, 101.01426000),('513324', 3, '', '', NULL, '513324', '', '九龙县', '', '', '', 29.00019000, 101.50729000),('513323', 3, '', '', NULL, '513323', '', '丹巴县', '', '', '', 30.87868000, 101.89077000),('513322', 3, '', '', NULL, '513322', '', '泸定县', '', '', '', 29.91412000, 102.23471000),('513301', 3, '', '', NULL, '513301', '', '康定市', '', '', '', 30.05441000, 101.96308000),('513233', 3, '', '', NULL, '513233', '', '红原县', '', '', '', 32.79087000, 102.54438000),('513232', 3, '', '', NULL, '513232', '', '若尔盖县', '', '', '', 33.57586000, 102.96187000),('513231', 3, '', '', NULL, '513231', '', '阿坝县', '', '', '', 32.90245000, 101.70634000),('513230', 3, '', '', NULL, '513230', '', '壤塘县', '', '', '', 32.26545000, 100.97861000),('513228', 3, '', '', NULL, '513228', '', '黑水县', '', '', '', 32.06179000, 102.99021000),('513227', 3, '', '', NULL, '513227', '', '小金县', '', '', '', 30.99918000, 102.36440000),('513226', 3, '', '', NULL, '513226', '', '金川县', '', '', '', 31.47597000, 102.06325000),('513225', 3, '', '', NULL, '513225', '', '九寨沟县', '', '', '', 33.26142000, 104.23567000),('513224', 3, '', '', NULL, '513224', '', '松潘县', '', '', '', 32.63813000, 103.59893000),('513223', 3, '', '', NULL, '513223', '', '茂县', '', '', '', 31.68163000, 103.85334000),('513222', 3, '', '', NULL, '513222', '', '理县', '', '', '', 31.43659000, 103.16700000),('513221', 3, '', '', NULL, '513221', '', '汶川县', '', '', '', 31.47686000, 103.59030000),('512022', 3, '', '', NULL, '512022', '', '乐至县', '', '', '', 30.27590000, 105.02133000),('513201', 3, '', '', NULL, '513201', '', '马尔康市', '', '', '', 31.90585000, 102.20644000),('512021', 3, '', '', NULL, '512021', '', '安岳县', '', '', '', 30.09733000, 105.33537000),('512002', 3, '', '', NULL, '512002', '', '雁江区', '', '', '', 30.11758000, 104.65220000),('511923', 3, '', '', NULL, '511923', '', '平昌县', '', '', '', 31.56054000, 107.10358000),('511922', 3, '', '', NULL, '511922', '', '南江县', '', '', '', 32.34645000, 106.82907000),('511921', 3, '', '', NULL, '511921', '', '通江县', '', '', '', 31.91180000, 107.24493000),('511903', 3, '', '', NULL, '511903', '', '恩阳区', '', '', '', 31.78956000, 106.63602000),('511902', 3, '', '', NULL, '511902', '', '巴州区', '', '', '', 31.85131000, 106.76897000),('511827', 3, '', '', NULL, '511827', '', '宝兴县', '', '', '', 30.36806000, 102.81457000),('511826', 3, '', '', NULL, '511826', '', '芦山县', '', '', '', 30.14407000, 102.92826000),('511825', 3, '', '', NULL, '511825', '', '天全县', '', '', '', 30.05694200, 102.77136500),('511824', 3, '', '', NULL, '511824', '', '石棉县', '', '', '', 29.22799000, 102.35944000),('511823', 3, '', '', NULL, '511823', '', '汉源县', '', '', '', 29.34457000, 102.65261000),('511822', 3, '', '', NULL, '511822', '', '荥经县', '', '', '', 29.79308000, 102.84671000),('511803', 3, '', '', NULL, '511803', '', '名山区', '', '', '', 30.06982000, 103.10954000),('511802', 3, '', '', NULL, '511802', '', '雨城区', '', '', '', 30.00589000, 103.03254000),('511781', 3, '', '', NULL, '511781', '', '万源市', '', '', '', 32.08197000, 108.03446000),('511725', 3, '', '', NULL, '511725', '', '渠县', '', '', '', 30.83664000, 106.97299000),('511724', 3, '', '', NULL, '511724', '', '大竹县', '', '', '', 30.73607000, 107.20441000),('511723', 3, '', '', NULL, '511723', '', '开江县', '', '', '', 31.08316000, 107.86852000),('511722', 3, '', '', NULL, '511722', '', '宣汉县', '', '', '', 31.35386000, 107.72710000),('511703', 3, '', '', NULL, '511703', '', '达川区', '', '', '', 31.19603000, 107.51177000),('511702', 3, '', '', NULL, '511702', '', '通川区', '', '', '', 31.21473000, 107.50455000),('511681', 3, '', '', NULL, '511681', '', '华蓥市', '', '', '', 30.39001000, 106.78298000),('511623', 3, '', '', NULL, '511623', '', '邻水县', '', '', '', 30.33458000, 106.93048000),('511622', 3, '', '', NULL, '511622', '', '武胜县', '', '', '', 30.34935000, 106.29597000),('511621', 3, '', '', NULL, '511621', '', '岳池县', '', '', '', 30.53795000, 106.43988000),('511603', 3, '', '', NULL, '511603', '', '前锋区', '', '', '', 30.49592000, 106.89125000),('511602', 3, '', '', NULL, '511602', '', '广安区', '', '', '', 30.47392000, 106.64188000),('511529', 3, '', '', NULL, '511529', '', '屏山县', '', '', '', 28.65312000, 104.15125000),('511528', 3, '', '', NULL, '511528', '', '兴文县', '', '', '', 28.30361000, 105.23646000),('511527', 3, '', '', NULL, '511527', '', '筠连县', '', '', '', 28.16418000, 104.51185000),('511526', 3, '', '', NULL, '511526', '', '珙县', '', '', '', 28.43885000, 104.70878000),('511525', 3, '', '', NULL, '511525', '', '高县', '', '', '', 28.43622000, 104.51760000),('511524', 3, '', '', NULL, '511524', '', '长宁县', '', '', '', 28.58227000, 104.92110000),('511523', 3, '', '', NULL, '511523', '', '江安县', '', '', '', 28.72389000, 105.06688000),('511504', 3, '', '', NULL, '511504', '', '叙州区', '', '', '', 28.68998000, 104.53316000),('511503', 3, '', '', NULL, '511503', '', '南溪区', '', '', '', 28.84548000, 104.96953000),('511502', 3, '', '', NULL, '511502', '', '翠屏区', '', '', '', 28.76593000, 104.61947000),('511425', 3, '', '', NULL, '511425', '', '青神县', '', '', '', 29.83150000, 103.84656000),('511424', 3, '', '', NULL, '511424', '', '丹棱县', '', '', '', 30.01453000, 103.51284000),('511423', 3, '', '', NULL, '511423', '', '洪雅县', '', '', '', 29.90496000, 103.37288000),('511421', 3, '', '', NULL, '511421', '', '仁寿县', '', '', '', 29.99572000, 104.13407000),('511403', 3, '', '', NULL, '511403', '', '彭山区', '', '', '', 30.19299000, 103.87283000),('511402', 3, '', '', NULL, '511402', '', '东坡区', '', '', '', 30.04222000, 103.83237700),('511381', 3, '', '', NULL, '511381', '', '阆中市', '', '', '', 31.55837000, 106.00499000),('511325', 3, '', '', NULL, '511325', '', '西充县', '', '', '', 30.99526000, 105.90086000),('511324', 3, '', '', NULL, '511324', '', '仪陇县', '', '', '', 31.26998000, 106.30330000),('511323', 3, '', '', NULL, '511323', '', '蓬安县', '', '', '', 31.02860000, 106.41230000),('511322', 3, '', '', NULL, '511322', '', '营山县', '', '', '', 31.07670000, 106.56553000),('511321', 3, '', '', NULL, '511321', '', '南部县', '', '', '', 31.35316000, 106.06734000),('511304', 3, '', '', NULL, '511304', '', '嘉陵区', '', '', '', 30.75874000, 106.07176000),('511303', 3, '', '', NULL, '511303', '', '高坪区', '', '', '', 30.78152900, 106.11888900),('511302', 3, '', '', NULL, '511302', '', '顺庆区', '', '', '', 30.79653000, 106.09224000),('511181', 3, '', '', NULL, '511181', '', '峨眉山市', '', '', '', 29.60125000, 103.48447000),('511133', 3, '', '', NULL, '511133', '', '马边彝族自治县', '', '', '', 28.83557000, 103.54635000),('511132', 3, '', '', NULL, '511132', '', '峨边彝族自治县', '', '', '', 29.23047000, 103.26202000),('511129', 3, '', '', NULL, '511129', '', '沐川县', '', '', '', 28.95673000, 103.90241000),('511126', 3, '', '', NULL, '511126', '', '夹江县', '', '', '', 29.73753000, 103.57156000),('511124', 3, '', '', NULL, '511124', '', '井研县', '', '', '', 29.65305000, 104.06482000),('511123', 3, '', '', NULL, '511123', '', '犍为县', '', '', '', 29.20828000, 103.94931000),('511113', 3, '', '', NULL, '511113', '', '金口河区', '', '', '', 29.24447000, 103.07879000),('511112', 3, '', '', NULL, '511112', '', '五通桥区', '', '', '', 29.40726000, 103.81846000),('511111', 3, '', '', NULL, '511111', '', '沙湾区', '', '', '', 29.41306000, 103.55027000),('511102', 3, '', '', NULL, '511102', '', '市中区', '', '', '', 29.55544000, 103.76120000),('511083', 3, '', '', NULL, '511083', '', '隆昌市', '', '', '', 29.33948000, 105.28773000),('511025', 3, '', '', NULL, '511025', '', '资中县', '', '', '', 29.76416000, 104.85212000),('511024', 3, '', '', NULL, '511024', '', '威远县', '', '', '', 29.52742000, 104.66885000),('511011', 3, '', '', NULL, '511011', '', '东兴区', '', '', '', 29.59346000, 105.07459000),('511002', 3, '', '', NULL, '511002', '', '市中区', '', '', '', 29.58698000, 105.06776000),('510981', 3, '', '', NULL, '510981', '', '射洪市', '', '', '', 30.87113000, 105.38836000),('510923', 3, '', '', NULL, '510923', '', '大英县', '', '', '', 30.59450000, 105.23649000),('510921', 3, '', '', NULL, '510921', '', '蓬溪县', '', '', '', 30.75778000, 105.70756000),('510904', 3, '', '', NULL, '510904', '', '安居区', '', '', '', 30.35541000, 105.45636000),('510903', 3, '', '', NULL, '510903', '', '船山区', '', '', '', 30.52552000, 105.56821000),('510824', 3, '', '', NULL, '510824', '', '苍溪县', '', '', '', 31.73244000, 105.93442000),('510823', 3, '', '', NULL, '510823', '', '剑阁县', '', '', '', 32.28849000, 105.52526000),('510822', 3, '', '', NULL, '510822', '', '青川县', '', '', '', 32.58410000, 105.23822000),('510821', 3, '', '', NULL, '510821', '', '旺苍县', '', '', '', 32.22910000, 106.28974000),('510812', 3, '', '', NULL, '510812', '', '朝天区', '', '', '', 32.64409000, 105.89034000),('510811', 3, '', '', NULL, '510811', '', '昭化区', '', '', '', 32.32320000, 105.96304000),('510802', 3, '', '', NULL, '510802', '', '利州区', '', '', '', 32.43396000, 105.84559000),('510781', 3, '', '', NULL, '510781', '', '江油市', '', '', '', 31.75691000, 104.72458000),('510727', 3, '', '', NULL, '510727', '', '平武县', '', '', '', 32.40858000, 104.52904000),('510726', 3, '', '', NULL, '510726', '', '北川羌族自治县', '', '', '', 31.89148000, 104.30755000),('510725', 3, '', '', NULL, '510725', '', '梓潼县', '', '', '', 31.63529000, 105.16118000),('510723', 3, '', '', NULL, '510723', '', '盐亭县', '', '', '', 31.20819000, 105.38996000),('510722', 3, '', '', NULL, '510722', '', '三台县', '', '', '', 31.09563000, 105.09459000),('510705', 3, '', '', NULL, '510705', '', '安州区', '', '', '', 31.53465000, 104.56735000),('510704', 3, '', '', NULL, '510704', '', '游仙区', '', '', '', 31.47377000, 104.76622000),('510703', 3, '', '', NULL, '510703', '', '涪城区', '', '', '', 31.45498000, 104.75708000),('510683', 3, '', '', NULL, '510683', '', '绵竹市', '', '', '', 31.33776000, 104.22083000),('510682', 3, '', '', NULL, '510682', '', '什邡市', '', '', '', 31.12736000, 104.16694000),('510681', 3, '', '', NULL, '510681', '', '广汉市', '', '', '', 30.97706000, 104.28249000),('510623', 3, '', '', NULL, '510623', '', '中江县', '', '', '', 31.03304000, 104.67872000),('510604', 3, '', '', NULL, '510604', '', '罗江区', '', '', '', 31.31681000, 104.51021000),('510603', 3, '', '', NULL, '510603', '', '旌阳区', '', '', '', 31.14263000, 104.41702000),('510525', 3, '', '', NULL, '510525', '', '古蔺县', '', '', '', 28.03884000, 105.81239000),('510524', 3, '', '', NULL, '510524', '', '叙永县', '', '', '', 28.15588000, 105.44475000),('510522', 3, '', '', NULL, '510522', '', '合江县', '', '', '', 28.81147000, 105.83135000),('510521', 3, '', '', NULL, '510521', '', '泸县', '', '', '', 29.15160000, 105.38185000),('510504', 3, '', '', NULL, '510504', '', '龙马潭区', '', '', '', 28.91318000, 105.43779000),('510503', 3, '', '', NULL, '510503', '', '纳溪区', '', '', '', 28.77313000, 105.37131000),('510502', 3, '', '', NULL, '510502', '', '江阳区', '', '', '', 28.87875000, 105.43501000),('510422', 3, '', '', NULL, '510422', '', '盐边县', '', '', '', 26.68265000, 101.85393000),('510421', 3, '', '', NULL, '510421', '', '米易县', '', '', '', 26.89066900, 102.11024000),('510411', 3, '', '', NULL, '510411', '', '仁和区', '', '', '', 26.49778000, 101.73866000),('510403', 3, '', '', NULL, '510403', '', '西区', '', '', '', 26.59757000, 101.63064000),('510402', 3, '', '', NULL, '510402', '', '东区', '', '', '', 26.54639000, 101.70413000),('510322', 3, '', '', NULL, '510322', '', '富顺县', '', '', '', 29.18021000, 104.97512000),('510321', 3, '', '', NULL, '510321', '', '荣县', '', '', '', 29.44450000, 104.41766000),('510311', 3, '', '', NULL, '510311', '', '沿滩区', '', '', '', 29.27234000, 104.87423000),('510304', 3, '', '', NULL, '510304', '', '大安区', '', '', '', 29.36371000, 104.77390000),('510303', 3, '', '', NULL, '510303', '', '贡井区', '', '', '', 29.34576000, 104.71526000),('510302', 3, '', '', NULL, '510302', '', '自流井区', '', '', '', 29.33740000, 104.77728000),('510185', 3, '', '', NULL, '510185', '', '简阳市', '', '', '', 30.41133000, 104.54733000),('510184', 3, '', '', NULL, '510184', '', '崇州市', '', '', '', 30.63021000, 103.67289000),('510183', 3, '', '', NULL, '510183', '', '邛崃市', '', '', '', 30.41032000, 103.46436000),('510182', 3, '', '', NULL, '510182', '', '彭州市', '', '', '', 30.99018000, 103.95811000),('510181', 3, '', '', NULL, '510181', '', '都江堰市', '', '', '', 30.98837000, 103.64662000),('510132', 3, '', '', NULL, '510132', '', '新津县', '', '', '', 30.41009000, 103.81145000),('510131', 3, '', '', NULL, '510131', '', '蒲江县', '', '', '', 30.19676000, 103.50628000),('510129', 3, '', '', NULL, '510129', '', '大邑县', '', '', '', 30.58759000, 103.52071000),('510121', 3, '', '', NULL, '510121', '', '金堂县', '', '', '', 30.86203000, 104.41205000),('510117', 3, '', '', NULL, '510117', '', '郫都区', '', '', '', 30.79589000, 103.90256000),('510116', 3, '', '', NULL, '510116', '', '双流区', '', '', '', 30.57447000, 103.92377000),('510115', 3, '', '', NULL, '510115', '', '温江区', '', '', '', 30.68144000, 103.85590000),('510114', 3, '', '', NULL, '510114', '', '新都区', '', '', '', 30.82404000, 104.15801000),('510113', 3, '', '', NULL, '510113', '', '青白江区', '', '', '', 30.87849000, 104.25122000),('510112', 3, '', '', NULL, '510112', '', '龙泉驿区', '', '', '', 30.55663000, 104.27471000),('510108', 3, '', '', NULL, '510108', '', '成华区', '', '', '', 30.65984000, 104.10194000),('510107', 3, '', '', NULL, '510107', '', '武侯区', '', '', '', 30.64242000, 104.04311000),('510106', 3, '', '', NULL, '510106', '', '金牛区', '', '', '', 30.69015000, 104.05293000),('510105', 3, '', '', NULL, '510105', '', '青羊区', '', '', '', 30.67485000, 104.06291000),('510104', 3, '', '', NULL, '510104', '', '锦江区', '', '', '', 30.65618000, 104.08329000),('460499', 3, '', '', NULL, '460499', '', '儋州市', '', '', '', 19.52093000, 109.58069000),('460323', 3, '', '', NULL, '460323', '', '中沙群岛的岛礁及其海域', '', '', '', 15.16955800, 117.80176400),('460322', 3, '', '', NULL, '460322', '', '南沙群岛', '', '', '', 7.75266800, 114.22602800),('460321', 3, '', '', NULL, '460321', '', '西沙群岛', '', '', '', 16.33662100, 112.01757500),('460205', 3, '', '', NULL, '460205', '', '崖州区', '', '', '', 18.35753000, 109.17186000),('460204', 3, '', '', NULL, '460204', '', '天涯区', '', '', '', 18.29921000, 109.45263000),('460203', 3, '', '', NULL, '460203', '', '吉阳区', '', '', '', 18.28225000, 109.57841000),('460202', 3, '', '', NULL, '460202', '', '海棠区', '', '', '', 18.40005000, 109.75250000),('460108', 3, '', '', NULL, '460108', '', '美兰区', '', '', '', 20.02864000, 110.36663000),('460107', 3, '', '', NULL, '460107', '', '琼山区', '', '', '', 20.00390000, 110.35432000),('460106', 3, '', '', NULL, '460106', '', '龙华区', '', '', '', 20.02971000, 110.32941000),('460105', 3, '', '', NULL, '460105', '', '秀英区', '', '', '', 20.00760000, 110.29357000),('451481', 3, '', '', NULL, '451481', '', '凭祥市', '', '', '', 22.09439000, 106.76649000),('451425', 3, '', '', NULL, '451425', '', '天等县', '', '', '', 23.08134000, 107.14363000),('451424', 3, '', '', NULL, '451424', '', '大新县', '', '', '', 22.83040000, 107.20124000),('451423', 3, '', '', NULL, '451423', '', '龙州县', '', '', '', 22.34262000, 106.85455000),('451422', 3, '', '', NULL, '451422', '', '宁明县', '', '', '', 22.14016000, 107.07668000),('451421', 3, '', '', NULL, '451421', '', '扶绥县', '', '', '', 22.63497000, 107.90411000),('451402', 3, '', '', NULL, '451402', '', '江州区', '', '', '', 22.40566000, 107.35325000),('451381', 3, '', '', NULL, '451381', '', '合山市', '', '', '', 23.80660000, 108.88611000),('451324', 3, '', '', NULL, '451324', '', '金秀瑶族自治县', '', '', '', 24.13039000, 110.18942000),('451323', 3, '', '', NULL, '451323', '', '武宣县', '', '', '', 23.59414000, 109.66325000),('451322', 3, '', '', NULL, '451322', '', '象州县', '', '', '', 23.97374000, 109.70526000),('451321', 3, '', '', NULL, '451321', '', '忻城县', '', '', '', 24.06617000, 108.66575000),('451302', 3, '', '', NULL, '451302', '', '兴宾区', '', '', '', 23.72742000, 109.23462000),('451229', 3, '', '', NULL, '451229', '', '大化瑶族自治县', '', '', '', 23.73640000, 107.99814000),('451228', 3, '', '', NULL, '451228', '', '都安瑶族自治县', '', '', '', 23.93122000, 108.10555000),('451227', 3, '', '', NULL, '451227', '', '巴马瑶族自治县', '', '', '', 24.14108000, 107.25965000),('451226', 3, '', '', NULL, '451226', '', '环江毛南族自治县', '', '', '', 24.82601000, 108.25830000),('451225', 3, '', '', NULL, '451225', '', '罗城仫佬族自治县', '', '', '', 24.77739000, 108.90465000),('451224', 3, '', '', NULL, '451224', '', '东兰县', '', '', '', 24.51072000, 107.37421000),('451223', 3, '', '', NULL, '451223', '', '凤山县', '', '', '', 24.54699000, 107.04221000),('451222', 3, '', '', NULL, '451222', '', '天峨县', '', '', '', 24.99911000, 107.17372000),('451221', 3, '', '', NULL, '451221', '', '南丹县', '', '', '', 24.97535000, 107.54224000),('451203', 3, '', '', NULL, '451203', '', '宜州区', '', '', '', 24.48513000, 108.63656000),('451202', 3, '', '', NULL, '451202', '', '金城江区', '', '', '', 24.68983000, 108.03719000),('451123', 3, '', '', NULL, '451123', '', '富川瑶族自治县', '', '', '', 24.81433000, 111.27753000),('451122', 3, '', '', NULL, '451122', '', '钟山县', '', '', '', 24.52640000, 111.30278000),('451121', 3, '', '', NULL, '451121', '', '昭平县', '', '', '', 24.16947000, 110.81137000),('451103', 3, '', '', NULL, '451103', '', '平桂区', '', '', '', 24.45296000, 111.47971000),('451102', 3, '', '', NULL, '451102', '', '八步区', '', '', '', 24.41175000, 111.55197000),('451082', 3, '', '', NULL, '451082', '', '平果市', '', '', '', 23.32934000, 107.58988000),('451081', 3, '', '', NULL, '451081', '', '靖西市', '', '', '', 23.13402000, 106.41769000),('451031', 3, '', '', NULL, '451031', '', '隆林各族自治县', '', '', '', 24.77066000, 105.34389000),('451030', 3, '', '', NULL, '451030', '', '西林县', '', '', '', 24.48957000, 105.09383000),('451029', 3, '', '', NULL, '451029', '', '田林县', '', '', '', 24.29438000, 106.22852000),('451028', 3, '', '', NULL, '451028', '', '乐业县', '', '', '', 24.78583000, 106.56163000),('451027', 3, '', '', NULL, '451027', '', '凌云县', '', '', '', 24.34751000, 106.56159000),('451026', 3, '', '', NULL, '451026', '', '那坡县', '', '', '', 23.38710000, 105.83349000),('451024', 3, '', '', NULL, '451024', '', '德保县', '', '', '', 23.32340000, 106.61550000),('451022', 3, '', '', NULL, '451022', '', '田东县', '', '', '', 23.59724000, 107.12608000),('451003', 3, '', '', NULL, '451003', '', '田阳区', '', '', '', 23.73567000, 106.91567000),('451002', 3, '', '', NULL, '451002', '', '右江区', '', '', '', 23.90115000, 106.61897000),('450981', 3, '', '', NULL, '450981', '', '北流市', '', '', '', 22.70837000, 110.35426000),('450924', 3, '', '', NULL, '450924', '', '兴业县', '', '', '', 22.73636000, 109.87517000),('450923', 3, '', '', NULL, '450923', '', '博白县', '', '', '', 22.27306000, 109.97627000),('450922', 3, '', '', NULL, '450922', '', '陆川县', '', '', '', 22.32109000, 110.26413000),('450921', 3, '', '', NULL, '450921', '', '容县', '', '', '', 22.85783000, 110.55786000),('450903', 3, '', '', NULL, '450903', '', '福绵区', '', '', '', 22.57957000, 110.05125000),('450902', 3, '', '', NULL, '450902', '', '玉州区', '', '', '', 22.62811000, 110.15133000),('450881', 3, '', '', NULL, '450881', '', '桂平市', '', '', '', 23.39410000, 110.07901000),('450821', 3, '', '', NULL, '450821', '', '平南县', '', '', '', 23.53919000, 110.39215000),('450804', 3, '', '', NULL, '450804', '', '覃塘区', '', '', '', 23.12718000, 109.45269000),('450803', 3, '', '', NULL, '450803', '', '港南区', '', '', '', 23.07504000, 109.59996000),('450802', 3, '', '', NULL, '450802', '', '港北区', '', '', '', 23.11084000, 109.57339000),('450722', 3, '', '', NULL, '450722', '', '浦北县', '', '', '', 22.27152000, 109.55698000),('450721', 3, '', '', NULL, '450721', '', '灵山县', '', '', '', 22.41650000, 109.29094000),('450703', 3, '', '', NULL, '450703', '', '钦北区', '', '', '', 22.17075000, 108.57324000),('450702', 3, '', '', NULL, '450702', '', '钦南区', '', '', '', 21.93854000, 108.65690000),('450681', 3, '', '', NULL, '450681', '', '东兴市', '', '', '', 21.54792000, 107.97188000),('450621', 3, '', '', NULL, '450621', '', '上思县', '', '', '', 22.15370000, 107.98362000),('450603', 3, '', '', NULL, '450603', '', '防城区', '', '', '', 21.76913000, 108.35342000),('450602', 3, '', '', NULL, '450602', '', '港口区', '', '', '', 21.64348000, 108.38012000),('450521', 3, '', '', NULL, '450521', '', '合浦县', '', '', '', 21.66089000, 109.20725000),('450512', 3, '', '', NULL, '450512', '', '铁山港区', '', '', '', 21.52909000, 109.42160000),('450503', 3, '', '', NULL, '450503', '', '银海区', '', '', '', 21.44872000, 109.13916000),('450502', 3, '', '', NULL, '450502', '', '海城区', '', '', '', 21.47525000, 109.11750000),('450481', 3, '', '', NULL, '450481', '', '岑溪市', '', '', '', 22.91828000, 110.99490000),('450423', 3, '', '', NULL, '450423', '', '蒙山县', '', '', '', 24.19397700, 110.52478900),('450422', 3, '', '', NULL, '450422', '', '藤县', '', '', '', 23.37497000, 110.91497000),('450421', 3, '', '', NULL, '450421', '', '苍梧县', '', '', '', 23.84232000, 111.54488000),('450406', 3, '', '', NULL, '450406', '', '龙圩区', '', '', '', 23.41513000, 111.24752000),('450405', 3, '', '', NULL, '450405', '', '长洲区', '', '', '', 23.48555000, 111.27466000),('450403', 3, '', '', NULL, '450403', '', '万秀区', '', '', '', 23.47303000, 111.32033000),('450381', 3, '', '', NULL, '450381', '', '荔浦市', '', '', '', 24.48887000, 110.39517000),('450332', 3, '', '', NULL, '450332', '', '恭城瑶族自治县', '', '', '', 24.83135000, 110.82835000),('450330', 3, '', '', NULL, '450330', '', '平乐县', '', '', '', 24.63325000, 110.64322000),('450329', 3, '', '', NULL, '450329', '', '资源县', '', '', '', 26.04241000, 110.65259000),('450328', 3, '', '', NULL, '450328', '', '龙胜各族自治县', '', '', '', 25.79809000, 110.01149000),('450327', 3, '', '', NULL, '450327', '', '灌阳县', '', '', '', 25.48932000, 111.16083000),('450326', 3, '', '', NULL, '450326', '', '永福县', '', '', '', 24.98001000, 109.98318000),('450325', 3, '', '', NULL, '450325', '', '兴安县', '', '', '', 25.61169000, 110.67147000),('450324', 3, '', '', NULL, '450324', '', '全州县', '', '', '', 25.92861000, 111.07304000),('450323', 3, '', '', NULL, '450323', '', '灵川县', '', '', '', 25.40970000, 110.32552000),('450321', 3, '', '', NULL, '450321', '', '阳朔县', '', '', '', 24.77843000, 110.49663000),('450312', 3, '', '', NULL, '450312', '', '临桂区', '', '', '', 25.23868000, 110.21240000),('450311', 3, '', '', NULL, '450311', '', '雁山区', '', '', '', 25.06039000, 110.30914000),('450305', 3, '', '', NULL, '450305', '', '七星区', '', '', '', 25.25235000, 110.31771000),('450304', 3, '', '', NULL, '450304', '', '象山区', '', '', '', 25.26159000, 110.28110000),('450303', 3, '', '', NULL, '450303', '', '叠彩区', '', '', '', 25.31402000, 110.30188000),('450302', 3, '', '', NULL, '450302', '', '秀峰区', '', '', '', 25.28131000, 110.28903000),('450226', 3, '', '', NULL, '450226', '', '三江侗族自治县', '', '', '', 25.78314000, 109.60788000),('450225', 3, '', '', NULL, '450225', '', '融水苗族自治县', '', '', '', 25.06629000, 109.25636000),('450224', 3, '', '', NULL, '450224', '', '融安县', '', '', '', 25.22437300, 109.39782000),('450223', 3, '', '', NULL, '450223', '', '鹿寨县', '', '', '', 24.47308000, 109.75179000),('450222', 3, '', '', NULL, '450222', '', '柳城县', '', '', '', 24.65058000, 109.24468000),('450206', 3, '', '', NULL, '450206', '', '柳江区', '', '', '', 24.25465000, 109.32672000),('450205', 3, '', '', NULL, '450205', '', '柳北区', '', '', '', 24.36259000, 109.40209000),('450204', 3, '', '', NULL, '450204', '', '柳南区', '', '', '', 24.33599000, 109.38590000),('450203', 3, '', '', NULL, '450203', '', '鱼峰区', '', '', '', 24.28154000, 109.44726000),('450202', 3, '', '', NULL, '450202', '', '城中区', '', '', '', 24.33941000, 109.44626000),('450127', 3, '', '', NULL, '450127', '', '横县', '', '', '', 22.67999000, 109.26147000),('450126', 3, '', '', NULL, '450126', '', '宾阳县', '', '', '', 23.21768000, 108.81030000),('450125', 3, '', '', NULL, '450125', '', '上林县', '', '', '', 23.43205000, 108.60506000),('450124', 3, '', '', NULL, '450124', '', '马山县', '', '', '', 23.70844000, 108.17827000),('450123', 3, '', '', NULL, '450123', '', '隆安县', '', '', '', 23.16589000, 107.69610000),('450110', 3, '', '', NULL, '450110', '', '武鸣区', '', '', '', 23.15866000, 108.27461000),('450109', 3, '', '', NULL, '450109', '', '邕宁区', '', '', '', 22.75837000, 108.48737000),('450108', 3, '', '', NULL, '450108', '', '良庆区', '', '', '', 22.75619000, 108.32082000),('450107', 3, '', '', NULL, '450107', '', '西乡塘区', '', '', '', 22.83393000, 108.31343000),('450105', 3, '', '', NULL, '450105', '', '江南区', '', '', '', 22.78121000, 108.27331000),('450103', 3, '', '', NULL, '450103', '', '青秀区', '', '', '', 22.78658000, 108.49693000),('450102', 3, '', '', NULL, '450102', '', '兴宁区', '', '', '', 22.85429000, 108.36836000),('445381', 3, '', '', NULL, '445381', '', '罗定市', '', '', '', 22.76830000, 111.57004000),('445322', 3, '', '', NULL, '445322', '', '郁南县', '', '', '', 23.23464000, 111.53536000),('445321', 3, '', '', NULL, '445321', '', '新兴县', '', '', '', 22.69573000, 112.22536000),('445303', 3, '', '', NULL, '445303', '', '云安区', '', '', '', 23.07101000, 112.00324000),('445302', 3, '', '', NULL, '445302', '', '云城区', '', '', '', 22.92797000, 112.04373000),('445281', 3, '', '', NULL, '445281', '', '普宁市', '', '', '', 23.29734000, 116.16573000),('445224', 3, '', '', NULL, '445224', '', '惠来县', '', '', '', 23.03321000, 116.29511000),('445222', 3, '', '', NULL, '445222', '', '揭西县', '', '', '', 23.43141000, 115.84189000),('445203', 3, '', '', NULL, '445203', '', '揭东区', '', '', '', 23.56606000, 116.41211000),('445202', 3, '', '', NULL, '445202', '', '榕城区', '', '', '', 23.52486000, 116.36692000),('445122', 3, '', '', NULL, '445122', '', '饶平县', '', '', '', 23.66412000, 117.00390000),('445103', 3, '', '', NULL, '445103', '', '潮安区', '', '', '', 23.46244000, 116.67809000),('445102', 3, '', '', NULL, '445102', '', '湘桥区', '', '', '', 23.67441000, 116.62834000),('442099', 3, '', '', NULL, '442099', '', '中山市', '', '', '', 22.51595000, 113.39260000),('441999', 3, '', '', NULL, '441999', '', '东莞市', '', '', '', 23.02067000, 113.75179000),('441882', 3, '', '', NULL, '441882', '', '连州市', '', '', '', 24.77998000, 112.37677000),('441881', 3, '', '', NULL, '441881', '', '英德市', '', '', '', 24.18572000, 113.41505000),('441826', 3, '', '', NULL, '441826', '', '连南瑶族自治县', '', '', '', 24.72540000, 112.28698000),('441825', 3, '', '', NULL, '441825', '', '连山壮族瑶族自治县', '', '', '', 24.57036000, 112.09348000),('441823', 3, '', '', NULL, '441823', '', '阳山县', '', '', '', 24.46500000, 112.64132000),('441821', 3, '', '', NULL, '441821', '', '佛冈县', '', '', '', 23.87921000, 113.53172000),('441803', 3, '', '', NULL, '441803', '', '清新区', '', '', '', 23.73474000, 113.01658000),('441802', 3, '', '', NULL, '441802', '', '清城区', '', '', '', 23.69795000, 113.06269000),('441781', 3, '', '', NULL, '441781', '', '阳春市', '', '', '', 22.17030000, 111.79153000),('441721', 3, '', '', NULL, '441721', '', '阳西县', '', '', '', 21.75229000, 111.61791000),('441704', 3, '', '', NULL, '441704', '', '阳东区', '', '', '', 21.86829000, 112.00670000),('441702', 3, '', '', NULL, '441702', '', '江城区', '', '', '', 21.86182000, 111.95516000),('441625', 3, '', '', NULL, '441625', '', '东源县', '', '', '', 23.78856000, 114.74625000),('441624', 3, '', '', NULL, '441624', '', '和平县', '', '', '', 24.44201000, 114.93872000),('441623', 3, '', '', NULL, '441623', '', '连平县', '', '', '', 24.36956000, 114.48865000),('441622', 3, '', '', NULL, '441622', '', '龙川县', '', '', '', 24.10014000, 115.25984000),('441621', 3, '', '', NULL, '441621', '', '紫金县', '', '', '', 23.63532000, 115.18398000),('441602', 3, '', '', NULL, '441602', '', '源城区', '', '', '', 23.73417000, 114.70246000),('441581', 3, '', '', NULL, '441581', '', '陆丰市', '', '', '', 22.94511000, 115.64462000),('441523', 3, '', '', NULL, '441523', '', '陆河县', '', '', '', 23.30148000, 115.65996000),('441521', 3, '', '', NULL, '441521', '', '海丰县', '', '', '', 22.96657000, 115.32341000),('441502', 3, '', '', NULL, '441502', '', '城区', '', '', '', 22.77870000, 115.36502000),('441481', 3, '', '', NULL, '441481', '', '兴宁市', '', '', '', 24.13650000, 115.73119000),('441427', 3, '', '', NULL, '441427', '', '蕉岭县', '', '', '', 24.65861000, 116.17123000),('441426', 3, '', '', NULL, '441426', '', '平远县', '', '', '', 24.56632000, 115.89112000),('441424', 3, '', '', NULL, '441424', '', '五华县', '', '', '', 23.93254000, 115.77609000),('441423', 3, '', '', NULL, '441423', '', '丰顺县', '', '', '', 23.73945000, 116.18225000),('441422', 3, '', '', NULL, '441422', '', '大埔县', '', '', '', 24.34792000, 116.69520000),('441403', 3, '', '', NULL, '441403', '', '梅县区', '', '', '', 24.26539000, 116.08245000),('441402', 3, '', '', NULL, '441402', '', '梅江区', '', '', '', 24.30996000, 116.11699000),('441324', 3, '', '', NULL, '441324', '', '龙门县', '', '', '', 23.72763000, 114.25486000),('441323', 3, '', '', NULL, '441323', '', '惠东县', '', '', '', 22.98486000, 114.71999000),('441322', 3, '', '', NULL, '441322', '', '博罗县', '', '', '', 23.17315000, 114.28973000),('441303', 3, '', '', NULL, '441303', '', '惠阳区', '', '', '', 22.78851000, 114.45646000),('441302', 3, '', '', NULL, '441302', '', '惠城区', '', '', '', 23.08464000, 114.38257000),('441284', 3, '', '', NULL, '441284', '', '四会市', '', '', '', 23.32743000, 112.73404000),('441226', 3, '', '', NULL, '441226', '', '德庆县', '', '', '', 23.14376000, 111.78559000),('441225', 3, '', '', NULL, '441225', '', '封开县', '', '', '', 23.42448000, 111.51196000),('441224', 3, '', '', NULL, '441224', '', '怀集县', '', '', '', 23.91188000, 112.18454000),('441223', 3, '', '', NULL, '441223', '', '广宁县', '', '', '', 23.63493000, 112.44112000),('441204', 3, '', '', NULL, '441204', '', '高要区', '', '', '', 23.02581000, 112.45839000),('441203', 3, '', '', NULL, '441203', '', '鼎湖区', '', '', '', 23.15815000, 112.56706000),('441202', 3, '', '', NULL, '441202', '', '端州区', '', '', '', 23.05196000, 112.48461000),('440983', 3, '', '', NULL, '440983', '', '信宜市', '', '', '', 22.35429000, 110.94710000),('440982', 3, '', '', NULL, '440982', '', '化州市', '', '', '', 21.66397000, 110.63954000),('440981', 3, '', '', NULL, '440981', '', '高州市', '', '', '', 21.91812000, 110.85338000),('440904', 3, '', '', NULL, '440904', '', '电白区', '', '', '', 21.51428000, 111.01636000),('440902', 3, '', '', NULL, '440902', '', '茂南区', '', '', '', 21.64109000, 110.91879000),('440883', 3, '', '', NULL, '440883', '', '吴川市', '', '', '', 21.44182000, 110.77824000),('440882', 3, '', '', NULL, '440882', '', '雷州市', '', '', '', 20.91444000, 110.09651000),('440881', 3, '', '', NULL, '440881', '', '廉江市', '', '', '', 21.60962000, 110.28625000),('440825', 3, '', '', NULL, '440825', '', '徐闻县', '', '', '', 20.32652000, 110.17502000),('440823', 3, '', '', NULL, '440823', '', '遂溪县', '', '', '', 21.37708000, 110.25006000),('440811', 3, '', '', NULL, '440811', '', '麻章区', '', '', '', 21.26331000, 110.33427000),('440804', 3, '', '', NULL, '440804', '', '坡头区', '', '', '', 21.24475000, 110.45550000),('440803', 3, '', '', NULL, '440803', '', '霞山区', '', '', '', 21.19238900, 110.39766300),('440802', 3, '', '', NULL, '440802', '', '赤坎区', '', '', '', 21.26624000, 110.36534000),('440785', 3, '', '', NULL, '440785', '', '恩平市', '', '', '', 22.18294000, 112.30532000),('440784', 3, '', '', NULL, '440784', '', '鹤山市', '', '', '', 22.76530000, 112.96436000),('440783', 3, '', '', NULL, '440783', '', '开平市', '', '', '', 22.37702000, 112.69828000),('440781', 3, '', '', NULL, '440781', '', '台山市', '', '', '', 22.25156000, 112.79390000),('440705', 3, '', '', NULL, '440705', '', '新会区', '', '', '', 22.45877000, 113.03231000),('440704', 3, '', '', NULL, '440704', '', '江海区', '', '', '', 22.56028000, 113.11103000),('440703', 3, '', '', NULL, '440703', '', '蓬江区', '', '', '', 22.59514000, 113.07845000),('440608', 3, '', '', NULL, '440608', '', '高明区', '', '', '', 22.90026000, 112.89262000),('440607', 3, '', '', NULL, '440607', '', '三水区', '', '', '', 23.15573700, 112.89658100),('440606', 3, '', '', NULL, '440606', '', '顺德区', '', '', '', 22.80375100, 113.29371900),('440605', 3, '', '', NULL, '440605', '', '南海区', '', '', '', 23.02882000, 113.14278000),('440604', 3, '', '', NULL, '440604', '', '禅城区', '', '', '', 23.00944000, 113.12249000),('440523', 3, '', '', NULL, '440523', '', '南澳县', '', '', '', 23.42178000, 117.02348000),('440515', 3, '', '', NULL, '440515', '', '澄海区', '', '', '', 23.46613000, 116.75608000),('440514', 3, '', '', NULL, '440514', '', '潮南区', '', '', '', 23.25029000, 116.43310000),('440513', 3, '', '', NULL, '440513', '', '潮阳区', '', '', '', 23.26489000, 116.60157000),('440512', 3, '', '', NULL, '440512', '', '濠江区', '', '', '', 23.28592000, 116.72664000),('440511', 3, '', '', NULL, '440511', '', '金平区', '', '', '', 23.36525000, 116.70540000),('440507', 3, '', '', NULL, '440507', '', '龙湖区', '', '', '', 23.37246000, 116.71677000),('440499', 3, '', '', NULL, '440499', '', '香洲区澳门大学横琴校区(由澳门特别行政区实施管辖)', '', '', '', 22.12400000, 113.55059000),('440404', 3, '', '', NULL, '440404', '', '金湾区', '', '', '', 22.14589000, 113.36420000),('440403', 3, '', '', NULL, '440403', '', '斗门区', '', '', '', 22.20907000, 113.29673000),('440402', 3, '', '', NULL, '440402', '', '香洲区', '', '', '', 22.26666000, 113.54342000),('440311', 3, '', '', NULL, '440311', '', '光明区', '', '', '', 22.74894000, 113.93588000),('440310', 3, '', '', NULL, '440310', '', '坪山区', '', '', '', 22.69084000, 114.34632000),('440309', 3, '', '', NULL, '440309', '', '龙华区', '', '', '', 22.72174000, 114.06031000),('440308', 3, '', '', NULL, '440308', '', '盐田区', '', '', '', 22.55700000, 114.23679000),('440307', 3, '', '', NULL, '440307', '', '龙岗区', '', '', '', 22.71991000, 114.24779000),('440306', 3, '', '', NULL, '440306', '', '宝安区', '', '', '', 22.55329000, 113.88308000),('440305', 3, '', '', NULL, '440305', '', '南山区', '', '', '', 22.53332000, 113.93041000),('440304', 3, '', '', NULL, '440304', '', '福田区', '', '', '', 22.52291000, 114.05454000),('440303', 3, '', '', NULL, '440303', '', '罗湖区', '', '', '', 22.54836000, 114.13166000),('440282', 3, '', '', NULL, '440282', '', '南雄市', '', '', '', 25.11962000, 114.31084000),('440281', 3, '', '', NULL, '440281', '', '乐昌市', '', '', '', 25.13014000, 113.34746000),('440233', 3, '', '', NULL, '440233', '', '新丰县', '', '', '', 24.05959000, 114.20689000),('440232', 3, '', '', NULL, '440232', '', '乳源瑶族自治县', '', '', '', 24.77591000, 113.27596000),('440229', 3, '', '', NULL, '440229', '', '翁源县', '', '', '', 24.35020000, 114.13033000),('440224', 3, '', '', NULL, '440224', '', '仁化县', '', '', '', 25.08566000, 113.74918000),('440222', 3, '', '', NULL, '440222', '', '始兴县', '', '', '', 24.95269000, 114.06206000),('440205', 3, '', '', NULL, '440205', '', '曲江区', '', '', '', 24.68260000, 113.60458000),('440204', 3, '', '', NULL, '440204', '', '浈江区', '', '', '', 24.80446000, 113.61095000),('440203', 3, '', '', NULL, '440203', '', '武江区', '', '', '', 24.79268000, 113.58771000),('440118', 3, '', '', NULL, '440118', '', '增城区', '', '', '', 23.26093000, 113.81090000),('440117', 3, '', '', NULL, '440117', '', '从化区', '', '', '', 23.54835000, 113.58646000),('440115', 3, '', '', NULL, '440115', '', '南沙区', '', '', '', 22.80169000, 113.52497000),('440114', 3, '', '', NULL, '440114', '', '花都区', '', '', '', 23.40327700, 113.21847800),('440113', 3, '', '', NULL, '440113', '', '番禺区', '', '', '', 22.93772000, 113.38424000),('440112', 3, '', '', NULL, '440112', '', '黄埔区', '', '', '', 23.18139000, 113.48067000),('440111', 3, '', '', NULL, '440111', '', '白云区', '', '', '', 23.15792000, 113.27324000),('440106', 3, '', '', NULL, '440106', '', '天河区', '', '', '', 23.12463000, 113.36199000),('440105', 3, '', '', NULL, '440105', '', '海珠区', '', '', '', 23.08331000, 113.31720000),('440104', 3, '', '', NULL, '440104', '', '越秀区', '', '', '', 23.12901000, 113.26680000),('440103', 3, '', '', NULL, '440103', '', '荔湾区', '', '', '', 23.12586000, 113.24428000),('433130', 3, '', '', NULL, '433130', '', '龙山县', '', '', '', 29.45790000, 109.44387000),('433127', 3, '', '', NULL, '433127', '', '永顺县', '', '', '', 29.00515000, 109.84807000),('433126', 3, '', '', NULL, '433126', '', '古丈县', '', '', '', 28.61711000, 109.95085000),('433125', 3, '', '', NULL, '433125', '', '保靖县', '', '', '', 28.70001000, 109.66054000),('433124', 3, '', '', NULL, '433124', '', '花垣县', '', '', '', 28.57211000, 109.48224000),('433123', 3, '', '', NULL, '433123', '', '凤凰县', '', '', '', 27.94843000, 109.59832000),('433122', 3, '', '', NULL, '433122', '', '泸溪县', '', '', '', 28.21639000, 110.21965000),('433101', 3, '', '', NULL, '433101', '', '吉首市', '', '', '', 28.26244000, 109.69811000),('431382', 3, '', '', NULL, '431382', '', '涟源市', '', '', '', 27.69271000, 111.66446000),('431381', 3, '', '', NULL, '431381', '', '冷水江市', '', '', '', 27.68615000, 111.43525000),('431322', 3, '', '', NULL, '431322', '', '新化县', '', '', '', 27.72663000, 111.32743000),('431321', 3, '', '', NULL, '431321', '', '双峰县', '', '', '', 27.45702000, 112.19392000),('431302', 3, '', '', NULL, '431302', '', '娄星区', '', '', '', 27.72978000, 112.00170000),('431281', 3, '', '', NULL, '431281', '', '洪江市', '', '', '', 27.20925000, 109.83655000),('431230', 3, '', '', NULL, '431230', '', '通道侗族自治县', '', '', '', 26.15794000, 109.78449000),('431229', 3, '', '', NULL, '431229', '', '靖州苗族侗族自治县', '', '', '', 26.57514000, 109.69627000),('431228', 3, '', '', NULL, '431228', '', '芷江侗族自治县', '', '', '', 27.44328000, 109.68519000),('431227', 3, '', '', NULL, '431227', '', '新晃侗族自治县', '', '', '', 27.35264000, 109.17492000),('431226', 3, '', '', NULL, '431226', '', '麻阳苗族自治县', '', '', '', 27.86555000, 109.80256000),('431225', 3, '', '', NULL, '431225', '', '会同县', '', '', '', 26.88718000, 109.73570000),('431224', 3, '', '', NULL, '431224', '', '溆浦县', '', '', '', 27.90834000, 110.59486000),('431223', 3, '', '', NULL, '431223', '', '辰溪县', '', '', '', 28.00652000, 110.18368000),('431222', 3, '', '', NULL, '431222', '', '沅陵县', '', '', '', 28.45277000, 110.39388000),('431221', 3, '', '', NULL, '431221', '', '中方县', '', '', '', 27.43992000, 109.94501000),('431202', 3, '', '', NULL, '431202', '', '鹤城区', '', '', '', 27.57771000, 110.04098000),('431129', 3, '', '', NULL, '431129', '', '江华瑶族自治县', '', '', '', 25.18536000, 111.57952000),('431128', 3, '', '', NULL, '431128', '', '新田县', '', '', '', 25.90430000, 112.20329000),('431127', 3, '', '', NULL, '431127', '', '蓝山县', '', '', '', 25.36943000, 112.19678000),('431126', 3, '', '', NULL, '431126', '', '宁远县', '', '', '', 25.56919000, 111.94445000),('431125', 3, '', '', NULL, '431125', '', '江永县', '', '', '', 25.27353000, 111.34385000),('431124', 3, '', '', NULL, '431124', '', '道县', '', '', '', 25.52753000, 111.60007000),('431123', 3, '', '', NULL, '431123', '', '双牌县', '', '', '', 25.96218000, 111.66031000),('431122', 3, '', '', NULL, '431122', '', '东安县', '', '', '', 26.39206000, 111.31644000),('431121', 3, '', '', NULL, '431121', '', '祁阳县', '', '', '', 26.58012000, 111.84015000),('431103', 3, '', '', NULL, '431103', '', '冷水滩区', '', '', '', 26.46098000, 111.59244000),('431102', 3, '', '', NULL, '431102', '', '零陵区', '', '', '', 26.22255000, 111.63112000),('431081', 3, '', '', NULL, '431081', '', '资兴市', '', '', '', 25.97619000, 113.23601000),('431028', 3, '', '', NULL, '431028', '', '安仁县', '', '', '', 26.70942000, 113.26948000),('431027', 3, '', '', NULL, '431027', '', '桂东县', '', '', '', 26.07752000, 113.94454000),('431026', 3, '', '', NULL, '431026', '', '汝城县', '', '', '', 25.55036000, 113.68493000),('431025', 3, '', '', NULL, '431025', '', '临武县', '', '', '', 25.27596000, 112.56295000),('431024', 3, '', '', NULL, '431024', '', '嘉禾县', '', '', '', 25.58767000, 112.36872000),('431023', 3, '', '', NULL, '431023', '', '永兴县', '', '', '', 26.12720000, 113.11659000),('431022', 3, '', '', NULL, '431022', '', '宜章县', '', '', '', 25.39957000, 112.94887000),('431021', 3, '', '', NULL, '431021', '', '桂阳县', '', '', '', 25.75410000, 112.73368000),('431003', 3, '', '', NULL, '431003', '', '苏仙区', '', '', '', 25.80040000, 113.04236000),('431002', 3, '', '', NULL, '431002', '', '北湖区', '', '', '', 25.78398000, 113.01101000),('430981', 3, '', '', NULL, '430981', '', '沅江市', '', '', '', 28.84402000, 112.35468000),('430923', 3, '', '', NULL, '430923', '', '安化县', '', '', '', 28.37428000, 111.21303000),('430922', 3, '', '', NULL, '430922', '', '桃江县', '', '', '', 28.51819000, 112.15571000),('430921', 3, '', '', NULL, '430921', '', '南县', '', '', '', 29.36162000, 112.39636000),('430903', 3, '', '', NULL, '430903', '', '赫山区', '', '', '', 28.57930000, 112.37409000),('430902', 3, '', '', NULL, '430902', '', '资阳区', '', '', '', 28.59100000, 112.32426000),('430822', 3, '', '', NULL, '430822', '', '桑植县', '', '', '', 29.39971000, 110.16428000),('430821', 3, '', '', NULL, '430821', '', '慈利县', '', '', '', 29.42970000, 111.13921000),('430811', 3, '', '', NULL, '430811', '', '武陵源区', '', '', '', 29.34589000, 110.55042000),('430802', 3, '', '', NULL, '430802', '', '永定区', '', '', '', 29.11983000, 110.53737000),('430781', 3, '', '', NULL, '430781', '', '津市市', '', '', '', 29.60543000, 111.87741000),('430726', 3, '', '', NULL, '430726', '', '石门县', '', '', '', 29.58413000, 111.37982000),('430725', 3, '', '', NULL, '430725', '', '桃源县', '', '', '', 28.90259000, 111.48893000),('430724', 3, '', '', NULL, '430724', '', '临澧县', '', '', '', 29.44098000, 111.64735000),('430723', 3, '', '', NULL, '430723', '', '澧县', '', '', '', 29.63318000, 111.75868000),('430722', 3, '', '', NULL, '430722', '', '汉寿县', '', '', '', 28.90549000, 111.97043000),('430721', 3, '', '', NULL, '430721', '', '安乡县', '', '', '', 29.41142000, 112.17096000),('430703', 3, '', '', NULL, '430703', '', '鼎城区', '', '', '', 29.01871000, 111.68072000),('430702', 3, '', '', NULL, '430702', '', '武陵区', '', '', '', 29.05397000, 111.68396000),('430682', 3, '', '', NULL, '430682', '', '临湘市', '', '', '', 29.47684000, 113.45058000),('430681', 3, '', '', NULL, '430681', '', '汨罗市', '', '', '', 28.80642000, 113.06711000),('430626', 3, '', '', NULL, '430626', '', '平江县', '', '', '', 28.70203000, 113.58134000),('430624', 3, '', '', NULL, '430624', '', '湘阴县', '', '', '', 28.68925000, 112.90917000),('430623', 3, '', '', NULL, '430623', '', '华容县', '', '', '', 29.53015000, 112.53946000),('430621', 3, '', '', NULL, '430621', '', '岳阳县', '', '', '', 29.14415000, 113.11635000),('430611', 3, '', '', NULL, '430611', '', '君山区', '', '', '', 29.46135000, 113.00651000),('430603', 3, '', '', NULL, '430603', '', '云溪区', '', '', '', 29.47358000, 113.27239000),('430602', 3, '', '', NULL, '430602', '', '岳阳楼区', '', '', '', 29.37197000, 113.12931000),('430582', 3, '', '', NULL, '430582', '', '邵东市', '', '', '', 27.25844000, 111.74446000),('430581', 3, '', '', NULL, '430581', '', '武冈市', '', '', '', 26.72659000, 110.63138000),('430529', 3, '', '', NULL, '430529', '', '城步苗族自治县', '', '', '', 26.39156000, 110.32285000),('430528', 3, '', '', NULL, '430528', '', '新宁县', '', '', '', 26.43346000, 110.85674000),('430527', 3, '', '', NULL, '430527', '', '绥宁县', '', '', '', 26.58201000, 110.15568000),('430525', 3, '', '', NULL, '430525', '', '洞口县', '', '', '', 27.06038000, 110.57583000),('430524', 3, '', '', NULL, '430524', '', '隆回县', '', '', '', 27.11402000, 111.03249000),('430523', 3, '', '', NULL, '430523', '', '邵阳县', '', '', '', 26.99078000, 111.27382000),('430522', 3, '', '', NULL, '430522', '', '新邵县', '', '', '', 27.32091000, 111.45900000),('430511', 3, '', '', NULL, '430511', '', '北塔区', '', '', '', 27.24566000, 111.45207000),('430503', 3, '', '', NULL, '430503', '', '大祥区', '', '', '', 27.22130000, 111.43888000),('430502', 3, '', '', NULL, '430502', '', '双清区', '', '', '', 27.23285000, 111.49674000),('430482', 3, '', '', NULL, '430482', '', '常宁市', '', '', '', 26.42093000, 112.39992000),('430481', 3, '', '', NULL, '430481', '', '耒阳市', '', '', '', 26.42243000, 112.85988000),('430426', 3, '', '', NULL, '430426', '', '祁东县', '', '', '', 26.79965000, 112.09043000),('430424', 3, '', '', NULL, '430424', '', '衡东县', '', '', '', 27.08116000, 112.95325000),('430423', 3, '', '', NULL, '430423', '', '衡山县', '', '', '', 27.23022000, 112.86831000),('430422', 3, '', '', NULL, '430422', '', '衡南县', '', '', '', 26.73831000, 112.67792000),('430421', 3, '', '', NULL, '430421', '', '衡阳县', '', '', '', 26.96977000, 112.37066000),('430412', 3, '', '', NULL, '430412', '', '南岳区', '', '', '', 27.23258000, 112.73876000),('430408', 3, '', '', NULL, '430408', '', '蒸湘区', '', '', '', 26.91259000, 112.56755000),('430407', 3, '', '', NULL, '430407', '', '石鼓区', '', '', '', 26.94343000, 112.59798000),('430406', 3, '', '', NULL, '430406', '', '雁峰区', '', '', '', 26.88864000, 112.61669000),('430405', 3, '', '', NULL, '430405', '', '珠晖区', '', '', '', 26.89456000, 112.62039000),('430382', 3, '', '', NULL, '430382', '', '韶山市', '', '', '', 27.91507000, 112.52660000),('430381', 3, '', '', NULL, '430381', '', '湘乡市', '', '', '', 27.73410000, 112.53504000),('430321', 3, '', '', NULL, '430321', '', '湘潭县', '', '', '', 27.77904000, 112.95099000),('430304', 3, '', '', NULL, '430304', '', '岳塘区', '', '', '', 27.87305000, 112.97038000),('430302', 3, '', '', NULL, '430302', '', '雨湖区', '', '', '', 27.85632000, 112.90737000),('430281', 3, '', '', NULL, '430281', '', '醴陵市', '', '', '', 27.64617000, 113.49703000),('430225', 3, '', '', NULL, '430225', '', '炎陵县', '', '', '', 26.48979000, 113.77258000),('430224', 3, '', '', NULL, '430224', '', '茶陵县', '', '', '', 26.77745000, 113.53927000),('430223', 3, '', '', NULL, '430223', '', '攸县', '', '', '', 27.00023000, 113.34569000),('430212', 3, '', '', NULL, '430212', '', '渌口区', '', '', '', 27.69938000, 113.14398000),('430211', 3, '', '', NULL, '430211', '', '天元区', '', '', '', 27.82681000, 113.08231000),('430204', 3, '', '', NULL, '430204', '', '石峰区', '', '', '', 27.87558000, 113.11784000),('430203', 3, '', '', NULL, '430203', '', '芦淞区', '', '', '', 27.78499000, 113.15230000),('430202', 3, '', '', NULL, '430202', '', '荷塘区', '', '', '', 27.85635000, 113.17421900),('430182', 3, '', '', NULL, '430182', '', '宁乡市', '', '', '', 28.27741000, 112.55183000),('430181', 3, '', '', NULL, '430181', '', '浏阳市', '', '', '', 28.16378000, 113.64317000),('430121', 3, '', '', NULL, '430121', '', '长沙县', '', '', '', 28.24595000, 113.08093000),('430112', 3, '', '', NULL, '430112', '', '望城区', '', '', '', 28.36121000, 112.81790000),('430111', 3, '', '', NULL, '430111', '', '雨花区', '', '', '', 28.13551000, 113.03555000),('430105', 3, '', '', NULL, '430105', '', '开福区', '', '', '', 28.25591000, 112.98626000),('430104', 3, '', '', NULL, '430104', '', '岳麓区', '', '', '', 28.23529000, 112.93134000),('430103', 3, '', '', NULL, '430103', '', '天心区', '', '', '', 28.11426000, 112.98983000),('430102', 3, '', '', NULL, '430102', '', '芙蓉区', '', '', '', 28.20279000, 113.03539000),('422828', 3, '', '', NULL, '422828', '', '鹤峰县', '', '', '', 29.89084000, 110.03498000),('422827', 3, '', '', NULL, '422827', '', '来凤县', '', '', '', 29.49391000, 109.40700000),('422826', 3, '', '', NULL, '422826', '', '咸丰县', '', '', '', 29.66521000, 109.13963000),('422825', 3, '', '', NULL, '422825', '', '宣恩县', '', '', '', 29.98715000, 109.49185000),('422823', 3, '', '', NULL, '422823', '', '巴东县', '', '', '', 31.04233000, 110.34075000),('422822', 3, '', '', NULL, '422822', '', '建始县', '', '', '', 30.60213000, 109.72213000),('422802', 3, '', '', NULL, '422802', '', '利川市', '', '', '', 30.29100000, 108.93655000),('422801', 3, '', '', NULL, '422801', '', '恩施市', '', '', '', 30.29504000, 109.47918000),('421381', 3, '', '', NULL, '421381', '', '广水市', '', '', '', 31.61686000, 113.82600000),('421321', 3, '', '', NULL, '421321', '', '随县', '', '', '', 31.85380000, 113.29995000),('421303', 3, '', '', NULL, '421303', '', '曾都区', '', '', '', 31.71615000, 113.37120000),('421281', 3, '', '', NULL, '421281', '', '赤壁市', '', '', '', 29.72476000, 113.90054000),('421224', 3, '', '', NULL, '421224', '', '通山县', '', '', '', 29.60638000, 114.48276000),('421223', 3, '', '', NULL, '421223', '', '崇阳县', '', '', '', 29.55537000, 114.03892000),('421222', 3, '', '', NULL, '421222', '', '通城县', '', '', '', 29.24535000, 113.81702000),('421221', 3, '', '', NULL, '421221', '', '嘉鱼县', '', '', '', 29.97057000, 113.93932000),('421202', 3, '', '', NULL, '421202', '', '咸安区', '', '', '', 29.85251000, 114.29840000),('421182', 3, '', '', NULL, '421182', '', '武穴市', '', '', '', 29.84433000, 115.56130000),('421181', 3, '', '', NULL, '421181', '', '麻城市', '', '', '', 31.17333000, 115.00869000),('421127', 3, '', '', NULL, '421127', '', '黄梅县', '', '', '', 30.07037000, 115.94432000),('421126', 3, '', '', NULL, '421126', '', '蕲春县', '', '', '', 30.22617000, 115.43621000),('421125', 3, '', '', NULL, '421125', '', '浠水县', '', '', '', 30.45184000, 115.26551000),('421124', 3, '', '', NULL, '421124', '', '英山县', '', '', '', 30.73518000, 115.68143000),('421123', 3, '', '', NULL, '421123', '', '罗田县', '', '', '', 30.78399000, 115.39927000),('421122', 3, '', '', NULL, '421122', '', '红安县', '', '', '', 31.28810000, 114.61813000),('421121', 3, '', '', NULL, '421121', '', '团风县', '', '', '', 30.64362000, 114.87232000),('421102', 3, '', '', NULL, '421102', '', '黄州区', '', '', '', 30.43472000, 114.88005000),('421087', 3, '', '', NULL, '421087', '', '松滋市', '', '', '', 30.16960000, 111.76743000),('421083', 3, '', '', NULL, '421083', '', '洪湖市', '', '', '', 29.82756000, 113.47775000),('421081', 3, '', '', NULL, '421081', '', '石首市', '', '', '', 29.72085000, 112.42550000),('421024', 3, '', '', NULL, '421024', '', '江陵县', '', '', '', 30.04184000, 112.42470000),('421023', 3, '', '', NULL, '421023', '', '监利县', '', '', '', 29.83928000, 112.90492000),('421022', 3, '', '', NULL, '421022', '', '公安县', '', '', '', 30.05830000, 112.22948000),('421003', 3, '', '', NULL, '421003', '', '荆州区', '', '', '', 30.35269000, 112.19016000),('421002', 3, '', '', NULL, '421002', '', '沙市区', '', '', '', 30.31098000, 112.25494000),('420984', 3, '', '', NULL, '420984', '', '汉川市', '', '', '', 30.66122000, 113.83907000),('420982', 3, '', '', NULL, '420982', '', '安陆市', '', '', '', 31.25554000, 113.68913000),('420981', 3, '', '', NULL, '420981', '', '应城市', '', '', '', 30.92838000, 113.57292000),('420923', 3, '', '', NULL, '420923', '', '云梦县', '', '', '', 31.02103000, 113.75331000),('420922', 3, '', '', NULL, '420922', '', '大悟县', '', '', '', 31.56096000, 114.12694000),('420921', 3, '', '', NULL, '420921', '', '孝昌县', '', '', '', 31.25803000, 113.99802000),('420902', 3, '', '', NULL, '420902', '', '孝南区', '', '', '', 30.91677000, 113.91049000),('420882', 3, '', '', NULL, '420882', '', '京山市', '', '', '', 31.01848000, 113.11953000),('420881', 3, '', '', NULL, '420881', '', '钟祥市', '', '', '', 31.16797000, 112.58817000),('420822', 3, '', '', NULL, '420822', '', '沙洋县', '', '', '', 30.70918000, 112.58854000),('420804', 3, '', '', NULL, '420804', '', '掇刀区', '', '', '', 30.97303000, 112.20715000),('420802', 3, '', '', NULL, '420802', '', '东宝区', '', '', '', 31.05193000, 112.20158000),('420704', 3, '', '', NULL, '420704', '', '鄂城区', '', '', '', 30.40057000, 114.89171000),('420703', 3, '', '', NULL, '420703', '', '华容区', '', '', '', 30.53434000, 114.72983000),('420702', 3, '', '', NULL, '420702', '', '梁子湖区', '', '', '', 30.09996000, 114.68456000),('420684', 3, '', '', NULL, '420684', '', '宜城市', '', '', '', 31.71976000, 112.25776000),('420683', 3, '', '', NULL, '420683', '', '枣阳市', '', '', '', 32.12836000, 112.77398000),('420682', 3, '', '', NULL, '420682', '', '老河口市', '', '', '', 32.38671000, 111.67507000),('420626', 3, '', '', NULL, '420626', '', '保康县', '', '', '', 31.87753000, 111.26117000),('420625', 3, '', '', NULL, '420625', '', '谷城县', '', '', '', 32.26338000, 111.65304000),('420624', 3, '', '', NULL, '420624', '', '南漳县', '', '', '', 31.77471000, 111.83902000),('420607', 3, '', '', NULL, '420607', '', '襄州区', '', '', '', 32.08718000, 112.21194000),('420606', 3, '', '', NULL, '420606', '', '樊城区', '', '', '', 32.04487000, 112.13555000),('420602', 3, '', '', NULL, '420602', '', '襄城区', '', '', '', 32.01067000, 112.13423000),('420583', 3, '', '', NULL, '420583', '', '枝江市', '', '', '', 30.42583000, 111.76044000),('420582', 3, '', '', NULL, '420582', '', '当阳市', '', '', '', 30.82118000, 111.78833000),('420581', 3, '', '', NULL, '420581', '', '宜都市', '', '', '', 30.37846000, 111.45010000),('420529', 3, '', '', NULL, '420529', '', '五峰土家族自治县', '', '', '', 30.19983000, 110.67452000),('420528', 3, '', '', NULL, '420528', '', '长阳土家族自治县', '', '', '', 30.47250000, 111.20705000),('420527', 3, '', '', NULL, '420527', '', '秭归县', '', '', '', 30.82578000, 110.97768000),('420526', 3, '', '', NULL, '420526', '', '兴山县', '', '', '', 31.34813000, 110.74719000),('420525', 3, '', '', NULL, '420525', '', '远安县', '', '', '', 31.06144000, 111.63985000),('420506', 3, '', '', NULL, '420506', '', '夷陵区', '', '', '', 30.76990000, 111.32488000),('420505', 3, '', '', NULL, '420505', '', '猇亭区', '', '', '', 30.53070000, 111.43471000),('420504', 3, '', '', NULL, '420504', '', '点军区', '', '', '', 30.69322000, 111.26824000),('420503', 3, '', '', NULL, '420503', '', '伍家岗区', '', '', '', 30.64441000, 111.36100000),('420502', 3, '', '', NULL, '420502', '', '西陵区', '', '', '', 30.71082000, 111.28581000),('420381', 3, '', '', NULL, '420381', '', '丹江口市', '', '', '', 32.54040000, 111.51322000),('420325', 3, '', '', NULL, '420325', '', '房县', '', '', '', 32.05552000, 110.74116000),('420324', 3, '', '', NULL, '420324', '', '竹溪县', '', '', '', 32.31824000, 109.71527000),('420323', 3, '', '', NULL, '420323', '', '竹山县', '', '', '', 32.22468000, 110.22879000),('420322', 3, '', '', NULL, '420322', '', '郧西县', '', '', '', 32.99306000, 110.42588000),('420304', 3, '', '', NULL, '420304', '', '郧阳区', '', '', '', 32.83488000, 110.81197000),('420303', 3, '', '', NULL, '420303', '', '张湾区', '', '', '', 32.65192000, 110.76916000),('420302', 3, '', '', NULL, '420302', '', '茅箭区', '', '', '', 32.59175000, 110.81285000),('420281', 3, '', '', NULL, '420281', '', '大冶市', '', '', '', 30.09551000, 114.97977000),('420222', 3, '', '', NULL, '420222', '', '阳新县', '', '', '', 29.83039000, 115.21530000),('420205', 3, '', '', NULL, '420205', '', '铁山区', '', '', '', 30.20666000, 114.90143000),('420204', 3, '', '', NULL, '420204', '', '下陆区', '', '', '', 30.17384000, 114.96118000),('420203', 3, '', '', NULL, '420203', '', '西塞山区', '', '', '', 30.20489000, 115.11019000),('420202', 3, '', '', NULL, '420202', '', '黄石港区', '', '', '', 30.22286000, 115.06611000),('420117', 3, '', '', NULL, '420117', '', '新洲区', '', '', '', 30.84154000, 114.80114000),('420116', 3, '', '', NULL, '420116', '', '黄陂区', '', '', '', 30.88131000, 114.37509000),('420115', 3, '', '', NULL, '420115', '', '江夏区', '', '', '', 30.37559000, 114.32168000),('420114', 3, '', '', NULL, '420114', '', '蔡甸区', '', '', '', 30.58203000, 114.02919000),('420113', 3, '', '', NULL, '420113', '', '汉南区', '', '', '', 30.30895000, 114.08469000),('420112', 3, '', '', NULL, '420112', '', '东西湖区', '', '', '', 30.61996000, 114.13702000),('420111', 3, '', '', NULL, '420111', '', '洪山区', '', '', '', 30.49984000, 114.34253000),('420107', 3, '', '', NULL, '420107', '', '青山区', '', '', '', 30.64039000, 114.38415000),('420106', 3, '', '', NULL, '420106', '', '武昌区', '', '', '', 30.55386000, 114.31599000),('420105', 3, '', '', NULL, '420105', '', '汉阳区', '', '', '', 30.55473000, 114.21772000),('420104', 3, '', '', NULL, '420104', '', '硚口区', '', '', '', 30.58145000, 114.21498000),('420103', 3, '', '', NULL, '420103', '', '江汉区', '', '', '', 30.60147000, 114.27096000),('420102', 3, '', '', NULL, '420102', '', '江岸区', '', '', '', 30.59982000, 114.30960000),('411729', 3, '', '', NULL, '411729', '', '新蔡县', '', '', '', 32.74926000, 114.98571000),('411728', 3, '', '', NULL, '411728', '', '遂平县', '', '', '', 33.14576000, 114.01319000),('411727', 3, '', '', NULL, '411727', '', '汝南县', '', '', '', 33.00685000, 114.36229000),('411726', 3, '', '', NULL, '411726', '', '泌阳县', '', '', '', 32.72410000, 113.32709000),('411725', 3, '', '', NULL, '411725', '', '确山县', '', '', '', 32.80207000, 114.02648000),('411724', 3, '', '', NULL, '411724', '', '正阳县', '', '', '', 32.60566000, 114.39274000),('411723', 3, '', '', NULL, '411723', '', '平舆县', '', '', '', 32.96257000, 114.61912000),('411722', 3, '', '', NULL, '411722', '', '上蔡县', '', '', '', 33.26255000, 114.26435000),('411721', 3, '', '', NULL, '411721', '', '西平县', '', '', '', 33.38780000, 114.02158000),('411702', 3, '', '', NULL, '411702', '', '驿城区', '', '', '', 32.97319000, 113.99382000),('411681', 3, '', '', NULL, '411681', '', '项城市', '', '', '', 33.46723000, 114.87562000),('411628', 3, '', '', NULL, '411628', '', '鹿邑县', '', '', '', 33.86009000, 115.48443000),('411627', 3, '', '', NULL, '411627', '', '太康县', '', '', '', 34.06379000, 114.83779000),('411625', 3, '', '', NULL, '411625', '', '郸城县', '', '', '', 33.64485000, 115.17706000),('411624', 3, '', '', NULL, '411624', '', '沈丘县', '', '', '', 33.40940000, 115.09856000),('411623', 3, '', '', NULL, '411623', '', '商水县', '', '', '', 33.54256000, 114.61165000),('411622', 3, '', '', NULL, '411622', '', '西华县', '', '', '', 33.76754000, 114.52974000),('411621', 3, '', '', NULL, '411621', '', '扶沟县', '', '', '', 34.06000000, 114.39482000),('411603', 3, '', '', NULL, '411603', '', '淮阳区', '', '', '', 33.73150000, 114.88614000),('411602', 3, '', '', NULL, '411602', '', '川汇区', '', '', '', 33.64738000, 114.65048000),('411528', 3, '', '', NULL, '411528', '', '息县', '', '', '', 32.34282000, 114.74024000),('411527', 3, '', '', NULL, '411527', '', '淮滨县', '', '', '', 32.47339000, 115.41987000),('411526', 3, '', '', NULL, '411526', '', '潢川县', '', '', '', 32.13153000, 115.05172000),('411525', 3, '', '', NULL, '411525', '', '固始县', '', '', '', 32.16839000, 115.65481000),('411524', 3, '', '', NULL, '411524', '', '商城县', '', '', '', 31.79836000, 115.40690000),('411523', 3, '', '', NULL, '411523', '', '新县', '', '', '', 31.64389000, 114.87929000),('411522', 3, '', '', NULL, '411522', '', '光山县', '', '', '', 32.00997000, 114.91878000),('411521', 3, '', '', NULL, '411521', '', '罗山县', '', '', '', 32.20314000, 114.51307000),('411503', 3, '', '', NULL, '411503', '', '平桥区', '', '', '', 32.10105000, 114.12561000),('411502', 3, '', '', NULL, '411502', '', '浉河区', '', '', '', 32.11683000, 114.05857000),('411481', 3, '', '', NULL, '411481', '', '永城市', '', '', '', 33.92915000, 116.44946000),('411426', 3, '', '', NULL, '411426', '', '夏邑县', '', '', '', 34.23929000, 116.12969000),('411425', 3, '', '', NULL, '411425', '', '虞城县', '', '', '', 34.39737000, 115.86519000),('411424', 3, '', '', NULL, '411424', '', '柘城县', '', '', '', 34.09114000, 115.30544000),('411423', 3, '', '', NULL, '411423', '', '宁陵县', '', '', '', 34.45454000, 115.30516000),('411422', 3, '', '', NULL, '411422', '', '睢县', '', '', '', 34.44526000, 115.07153000),('411421', 3, '', '', NULL, '411421', '', '民权县', '', '', '', 34.64691000, 115.14766000),('411403', 3, '', '', NULL, '411403', '', '睢阳区', '', '', '', 34.38818000, 115.65347000),('411402', 3, '', '', NULL, '411402', '', '梁园区', '', '', '', 34.44379000, 115.61396000),('411381', 3, '', '', NULL, '411381', '', '邓州市', '', '', '', 32.68777000, 112.08736000),('411330', 3, '', '', NULL, '411330', '', '桐柏县', '', '', '', 32.37913000, 113.42892000),('411329', 3, '', '', NULL, '411329', '', '新野县', '', '', '', 32.52093000, 112.36006000),('411328', 3, '', '', NULL, '411328', '', '唐河县', '', '', '', 32.68117000, 112.80745000),('411327', 3, '', '', NULL, '411327', '', '社旗县', '', '', '', 33.05614000, 112.94793000),('411326', 3, '', '', NULL, '411326', '', '淅川县', '', '', '', 33.13815000, 111.49078000),('411325', 3, '', '', NULL, '411325', '', '内乡县', '', '', '', 33.04483000, 111.84926000),('411324', 3, '', '', NULL, '411324', '', '镇平县', '', '', '', 33.03391000, 112.23448000),('411323', 3, '', '', NULL, '411323', '', '西峡县', '', '', '', 33.30560000, 111.47244000),('411322', 3, '', '', NULL, '411322', '', '方城县', '', '', '', 33.25439000, 113.01255000),('411321', 3, '', '', NULL, '411321', '', '南召县', '', '', '', 33.48979000, 112.42914000),('411303', 3, '', '', NULL, '411303', '', '卧龙区', '', '', '', 32.98646000, 112.53494000),('411302', 3, '', '', NULL, '411302', '', '宛城区', '', '', '', 33.00360000, 112.53960000),('411282', 3, '', '', NULL, '411282', '', '灵宝市', '', '', '', 34.51685000, 110.89456000),('411281', 3, '', '', NULL, '411281', '', '义马市', '', '', '', 34.74725000, 111.87449000),('411224', 3, '', '', NULL, '411224', '', '卢氏县', '', '', '', 34.05438000, 111.04783000),('411221', 3, '', '', NULL, '411221', '', '渑池县', '', '', '', 34.76726000, 111.76190000),('411203', 3, '', '', NULL, '411203', '', '陕州区', '', '', '', 34.72054000, 111.10338000),('411202', 3, '', '', NULL, '411202', '', '湖滨区', '', '', '', 34.77141000, 111.18747000),('411122', 3, '', '', NULL, '411122', '', '临颍县', '', '', '', 33.80958000, 113.93443000),('411121', 3, '', '', NULL, '411121', '', '舞阳县', '', '', '', 33.43765000, 113.60931000),('411104', 3, '', '', NULL, '411104', '', '召陵区', '', '', '', 33.58645000, 114.09389000),('411103', 3, '', '', NULL, '411103', '', '郾城区', '', '', '', 33.58705000, 114.00664000),('411102', 3, '', '', NULL, '411102', '', '源汇区', '', '', '', 33.54528000, 113.92020000),('411082', 3, '', '', NULL, '411082', '', '长葛市', '', '', '', 34.21672000, 113.76827000),('411081', 3, '', '', NULL, '411081', '', '禹州市', '', '', '', 34.14048000, 113.48794000),('411025', 3, '', '', NULL, '411025', '', '襄城县', '', '', '', 33.85072000, 113.50669000),('411024', 3, '', '', NULL, '411024', '', '鄢陵县', '', '', '', 34.10233000, 114.17739000),('411003', 3, '', '', NULL, '411003', '', '建安区', '', '', '', 34.12596000, 113.82272000),('411002', 3, '', '', NULL, '411002', '', '魏都区', '', '', '', 34.04611000, 113.83080000),('410928', 3, '', '', NULL, '410928', '', '濮阳县', '', '', '', 35.71221000, 115.02903000),('410927', 3, '', '', NULL, '410927', '', '台前县', '', '', '', 35.96931000, 115.87163000),('410926', 3, '', '', NULL, '410926', '', '范县', '', '', '', 35.85193000, 115.50411000),('410923', 3, '', '', NULL, '410923', '', '南乐县', '', '', '', 36.06979000, 115.20491000),('410922', 3, '', '', NULL, '410922', '', '清丰县', '', '', '', 35.88510000, 115.10421000),('410902', 3, '', '', NULL, '410902', '', '华龙区', '', '', '', 35.77745000, 115.07432000),('410883', 3, '', '', NULL, '410883', '', '孟州市', '', '', '', 34.90735000, 112.79134000),('410882', 3, '', '', NULL, '410882', '', '沁阳市', '', '', '', 35.08760000, 112.95060000),('410825', 3, '', '', NULL, '410825', '', '温县', '', '', '', 34.94023000, 113.08057000),('410823', 3, '', '', NULL, '410823', '', '武陟县', '', '', '', 35.09952000, 113.40184000),('410822', 3, '', '', NULL, '410822', '', '博爱县', '', '', '', 35.17123000, 113.06453000),('410821', 3, '', '', NULL, '410821', '', '修武县', '', '', '', 35.22361000, 113.44776000),('410811', 3, '', '', NULL, '410811', '', '山阳区', '', '', '', 35.21414000, 113.25420000),('410804', 3, '', '', NULL, '410804', '', '马村区', '', '', '', 35.25615000, 113.32290000),('410803', 3, '', '', NULL, '410803', '', '中站区', '', '', '', 35.23670000, 113.18296000),('410802', 3, '', '', NULL, '410802', '', '解放区', '', '', '', 35.24052000, 113.23064000),('410783', 3, '', '', NULL, '410783', '', '长垣市', '', '', '', 35.20049000, 114.66886000),('410782', 3, '', '', NULL, '410782', '', '辉县市', '', '', '', 35.46212000, 113.80540000),('410781', 3, '', '', NULL, '410781', '', '卫辉市', '', '', '', 35.39847000, 114.06459000),('410727', 3, '', '', NULL, '410727', '', '封丘县', '', '', '', 35.04119000, 114.41861000),('410726', 3, '', '', NULL, '410726', '', '延津县', '', '', '', 35.14194000, 114.20515000),('410725', 3, '', '', NULL, '410725', '', '原阳县', '', '', '', 35.06569000, 113.93997000),('410724', 3, '', '', NULL, '410724', '', '获嘉县', '', '', '', 35.25962000, 113.65716000),('410721', 3, '', '', NULL, '410721', '', '新乡县', '', '', '', 35.19079000, 113.80516000),('410711', 3, '', '', NULL, '410711', '', '牧野区', '', '', '', 35.31493000, 113.90866000),('410704', 3, '', '', NULL, '410704', '', '凤泉区', '', '', '', 35.37180000, 113.90598000),('410703', 3, '', '', NULL, '410703', '', '卫滨区', '', '', '', 35.30227000, 113.86582000),('410702', 3, '', '', NULL, '410702', '', '红旗区', '', '', '', 35.30351000, 113.87523000),('410622', 3, '', '', NULL, '410622', '', '淇县', '', '', '', 35.60786000, 114.19766000),('410621', 3, '', '', NULL, '410621', '', '浚县', '', '', '', 35.67617000, 114.55078000),('410611', 3, '', '', NULL, '410611', '', '淇滨区', '', '', '', 35.74130000, 114.29872000),('410603', 3, '', '', NULL, '410603', '', '山城区', '', '', '', 35.89765000, 114.18444000),('410602', 3, '', '', NULL, '410602', '', '鹤山区', '', '', '', 35.95470000, 114.16330000),('410581', 3, '', '', NULL, '410581', '', '林州市', '', '', '', 36.08308000, 113.81908000),('410527', 3, '', '', NULL, '410527', '', '内黄县', '', '', '', 35.94714000, 114.89936000),('410526', 3, '', '', NULL, '410526', '', '滑县', '', '', '', 35.57534000, 114.51930000),('410523', 3, '', '', NULL, '410523', '', '汤阴县', '', '', '', 35.92138000, 114.35723000),('410522', 3, '', '', NULL, '410522', '', '安阳县', '', '', '', 36.21256000, 114.23182000),('410506', 3, '', '', NULL, '410506', '', '龙安区', '', '', '', 36.07609000, 114.30089000),('410505', 3, '', '', NULL, '410505', '', '殷都区', '', '', '', 36.10994000, 114.30345000),('410503', 3, '', '', NULL, '410503', '', '北关区', '', '', '', 36.10849000, 114.35511000),('410502', 3, '', '', NULL, '410502', '', '文峰区', '', '', '', 36.09052000, 114.35688000),('410482', 3, '', '', NULL, '410482', '', '汝州市', '', '', '', 34.16717000, 112.84437000),('410481', 3, '', '', NULL, '410481', '', '舞钢市', '', '', '', 33.29315000, 113.52531000),('410425', 3, '', '', NULL, '410425', '', '郏县', '', '', '', 33.97180000, 113.21262000),('410423', 3, '', '', NULL, '410423', '', '鲁山县', '', '', '', 33.73854000, 112.90802000),('410422', 3, '', '', NULL, '410422', '', '叶县', '', '', '', 33.62683000, 113.35737000),('410421', 3, '', '', NULL, '410421', '', '宝丰县', '', '', '', 33.86840000, 113.05479000),('410411', 3, '', '', NULL, '410411', '', '湛河区', '', '', '', 33.70090000, 113.27602000),('410404', 3, '', '', NULL, '410404', '', '石龙区', '', '', '', 33.89889000, 112.89888000),('410403', 3, '', '', NULL, '410403', '', '卫东区', '', '', '', 33.73469000, 113.33503000),('410402', 3, '', '', NULL, '410402', '', '新华区', '', '', '', 33.73741000, 113.29431000),('410381', 3, '', '', NULL, '410381', '', '偃师市', '', '', '', 34.72763000, 112.78965000),('410329', 3, '', '', NULL, '410329', '', '伊川县', '', '', '', 34.42135000, 112.42568000),('410328', 3, '', '', NULL, '410328', '', '洛宁县', '', '', '', 34.38917000, 111.65313000),('410327', 3, '', '', NULL, '410327', '', '宜阳县', '', '', '', 34.51467200, 112.17918900),('410326', 3, '', '', NULL, '410326', '', '汝阳县', '', '', '', 34.15388000, 112.47317000),('410325', 3, '', '', NULL, '410325', '', '嵩县', '', '', '', 34.13451000, 112.08570000),('410324', 3, '', '', NULL, '410324', '', '栾川县', '', '', '', 33.78576000, 111.61579000),('410323', 3, '', '', NULL, '410323', '', '新安县', '', '', '', 34.72818000, 112.13242000),('410322', 3, '', '', NULL, '410322', '', '孟津县', '', '', '', 34.82573000, 112.44535000),('410311', 3, '', '', NULL, '410311', '', '洛龙区', '', '', '', 34.61960000, 112.46470000),('410306', 3, '', '', NULL, '410306', '', '吉利区', '', '', '', 34.90099000, 112.58888000),('410305', 3, '', '', NULL, '410305', '', '涧西区', '', '', '', 34.65774000, 112.39570000),('410304', 3, '', '', NULL, '410304', '', '瀍河回族区', '', '', '', 34.70431000, 112.51078000),('410303', 3, '', '', NULL, '410303', '', '西工区', '', '', '', 34.66047000, 112.42788000),('410302', 3, '', '', NULL, '410302', '', '老城区', '', '', '', 34.68356000, 112.46958000),('410225', 3, '', '', NULL, '410225', '', '兰考县', '', '', '', 34.82230000, 114.82115000),('410223', 3, '', '', NULL, '410223', '', '尉氏县', '', '', '', 34.41161000, 114.19297000),('410222', 3, '', '', NULL, '410222', '', '通许县', '', '', '', 34.48044000, 114.46741000),('410221', 3, '', '', NULL, '410221', '', '杞县', '', '', '', 34.55034000, 114.78283000),('410212', 3, '', '', NULL, '410212', '', '祥符区', '', '', '', 34.75700000, 114.44136000),('410205', 3, '', '', NULL, '410205', '', '禹王台区', '', '', '', 34.77717000, 114.34826000),('410204', 3, '', '', NULL, '410204', '', '鼓楼区', '', '', '', 34.78861000, 114.34816000),('410203', 3, '', '', NULL, '410203', '', '顺河回族区', '', '', '', 34.79971000, 114.36435000),('410202', 3, '', '', NULL, '410202', '', '龙亭区', '', '', '', 34.81568000, 114.35461000),('410185', 3, '', '', NULL, '410185', '', '登封市', '', '', '', 34.45348000, 113.05028000),('410184', 3, '', '', NULL, '410184', '', '新郑市', '', '', '', 34.39605000, 113.74161000),('410183', 3, '', '', NULL, '410183', '', '新密市', '', '', '', 34.53952000, 113.39044000),('410182', 3, '', '', NULL, '410182', '', '荥阳市', '', '', '', 34.78762000, 113.38349000),('410181', 3, '', '', NULL, '410181', '', '巩义市', '', '', '', 34.74798000, 113.02206000),('410122', 3, '', '', NULL, '410122', '', '中牟县', '', '', '', 34.71903000, 113.97624000),('410108', 3, '', '', NULL, '410108', '', '惠济区', '', '', '', 34.86739000, 113.61694000),('410106', 3, '', '', NULL, '410106', '', '上街区', '', '', '', 34.80280400, 113.30891600),('410105', 3, '', '', NULL, '410105', '', '金水区', '', '', '', 34.79977000, 113.66072000),('410104', 3, '', '', NULL, '410104', '', '管城回族区', '', '', '', 34.75381000, 113.67739000),('410103', 3, '', '', NULL, '410103', '', '二七区', '', '', '', 34.72468000, 113.64010000),('410102', 3, '', '', NULL, '410102', '', '中原区', '', '', '', 34.74821000, 113.61332000),('371728', 3, '', '', NULL, '371728', '', '东明县', '', '', '', 35.28953000, 115.09016000),('371726', 3, '', '', NULL, '371726', '', '鄄城县', '', '', '', 35.53365400, 115.54458100),('371725', 3, '', '', NULL, '371725', '', '郓城县', '', '', '', 35.59984000, 115.94364000),('371724', 3, '', '', NULL, '371724', '', '巨野县', '', '', '', 35.39633000, 116.09495000),('371723', 3, '', '', NULL, '371723', '', '成武县', '', '', '', 34.95245000, 115.88964000),('371722', 3, '', '', NULL, '371722', '', '单县', '', '', '', 34.79438000, 116.08724000),('371721', 3, '', '', NULL, '371721', '', '曹县', '', '', '', 34.82553000, 115.54214000),('371703', 3, '', '', NULL, '371703', '', '定陶区', '', '', '', 35.07095000, 115.57298000),('371702', 3, '', '', NULL, '371702', '', '牡丹区', '', '', '', 35.25141000, 115.41666000),('371681', 3, '', '', NULL, '371681', '', '邹平市', '', '', '', 36.86299000, 117.74309000),('371625', 3, '', '', NULL, '371625', '', '博兴县', '', '', '', 37.15299000, 118.11096000),('371623', 3, '', '', NULL, '371623', '', '无棣县', '', '', '', 37.77027000, 117.62581000),('371622', 3, '', '', NULL, '371622', '', '阳信县', '', '', '', 37.64109000, 117.57820000),('371621', 3, '', '', NULL, '371621', '', '惠民县', '', '', '', 37.48982000, 117.50920000),('371603', 3, '', '', NULL, '371603', '', '沾化区', '', '', '', 37.70058000, 118.09882000),('371602', 3, '', '', NULL, '371602', '', '滨城区', '', '', '', 37.42726000, 118.02279000),('371581', 3, '', '', NULL, '371581', '', '临清市', '', '', '', 36.83834000, 115.70504000),('371526', 3, '', '', NULL, '371526', '', '高唐县', '', '', '', 36.86602000, 116.23111000),('371525', 3, '', '', NULL, '371525', '', '冠县', '', '', '', 36.48335000, 115.44263000),('371524', 3, '', '', NULL, '371524', '', '东阿县', '', '', '', 36.33503000, 116.24773000),('371522', 3, '', '', NULL, '371522', '', '莘县', '', '', '', 36.23361000, 115.67072000),('371521', 3, '', '', NULL, '371521', '', '阳谷县', '', '', '', 36.11447000, 115.79131000),('371503', 3, '', '', NULL, '371503', '', '茌平区', '', '', '', 36.58068000, 116.25522000),('371502', 3, '', '', NULL, '371502', '', '东昌府区', '', '', '', 36.43452000, 115.98847000),('371482', 3, '', '', NULL, '371482', '', '禹城市', '', '', '', 36.93394000, 116.63813000),('371481', 3, '', '', NULL, '371481', '', '乐陵市', '', '', '', 37.72913000, 117.23065000),('371428', 3, '', '', NULL, '371428', '', '武城县', '', '', '', 37.21317000, 116.06923000),('371427', 3, '', '', NULL, '371427', '', '夏津县', '', '', '', 36.94856000, 116.00175000),('371426', 3, '', '', NULL, '371426', '', '平原县', '', '', '', 37.16538000, 116.43395000),('371425', 3, '', '', NULL, '371425', '', '齐河县', '', '', '', 36.79492000, 116.76002000),('371424', 3, '', '', NULL, '371424', '', '临邑县', '', '', '', 37.18998000, 116.86660000),('371423', 3, '', '', NULL, '371423', '', '庆云县', '', '', '', 37.77528000, 117.38497000),('371422', 3, '', '', NULL, '371422', '', '宁津县', '', '', '', 37.65221000, 116.80023000),('371403', 3, '', '', NULL, '371403', '', '陵城区', '', '', '', 37.33566000, 116.57634000),('371402', 3, '', '', NULL, '371402', '', '德城区', '', '', '', 37.45079000, 116.29941000),('371329', 3, '', '', NULL, '371329', '', '临沭县', '', '', '', 34.91985000, 118.65063000),('371328', 3, '', '', NULL, '371328', '', '蒙阴县', '', '', '', 35.71010000, 117.94494000),('371327', 3, '', '', NULL, '371327', '', '莒南县', '', '', '', 35.17486000, 118.83543000),('371326', 3, '', '', NULL, '371326', '', '平邑县', '', '', '', 35.50587000, 117.64048000),('371325', 3, '', '', NULL, '371325', '', '费县', '', '', '', 35.26659000, 117.97711000),('371324', 3, '', '', NULL, '371324', '', '兰陵县', '', '', '', 34.85729000, 118.07072000),('371323', 3, '', '', NULL, '371323', '', '沂水县', '', '', '', 35.79034000, 118.62782000),('371322', 3, '', '', NULL, '371322', '', '郯城县', '', '', '', 34.61357000, 118.36717000),('371321', 3, '', '', NULL, '371321', '', '沂南县', '', '', '', 35.55001000, 118.46566000),('371312', 3, '', '', NULL, '371312', '', '河东区', '', '', '', 35.08729000, 118.40184000),('371311', 3, '', '', NULL, '371311', '', '罗庄区', '', '', '', 34.99636000, 118.28437000),('371302', 3, '', '', NULL, '371302', '', '兰山区', '', '', '', 35.05151000, 118.34787000),('371122', 3, '', '', NULL, '371122', '', '莒县', '', '', '', 35.57997000, 118.83687000),('371121', 3, '', '', NULL, '371121', '', '五莲县', '', '', '', 35.75018000, 119.20875000),('371103', 3, '', '', NULL, '371103', '', '岚山区', '', '', '', 35.12206000, 119.31891000),('371102', 3, '', '', NULL, '371102', '', '东港区', '', '', '', 35.42545000, 119.46242000),('371083', 3, '', '', NULL, '371083', '', '乳山市', '', '', '', 36.92021000, 121.54020000),('371082', 3, '', '', NULL, '371082', '', '荣成市', '', '', '', 37.16523000, 122.48628000),('371003', 3, '', '', NULL, '371003', '', '文登区', '', '', '', 37.19397000, 122.05810000),('371002', 3, '', '', NULL, '371002', '', '环翠区', '', '', '', 37.50212000, 122.12348000),('370983', 3, '', '', NULL, '370983', '', '肥城市', '', '', '', 36.18245000, 116.76917000),('370982', 3, '', '', NULL, '370982', '', '新泰市', '', '', '', 35.90878000, 117.76800000),('370923', 3, '', '', NULL, '370923', '', '东平县', '', '', '', 35.93708000, 116.47024000),('370921', 3, '', '', NULL, '370921', '', '宁阳县', '', '', '', 35.75961000, 116.80727000),('370911', 3, '', '', NULL, '370911', '', '岱岳区', '', '', '', 36.18752000, 117.04180000),('370902', 3, '', '', NULL, '370902', '', '泰山区', '', '', '', 36.19198000, 117.13526000),('370883', 3, '', '', NULL, '370883', '', '邹城市', '', '', '', 35.40522000, 117.00385000),('370881', 3, '', '', NULL, '370881', '', '曲阜市', '', '', '', 35.58082000, 116.98648000),('370832', 3, '', '', NULL, '370832', '', '梁山县', '', '', '', 35.80240000, 116.09584000),('370831', 3, '', '', NULL, '370831', '', '泗水县', '', '', '', 35.66471000, 117.25216000),('370830', 3, '', '', NULL, '370830', '', '汶上县', '', '', '', 35.73281000, 116.48917000),('370829', 3, '', '', NULL, '370829', '', '嘉祥县', '', '', '', 35.40750000, 116.34249000),('370828', 3, '', '', NULL, '370828', '', '金乡县', '', '', '', 35.06661000, 116.31148000),('370827', 3, '', '', NULL, '370827', '', '鱼台县', '', '', '', 35.01161000, 116.65046000),('370826', 3, '', '', NULL, '370826', '', '微山县', '', '', '', 34.80676000, 117.12872000),('370812', 3, '', '', NULL, '370812', '', '兖州区', '', '', '', 35.55260000, 116.78570000),('370811', 3, '', '', NULL, '370811', '', '任城区', '', '', '', 35.40820000, 116.59649000),('370786', 3, '', '', NULL, '370786', '', '昌邑市', '', '', '', 36.85884000, 119.39862000),('370785', 3, '', '', NULL, '370785', '', '高密市', '', '', '', 36.38257000, 119.75568000),('370784', 3, '', '', NULL, '370784', '', '安丘市', '', '', '', 36.47842000, 119.21784000),('370783', 3, '', '', NULL, '370783', '', '寿光市', '', '', '', 36.85541000, 118.79098000),('370782', 3, '', '', NULL, '370782', '', '诸城市', '', '', '', 35.99583000, 119.40983000),('370781', 3, '', '', NULL, '370781', '', '青州市', '', '', '', 36.68456000, 118.47966000),('370725', 3, '', '', NULL, '370725', '', '昌乐县', '', '', '', 36.70702000, 118.82984000),('370724', 3, '', '', NULL, '370724', '', '临朐县', '', '', '', 36.51231000, 118.54300000),('370705', 3, '', '', NULL, '370705', '', '奎文区', '', '', '', 36.70864000, 119.13279000),('370704', 3, '', '', NULL, '370704', '', '坊子区', '', '', '', 36.65458000, 119.16607000),('370703', 3, '', '', NULL, '370703', '', '寒亭区', '', '', '', 36.77506000, 119.21994000),('370702', 3, '', '', NULL, '370702', '', '潍城区', '', '', '', 36.72667000, 119.02389000),('370687', 3, '', '', NULL, '370687', '', '海阳市', '', '', '', 36.77645000, 121.15846000),('370686', 3, '', '', NULL, '370686', '', '栖霞市', '', '', '', 37.33592000, 120.84956000),('370685', 3, '', '', NULL, '370685', '', '招远市', '', '', '', 37.35531000, 120.43421000),('370684', 3, '', '', NULL, '370684', '', '蓬莱市', '', '', '', 37.81064000, 120.75898000),('370683', 3, '', '', NULL, '370683', '', '莱州市', '', '', '', 37.17702000, 119.94222000),('370682', 3, '', '', NULL, '370682', '', '莱阳市', '', '', '', 36.97880000, 120.71173000),('370681', 3, '', '', NULL, '370681', '', '龙口市', '', '', '', 37.64345000, 120.47872000),('370634', 3, '', '', NULL, '370634', '', '长岛县', '', '', '', 37.92135000, 120.73645000),('370613', 3, '', '', NULL, '370613', '', '莱山区', '', '', '', 37.51104000, 121.44547000),('370612', 3, '', '', NULL, '370612', '', '牟平区', '', '', '', 37.38693900, 121.60047000),('370611', 3, '', '', NULL, '370611', '', '福山区', '', '', '', 37.49794000, 121.26757000),('370602', 3, '', '', NULL, '370602', '', '芝罘区', '', '', '', 37.54061000, 121.40011000),('370523', 3, '', '', NULL, '370523', '', '广饶县', '', '', '', 37.05359000, 118.40702000),('370522', 3, '', '', NULL, '370522', '', '利津县', '', '', '', 37.49028000, 118.25536000),('370505', 3, '', '', NULL, '370505', '', '垦利区', '', '', '', 37.58748000, 118.54768000),('370503', 3, '', '', NULL, '370503', '', '河口区', '', '', '', 37.88624000, 118.52544000),('370502', 3, '', '', NULL, '370502', '', '东营区', '', '', '', 37.44878000, 118.58215000),('370481', 3, '', '', NULL, '370481', '', '滕州市', '', '', '', 35.11338000, 117.16596000),('370406', 3, '', '', NULL, '370406', '', '山亭区', '', '', '', 35.09963000, 117.46130000),('370405', 3, '', '', NULL, '370405', '', '台儿庄区', '', '', '', 34.56261000, 117.73385000),('370404', 3, '', '', NULL, '370404', '', '峄城区', '', '', '', 34.77228000, 117.59061000),('370403', 3, '', '', NULL, '370403', '', '薛城区', '', '', '', 34.79502000, 117.26320000),('370402', 3, '', '', NULL, '370402', '', '市中区', '', '', '', 34.86426000, 117.55601000),('370323', 3, '', '', NULL, '370323', '', '沂源县', '', '', '', 36.18488000, 118.17077000),('370322', 3, '', '', NULL, '370322', '', '高青县', '', '', '', 37.17105000, 117.82675000),('370321', 3, '', '', NULL, '370321', '', '桓台县', '', '', '', 36.95933000, 118.09797000),('370306', 3, '', '', NULL, '370306', '', '周村区', '', '', '', 36.80298000, 117.86974000),('370305', 3, '', '', NULL, '370305', '', '临淄区', '', '', '', 36.82593000, 118.30971000),('370304', 3, '', '', NULL, '370304', '', '博山区', '', '', '', 36.49473000, 117.86172000),('370303', 3, '', '', NULL, '370303', '', '张店区', '', '', '', 36.80661000, 118.01790000),('370302', 3, '', '', NULL, '370302', '', '淄川区', '', '', '', 36.64350000, 117.96673000),('370285', 3, '', '', NULL, '370285', '', '莱西市', '', '', '', 36.88808000, 120.51777000),('370283', 3, '', '', NULL, '370283', '', '平度市', '', '', '', 36.78670000, 119.95994000),('370281', 3, '', '', NULL, '370281', '', '胶州市', '', '', '', 36.26445000, 120.03354000),('370215', 3, '', '', NULL, '370215', '', '即墨区', '', '', '', 36.38932000, 120.44715000),('370214', 3, '', '', NULL, '370214', '', '城阳区', '', '', '', 36.30744000, 120.39629000),('370213', 3, '', '', NULL, '370213', '', '李沧区', '', '', '', 36.14508000, 120.43294000),('370212', 3, '', '', NULL, '370212', '', '崂山区', '', '', '', 36.10811000, 120.46803000),('370211', 3, '', '', NULL, '370211', '', '黄岛区', '', '', '', 35.95995000, 120.19653000),('370203', 3, '', '', NULL, '370203', '', '市北区', '', '', '', 36.08743000, 120.37479000),('370202', 3, '', '', NULL, '370202', '', '市南区', '', '', '', 36.07515000, 120.41283000),('370126', 3, '', '', NULL, '370126', '', '商河县', '', '', '', 37.30907000, 117.15710000),('370124', 3, '', '', NULL, '370124', '', '平阴县', '', '', '', 36.28937000, 116.45599000),('370117', 3, '', '', NULL, '370117', '', '钢城区', '', '', '', 36.05866000, 117.81107000),('370116', 3, '', '', NULL, '370116', '', '莱芜区', '', '', '', 36.20317000, 117.65992000),('370115', 3, '', '', NULL, '370115', '', '济阳区', '', '', '', 36.97847000, 117.17333000),('370114', 3, '', '', NULL, '370114', '', '章丘区', '', '', '', 36.68124000, 117.52627000),('370113', 3, '', '', NULL, '370113', '', '长清区', '', '', '', 36.55358000, 116.75199000),('370112', 3, '', '', NULL, '370112', '', '历城区', '', '', '', 36.68013000, 117.06533000),('370105', 3, '', '', NULL, '370105', '', '天桥区', '', '', '', 36.67789000, 116.98737000),('370104', 3, '', '', NULL, '370104', '', '槐荫区', '', '', '', 36.65142000, 116.90084000),('370103', 3, '', '', NULL, '370103', '', '市中区', '', '', '', 36.65118000, 116.99744000),('370102', 3, '', '', NULL, '370102', '', '历下区', '', '', '', 36.66645000, 117.07641000),('361181', 3, '', '', NULL, '361181', '', '德兴市', '', '', '', 28.94654000, 117.57884000),('361130', 3, '', '', NULL, '361130', '', '婺源县', '', '', '', 29.24791000, 117.86192000),('361129', 3, '', '', NULL, '361129', '', '万年县', '', '', '', 28.69466000, 117.05839000),('361128', 3, '', '', NULL, '361128', '', '鄱阳县', '', '', '', 29.00563000, 116.70343000),('361127', 3, '', '', NULL, '361127', '', '余干县', '', '', '', 28.70211000, 116.69560000),('361126', 3, '', '', NULL, '361126', '', '弋阳县', '', '', '', 28.37754000, 117.44821000),('361125', 3, '', '', NULL, '361125', '', '横峰县', '', '', '', 28.40720000, 117.59644000),('361124', 3, '', '', NULL, '361124', '', '铅山县', '', '', '', 28.31535000, 117.70942000),('361123', 3, '', '', NULL, '361123', '', '玉山县', '', '', '', 28.68194000, 118.24481000),('361104', 3, '', '', NULL, '361104', '', '广信区', '', '', '', 28.44923000, 117.90960000),('361103', 3, '', '', NULL, '361103', '', '广丰区', '', '', '', 28.43631000, 118.19133000),('361102', 3, '', '', NULL, '361102', '', '信州区', '', '', '', 28.42995000, 117.96469000),('361030', 3, '', '', NULL, '361030', '', '广昌县', '', '', '', 26.83729000, 116.32573000),('361028', 3, '', '', NULL, '361028', '', '资溪县', '', '', '', 27.70594000, 117.06101000),('361027', 3, '', '', NULL, '361027', '', '金溪县', '', '', '', 27.91912000, 116.75485000),('361026', 3, '', '', NULL, '361026', '', '宜黄县', '', '', '', 27.55489000, 116.23628000),('361025', 3, '', '', NULL, '361025', '', '乐安县', '', '', '', 27.42814000, 115.83109000),('361024', 3, '', '', NULL, '361024', '', '崇仁县', '', '', '', 27.76437000, 116.06124000),('361023', 3, '', '', NULL, '361023', '', '南丰县', '', '', '', 27.21863000, 116.52526000),('361022', 3, '', '', NULL, '361022', '', '黎川县', '', '', '', 27.28236000, 116.90753000),('361021', 3, '', '', NULL, '361021', '', '南城县', '', '', '', 27.56840000, 116.63775000),('361003', 3, '', '', NULL, '361003', '', '东乡区', '', '', '', 28.24771000, 116.60334000),('361002', 3, '', '', NULL, '361002', '', '临川区', '', '', '', 27.93473000, 116.30986000),('360983', 3, '', '', NULL, '360983', '', '高安市', '', '', '', 28.41729000, 115.37562000),('360982', 3, '', '', NULL, '360982', '', '樟树市', '', '', '', 28.05589000, 115.54615000),('360981', 3, '', '', NULL, '360981', '', '丰城市', '', '', '', 28.15920000, 115.77121000),('360926', 3, '', '', NULL, '360926', '', '铜鼓县', '', '', '', 28.52182000, 114.37071000),('360925', 3, '', '', NULL, '360925', '', '靖安县', '', '', '', 28.86138000, 115.36268000),('360924', 3, '', '', NULL, '360924', '', '宜丰县', '', '', '', 28.39380000, 114.80369000),('360923', 3, '', '', NULL, '360923', '', '上高县', '', '', '', 28.23337000, 114.92480000),('360922', 3, '', '', NULL, '360922', '', '万载县', '', '', '', 28.10610000, 114.44551000),('360921', 3, '', '', NULL, '360921', '', '奉新县', '', '', '', 28.68793000, 115.40037000),('360902', 3, '', '', NULL, '360902', '', '袁州区', '', '', '', 27.79817000, 114.42773000),('360881', 3, '', '', NULL, '360881', '', '井冈山市', '', '', '', 26.74808000, 114.28953000),('360830', 3, '', '', NULL, '360830', '', '永新县', '', '', '', 26.94498000, 114.24307000),('360829', 3, '', '', NULL, '360829', '', '安福县', '', '', '', 27.39280000, 114.61960000),('360828', 3, '', '', NULL, '360828', '', '万安县', '', '', '', 26.45825000, 114.78615000),('360827', 3, '', '', NULL, '360827', '', '遂川县', '', '', '', 26.31363000, 114.52052000),('360826', 3, '', '', NULL, '360826', '', '泰和县', '', '', '', 26.78993000, 114.90887000),('360825', 3, '', '', NULL, '360825', '', '永丰县', '', '', '', 27.31815000, 115.44189000),('360824', 3, '', '', NULL, '360824', '', '新干县', '', '', '', 27.74016000, 115.38692000),('360823', 3, '', '', NULL, '360823', '', '峡江县', '', '', '', 27.58289000, 115.31643000),('360822', 3, '', '', NULL, '360822', '', '吉水县', '', '', '', 27.22976000, 115.13550000),('360821', 3, '', '', NULL, '360821', '', '吉安县', '', '', '', 27.03935000, 114.90821000),('360803', 3, '', '', NULL, '360803', '', '青原区', '', '', '', 27.08195000, 115.01465000),('360802', 3, '', '', NULL, '360802', '', '吉州区', '', '', '', 27.14480000, 114.99457000),('360781', 3, '', '', NULL, '360781', '', '瑞金市', '', '', '', 25.88562000, 116.02709000),('360735', 3, '', '', NULL, '360735', '', '石城县', '', '', '', 26.32691000, 116.35432000),('360734', 3, '', '', NULL, '360734', '', '寻乌县', '', '', '', 24.96351000, 115.64673000),('360733', 3, '', '', NULL, '360733', '', '会昌县', '', '', '', 25.60039000, 115.78600000),('360732', 3, '', '', NULL, '360732', '', '兴国县', '', '', '', 26.33779000, 115.36314000),('360731', 3, '', '', NULL, '360731', '', '于都县', '', '', '', 25.95184000, 115.41544000),('360730', 3, '', '', NULL, '360730', '', '宁都县', '', '', '', 26.47019000, 116.00941000),('360729', 3, '', '', NULL, '360729', '', '全南县', '', '', '', 24.74235000, 114.53012000),('360728', 3, '', '', NULL, '360728', '', '定南县', '', '', '', 24.78550000, 115.02739000),('360727', 3, '', '', NULL, '360727', '', '龙南县', '', '', '', 24.91105000, 114.78993000),('360726', 3, '', '', NULL, '360726', '', '安远县', '', '', '', 25.13702000, 115.39379000),('360725', 3, '', '', NULL, '360725', '', '崇义县', '', '', '', 25.68165000, 114.30784000),('360724', 3, '', '', NULL, '360724', '', '上犹县', '', '', '', 25.79086000, 114.53754000),('360723', 3, '', '', NULL, '360723', '', '大余县', '', '', '', 25.40148000, 114.36195000),('360722', 3, '', '', NULL, '360722', '', '信丰县', '', '', '', 25.38617000, 114.92285000),('360704', 3, '', '', NULL, '360704', '', '赣县区', '', '', '', 25.86076000, 115.01161000),('360703', 3, '', '', NULL, '360703', '', '南康区', '', '', '', 25.66144000, 114.76535000),('360702', 3, '', '', NULL, '360702', '', '章贡区', '', '', '', 25.81751000, 114.92085000),('360681', 3, '', '', NULL, '360681', '', '贵溪市', '', '', '', 28.29252000, 117.24525000),('360603', 3, '', '', NULL, '360603', '', '余江区', '', '', '', 28.20991000, 116.81834000),('360602', 3, '', '', NULL, '360602', '', '月湖区', '', '', '', 28.23902000, 117.03708000),('360521', 3, '', '', NULL, '360521', '', '分宜县', '', '', '', 27.81476000, 114.69191000),('360502', 3, '', '', NULL, '360502', '', '渝水区', '', '', '', 27.80038000, 114.94461000),('360483', 3, '', '', NULL, '360483', '', '庐山市', '', '', '', 29.44821000, 116.04512000),('360482', 3, '', '', NULL, '360482', '', '共青城市', '', '', '', 29.24955000, 115.81477000),('360481', 3, '', '', NULL, '360481', '', '瑞昌市', '', '', '', 29.67658000, 115.68103000),('360430', 3, '', '', NULL, '360430', '', '彭泽县', '', '', '', 29.89613000, 116.54911000),('360429', 3, '', '', NULL, '360429', '', '湖口县', '', '', '', 29.73942000, 116.22025000),('360428', 3, '', '', NULL, '360428', '', '都昌县', '', '', '', 29.27307000, 116.20409000),('360426', 3, '', '', NULL, '360426', '', '德安县', '', '', '', 29.31344000, 115.75605000),('360425', 3, '', '', NULL, '360425', '', '永修县', '', '', '', 29.02097000, 115.80916000),('360424', 3, '', '', NULL, '360424', '', '修水县', '', '', '', 29.02533000, 114.54688000),('360423', 3, '', '', NULL, '360423', '', '武宁县', '', '', '', 29.25622000, 115.10065000),('360404', 3, '', '', NULL, '360404', '', '柴桑区', '', '', '', 29.60855000, 115.91135000),('360403', 3, '', '', NULL, '360403', '', '浔阳区', '', '', '', 29.70550000, 116.00144000),('360402', 3, '', '', NULL, '360402', '', '濂溪区', '', '', '', 29.66819000, 115.99267000),('360323', 3, '', '', NULL, '360323', '', '芦溪县', '', '', '', 27.63064000, 114.02956000),('360322', 3, '', '', NULL, '360322', '', '上栗县', '', '', '', 27.88042000, 113.79537000),('360321', 3, '', '', NULL, '360321', '', '莲花县', '', '', '', 27.12761000, 113.96123000),('360313', 3, '', '', NULL, '360313', '', '湘东区', '', '', '', 27.64069000, 113.73421000),('360302', 3, '', '', NULL, '360302', '', '安源区', '', '', '', 27.61552000, 113.87163000),('360281', 3, '', '', NULL, '360281', '', '乐平市', '', '', '', 28.96173000, 117.12900000),('360222', 3, '', '', NULL, '360222', '', '浮梁县', '', '', '', 29.35159000, 117.21523000),('360203', 3, '', '', NULL, '360203', '', '珠山区', '', '', '', 29.30005000, 117.20275000),('360202', 3, '', '', NULL, '360202', '', '昌江区', '', '', '', 29.27324000, 117.18366000),('360124', 3, '', '', NULL, '360124', '', '进贤县', '', '', '', 28.37737000, 116.24145000),('360123', 3, '', '', NULL, '360123', '', '安义县', '', '', '', 28.84444000, 115.54927000),('360121', 3, '', '', NULL, '360121', '', '南昌县', '', '', '', 28.54538000, 115.94422000),('360112', 3, '', '', NULL, '360112', '', '新建区', '', '', '', 28.69250000, 115.81529000),('360111', 3, '', '', NULL, '360111', '', '青山湖区', '', '', '', 28.68194000, 115.96191000),('360105', 3, '', '', NULL, '360105', '', '湾里区', '', '', '', 28.71479000, 115.73083000),('360104', 3, '', '', NULL, '360104', '', '青云谱区', '', '', '', 28.62084000, 115.92580000),('360103', 3, '', '', NULL, '360103', '', '西湖区', '', '', '', 28.65619000, 115.87683000),('360102', 3, '', '', NULL, '360102', '', '东湖区', '', '', '', 28.68503000, 115.89925000),('350982', 3, '', '', NULL, '350982', '', '福鼎市', '', '', '', 27.32436000, 120.21671000),('350981', 3, '', '', NULL, '350981', '', '福安市', '', '', '', 27.08797000, 119.64768000),('350926', 3, '', '', NULL, '350926', '', '柘荣县', '', '', '', 27.23513000, 119.90085000),('350925', 3, '', '', NULL, '350925', '', '周宁县', '', '', '', 27.10474000, 119.33899000),('350924', 3, '', '', NULL, '350924', '', '寿宁县', '', '', '', 27.46054000, 119.50479000),('350923', 3, '', '', NULL, '350923', '', '屏南县', '', '', '', 26.90853000, 118.98578000),('350922', 3, '', '', NULL, '350922', '', '古田县', '', '', '', 26.57762000, 118.74606000),('350921', 3, '', '', NULL, '350921', '', '霞浦县', '', '', '', 26.88517000, 120.00556000),('350902', 3, '', '', NULL, '350902', '', '蕉城区', '', '', '', 26.66022000, 119.52623000),('350881', 3, '', '', NULL, '350881', '', '漳平市', '', '', '', 25.29013000, 117.42001000),('350825', 3, '', '', NULL, '350825', '', '连城县', '', '', '', 25.70997000, 116.75486000),('350824', 3, '', '', NULL, '350824', '', '武平县', '', '', '', 25.09535000, 116.10039000),('350823', 3, '', '', NULL, '350823', '', '上杭县', '', '', '', 25.04943000, 116.42026000),('350821', 3, '', '', NULL, '350821', '', '长汀县', '', '', '', 25.83348000, 116.35765000),('350803', 3, '', '', NULL, '350803', '', '永定区', '', '', '', 24.72303000, 116.73202000),('350802', 3, '', '', NULL, '350802', '', '新罗区', '', '', '', 25.09839000, 117.03736000),('350783', 3, '', '', NULL, '350783', '', '建瓯市', '', '', '', 27.02266000, 118.30498000),('350782', 3, '', '', NULL, '350782', '', '武夷山市', '', '', '', 27.75671000, 118.03548000),('350781', 3, '', '', NULL, '350781', '', '邵武市', '', '', '', 27.34036000, 117.49253000),('350725', 3, '', '', NULL, '350725', '', '政和县', '', '', '', 27.36609000, 118.85754000),('350724', 3, '', '', NULL, '350724', '', '松溪县', '', '', '', 27.52629000, 118.78540000),('350723', 3, '', '', NULL, '350723', '', '光泽县', '', '', '', 27.54100000, 117.33408000),('350722', 3, '', '', NULL, '350722', '', '浦城县', '', '', '', 27.91721000, 118.54138000),('350721', 3, '', '', NULL, '350721', '', '顺昌县', '', '', '', 26.79301000, 117.81036000),('350703', 3, '', '', NULL, '350703', '', '建阳区', '', '', '', 27.33174900, 118.12042700),('350702', 3, '', '', NULL, '350702', '', '延平区', '', '', '', 26.63798000, 118.18202000),('350681', 3, '', '', NULL, '350681', '', '龙海市', '', '', '', 24.44658000, 117.81813000),('350629', 3, '', '', NULL, '350629', '', '华安县', '', '', '', 25.00446000, 117.53414000),('350628', 3, '', '', NULL, '350628', '', '平和县', '', '', '', 24.36344000, 117.31587000),('350627', 3, '', '', NULL, '350627', '', '南靖县', '', '', '', 24.51453000, 117.35742000),('350626', 3, '', '', NULL, '350626', '', '东山县', '', '', '', 23.70132000, 117.42964000),('350625', 3, '', '', NULL, '350625', '', '长泰县', '', '', '', 24.62580000, 117.75948000),('350624', 3, '', '', NULL, '350624', '', '诏安县', '', '', '', 23.71152000, 117.17508000),('350623', 3, '', '', NULL, '350623', '', '漳浦县', '', '', '', 24.11710000, 117.61372000),('350622', 3, '', '', NULL, '350622', '', '云霄县', '', '', '', 23.95806000, 117.33965000),('350603', 3, '', '', NULL, '350603', '', '龙文区', '', '', '', 24.50330000, 117.70984000),('350602', 3, '', '', NULL, '350602', '', '芗城区', '', '', '', 24.51067000, 117.65391000),('350583', 3, '', '', NULL, '350583', '', '南安市', '', '', '', 24.96040000, 118.38627000),('350582', 3, '', '', NULL, '350582', '', '晋江市', '', '', '', 24.78144000, 118.55199000),('350581', 3, '', '', NULL, '350581', '', '石狮市', '', '', '', 24.73190000, 118.64792000),('350527', 3, '', '', NULL, '350527', '', '金门县', '', '', '', 24.42931000, 118.32277000),('350526', 3, '', '', NULL, '350526', '', '德化县', '', '', '', 25.49160000, 118.24098000),('350525', 3, '', '', NULL, '350525', '', '永春县', '', '', '', 25.32188000, 118.29424000),('350524', 3, '', '', NULL, '350524', '', '安溪县', '', '', '', 25.05544000, 118.18685000),('350521', 3, '', '', NULL, '350521', '', '惠安县', '', '', '', 25.03065000, 118.79695000),('350505', 3, '', '', NULL, '350505', '', '泉港区', '', '', '', 25.12014000, 118.91596000),('350504', 3, '', '', NULL, '350504', '', '洛江区', '', '', '', 24.93990000, 118.67120000),('350503', 3, '', '', NULL, '350503', '', '丰泽区', '', '', '', 24.88946000, 118.61300000),('350502', 3, '', '', NULL, '350502', '', '鲤城区', '', '', '', 24.90750000, 118.58687000),('350481', 3, '', '', NULL, '350481', '', '永安市', '', '', '', 25.94138000, 117.36518000),('350430', 3, '', '', NULL, '350430', '', '建宁县', '', '', '', 26.83092000, 116.84604000),('350429', 3, '', '', NULL, '350429', '', '泰宁县', '', '', '', 26.90012000, 117.17580000),('350428', 3, '', '', NULL, '350428', '', '将乐县', '', '', '', 26.72904000, 117.47096000),('350427', 3, '', '', NULL, '350427', '', '沙县', '', '', '', 26.39617000, 117.79268000),('350426', 3, '', '', NULL, '350426', '', '尤溪县', '', '', '', 26.17004000, 118.19049000),('350425', 3, '', '', NULL, '350425', '', '大田县', '', '', '', 25.69261000, 117.84713000),('350424', 3, '', '', NULL, '350424', '', '宁化县', '', '', '', 26.26178000, 116.65443000),('350423', 3, '', '', NULL, '350423', '', '清流县', '', '', '', 26.17781000, 116.81694000),('350421', 3, '', '', NULL, '350421', '', '明溪县', '', '', '', 26.35595000, 117.20219000),('350403', 3, '', '', NULL, '350403', '', '三元区', '', '', '', 26.23381000, 117.60810000),('350402', 3, '', '', NULL, '350402', '', '梅列区', '', '', '', 26.27168000, 117.64579000),('350322', 3, '', '', NULL, '350322', '', '仙游县', '', '', '', 25.36203000, 118.69183000),('350304', 3, '', '', NULL, '350304', '', '荔城区', '', '', '', 25.43131000, 119.01501000),('350305', 3, '', '', NULL, '350305', '', '秀屿区', '', '', '', 25.31839000, 119.10642000),('350303', 3, '', '', NULL, '350303', '', '涵江区', '', '', '', 25.45879000, 119.11630000),('350302', 3, '', '', NULL, '350302', '', '城厢区', '', '', '', 25.41878000, 118.99472000),('350213', 3, '', '', NULL, '350213', '', '翔安区', '', '', '', 24.61854000, 118.24722000),('350212', 3, '', '', NULL, '350212', '', '同安区', '', '', '', 24.72286000, 118.15207000),('350211', 3, '', '', NULL, '350211', '', '集美区', '', '', '', 24.57591000, 118.09728000),('350206', 3, '', '', NULL, '350206', '', '湖里区', '', '', '', 24.51180000, 118.14577000),('350205', 3, '', '', NULL, '350205', '', '海沧区', '', '', '', 24.48405000, 118.03394000),('350203', 3, '', '', NULL, '350203', '', '思明区', '', '', '', 24.44579000, 118.08243000),('350181', 3, '', '', NULL, '350181', '', '福清市', '', '', '', 25.72024000, 119.38411000),('350128', 3, '', '', NULL, '350128', '', '平潭县', '', '', '', 25.49876000, 119.79010000),('350125', 3, '', '', NULL, '350125', '', '永泰县', '', '', '', 25.86672000, 118.93258000),('350124', 3, '', '', NULL, '350124', '', '闽清县', '', '', '', 26.22117000, 118.86352000),('350123', 3, '', '', NULL, '350123', '', '罗源县', '', '', '', 26.48939000, 119.54969000),('350122', 3, '', '', NULL, '350122', '', '连江县', '', '', '', 26.19753000, 119.53957000),('350121', 3, '', '', NULL, '350121', '', '闽侯县', '', '', '', 26.15021000, 119.13139000),('350112', 3, '', '', NULL, '350112', '', '长乐区', '', '', '', 25.96283000, 119.52324000),('350111', 3, '', '', NULL, '350111', '', '晋安区', '', '', '', 26.08135000, 119.32842000),('350105', 3, '', '', NULL, '350105', '', '马尾区', '', '', '', 25.98939000, 119.45560000),('350104', 3, '', '', NULL, '350104', '', '仓山区', '', '', '', 26.04769000, 119.27345000),('350102', 3, '', '', NULL, '350102', '', '鼓楼区', '', '', '', 26.08198000, 119.30405000),('350103', 3, '', '', NULL, '350103', '', '台江区', '', '', '', 26.05270000, 119.31414000),('341882', 3, '', '', NULL, '341882', '', '广德市', '', '', '', 30.89380000, 119.41705000),('341881', 3, '', '', NULL, '341881', '', '宁国市', '', '', '', 30.63364000, 118.98336000),('341825', 3, '', '', NULL, '341825', '', '旌德县', '', '', '', 30.28636000, 118.54045000),('341824', 3, '', '', NULL, '341824', '', '绩溪县', '', '', '', 30.06633000, 118.57993000),('341823', 3, '', '', NULL, '341823', '', '泾县', '', '', '', 30.68853000, 118.41970000),('341821', 3, '', '', NULL, '341821', '', '郎溪县', '', '', '', 31.12658000, 119.17944000),('341802', 3, '', '', NULL, '341802', '', '宣州区', '', '', '', 30.94622000, 118.75634000),('341723', 3, '', '', NULL, '341723', '', '青阳县', '', '', '', 30.63935000, 117.84749000),('341722', 3, '', '', NULL, '341722', '', '石台县', '', '', '', 30.21026000, 117.48619000),('341721', 3, '', '', NULL, '341721', '', '东至县', '', '', '', 30.09663000, 117.02766000),('341702', 3, '', '', NULL, '341702', '', '贵池区', '', '', '', 30.68673000, 117.56733000),('341623', 3, '', '', NULL, '341623', '', '利辛县', '', '', '', 33.14484000, 116.20839000),('341622', 3, '', '', NULL, '341622', '', '蒙城县', '', '', '', 33.26584000, 116.56450000),('341621', 3, '', '', NULL, '341621', '', '涡阳县', '', '', '', 33.49285000, 116.21581000),('341602', 3, '', '', NULL, '341602', '', '谯城区', '', '', '', 33.87641000, 115.77914000),('341524', 3, '', '', NULL, '341524', '', '金寨县', '', '', '', 31.72719000, 115.93418000),('341525', 3, '', '', NULL, '341525', '', '霍山县', '', '', '', 31.39279000, 116.33269000),('341523', 3, '', '', NULL, '341523', '', '舒城县', '', '', '', 31.46209000, 116.94870000),('341522', 3, '', '', NULL, '341522', '', '霍邱县', '', '', '', 32.35320000, 116.27823000),('341504', 3, '', '', NULL, '341504', '', '叶集区', '', '', '', 31.85122000, 115.91330000),('341503', 3, '', '', NULL, '341503', '', '裕安区', '', '', '', 31.73795000, 116.47995000),('341502', 3, '', '', NULL, '341502', '', '金安区', '', '', '', 31.74933000, 116.53949000),('341324', 3, '', '', NULL, '341324', '', '泗县', '', '', '', 33.48289000, 117.91106000),('341323', 3, '', '', NULL, '341323', '', '灵璧县', '', '', '', 33.54232000, 117.55855000),('341322', 3, '', '', NULL, '341322', '', '萧县', '', '', '', 34.18876000, 116.94724000),('341321', 3, '', '', NULL, '341321', '', '砀山县', '', '', '', 34.44097000, 116.36606000),('341302', 3, '', '', NULL, '341302', '', '埇桥区', '', '', '', 33.64004000, 116.97728000),('341282', 3, '', '', NULL, '341282', '', '界首市', '', '', '', 33.25722000, 115.37436000),('341226', 3, '', '', NULL, '341226', '', '颍上县', '', '', '', 32.62893000, 116.26455000),('341225', 3, '', '', NULL, '341225', '', '阜南县', '', '', '', 32.65891000, 115.59305000),('341222', 3, '', '', NULL, '341222', '', '太和县', '', '', '', 33.16026000, 115.62203000),('341221', 3, '', '', NULL, '341221', '', '临泉县', '', '', '', 33.06457000, 115.25811000),('341204', 3, '', '', NULL, '341204', '', '颍泉区', '', '', '', 32.92505000, 115.80847000),('341203', 3, '', '', NULL, '341203', '', '颍东区', '', '', '', 32.91303000, 115.85668000),('341202', 3, '', '', NULL, '341202', '', '颍州区', '', '', '', 32.88327000, 115.80672000),('341182', 3, '', '', NULL, '341182', '', '明光市', '', '', '', 32.77699000, 117.98944000),('341181', 3, '', '', NULL, '341181', '', '天长市', '', '', '', 32.68945000, 119.00355000),('341126', 3, '', '', NULL, '341126', '', '凤阳县', '', '', '', 32.86600000, 117.56124000),('341125', 3, '', '', NULL, '341125', '', '定远县', '', '', '', 32.52998000, 117.69856000),('341124', 3, '', '', NULL, '341124', '', '全椒县', '', '', '', 32.08530000, 118.27303000),('341122', 3, '', '', NULL, '341122', '', '来安县', '', '', '', 32.45217000, 118.43575000),('341103', 3, '', '', NULL, '341103', '', '南谯区', '', '', '', 32.35317000, 118.17138000),('341102', 3, '', '', NULL, '341102', '', '琅琊区', '', '', '', 32.29480000, 118.30553000),('341024', 3, '', '', NULL, '341024', '', '祁门县', '', '', '', 29.85409000, 117.71715000),('341023', 3, '', '', NULL, '341023', '', '黟县', '', '', '', 29.92476000, 117.93835000),('341022', 3, '', '', NULL, '341022', '', '休宁县', '', '', '', 29.78618000, 118.18245000),('341021', 3, '', '', NULL, '341021', '', '歙县', '', '', '', 29.86076000, 118.41359000),('341004', 3, '', '', NULL, '341004', '', '徽州区', '', '', '', 29.82794000, 118.33681000),('341003', 3, '', '', NULL, '341003', '', '黄山区', '', '', '', 30.27296000, 118.14161000),('341002', 3, '', '', NULL, '341002', '', '屯溪区', '', '', '', 29.69580000, 118.31510000),('340881', 3, '', '', NULL, '340881', '', '桐城市', '', '', '', 31.03585000, 116.97416000),('340882', 3, '', '', NULL, '340882', '', '潜山市', '', '', '', 30.63107000, 116.58133000),('340828', 3, '', '', NULL, '340828', '', '岳西县', '', '', '', 30.84939000, 116.35999000),('340827', 3, '', '', NULL, '340827', '', '望江县', '', '', '', 30.12442000, 116.69423000),('340826', 3, '', '', NULL, '340826', '', '宿松县', '', '', '', 30.15363000, 116.12920000),('340825', 3, '', '', NULL, '340825', '', '太湖县', '', '', '', 30.45411000, 116.30885000),('340822', 3, '', '', NULL, '340822', '', '怀宁县', '', '', '', 30.73381000, 116.82974000),('340811', 3, '', '', NULL, '340811', '', '宜秀区', '', '', '', 30.61358000, 116.98933000),('340803', 3, '', '', NULL, '340803', '', '大观区', '', '', '', 30.51227000, 117.03424000),('340802', 3, '', '', NULL, '340802', '', '迎江区', '', '', '', 30.51155000, 117.09081000),('340722', 3, '', '', NULL, '340722', '', '枞阳县', '', '', '', 30.69961000, 117.22019000),('340711', 3, '', '', NULL, '340711', '', '郊区', '', '', '', 30.90466000, 117.80103000),('340706', 3, '', '', NULL, '340706', '', '义安区', '', '', '', 30.95271000, 117.79147000),('340705', 3, '', '', NULL, '340705', '', '铜官区', '', '', '', 30.95614000, 117.87431000),('340621', 3, '', '', NULL, '340621', '', '濉溪县', '', '', '', 33.91537000, 116.76620000),('340604', 3, '', '', NULL, '340604', '', '烈山区', '', '', '', 33.89577000, 116.81320000),('340603', 3, '', '', NULL, '340603', '', '相山区', '', '', '', 33.95999000, 116.79425000),('340602', 3, '', '', NULL, '340602', '', '杜集区', '', '', '', 33.99141000, 116.82803000),('340523', 3, '', '', NULL, '340523', '', '和县', '', '', '', 31.74423000, 118.35145000),('340522', 3, '', '', NULL, '340522', '', '含山县', '', '', '', 31.73358000, 118.10241000),('340521', 3, '', '', NULL, '340521', '', '当涂县', '', '', '', 31.56990000, 118.49780000),('340506', 3, '', '', NULL, '340506', '', '博望区', '', '', '', 31.55856000, 118.84432000),('340504', 3, '', '', NULL, '340504', '', '雨山区', '', '', '', 31.68216000, 118.49853000),('340503', 3, '', '', NULL, '340503', '', '花山区', '', '', '', 31.69996000, 118.51150000),('340422', 3, '', '', NULL, '340422', '', '寿县', '', '', '', 32.57332000, 116.78708000),('340421', 3, '', '', NULL, '340421', '', '凤台县', '', '', '', 32.70946000, 116.71077000),('340406', 3, '', '', NULL, '340406', '', '潘集区', '', '', '', 32.77263000, 116.83626000),('340405', 3, '', '', NULL, '340405', '', '八公山区', '', '', '', 32.63142000, 116.83359000),('340404', 3, '', '', NULL, '340404', '', '谢家集区', '', '', '', 32.59996000, 116.85913000),('340403', 3, '', '', NULL, '340403', '', '田家庵区', '', '', '', 32.64709000, 117.01743000),('340402', 3, '', '', NULL, '340402', '', '大通区', '', '', '', 32.63149000, 117.05335000),('340323', 3, '', '', NULL, '340323', '', '固镇县', '', '', '', 33.31769000, 117.31666000),('340322', 3, '', '', NULL, '340322', '', '五河县', '', '', '', 33.14507000, 117.88529000),('340321', 3, '', '', NULL, '340321', '', '怀远县', '', '', '', 32.97011000, 117.20514000),('340311', 3, '', '', NULL, '340311', '', '淮上区', '', '', '', 32.96436000, 117.35996000),('340304', 3, '', '', NULL, '340304', '', '禹会区', '', '', '', 32.92921000, 117.34211000),('340303', 3, '', '', NULL, '340303', '', '蚌山区', '', '', '', 32.94448000, 117.36779000),('340302', 3, '', '', NULL, '340302', '', '龙子湖区', '', '', '', 32.94280000, 117.39347000),('340225', 3, '', '', NULL, '340225', '', '无为县', '', '', '', 31.30317000, 117.90224000),('340223', 3, '', '', NULL, '340223', '', '南陵县', '', '', '', 30.91465000, 118.33405000),('340222', 3, '', '', NULL, '340222', '', '繁昌县', '', '', '', 31.08291000, 118.19934000),('340221', 3, '', '', NULL, '340221', '', '芜湖县', '', '', '', 31.13479000, 118.57529000),('340208', 3, '', '', NULL, '340208', '', '三山区', '', '', '', 31.22436000, 118.23464000),('340207', 3, '', '', NULL, '340207', '', '鸠江区', '', '', '', 31.36959000, 118.39236000),('340203', 3, '', '', NULL, '340203', '', '弋江区', '', '', '', 31.31202000, 118.37273000),('340202', 3, '', '', NULL, '340202', '', '镜湖区', '', '', '', 31.34072000, 118.38548000),('340181', 3, '', '', NULL, '340181', '', '巢湖市', '', '', '', 31.62329000, 117.88937000),('340124', 3, '', '', NULL, '340124', '', '庐江县', '', '', '', 31.25567000, 117.28736000),('340123', 3, '', '', NULL, '340123', '', '肥西县', '', '', '', 31.70689000, 117.18283000),('340122', 3, '', '', NULL, '340122', '', '肥东县', '', '', '', 31.88770000, 117.46928000),('340121', 3, '', '', NULL, '340121', '', '长丰县', '', '', '', 32.47796000, 117.16766000),('340111', 3, '', '', NULL, '340111', '', '包河区', '', '', '', 31.79322000, 117.30794000),('340104', 3, '', '', NULL, '340104', '', '蜀山区', '', '', '', 31.85120000, 117.26061000),('340103', 3, '', '', NULL, '340103', '', '庐阳区', '', '', '', 31.87872000, 117.26497000),('331181', 3, '', '', NULL, '331181', '', '龙泉市', '', '', '', 28.07434000, 119.14168000),('340102', 3, '', '', NULL, '340102', '', '瑶海区', '', '', '', 31.85797000, 117.30949000),('331127', 3, '', '', NULL, '331127', '', '景宁畲族自治县', '', '', '', 27.97320000, 119.63581000),('331126', 3, '', '', NULL, '331126', '', '庆元县', '', '', '', 27.61913000, 119.06266000),('331125', 3, '', '', NULL, '331125', '', '云和县', '', '', '', 28.11591000, 119.57340000),('331124', 3, '', '', NULL, '331124', '', '松阳县', '', '', '', 28.44947000, 119.48202000),('331123', 3, '', '', NULL, '331123', '', '遂昌县', '', '', '', 28.59213000, 119.27602000),('331122', 3, '', '', NULL, '331122', '', '缙云县', '', '', '', 28.65928000, 120.09158000),('331121', 3, '', '', NULL, '331121', '', '青田县', '', '', '', 28.13987000, 120.28955000),('331102', 3, '', '', NULL, '331102', '', '莲都区', '', '', '', 28.44594000, 119.91284000),('331083', 3, '', '', NULL, '331083', '', '玉环市', '', '', '', 28.13589000, 121.23164000),('331082', 3, '', '', NULL, '331082', '', '临海市', '', '', '', 28.85840000, 121.14495000),('331081', 3, '', '', NULL, '331081', '', '温岭市', '', '', '', 28.37180000, 121.38599000),('331024', 3, '', '', NULL, '331024', '', '仙居县', '', '', '', 28.84683000, 120.72881000),('331023', 3, '', '', NULL, '331023', '', '天台县', '', '', '', 29.14029000, 121.03093000),('331022', 3, '', '', NULL, '331022', '', '三门县', '', '', '', 29.10467000, 121.39568000),('331004', 3, '', '', NULL, '331004', '', '路桥区', '', '', '', 28.58265000, 121.36508000),('331003', 3, '', '', NULL, '331003', '', '黄岩区', '', '', '', 28.64965000, 121.26295000),('331002', 3, '', '', NULL, '331002', '', '椒江区', '', '', '', 28.67307000, 121.44297000),('330922', 3, '', '', NULL, '330922', '', '嵊泗县', '', '', '', 30.72573000, 122.45137000),('330921', 3, '', '', NULL, '330921', '', '岱山县', '', '', '', 30.24369000, 122.20498000),('330903', 3, '', '', NULL, '330903', '', '普陀区', '', '', '', 29.94920000, 122.30278000),('330902', 3, '', '', NULL, '330902', '', '定海区', '', '', '', 30.01979000, 122.10679000),('330881', 3, '', '', NULL, '330881', '', '江山市', '', '', '', 28.73725000, 118.62690000),('330825', 3, '', '', NULL, '330825', '', '龙游县', '', '', '', 29.02827000, 119.17225000),('330824', 3, '', '', NULL, '330824', '', '开化县', '', '', '', 29.13609000, 118.41422000),('330822', 3, '', '', NULL, '330822', '', '常山县', '', '', '', 28.90141000, 118.51116000),('330803', 3, '', '', NULL, '330803', '', '衢江区', '', '', '', 28.97964000, 118.95919000),('330802', 3, '', '', NULL, '330802', '', '柯城区', '', '', '', 28.96864000, 118.87117000),('330784', 3, '', '', NULL, '330784', '', '永康市', '', '', '', 28.88851000, 120.04731000),('330783', 3, '', '', NULL, '330783', '', '东阳市', '', '', '', 29.28946000, 120.24191000),('330782', 3, '', '', NULL, '330782', '', '义乌市', '', '', '', 29.30558000, 120.07468000),('330781', 3, '', '', NULL, '330781', '', '兰溪市', '', '', '', 29.20838000, 119.46051000),('330727', 3, '', '', NULL, '330727', '', '磐安县', '', '', '', 29.05403000, 120.45022000),('330726', 3, '', '', NULL, '330726', '', '浦江县', '', '', '', 29.45251000, 119.89206000),('330723', 3, '', '', NULL, '330723', '', '武义县', '', '', '', 28.89260000, 119.81651000),('330703', 3, '', '', NULL, '330703', '', '金东区', '', '', '', 29.09914000, 119.69311000),('330702', 3, '', '', NULL, '330702', '', '婺城区', '', '', '', 29.08624000, 119.57150000),('330683', 3, '', '', NULL, '330683', '', '嵊州市', '', '', '', 29.58849000, 120.82170000),('330681', 3, '', '', NULL, '330681', '', '诸暨市', '', '', '', 29.71364000, 120.23632000),('330624', 3, '', '', NULL, '330624', '', '新昌县', '', '', '', 29.49983000, 120.90385000),('330604', 3, '', '', NULL, '330604', '', '上虞区', '', '', '', 30.03227000, 120.86858000),('330603', 3, '', '', NULL, '330603', '', '柯桥区', '', '', '', 30.08189000, 120.49476000),('330602', 3, '', '', NULL, '330602', '', '越城区', '', '', '', 29.98899000, 120.58199000),('330523', 3, '', '', NULL, '330523', '', '安吉县', '', '', '', 30.63824000, 119.68219000),('330522', 3, '', '', NULL, '330522', '', '长兴县', '', '', '', 31.02663000, 119.91011000),('330521', 3, '', '', NULL, '330521', '', '德清县', '', '', '', 30.54270000, 119.97728000),('330503', 3, '', '', NULL, '330503', '', '南浔区', '', '', '', 30.84979000, 120.41847000),('330502', 3, '', '', NULL, '330502', '', '吴兴区', '', '', '', 30.85816000, 120.18562000),('330483', 3, '', '', NULL, '330483', '', '桐乡市', '', '', '', 30.63074000, 120.56432000),('330482', 3, '', '', NULL, '330482', '', '平湖市', '', '', '', 30.67585000, 121.01606000),('330481', 3, '', '', NULL, '330481', '', '海宁市', '', '', '', 30.50938000, 120.68102000),('330424', 3, '', '', NULL, '330424', '', '海盐县', '', '', '', 30.52553000, 120.94579000),('330421', 3, '', '', NULL, '330421', '', '嘉善县', '', '', '', 30.83075000, 120.92716000),('330411', 3, '', '', NULL, '330411', '', '秀洲区', '', '', '', 30.76388000, 120.70920000),('330402', 3, '', '', NULL, '330402', '', '南湖区', '', '', '', 30.74744000, 120.78483000),('330383', 3, '', '', NULL, '330383', '', '龙港市', '', '', '', 27.57820500, 120.55310200),('330382', 3, '', '', NULL, '330382', '', '乐清市', '', '', '', 28.11289000, 120.98338000),('330381', 3, '', '', NULL, '330381', '', '瑞安市', '', '', '', 27.77838000, 120.65518000),('330329', 3, '', '', NULL, '330329', '', '泰顺县', '', '', '', 27.55639000, 119.71750000),('330328', 3, '', '', NULL, '330328', '', '文成县', '', '', '', 27.78712000, 120.09137000),('330327', 3, '', '', NULL, '330327', '', '苍南县', '', '', '', 27.51743000, 120.42631000),('330326', 3, '', '', NULL, '330326', '', '平阳县', '', '', '', 27.66210000, 120.56595000),('330324', 3, '', '', NULL, '330324', '', '永嘉县', '', '', '', 28.15336000, 120.69171000),('330305', 3, '', '', NULL, '330305', '', '洞头区', '', '', '', 27.83616000, 121.15720000),('330304', 3, '', '', NULL, '330304', '', '瓯海区', '', '', '', 28.00708000, 120.63768000),('330303', 3, '', '', NULL, '330303', '', '龙湾区', '', '', '', 27.93252000, 120.81303000),('330302', 3, '', '', NULL, '330302', '', '鹿城区', '', '', '', 28.01469000, 120.65523000),('330282', 3, '', '', NULL, '330282', '', '慈溪市', '', '', '', 30.16964000, 121.26647000),('330281', 3, '', '', NULL, '330281', '', '余姚市', '', '', '', 30.03711000, 121.15435000),('330226', 3, '', '', NULL, '330226', '', '宁海县', '', '', '', 29.28807000, 121.42961000),('330225', 3, '', '', NULL, '330225', '', '象山县', '', '', '', 29.47665000, 121.86932000),('330213', 3, '', '', NULL, '330213', '', '奉化区', '', '', '', 29.65503000, 121.40686000),('330212', 3, '', '', NULL, '330212', '', '鄞州区', '', '', '', 29.81720000, 121.54700000),('330211', 3, '', '', NULL, '330211', '', '镇海区', '', '', '', 29.94899000, 121.71624000),('330206', 3, '', '', NULL, '330206', '', '北仑区', '', '', '', 29.89889000, 121.84431000),('330205', 3, '', '', NULL, '330205', '', '江北区', '', '', '', 29.88615000, 121.55468000),('330203', 3, '', '', NULL, '330203', '', '海曙区', '', '', '', 29.85957000, 121.55084000),('330182', 3, '', '', NULL, '330182', '', '建德市', '', '', '', 29.47475000, 119.28121000),('330127', 3, '', '', NULL, '330127', '', '淳安县', '', '', '', 29.60886000, 119.04207000),('330122', 3, '', '', NULL, '330122', '', '桐庐县', '', '', '', 29.79317000, 119.69150000),('330112', 3, '', '', NULL, '330112', '', '临安区', '', '', '', 30.23383000, 119.72480000),('330111', 3, '', '', NULL, '330111', '', '富阳区', '', '', '', 30.04885000, 119.96043000),('330110', 3, '', '', NULL, '330110', '', '余杭区', '', '', '', 30.41875000, 120.29850100),('330109', 3, '', '', NULL, '330109', '', '萧山区', '', '', '', 30.18534000, 120.26457000),('330108', 3, '', '', NULL, '330108', '', '滨江区', '', '', '', 30.20840000, 120.21201000),('330106', 3, '', '', NULL, '330106', '', '西湖区', '', '', '', 30.25961000, 120.13026000),('330105', 3, '', '', NULL, '330105', '', '拱墅区', '', '', '', 30.31974000, 120.14210000),('330104', 3, '', '', NULL, '330104', '', '江干区', '', '', '', 30.25727000, 120.20523000),('330103', 3, '', '', NULL, '330103', '', '下城区', '', '', '', 30.28122000, 120.18117000),('330102', 3, '', '', NULL, '330102', '', '上城区', '', '', '', 30.24259000, 120.16929000),('321324', 3, '', '', NULL, '321324', '', '泗洪县', '', '', '', 33.45900000, 118.21624000),('321323', 3, '', '', NULL, '321323', '', '泗阳县', '', '', '', 33.72101000, 118.70335000),('321322', 3, '', '', NULL, '321322', '', '沭阳县', '', '', '', 34.11215000, 118.80406000),('321311', 3, '', '', NULL, '321311', '', '宿豫区', '', '', '', 33.94686000, 118.33066000),('321302', 3, '', '', NULL, '321302', '', '宿城区', '', '', '', 33.96271000, 118.24239000),('321283', 3, '', '', NULL, '321283', '', '泰兴市', '', '', '', 32.17191000, 120.05200000),('321282', 3, '', '', NULL, '321282', '', '靖江市', '', '', '', 32.01494000, 120.27454000),('321281', 3, '', '', NULL, '321281', '', '兴化市', '', '', '', 32.91041000, 119.85272000),('321204', 3, '', '', NULL, '321204', '', '姜堰区', '', '', '', 32.50879000, 120.12673000),('321203', 3, '', '', NULL, '321203', '', '高港区', '', '', '', 32.31841000, 119.88116000),('321202', 3, '', '', NULL, '321202', '', '海陵区', '', '', '', 32.49098000, 119.91956000),('321183', 3, '', '', NULL, '321183', '', '句容市', '', '', '', 31.94482000, 119.16864000),('321182', 3, '', '', NULL, '321182', '', '扬中市', '', '', '', 32.23702000, 119.79682000),('321181', 3, '', '', NULL, '321181', '', '丹阳市', '', '', '', 32.00945000, 119.60694000),('321112', 3, '', '', NULL, '321112', '', '丹徒区', '', '', '', 32.13188000, 119.43396000),('321111', 3, '', '', NULL, '321111', '', '润州区', '', '', '', 32.19525000, 119.41217000),('321102', 3, '', '', NULL, '321102', '', '京口区', '', '', '', 32.19811000, 119.46962000),('321084', 3, '', '', NULL, '321084', '', '高邮市', '', '', '', 32.78112000, 119.45558000),('321081', 3, '', '', NULL, '321081', '', '仪征市', '', '', '', 32.27203000, 119.18444000),('321023', 3, '', '', NULL, '321023', '', '宝应县', '', '', '', 33.24142000, 119.35841000),('321012', 3, '', '', NULL, '321012', '', '江都区', '', '', '', 32.43458000, 119.57006000),('321003', 3, '', '', NULL, '321003', '', '邗江区', '', '', '', 32.37654000, 119.39823000),('321002', 3, '', '', NULL, '321002', '', '广陵区', '', '', '', 32.39463000, 119.43157000),('320981', 3, '', '', NULL, '320981', '', '东台市', '', '', '', 32.86695000, 120.32050000),('320925', 3, '', '', NULL, '320925', '', '建湖县', '', '', '', 33.46406000, 119.79858000),('320924', 3, '', '', NULL, '320924', '', '射阳县', '', '', '', 33.77496000, 120.25815000),('320923', 3, '', '', NULL, '320923', '', '阜宁县', '', '', '', 33.75931000, 119.80258000),('320922', 3, '', '', NULL, '320922', '', '滨海县', '', '', '', 33.98975000, 119.82064000),('320921', 3, '', '', NULL, '320921', '', '响水县', '', '', '', 34.19919000, 119.57839000),('320904', 3, '', '', NULL, '320904', '', '大丰区', '', '', '', 33.20107000, 120.50102000),('320903', 3, '', '', NULL, '320903', '', '盐都区', '', '', '', 33.33732000, 120.15448000),('320902', 3, '', '', NULL, '320902', '', '亭湖区', '', '', '', 33.38893000, 120.19530000),('320831', 3, '', '', NULL, '320831', '', '金湖县', '', '', '', 33.02359000, 119.02043000),('320830', 3, '', '', NULL, '320830', '', '盱眙县', '', '', '', 33.01089000, 118.54499000),('320826', 3, '', '', NULL, '320826', '', '涟水县', '', '', '', 33.78098000, 119.26089000),('320813', 3, '', '', NULL, '320813', '', '洪泽区', '', '', '', 33.29433000, 118.87350000),('320812', 3, '', '', NULL, '320812', '', '清江浦区', '', '', '', 33.55308000, 119.02662000),('320804', 3, '', '', NULL, '320804', '', '淮阴区', '', '', '', 33.63175000, 119.03490000),('320803', 3, '', '', NULL, '320803', '', '淮安区', '', '', '', 33.50306000, 119.14108000),('320724', 3, '', '', NULL, '320724', '', '灌南县', '', '', '', 34.08673000, 119.31563000),('320723', 3, '', '', NULL, '320723', '', '灌云县', '', '', '', 34.28407000, 119.24096000),('320722', 3, '', '', NULL, '320722', '', '东海县', '', '', '', 34.54216000, 118.77147000),('320707', 3, '', '', NULL, '320707', '', '赣榆区', '', '', '', 34.84065000, 119.17730000),('320706', 3, '', '', NULL, '320706', '', '海州区', '', '', '', 34.57203000, 119.16348000),('320703', 3, '', '', NULL, '320703', '', '连云区', '', '', '', 34.75974000, 119.33894000),('320685', 3, '', '', NULL, '320685', '', '海安市', '', '', '', 32.53308000, 120.46759000),('320684', 3, '', '', NULL, '320684', '', '海门市', '', '', '', 31.87165000, 121.18179000),('320682', 3, '', '', NULL, '320682', '', '如皋市', '', '', '', 32.37160000, 120.57382000),('320681', 3, '', '', NULL, '320681', '', '启东市', '', '', '', 31.80805000, 121.65787000),('320623', 3, '', '', NULL, '320623', '', '如东县', '', '', '', 32.32956000, 121.18502000),('320612', 3, '', '', NULL, '320612', '', '通州区', '', '', '', 32.06764000, 121.07299000),('320611', 3, '', '', NULL, '320611', '', '港闸区', '', '', '', 32.03141000, 120.81813000),('320602', 3, '', '', NULL, '320602', '', '崇川区', '', '', '', 32.00986000, 120.85737000),('320585', 3, '', '', NULL, '320585', '', '太仓市', '', '', '', 31.45911000, 121.12975000),('320583', 3, '', '', NULL, '320583', '', '昆山市', '', '', '', 31.38475000, 120.98181000),('320582', 3, '', '', NULL, '320582', '', '张家港市', '', '', '', 31.87547000, 120.55550000),('320581', 3, '', '', NULL, '320581', '', '常熟市', '', '', '', 31.65381000, 120.75224000),('320509', 3, '', '', NULL, '320509', '', '吴江区', '', '', '', 31.13914000, 120.64517000),('320508', 3, '', '', NULL, '320508', '', '姑苏区', '', '', '', 31.30227000, 120.63132000),('320507', 3, '', '', NULL, '320507', '', '相城区', '', '', '', 31.36897000, 120.64247000),('320506', 3, '', '', NULL, '320506', '', '吴中区', '', '', '', 31.26249000, 120.63212000),('320505', 3, '', '', NULL, '320505', '', '虎丘区', '', '', '', 31.29579000, 120.57186000),('320481', 3, '', '', NULL, '320481', '', '溧阳市', '', '', '', 31.41586000, 119.48460000),('320413', 3, '', '', NULL, '320413', '', '金坛区', '', '', '', 31.72322000, 119.59794000),('320412', 3, '', '', NULL, '320412', '', '武进区', '', '', '', 31.70165000, 119.94311000),('320411', 3, '', '', NULL, '320411', '', '新北区', '', '', '', 31.83052000, 119.97147000),('320404', 3, '', '', NULL, '320404', '', '钟楼区', '', '', '', 31.80164000, 119.90143000),('320402', 3, '', '', NULL, '320402', '', '天宁区', '', '', '', 31.77973000, 119.97472000),('320382', 3, '', '', NULL, '320382', '', '邳州市', '', '', '', 34.33520000, 118.01246000),('320381', 3, '', '', NULL, '320381', '', '新沂市', '', '', '', 34.36927000, 118.35548000),('320324', 3, '', '', NULL, '320324', '', '睢宁县', '', '', '', 33.91274000, 117.94108000),('320322', 3, '', '', NULL, '320322', '', '沛县', '', '', '', 34.72166000, 116.93750000),('320321', 3, '', '', NULL, '320321', '', '丰县', '', '', '', 34.69396000, 116.59532000),('320312', 3, '', '', NULL, '320312', '', '铜山区', '', '', '', 34.18044000, 117.16898000),('320311', 3, '', '', NULL, '320311', '', '泉山区', '', '', '', 34.22565000, 117.19425000),('320305', 3, '', '', NULL, '320305', '', '贾汪区', '', '', '', 34.44308000, 117.45353000),('320303', 3, '', '', NULL, '320303', '', '云龙区', '', '', '', 34.25306000, 117.25147000),('320302', 3, '', '', NULL, '320302', '', '鼓楼区', '', '', '', 34.28823000, 117.18554000),('320282', 3, '', '', NULL, '320282', '', '宜兴市', '', '', '', 31.34042000, 119.82346000),('320281', 3, '', '', NULL, '320281', '', '江阴市', '', '', '', 31.91919000, 120.28432000),('320214', 3, '', '', NULL, '320214', '', '新吴区', '', '', '', 31.49055000, 120.36434000),('320213', 3, '', '', NULL, '320213', '', '梁溪区', '', '', '', 31.56597000, 120.30297000),('320211', 3, '', '', NULL, '320211', '', '滨湖区', '', '', '', 31.52853000, 120.28429000),('320206', 3, '', '', NULL, '320206', '', '惠山区', '', '', '', 31.68096000, 120.29834000),('320205', 3, '', '', NULL, '320205', '', '锡山区', '', '', '', 31.58849000, 120.35761000),('320118', 3, '', '', NULL, '320118', '', '高淳区', '', '', '', 31.32751000, 118.89210000),('320117', 3, '', '', NULL, '320117', '', '溧水区', '', '', '', 31.65100000, 119.02840000),('320116', 3, '', '', NULL, '320116', '', '六合区', '', '', '', 32.32222000, 118.82155000),('320115', 3, '', '', NULL, '320115', '', '江宁区', '', '', '', 31.95266000, 118.84002000),('320114', 3, '', '', NULL, '320114', '', '雨花台区', '', '', '', 31.99226000, 118.77870000),('320113', 3, '', '', NULL, '320113', '', '栖霞区', '', '', '', 32.09636000, 118.90907000),('320111', 3, '', '', NULL, '320111', '', '浦口区', '', '', '', 32.05900000, 118.62841000),('320106', 3, '', '', NULL, '320106', '', '鼓楼区', '', '', '', 32.06639000, 118.77013000),('320104', 3, '', '', NULL, '320104', '', '秦淮区', '', '', '', 32.03899000, 118.79450000),('320105', 3, '', '', NULL, '320105', '', '建邺区', '', '', '', 32.00335000, 118.73145000),('320102', 3, '', '', NULL, '320102', '', '玄武区', '', '', '', 32.04835000, 118.79809000),('232761', 3, '', '', NULL, '232761', '', '加格达奇区', '', '', '', 50.40856000, 124.13956000),('232722', 3, '', '', NULL, '232722', '', '塔河县', '', '', '', 52.33432000, 124.71003000),('232721', 3, '', '', NULL, '232721', '', '呼玛县', '', '', '', 51.72606000, 126.65291000),('232701', 3, '', '', NULL, '232701', '', '漠河市', '', '', '', 52.97209000, 122.53864000),('231283', 3, '', '', NULL, '231283', '', '海伦市', '', '', '', 47.46210000, 126.97338000),('231281', 3, '', '', NULL, '231281', '', '安达市', '', '', '', 46.41773000, 125.34379000),('231282', 3, '', '', NULL, '231282', '', '肇东市', '', '', '', 46.05121000, 125.96250000),('231226', 3, '', '', NULL, '231226', '', '绥棱县', '', '', '', 47.23609000, 127.11478000),('231225', 3, '', '', NULL, '231225', '', '明水县', '', '', '', 47.17332000, 125.90600000),('231224', 3, '', '', NULL, '231224', '', '庆安县', '', '', '', 46.88020000, 127.50758000),('231223', 3, '', '', NULL, '231223', '', '青冈县', '', '', '', 46.68966000, 126.11387000),('231222', 3, '', '', NULL, '231222', '', '兰西县', '', '', '', 46.25241000, 126.28788000),('231202', 3, '', '', NULL, '231202', '', '北林区', '', '', '', 46.63730000, 126.98566000),('231221', 3, '', '', NULL, '231221', '', '望奎县', '', '', '', 46.83281000, 126.48602000),('231183', 3, '', '', NULL, '231183', '', '嫩江市', '', '', '', 49.18572000, 125.22094000),('231182', 3, '', '', NULL, '231182', '', '五大连池市', '', '', '', 48.51649000, 126.20451000),('231181', 3, '', '', NULL, '231181', '', '北安市', '', '', '', 48.24146000, 126.49108000),('231124', 3, '', '', NULL, '231124', '', '孙吴县', '', '', '', 49.42543000, 127.33605000),('231123', 3, '', '', NULL, '231123', '', '逊克县', '', '', '', 49.56437000, 128.47871000),('231102', 3, '', '', NULL, '231102', '', '爱辉区', '', '', '', 50.25210000, 127.50048000),('231086', 3, '', '', NULL, '231086', '', '东宁市', '', '', '', 44.08694000, 131.12463000),('231085', 3, '', '', NULL, '231085', '', '穆棱市', '', '', '', 44.91883000, 130.52468000),('231084', 3, '', '', NULL, '231084', '', '宁安市', '', '', '', 44.34018000, 129.48280000),('231081', 3, '', '', NULL, '231081', '', '绥芬河市', '', '', '', 44.41320000, 131.15012000),('231083', 3, '', '', NULL, '231083', '', '海林市', '', '', '', 44.59378000, 129.38064000),('231025', 3, '', '', NULL, '231025', '', '林口县', '', '', '', 45.27782000, 130.28315000),('231005', 3, '', '', NULL, '231005', '', '西安区', '', '', '', 44.57750000, 129.61610000),('231004', 3, '', '', NULL, '231004', '', '爱民区', '', '', '', 44.59608000, 129.59176000),('231003', 3, '', '', NULL, '231003', '', '阳明区', '', '', '', 44.59630000, 129.63559000),('231002', 3, '', '', NULL, '231002', '', '东安区', '', '', '', 44.58122000, 129.62672000),('230921', 3, '', '', NULL, '230921', '', '勃利县', '', '', '', 45.75506000, 130.59144000),('230904', 3, '', '', NULL, '230904', '', '茄子河区', '', '', '', 45.78487000, 131.06693000),('230903', 3, '', '', NULL, '230903', '', '桃山区', '', '', '', 45.76554000, 131.02000000),('230902', 3, '', '', NULL, '230902', '', '新兴区', '', '', '', 45.81597000, 130.93210000),('230883', 3, '', '', NULL, '230883', '', '抚远市', '', '', '', 48.36485000, 134.30795000),('230881', 3, '', '', NULL, '230881', '', '同江市', '', '', '', 47.64213000, 132.51101000),('230882', 3, '', '', NULL, '230882', '', '富锦市', '', '', '', 47.25022000, 132.03728000),('230828', 3, '', '', NULL, '230828', '', '汤原县', '', '', '', 46.73068000, 129.90495000),('230826', 3, '', '', NULL, '230826', '', '桦川县', '', '', '', 47.02300000, 130.71898000),('230822', 3, '', '', NULL, '230822', '', '桦南县', '', '', '', 46.23925000, 130.55366000),('230811', 3, '', '', NULL, '230811', '', '郊区', '', '', '', 46.80975000, 130.32707000),('230805', 3, '', '', NULL, '230805', '', '东风区', '', '', '', 46.82252000, 130.40368000),('230804', 3, '', '', NULL, '230804', '', '前进区', '', '', '', 46.81409000, 130.37525000),('230803', 3, '', '', NULL, '230803', '', '向阳区', '', '', '', 46.80774000, 130.36547000),('230781', 3, '', '', NULL, '230781', '', '铁力市', '', '', '', 46.98664000, 128.03243000),('230722', 3, '', '', NULL, '230722', '', '嘉荫县', '', '', '', 48.88942000, 130.40308000),('230716', 3, '', '', NULL, '230716', '', '上甘岭区', '', '', '', 47.97469000, 129.02439000),('230715', 3, '', '', NULL, '230715', '', '红星区', '', '', '', 48.23941000, 129.39081000),('230714', 3, '', '', NULL, '230714', '', '乌伊岭区', '', '', '', 48.59057000, 129.43773000),('230713', 3, '', '', NULL, '230713', '', '带岭区', '', '', '', 47.02834000, 129.02057000),('230712', 3, '', '', NULL, '230712', '', '汤旺河区', '', '', '', 48.45469000, 129.57097000),('230711', 3, '', '', NULL, '230711', '', '乌马河区', '', '', '', 47.72669000, 128.80019000),('230710', 3, '', '', NULL, '230710', '', '五营区', '', '', '', 48.10802000, 129.24536000),('230709', 3, '', '', NULL, '230709', '', '金山屯区', '', '', '', 47.41303000, 129.42899000),('230708', 3, '', '', NULL, '230708', '', '美溪区', '', '', '', 47.63508000, 129.12925000),('230707', 3, '', '', NULL, '230707', '', '新青区', '', '', '', 48.29045000, 129.53362000),('230706', 3, '', '', NULL, '230706', '', '翠峦区', '', '', '', 47.72582000, 128.66900000),('230705', 3, '', '', NULL, '230705', '', '西林区', '', '', '', 47.48081000, 129.31286000),('230704', 3, '', '', NULL, '230704', '', '友好区', '', '', '', 47.85380000, 128.84071000),('230702', 3, '', '', NULL, '230702', '', '伊春区', '', '', '', 47.72798000, 128.90743000),('230703', 3, '', '', NULL, '230703', '', '南岔区', '', '', '', 47.13799000, 129.28365000),('230624', 3, '', '', NULL, '230624', '', '杜尔伯特蒙古族自治县', '', '', '', 46.86231000, 124.44278000),('230623', 3, '', '', NULL, '230623', '', '林甸县', '', '', '', 47.18298000, 124.87130000),('230622', 3, '', '', NULL, '230622', '', '肇源县', '', '', '', 45.51830000, 125.07795000),('230621', 3, '', '', NULL, '230621', '', '肇州县', '', '', '', 45.69886000, 125.26859000),('230606', 3, '', '', NULL, '230606', '', '大同区', '', '', '', 46.03904000, 124.81056000),('230605', 3, '', '', NULL, '230605', '', '红岗区', '', '', '', 46.39818000, 124.89082000),('230604', 3, '', '', NULL, '230604', '', '让胡路区', '', '', '', 46.65225000, 124.87083000),('230602', 3, '', '', NULL, '230602', '', '萨尔图区', '', '', '', 46.60302000, 125.05422000),('230603', 3, '', '', NULL, '230603', '', '龙凤区', '', '', '', 46.56182000, 125.13415000),('230524', 3, '', '', NULL, '230524', '', '饶河县', '', '', '', 46.79820000, 134.01324000),('230523', 3, '', '', NULL, '230523', '', '宝清县', '', '', '', 46.32695000, 132.19708000),('230522', 3, '', '', NULL, '230522', '', '友谊县', '', '', '', 46.76743000, 131.80795000),('230521', 3, '', '', NULL, '230521', '', '集贤县', '', '', '', 46.72844000, 131.14115000),('230506', 3, '', '', NULL, '230506', '', '宝山区', '', '', '', 46.57727000, 131.40178000),('230505', 3, '', '', NULL, '230505', '', '四方台区', '', '', '', 46.59426000, 131.33446000),('230503', 3, '', '', NULL, '230503', '', '岭东区', '', '', '', 46.54464000, 131.15214000),('230502', 3, '', '', NULL, '230502', '', '尖山区', '', '', '', 46.64618000, 131.15840000),('230422', 3, '', '', NULL, '230422', '', '绥滨县', '', '', '', 47.28906000, 131.85224000),('230421', 3, '', '', NULL, '230421', '', '萝北县', '', '', '', 47.57752000, 130.82860000),('230406', 3, '', '', NULL, '230406', '', '东山区', '', '', '', 47.33872000, 130.31755000),('230407', 3, '', '', NULL, '230407', '', '兴山区', '', '', '', 47.38460000, 130.33302000),('230405', 3, '', '', NULL, '230405', '', '兴安区', '', '', '', 47.25286000, 130.23924000),('230404', 3, '', '', NULL, '230404', '', '南山区', '', '', '', 47.31506000, 130.28714000),('230403', 3, '', '', NULL, '230403', '', '工农区', '', '', '', 47.31872000, 130.27482000),('230402', 3, '', '', NULL, '230402', '', '向阳区', '', '', '', 47.34254000, 130.29430000),('230382', 3, '', '', NULL, '230382', '', '密山市', '', '', '', 45.52975000, 131.84631000),('230381', 3, '', '', NULL, '230381', '', '虎林市', '', '', '', 45.76267000, 132.93695000),('230307', 3, '', '', NULL, '230307', '', '麻山区', '', '', '', 45.21213000, 130.47817000),('230321', 3, '', '', NULL, '230321', '', '鸡东县', '', '', '', 45.26002000, 131.12408000),('230306', 3, '', '', NULL, '230306', '', '城子河区', '', '', '', 45.33693000, 131.01136000),('230305', 3, '', '', NULL, '230305', '', '梨树区', '', '', '', 45.09203000, 130.69708000),('230304', 3, '', '', NULL, '230304', '', '滴道区', '', '', '', 45.34872000, 130.84367000),('230303', 3, '', '', NULL, '230303', '', '恒山区', '', '', '', 45.21072000, 130.90499000),('230281', 3, '', '', NULL, '230281', '', '讷河市', '', '', '', 48.48419000, 124.88397000),('230302', 3, '', '', NULL, '230302', '', '鸡冠区', '', '', '', 45.30412000, 130.98084000),('230231', 3, '', '', NULL, '230231', '', '拜泉县', '', '', '', 47.59569000, 126.10005000),('230230', 3, '', '', NULL, '230230', '', '克东县', '', '', '', 48.04167000, 126.24871000),('230229', 3, '', '', NULL, '230229', '', '克山县', '', '', '', 48.03694000, 125.87561000),('230227', 3, '', '', NULL, '230227', '', '富裕县', '', '', '', 47.77533000, 124.47387000),('230225', 3, '', '', NULL, '230225', '', '甘南县', '', '', '', 47.92037000, 123.50624000),('230224', 3, '', '', NULL, '230224', '', '泰来县', '', '', '', 46.39389000, 123.41738000),('230223', 3, '', '', NULL, '230223', '', '依安县', '', '', '', 47.89349000, 125.30621000),('230221', 3, '', '', NULL, '230221', '', '龙江县', '', '', '', 47.33737000, 123.20483000),('230208', 3, '', '', NULL, '230208', '', '梅里斯达斡尔族区', '', '', '', 47.30950000, 123.75281000),('230207', 3, '', '', NULL, '230207', '', '碾子山区', '', '', '', 47.51698000, 122.88777000),('230206', 3, '', '', NULL, '230206', '', '富拉尔基区', '', '', '', 47.20890000, 123.62937000),('230205', 3, '', '', NULL, '230205', '', '昂昂溪区', '', '', '', 47.15517000, 123.82234000),('230204', 3, '', '', NULL, '230204', '', '铁锋区', '', '', '', 47.34076000, 123.97807000),('230203', 3, '', '', NULL, '230203', '', '建华区', '', '', '', 47.35434000, 123.95546000),('230202', 3, '', '', NULL, '230202', '', '龙沙区', '', '', '', 47.31742000, 123.95763000),('230183', 3, '', '', NULL, '230183', '', '尚志市', '', '', '', 45.21102000, 127.96027000),('230184', 3, '', '', NULL, '230184', '', '五常市', '', '', '', 44.93191000, 127.16746000),('230129', 3, '', '', NULL, '230129', '', '延寿县', '', '', '', 45.45190000, 128.33162000),('230128', 3, '', '', NULL, '230128', '', '通河县', '', '', '', 45.99010000, 128.74607000),('230127', 3, '', '', NULL, '230127', '', '木兰县', '', '', '', 45.95038000, 128.04392000),('230125', 3, '', '', NULL, '230125', '', '宾县', '', '', '', 45.75864000, 127.48586000),('230126', 3, '', '', NULL, '230126', '', '巴彦县', '', '', '', 46.08536000, 127.40350000),('230124', 3, '', '', NULL, '230124', '', '方正县', '', '', '', 45.85253000, 128.82707000),('230123', 3, '', '', NULL, '230123', '', '依兰县', '', '', '', 46.32489000, 129.56859000),('230113', 3, '', '', NULL, '230113', '', '双城区', '', '', '', 45.38355000, 126.31227000),('230112', 3, '', '', NULL, '230112', '', '阿城区', '', '', '', 45.54774000, 126.95717000),('230111', 3, '', '', NULL, '230111', '', '呼兰区', '', '', '', 45.88899000, 126.58796000),('230110', 3, '', '', NULL, '230110', '', '香坊区', '', '', '', 45.70847000, 126.66287000),('230109', 3, '', '', NULL, '230109', '', '松北区', '', '', '', 45.80825000, 126.56279000),('230108', 3, '', '', NULL, '230108', '', '平房区', '', '', '', 45.59799000, 126.63768000),('230104', 3, '', '', NULL, '230104', '', '道外区', '', '', '', 45.79201000, 126.64932000),('230103', 3, '', '', NULL, '230103', '', '南岗区', '', '', '', 45.76021000, 126.66837000),('230102', 3, '', '', NULL, '230102', '', '道里区', '', '', '', 45.75567000, 126.61686000),('222426', 3, '', '', NULL, '222426', '', '安图县', '', '', '', 43.11166000, 128.89920000),('222424', 3, '', '', NULL, '222424', '', '汪清县', '', '', '', 43.31281000, 129.77125000),('222406', 3, '', '', NULL, '222406', '', '和龙市', '', '', '', 42.54641000, 129.01079000),('222405', 3, '', '', NULL, '222405', '', '龙井市', '', '', '', 42.76587000, 129.42641000),('222404', 3, '', '', NULL, '222404', '', '珲春市', '', '', '', 42.86249000, 130.36577000),('222403', 3, '', '', NULL, '222403', '', '敦化市', '', '', '', 43.37278000, 128.23109000),('222402', 3, '', '', NULL, '222402', '', '图们市', '', '', '', 42.96805000, 129.84390000),('222401', 3, '', '', NULL, '222401', '', '延吉市', '', '', '', 42.89107000, 129.50910000),('220882', 3, '', '', NULL, '220882', '', '大安市', '', '', '', 45.50711000, 124.29252000),('220881', 3, '', '', NULL, '220881', '', '洮南市', '', '', '', 45.33559000, 122.78635000),('220822', 3, '', '', NULL, '220822', '', '通榆县', '', '', '', 44.81296000, 123.08831000),('220821', 3, '', '', NULL, '220821', '', '镇赉县', '', '', '', 45.84825000, 123.19987000),('220802', 3, '', '', NULL, '220802', '', '洮北区', '', '', '', 45.62160000, 122.85111000),('220781', 3, '', '', NULL, '220781', '', '扶余市', '', '', '', 44.99014000, 126.04972000),('220723', 3, '', '', NULL, '220723', '', '乾安县', '', '', '', 45.00457000, 124.02797000),('220722', 3, '', '', NULL, '220722', '', '长岭县', '', '', '', 44.27591000, 123.96730000),('220721', 3, '', '', NULL, '220721', '', '前郭尔罗斯蒙古族自治县', '', '', '', 45.11730000, 124.82357000),('220702', 3, '', '', NULL, '220702', '', '宁江区', '', '', '', 45.17185000, 124.81698000),('220681', 3, '', '', NULL, '220681', '', '临江市', '', '', '', 41.81193000, 126.91798000),('220623', 3, '', '', NULL, '220623', '', '长白朝鲜族自治县', '', '', '', 41.41997000, 128.20050000),('220621', 3, '', '', NULL, '220621', '', '抚松县', '', '', '', 42.34202000, 127.28036000),('220622', 3, '', '', NULL, '220622', '', '靖宇县', '', '', '', 42.38872000, 126.81329000),('220605', 3, '', '', NULL, '220605', '', '江源区', '', '', '', 42.05665000, 126.59088000),('220602', 3, '', '', NULL, '220602', '', '浑江区', '', '', '', 41.94507000, 126.41700000),('220582', 3, '', '', NULL, '220582', '', '集安市', '', '', '', 41.12622000, 126.19269000),('220581', 3, '', '', NULL, '220581', '', '梅河口市', '', '', '', 42.53873000, 125.71210000),('220524', 3, '', '', NULL, '220524', '', '柳河县', '', '', '', 42.28470000, 125.74478000),('220523', 3, '', '', NULL, '220523', '', '辉南县', '', '', '', 42.68499000, 126.04687000),('220521', 3, '', '', NULL, '220521', '', '通化县', '', '', '', 41.67929000, 125.75940000),('220502', 3, '', '', NULL, '220502', '', '东昌区', '', '', '', 41.72850000, 125.95513000),('220503', 3, '', '', NULL, '220503', '', '二道江区', '', '', '', 41.77420000, 126.04262000),('220422', 3, '', '', NULL, '220422', '', '东辽县', '', '', '', 42.92636000, 124.99162000),('220421', 3, '', '', NULL, '220421', '', '东丰县', '', '', '', 42.67704000, 125.53056000),('220402', 3, '', '', NULL, '220402', '', '龙山区', '', '', '', 42.90150000, 125.13682000),('220403', 3, '', '', NULL, '220403', '', '西安区', '', '', '', 42.92689000, 125.14922000),('220382', 3, '', '', NULL, '220382', '', '双辽市', '', '', '', 43.51845000, 123.50296000),('220381', 3, '', '', NULL, '220381', '', '公主岭市', '', '', '', 43.50468000, 124.82280000),('220323', 3, '', '', NULL, '220323', '', '伊通满族自治县', '', '', '', 43.34494000, 125.30536000),('220322', 3, '', '', NULL, '220322', '', '梨树县', '', '', '', 43.30717000, 124.33564000),('220303', 3, '', '', NULL, '220303', '', '铁东区', '', '', '', 43.16208000, 124.40946000),('220302', 3, '', '', NULL, '220302', '', '铁西区', '', '', '', 43.14635000, 124.34515000),('220284', 3, '', '', NULL, '220284', '', '磐石市', '', '', '', 42.94662000, 126.06046000),('220283', 3, '', '', NULL, '220283', '', '舒兰市', '', '', '', 44.40586000, 126.96532000),('220282', 3, '', '', NULL, '220282', '', '桦甸市', '', '', '', 42.97208000, 126.74627000),('220281', 3, '', '', NULL, '220281', '', '蛟河市', '', '', '', 43.72393000, 127.34477000),('220221', 3, '', '', NULL, '220221', '', '永吉县', '', '', '', 43.67253000, 126.49754000),('220211', 3, '', '', NULL, '220211', '', '丰满区', '', '', '', 43.82142000, 126.56206000),('220204', 3, '', '', NULL, '220204', '', '船营区', '', '', '', 43.83395000, 126.54113000),('220203', 3, '', '', NULL, '220203', '', '龙潭区', '', '', '', 43.91060000, 126.56223000),('220202', 3, '', '', NULL, '220202', '', '昌邑区', '', '', '', 43.88187000, 126.57436000),('220183', 3, '', '', NULL, '220183', '', '德惠市', '', '', '', 44.53709000, 125.70558000),('220182', 3, '', '', NULL, '220182', '', '榆树市', '', '', '', 44.83989000, 126.53300000),('220122', 3, '', '', NULL, '220122', '', '农安县', '', '', '', 44.43195000, 125.18512000),('220113', 3, '', '', NULL, '220113', '', '九台区', '', '', '', 44.15174000, 125.83949000),('220112', 3, '', '', NULL, '220112', '', '双阳区', '', '', '', 43.52503000, 125.66464000),('220106', 3, '', '', NULL, '220106', '', '绿园区', '', '', '', 43.88041000, 125.25606000),('220105', 3, '', '', NULL, '220105', '', '二道区', '', '', '', 43.86497000, 125.37427000),('220104', 3, '', '', NULL, '220104', '', '朝阳区', '', '', '', 43.83327000, 125.28845000),('220103', 3, '', '', NULL, '220103', '', '宽城区', '', '', '', 43.94288000, 125.32615000),('220102', 3, '', '', NULL, '220102', '', '南关区', '', '', '', 43.86414000, 125.35043000),('211481', 3, '', '', NULL, '211481', '', '兴城市', '', '', '', 40.61018000, 120.75619000),('211422', 3, '', '', NULL, '211422', '', '建昌县', '', '', '', 40.82408000, 119.83715000),('211421', 3, '', '', NULL, '211421', '', '绥中县', '', '', '', 40.32565000, 120.34431000),('211404', 3, '', '', NULL, '211404', '', '南票区', '', '', '', 41.10714000, 120.74985000),('211403', 3, '', '', NULL, '211403', '', '龙港区', '', '', '', 40.73545000, 120.89393000),('211402', 3, '', '', NULL, '211402', '', '连山区', '', '', '', 40.77526000, 120.86908000),('211382', 3, '', '', NULL, '211382', '', '凌源市', '', '', '', 41.24548000, 119.40134000),('211324', 3, '', '', NULL, '211324', '', '喀喇沁左翼蒙古族自治县', '', '', '', 41.12738000, 119.74048000),('211381', 3, '', '', NULL, '211381', '', '北票市', '', '', '', 41.80080000, 120.77091000),('211322', 3, '', '', NULL, '211322', '', '建平县', '', '', '', 41.40320000, 119.64396000),('211321', 3, '', '', NULL, '211321', '', '朝阳县', '', '', '', 41.36782000, 120.29592000),('211303', 3, '', '', NULL, '211303', '', '龙城区', '', '', '', 41.59973000, 120.41555000),('211302', 3, '', '', NULL, '211302', '', '双塔区', '', '', '', 41.56570000, 120.45372000),('211282', 3, '', '', NULL, '211282', '', '开原市', '', '', '', 42.54645000, 124.03820000),('211281', 3, '', '', NULL, '211281', '', '调兵山市', '', '', '', 42.46755000, 123.56690000),('211224', 3, '', '', NULL, '211224', '', '昌图县', '', '', '', 42.78613000, 124.11092000),('211221', 3, '', '', NULL, '211221', '', '铁岭县', '', '', '', 42.22284000, 123.72783000),('211223', 3, '', '', NULL, '211223', '', '西丰县', '', '', '', 42.73835000, 124.72734000),('211204', 3, '', '', NULL, '211204', '', '清河区', '', '', '', 42.54682000, 124.15916000),('211202', 3, '', '', NULL, '211202', '', '银州区', '', '', '', 42.28620000, 123.84241000),('211122', 3, '', '', NULL, '211122', '', '盘山县', '', '', '', 41.24265000, 121.99630000),('211104', 3, '', '', NULL, '211104', '', '大洼区', '', '', '', 41.00247000, 122.08245000),('211103', 3, '', '', NULL, '211103', '', '兴隆台区', '', '', '', 41.13876000, 122.10558000),('211102', 3, '', '', NULL, '211102', '', '双台子区', '', '', '', 41.19049000, 122.06017000),('211081', 3, '', '', NULL, '211081', '', '灯塔市', '', '', '', 41.42616000, 123.33930000),('211021', 3, '', '', NULL, '211021', '', '辽阳县', '', '', '', 41.20546000, 123.10578000),('211011', 3, '', '', NULL, '211011', '', '太子河区', '', '', '', 41.29225000, 123.13278000),('211005', 3, '', '', NULL, '211005', '', '弓长岭区', '', '', '', 41.15171000, 123.42052000),('211004', 3, '', '', NULL, '211004', '', '宏伟区', '', '', '', 41.21725000, 123.19637000),('211003', 3, '', '', NULL, '211003', '', '文圣区', '', '', '', 41.26776000, 123.23699000),('211002', 3, '', '', NULL, '211002', '', '白塔区', '', '', '', 41.27031000, 123.17424000),('210921', 3, '', '', NULL, '210921', '', '阜新蒙古族自治县', '', '', '', 42.06514000, 121.75791000),('210922', 3, '', '', NULL, '210922', '', '彰武县', '', '', '', 42.38649000, 122.53889000),('210911', 3, '', '', NULL, '210911', '', '细河区', '', '', '', 42.02539000, 121.68008000),('210905', 3, '', '', NULL, '210905', '', '清河门区', '', '', '', 41.78306000, 121.41614000),('210904', 3, '', '', NULL, '210904', '', '太平区', '', '', '', 42.01072000, 121.67865000),('210903', 3, '', '', NULL, '210903', '', '新邱区', '', '', '', 42.08742000, 121.79232000),('210902', 3, '', '', NULL, '210902', '', '海州区', '', '', '', 42.01332000, 121.65617000),('210882', 3, '', '', NULL, '210882', '', '大石桥市', '', '', '', 40.64448000, 122.50917000),('210881', 3, '', '', NULL, '210881', '', '盖州市', '', '', '', 40.40053000, 122.34880000),('210811', 3, '', '', NULL, '210811', '', '老边区', '', '', '', 40.68038000, 122.37968000),('210804', 3, '', '', NULL, '210804', '', '鲅鱼圈区', '', '', '', 40.22675000, 122.12169000),('210803', 3, '', '', NULL, '210803', '', '西市区', '', '', '', 40.66629000, 122.20646000),('210802', 3, '', '', NULL, '210802', '', '站前区', '', '', '', 40.67296000, 122.25999000),('210782', 3, '', '', NULL, '210782', '', '北镇市', '', '', '', 41.59465000, 121.79854000),('210781', 3, '', '', NULL, '210781', '', '凌海市', '', '', '', 41.17371000, 121.35771000),('210727', 3, '', '', NULL, '210727', '', '义县', '', '', '', 41.53311000, 121.23915000),('210726', 3, '', '', NULL, '210726', '', '黑山县', '', '', '', 41.69391000, 122.12066000),('210711', 3, '', '', NULL, '210711', '', '太和区', '', '', '', 41.10897000, 121.10378000),('210703', 3, '', '', NULL, '210703', '', '凌河区', '', '', '', 41.11512000, 121.15126000),('210702', 3, '', '', NULL, '210702', '', '古塔区', '', '', '', 41.11728000, 121.12834000),('210682', 3, '', '', NULL, '210682', '', '凤城市', '', '', '', 40.45279000, 124.06605000),('210624', 3, '', '', NULL, '210624', '', '宽甸满族自治县', '', '', '', 40.73131000, 124.78366000),('210681', 3, '', '', NULL, '210681', '', '东港市', '', '', '', 39.86172000, 124.15209000),('210604', 3, '', '', NULL, '210604', '', '振安区', '', '', '', 40.15823000, 124.42820000),('210602', 3, '', '', NULL, '210602', '', '元宝区', '', '', '', 40.13673000, 124.39582000),('210603', 3, '', '', NULL, '210603', '', '振兴区', '', '', '', 40.10495000, 124.36041000),('210521', 3, '', '', NULL, '210521', '', '本溪满族自治县', '', '', '', 41.30270000, 124.12193000),('210522', 3, '', '', NULL, '210522', '', '桓仁满族自治县', '', '', '', 41.26706000, 125.36096000),('210505', 3, '', '', NULL, '210505', '', '南芬区', '', '', '', 41.10031000, 123.74509000),('210504', 3, '', '', NULL, '210504', '', '明山区', '', '', '', 41.30877000, 123.81695000),('210502', 3, '', '', NULL, '210502', '', '平山区', '', '', '', 41.22132000, 123.68338000),('210503', 3, '', '', NULL, '210503', '', '溪湖区', '', '', '', 41.32922000, 123.76759000),('210423', 3, '', '', NULL, '210423', '', '清原满族自治县', '', '', '', 42.10038000, 124.92411000),('210422', 3, '', '', NULL, '210422', '', '新宾满族自治县', '', '', '', 41.73371000, 125.03979000),('210421', 3, '', '', NULL, '210421', '', '抚顺县', '', '', '', 41.78616000, 124.19596000),('210411', 3, '', '', NULL, '210411', '', '顺城区', '', '', '', 41.88307000, 123.94513000),('210404', 3, '', '', NULL, '210404', '', '望花区', '', '', '', 41.85329000, 123.78439000),('210402', 3, '', '', NULL, '210402', '', '新抚区', '', '', '', 41.85928000, 123.87415000),('210403', 3, '', '', NULL, '210403', '', '东洲区', '', '', '', 41.85301000, 124.03923000),('210381', 3, '', '', NULL, '210381', '', '海城市', '', '', '', 40.88145000, 122.68463000),('210321', 3, '', '', NULL, '210321', '', '台安县', '', '', '', 41.41269000, 122.43591000),('210323', 3, '', '', NULL, '210323', '', '岫岩满族自治县', '', '', '', 40.28998000, 123.28171000),('210311', 3, '', '', NULL, '210311', '', '千山区', '', '', '', 41.06462000, 122.95412000),('210304', 3, '', '', NULL, '210304', '', '立山区', '', '', '', 41.15013000, 123.02952000),('210303', 3, '', '', NULL, '210303', '', '铁西区', '', '', '', 41.11956000, 122.96939000),('210302', 3, '', '', NULL, '210302', '', '铁东区', '', '', '', 41.08994000, 122.99120000),('210283', 3, '', '', NULL, '210283', '', '庄河市', '', '', '', 39.68037000, 122.96611000),('210281', 3, '', '', NULL, '210281', '', '瓦房店市', '', '', '', 39.62644000, 121.97995000),('210224', 3, '', '', NULL, '210224', '', '长海县', '', '', '', 39.27276000, 122.58861000),('210214', 3, '', '', NULL, '210214', '', '普兰店区', '', '', '', 39.39443000, 121.96323000),('210213', 3, '', '', NULL, '210213', '', '金州区', '', '', '', 39.05015000, 121.78259000),('210212', 3, '', '', NULL, '210212', '', '旅顺口区', '', '', '', 38.85129000, 121.26208000),('210211', 3, '', '', NULL, '210211', '', '甘井子区', '', '', '', 38.95223000, 121.52550000),('210204', 3, '', '', NULL, '210204', '', '沙河口区', '', '', '', 38.90463000, 121.59451000),('210203', 3, '', '', NULL, '210203', '', '西岗区', '', '', '', 38.91478000, 121.61234000),('210202', 3, '', '', NULL, '210202', '', '中山区', '', '', '', 38.91864000, 121.64511000),('210181', 3, '', '', NULL, '210181', '', '新民市', '', '', '', 41.99767000, 122.82800000),('210124', 3, '', '', NULL, '210124', '', '法库县', '', '', '', 42.50403000, 123.40838000),('210123', 3, '', '', NULL, '210123', '', '康平县', '', '', '', 42.74990000, 123.35349000),('210115', 3, '', '', NULL, '210115', '', '辽中区', '', '', '', 41.51685000, 122.76549000),('210114', 3, '', '', NULL, '210114', '', '于洪区', '', '', '', 41.79407000, 123.30813000),('210113', 3, '', '', NULL, '210113', '', '沈北新区', '', '', '', 41.91303000, 123.58424000),('210112', 3, '', '', NULL, '210112', '', '浑南区', '', '', '', 41.71482000, 123.44972000),('210106', 3, '', '', NULL, '210106', '', '铁西区', '', '', '', 41.80283000, 123.37680000),('210111', 3, '', '', NULL, '210111', '', '苏家屯区', '', '', '', 41.66472000, 123.34432000),('210105', 3, '', '', NULL, '210105', '', '皇姑区', '', '', '', 41.82465000, 123.44168000),('210104', 3, '', '', NULL, '210104', '', '大东区', '', '', '', 41.80515000, 123.46987000),('210103', 3, '', '', NULL, '210103', '', '沈河区', '', '', '', 41.79607000, 123.45852000),('152923', 3, '', '', NULL, '152923', '', '额济纳旗', '', '', '', 41.95449000, 101.05552000),('210102', 3, '', '', NULL, '210102', '', '和平区', '', '', '', 41.78978000, 123.42056000),('152921', 3, '', '', NULL, '152921', '', '阿拉善左旗', '', '', '', 38.83343000, 105.66626000),('152922', 3, '', '', NULL, '152922', '', '阿拉善右旗', '', '', '', 39.21536000, 101.66711000),('152531', 3, '', '', NULL, '152531', '', '多伦县', '', '', '', 42.20303000, 116.48571000),('152530', 3, '', '', NULL, '152530', '', '正蓝旗', '', '', '', 42.24162000, 115.99239000),('152528', 3, '', '', NULL, '152528', '', '镶黄旗', '', '', '', 42.23232000, 113.84751000),('152529', 3, '', '', NULL, '152529', '', '正镶白旗', '', '', '', 42.28722000, 115.03077000),('152526', 3, '', '', NULL, '152526', '', '西乌珠穆沁旗', '', '', '', 44.58716000, 117.60899000),('152527', 3, '', '', NULL, '152527', '', '太仆寺旗', '', '', '', 41.87732000, 115.28305000),('152524', 3, '', '', NULL, '152524', '', '苏尼特右旗', '', '', '', 42.74694000, 112.65746000),('152525', 3, '', '', NULL, '152525', '', '东乌珠穆沁旗', '', '', '', 45.50960000, 116.97215000),('152502', 3, '', '', NULL, '152502', '', '锡林浩特市', '', '', '', 43.93339000, 116.08608000),('152522', 3, '', '', NULL, '152522', '', '阿巴嘎旗', '', '', '', 44.02272000, 114.95034000),('152523', 3, '', '', NULL, '152523', '', '苏尼特左旗', '', '', '', 43.85921000, 113.66737000),('152501', 3, '', '', NULL, '152501', '', '二连浩特市', '', '', '', 43.64305000, 111.95238000),('152224', 3, '', '', NULL, '152224', '', '突泉县', '', '', '', 45.38282000, 121.59408000),('152223', 3, '', '', NULL, '152223', '', '扎赉特旗', '', '', '', 46.72279000, 122.89980000),('152221', 3, '', '', NULL, '152221', '', '科尔沁右翼前旗', '', '', '', 46.07955000, 121.95275000),('152222', 3, '', '', NULL, '152222', '', '科尔沁右翼中旗', '', '', '', 45.06056000, 121.47694000),('152201', 3, '', '', NULL, '152201', '', '乌兰浩特市', '', '', '', 46.07282000, 122.09316000),('152202', 3, '', '', NULL, '152202', '', '阿尔山市', '', '', '', 47.17710000, 119.94381000),('150929', 3, '', '', NULL, '150929', '', '四子王旗', '', '', '', 41.53316000, 111.70658000),('150981', 3, '', '', NULL, '150981', '', '丰镇市', '', '', '', 40.43574000, 113.11056000),('150928', 3, '', '', NULL, '150928', '', '察哈尔右翼后旗', '', '', '', 41.43589000, 113.19222000),('150927', 3, '', '', NULL, '150927', '', '察哈尔右翼中旗', '', '', '', 41.27747000, 112.63544000),('150926', 3, '', '', NULL, '150926', '', '察哈尔右翼前旗', '', '', '', 40.78585000, 113.21095000),('150924', 3, '', '', NULL, '150924', '', '兴和县', '', '', '', 40.87190000, 113.83396000),('150925', 3, '', '', NULL, '150925', '', '凉城县', '', '', '', 40.53165000, 112.50387000),('150923', 3, '', '', NULL, '150923', '', '商都县', '', '', '', 41.56210000, 113.57718000),('150922', 3, '', '', NULL, '150922', '', '化德县', '', '', '', 41.90479000, 114.01089000),('150902', 3, '', '', NULL, '150902', '', '集宁区', '', '', '', 40.99060000, 113.12401000),('150921', 3, '', '', NULL, '150921', '', '卓资县', '', '', '', 40.89417000, 112.57785000),('150824', 3, '', '', NULL, '150824', '', '乌拉特中旗', '', '', '', 41.56746000, 108.52647000),('150825', 3, '', '', NULL, '150825', '', '乌拉特后旗', '', '', '', 41.08414000, 107.07466000),('150826', 3, '', '', NULL, '150826', '', '杭锦后旗', '', '', '', 40.88594000, 107.15114000),('150823', 3, '', '', NULL, '150823', '', '乌拉特前旗', '', '', '', 40.73662000, 108.65224000),('150822', 3, '', '', NULL, '150822', '', '磴口县', '', '', '', 40.33056000, 107.00864000),('150821', 3, '', '', NULL, '150821', '', '五原县', '', '', '', 41.08879000, 108.26730000),('150785', 3, '', '', NULL, '150785', '', '根河市', '', '', '', 50.78046000, 121.52040000),('150802', 3, '', '', NULL, '150802', '', '临河区', '', '', '', 40.76645000, 107.38683000),('150784', 3, '', '', NULL, '150784', '', '额尔古纳市', '', '', '', 50.24315000, 120.17962000),('150782', 3, '', '', NULL, '150782', '', '牙克石市', '', '', '', 49.28563000, 120.71174000),('150783', 3, '', '', NULL, '150783', '', '扎兰屯市', '', '', '', 48.01365000, 122.73761000),('150727', 3, '', '', NULL, '150727', '', '新巴尔虎右旗', '', '', '', 48.67191000, 116.82355000),('150781', 3, '', '', NULL, '150781', '', '满洲里市', '', '', '', 49.59655000, 117.37836000),('150725', 3, '', '', NULL, '150725', '', '陈巴尔虎旗', '', '', '', 49.32837000, 119.42429000),('150726', 3, '', '', NULL, '150726', '', '新巴尔虎左旗', '', '', '', 48.21819000, 118.26995000),('150723', 3, '', '', NULL, '150723', '', '鄂伦春自治旗', '', '', '', 50.59158000, 123.72577000),('150724', 3, '', '', NULL, '150724', '', '鄂温克族自治旗', '', '', '', 49.14678000, 119.75542000),('150722', 3, '', '', NULL, '150722', '', '莫力达瓦达斡尔族自治旗', '', '', '', 48.47711000, 124.51936000),('150703', 3, '', '', NULL, '150703', '', '扎赉诺尔区', '', '', '', 49.51054000, 117.66992000),('150721', 3, '', '', NULL, '150721', '', '阿荣旗', '', '', '', 48.12582000, 123.45944000),('150702', 3, '', '', NULL, '150702', '', '海拉尔区', '', '', '', 49.21336000, 119.73572000),('150627', 3, '', '', NULL, '150627', '', '伊金霍洛旗', '', '', '', 39.56442000, 109.74811000),('150626', 3, '', '', NULL, '150626', '', '乌审旗', '', '', '', 38.60388000, 108.81769000),('150625', 3, '', '', NULL, '150625', '', '杭锦旗', '', '', '', 39.83352000, 108.73497000),('150623', 3, '', '', NULL, '150623', '', '鄂托克前旗', '', '', '', 38.18239000, 107.47743000),('150624', 3, '', '', NULL, '150624', '', '鄂托克旗', '', '', '', 39.08989000, 107.97760000),('150622', 3, '', '', NULL, '150622', '', '准格尔旗', '', '', '', 39.86426000, 111.23987000),('150621', 3, '', '', NULL, '150621', '', '达拉特旗', '', '', '', 40.40016000, 110.03293000),('150603', 3, '', '', NULL, '150603', '', '康巴什区', '', '', '', 39.60837000, 109.85851000),('150602', 3, '', '', NULL, '150602', '', '东胜区', '', '', '', 39.82127000, 109.96144000),('150581', 3, '', '', NULL, '150581', '', '霍林郭勒市', '', '', '', 45.53141000, 119.66359000),('150526', 3, '', '', NULL, '150526', '', '扎鲁特旗', '', '', '', 44.55631000, 120.91159000),('150525', 3, '', '', NULL, '150525', '', '奈曼旗', '', '', '', 42.86729000, 120.65779000),('150524', 3, '', '', NULL, '150524', '', '库伦旗', '', '', '', 42.73504000, 121.81073000),('150523', 3, '', '', NULL, '150523', '', '开鲁县', '', '', '', 43.60005000, 121.31890000),('150522', 3, '', '', NULL, '150522', '', '科尔沁左翼后旗', '', '', '', 42.93511000, 122.35674000),('150521', 3, '', '', NULL, '150521', '', '科尔沁左翼中旗', '', '', '', 44.12659000, 123.31216000),('150502', 3, '', '', NULL, '150502', '', '科尔沁区', '', '', '', 43.62244000, 122.25615000),('150430', 3, '', '', NULL, '150430', '', '敖汉旗', '', '', '', 42.29073000, 119.92168000),('150429', 3, '', '', NULL, '150429', '', '宁城县', '', '', '', 41.59426000, 119.34308000),('150428', 3, '', '', NULL, '150428', '', '喀喇沁旗', '', '', '', 41.92718000, 118.70273000),('150425', 3, '', '', NULL, '150425', '', '克什克腾旗', '', '', '', 43.26624000, 117.54421000),('150426', 3, '', '', NULL, '150426', '', '翁牛特旗', '', '', '', 42.93483000, 119.00669000),('150424', 3, '', '', NULL, '150424', '', '林西县', '', '', '', 43.61702000, 118.05580000),('150423', 3, '', '', NULL, '150423', '', '巴林右旗', '', '', '', 43.53391000, 118.66466000),('150421', 3, '', '', NULL, '150421', '', '阿鲁科尔沁旗', '', '', '', 43.87244000, 120.06556000),('150422', 3, '', '', NULL, '150422', '', '巴林左旗', '', '', '', 43.97094000, 119.37961000),('150404', 3, '', '', NULL, '150404', '', '松山区', '', '', '', 42.28727000, 118.93301000),('150403', 3, '', '', NULL, '150403', '', '元宝山区', '', '', '', 42.03888000, 119.28862000),('150402', 3, '', '', NULL, '150402', '', '红山区', '', '', '', 42.26581000, 118.95927000),('150304', 3, '', '', NULL, '150304', '', '乌达区', '', '', '', 39.50580000, 106.72609000),('150303', 3, '', '', NULL, '150303', '', '海南区', '', '', '', 39.44096000, 106.89157000),('150302', 3, '', '', NULL, '150302', '', '海勃湾区', '', '', '', 39.69184000, 106.82260000),('150222', 3, '', '', NULL, '150222', '', '固阳县', '', '', '', 41.03412000, 110.06070000),('150223', 3, '', '', NULL, '150223', '', '达尔罕茂明安联合旗', '', '', '', 41.69854000, 110.43261000),('150206', 3, '', '', NULL, '150206', '', '白云鄂博矿区', '', '', '', 41.76943000, 109.97372000),('150207', 3, '', '', NULL, '150207', '', '九原区', '', '', '', 40.61009000, 109.96718000),('150221', 3, '', '', NULL, '150221', '', '土默特右旗', '', '', '', 40.56883000, 110.52421000),('150205', 3, '', '', NULL, '150205', '', '石拐区', '', '', '', 40.67204000, 110.27227000),('150204', 3, '', '', NULL, '150204', '', '青山区', '', '', '', 40.64559000, 109.90241000),('150203', 3, '', '', NULL, '150203', '', '昆都仑区', '', '', '', 40.64178000, 109.83859000),('150202', 3, '', '', NULL, '150202', '', '东河区', '', '', '', 40.57643000, 110.04317000),('150125', 3, '', '', NULL, '150125', '', '武川县', '', '', '', 41.09650000, 111.45118000),('150123', 3, '', '', NULL, '150123', '', '和林格尔县', '', '', '', 40.37859000, 111.82083000),('150124', 3, '', '', NULL, '150124', '', '清水河县', '', '', '', 39.90892000, 111.68639000),('150121', 3, '', '', NULL, '150121', '', '土默特左旗', '', '', '', 40.72957000, 111.16358000),('150122', 3, '', '', NULL, '150122', '', '托克托县', '', '', '', 40.27744000, 111.19421000),('150103', 3, '', '', NULL, '150103', '', '回民区', '', '', '', 40.80772000, 111.62299000),('150104', 3, '', '', NULL, '150104', '', '玉泉区', '', '', '', 40.75319000, 111.67543000),('150105', 3, '', '', NULL, '150105', '', '赛罕区', '', '', '', 40.79195000, 111.70171000),('150102', 3, '', '', NULL, '150102', '', '新城区', '', '', '', 40.85844000, 111.66345000),('141182', 3, '', '', NULL, '141182', '', '汾阳市', '', '', '', 37.26542000, 111.78777000),('141181', 3, '', '', NULL, '141181', '', '孝义市', '', '', '', 37.14534000, 111.77903000),('141130', 3, '', '', NULL, '141130', '', '交口县', '', '', '', 36.98217000, 111.18107000),('141129', 3, '', '', NULL, '141129', '', '中阳县', '', '', '', 37.35720000, 111.17953000),('141128', 3, '', '', NULL, '141128', '', '方山县', '', '', '', 37.89470000, 111.24396000),('141127', 3, '', '', NULL, '141127', '', '岚县', '', '', '', 38.27939000, 111.67195000),('141126', 3, '', '', NULL, '141126', '', '石楼县', '', '', '', 36.99857000, 110.83469000),('141125', 3, '', '', NULL, '141125', '', '柳林县', '', '', '', 37.42902000, 110.88937000),('141124', 3, '', '', NULL, '141124', '', '临县', '', '', '', 37.95106000, 110.99208000),('141123', 3, '', '', NULL, '141123', '', '兴县', '', '', '', 38.46242000, 111.12760000),('141122', 3, '', '', NULL, '141122', '', '交城县', '', '', '', 37.55165000, 112.15478000),('141121', 3, '', '', NULL, '141121', '', '文水县', '', '', '', 37.43843000, 112.02850000),('141102', 3, '', '', NULL, '141102', '', '离石区', '', '', '', 37.51761000, 111.15081000),('141082', 3, '', '', NULL, '141082', '', '霍州市', '', '', '', 36.56879000, 111.75505000),('141081', 3, '', '', NULL, '141081', '', '侯马市', '', '', '', 35.61908000, 111.37213000),('141034', 3, '', '', NULL, '141034', '', '汾西县', '', '', '', 36.65295000, 111.56365000),('141033', 3, '', '', NULL, '141033', '', '蒲县', '', '', '', 36.41179000, 111.09648000),('141032', 3, '', '', NULL, '141032', '', '永和县', '', '', '', 36.75952000, 110.63198000),('141031', 3, '', '', NULL, '141031', '', '隰县', '', '', '', 36.69344000, 110.94049000),('141030', 3, '', '', NULL, '141030', '', '大宁县', '', '', '', 36.46511000, 110.75285000),('141029', 3, '', '', NULL, '141029', '', '乡宁县', '', '', '', 35.97053000, 110.84721000),('141028', 3, '', '', NULL, '141028', '', '吉县', '', '', '', 36.09789000, 110.68162000),('141027', 3, '', '', NULL, '141027', '', '浮山县', '', '', '', 35.96802000, 111.84952000),('141026', 3, '', '', NULL, '141026', '', '安泽县', '', '', '', 36.14781000, 112.25013000),('141025', 3, '', '', NULL, '141025', '', '古县', '', '', '', 36.26650000, 111.92032000),('141024', 3, '', '', NULL, '141024', '', '洪洞县', '', '', '', 36.25374000, 111.67496000),('141023', 3, '', '', NULL, '141023', '', '襄汾县', '', '', '', 35.87618000, 111.44189000),('141022', 3, '', '', NULL, '141022', '', '翼城县', '', '', '', 35.73823000, 111.71836000),('141021', 3, '', '', NULL, '141021', '', '曲沃县', '', '', '', 35.64105000, 111.47570000),('141002', 3, '', '', NULL, '141002', '', '尧都区', '', '', '', 36.08301000, 111.57873000),('140981', 3, '', '', NULL, '140981', '', '原平市', '', '', '', 38.73047200, 112.71110400),('140932', 3, '', '', NULL, '140932', '', '偏关县', '', '', '', 39.43613000, 111.50869000),('140931', 3, '', '', NULL, '140931', '', '保德县', '', '', '', 39.02265000, 111.08625000),('140930', 3, '', '', NULL, '140930', '', '河曲县', '', '', '', 39.38456000, 111.13837000),('140929', 3, '', '', NULL, '140929', '', '岢岚县', '', '', '', 38.70427000, 111.57296000),('140928', 3, '', '', NULL, '140928', '', '五寨县', '', '', '', 38.91071000, 111.84701000),('140927', 3, '', '', NULL, '140927', '', '神池县', '', '', '', 39.09059000, 112.21077000),('140926', 3, '', '', NULL, '140926', '', '静乐县', '', '', '', 38.35924000, 111.93875000),('140925', 3, '', '', NULL, '140925', '', '宁武县', '', '', '', 39.00147000, 112.30450000),('140924', 3, '', '', NULL, '140924', '', '繁峙县', '', '', '', 39.18904000, 113.26547000),('140923', 3, '', '', NULL, '140923', '', '代县', '', '', '', 39.06689000, 112.95996000),('140922', 3, '', '', NULL, '140922', '', '五台县', '', '', '', 38.72812000, 113.25540000),('140921', 3, '', '', NULL, '140921', '', '定襄县', '', '', '', 38.47310000, 112.95728000),('140902', 3, '', '', NULL, '140902', '', '忻府区', '', '', '', 38.40429000, 112.74619000),('140882', 3, '', '', NULL, '140882', '', '河津市', '', '', '', 35.59643000, 110.71186000),('140881', 3, '', '', NULL, '140881', '', '永济市', '', '', '', 34.86716000, 110.44773000),('140830', 3, '', '', NULL, '140830', '', '芮城县', '', '', '', 34.69365000, 110.69442000),('140829', 3, '', '', NULL, '140829', '', '平陆县', '', '', '', 34.83467000, 111.19474000),('140828', 3, '', '', NULL, '140828', '', '夏县', '', '', '', 35.14136000, 111.22031000),('140827', 3, '', '', NULL, '140827', '', '垣曲县', '', '', '', 35.29762000, 111.67025000),('140826', 3, '', '', NULL, '140826', '', '绛县', '', '', '', 35.49146000, 111.56878000),('140824', 3, '', '', NULL, '140824', '', '稷山县', '', '', '', 35.60401000, 110.98311000),('140825', 3, '', '', NULL, '140825', '', '新绛县', '', '', '', 35.61622000, 111.22470000),('140823', 3, '', '', NULL, '140823', '', '闻喜县', '', '', '', 35.35663000, 111.22472000),('140822', 3, '', '', NULL, '140822', '', '万荣县', '', '', '', 35.41534000, 110.83781000),('140821', 3, '', '', NULL, '140821', '', '临猗县', '', '', '', 35.14471000, 110.77408000),('140802', 3, '', '', NULL, '140802', '', '盐湖区', '', '', '', 35.01505000, 110.99817000),('140781', 3, '', '', NULL, '140781', '', '介休市', '', '', '', 37.02710000, 111.91672000),('140729', 3, '', '', NULL, '140729', '', '灵石县', '', '', '', 36.84788000, 111.77879000),('140728', 3, '', '', NULL, '140728', '', '平遥县', '', '', '', 37.18934000, 112.17557000),('140727', 3, '', '', NULL, '140727', '', '祁县', '', '', '', 37.35775000, 112.33507000),('140726', 3, '', '', NULL, '140726', '', '太谷县', '', '', '', 37.42119000, 112.55126000),('140725', 3, '', '', NULL, '140725', '', '寿阳县', '', '', '', 37.89498000, 113.17666000),('140724', 3, '', '', NULL, '140724', '', '昔阳县', '', '', '', 37.61282000, 113.70718000),('140723', 3, '', '', NULL, '140723', '', '和顺县', '', '', '', 37.32963000, 113.57032000),('140722', 3, '', '', NULL, '140722', '', '左权县', '', '', '', 37.08243000, 113.37926000),('140721', 3, '', '', NULL, '140721', '', '榆社县', '', '', '', 37.07084000, 112.97522000),('140702', 3, '', '', NULL, '140702', '', '榆次区', '', '', '', 37.69978000, 112.70746000),('140681', 3, '', '', NULL, '140681', '', '怀仁市', '', '', '', 39.82788000, 113.10012000),('140623', 3, '', '', NULL, '140623', '', '右玉县', '', '', '', 39.98913000, 112.46705000),('140622', 3, '', '', NULL, '140622', '', '应县', '', '', '', 39.55434000, 113.19093000),('140621', 3, '', '', NULL, '140621', '', '山阴县', '', '', '', 39.52625000, 112.81572000),('140603', 3, '', '', NULL, '140603', '', '平鲁区', '', '', '', 39.51238000, 112.28832000),('140602', 3, '', '', NULL, '140602', '', '朔城区', '', '', '', 39.31918000, 112.43314000),('140581', 3, '', '', NULL, '140581', '', '高平市', '', '', '', 35.79807000, 112.92358000),('140525', 3, '', '', NULL, '140525', '', '泽州县', '', '', '', 35.50043000, 112.94366000),('140524', 3, '', '', NULL, '140524', '', '陵川县', '', '', '', 35.77512000, 113.28061000),('140522', 3, '', '', NULL, '140522', '', '阳城县', '', '', '', 35.48618000, 112.41491000),('140521', 3, '', '', NULL, '140521', '', '沁水县', '', '', '', 35.69015000, 112.18660000),('140502', 3, '', '', NULL, '140502', '', '城区', '', '', '', 35.50154000, 112.85352000),('140431', 3, '', '', NULL, '140431', '', '沁源县', '', '', '', 36.50010000, 112.33762000),('140430', 3, '', '', NULL, '140430', '', '沁县', '', '', '', 36.75608000, 112.69907000),('140429', 3, '', '', NULL, '140429', '', '武乡县', '', '', '', 36.83788900, 112.86390200),('140428', 3, '', '', NULL, '140428', '', '长子县', '', '', '', 36.12222000, 112.87795000),('140427', 3, '', '', NULL, '140427', '', '壶关县', '', '', '', 36.11567000, 113.20733000),('140426', 3, '', '', NULL, '140426', '', '黎城县', '', '', '', 36.50227000, 113.38722000),('140425', 3, '', '', NULL, '140425', '', '平顺县', '', '', '', 36.20006000, 113.43606000),('140423', 3, '', '', NULL, '140423', '', '襄垣县', '', '', '', 36.53580800, 113.05306000),('140406', 3, '', '', NULL, '140406', '', '潞城区', '', '', '', 36.33418000, 113.22893000),('140405', 3, '', '', NULL, '140405', '', '屯留区', '', '', '', 36.31553000, 112.89221000),('140404', 3, '', '', NULL, '140404', '', '上党区', '', '', '', 36.05312000, 113.05135000),('140403', 3, '', '', NULL, '140403', '', '潞州区', '', '', '', 36.20346000, 113.12303000),('140322', 3, '', '', NULL, '140322', '', '盂县', '', '', '', 38.08580000, 113.41238000),('140321', 3, '', '', NULL, '140321', '', '平定县', '', '', '', 37.78685000, 113.65804000),('140311', 3, '', '', NULL, '140311', '', '郊区', '', '', '', 37.94135000, 113.58515000),('140303', 3, '', '', NULL, '140303', '', '矿区', '', '', '', 37.86851000, 113.55530000),('140302', 3, '', '', NULL, '140302', '', '城区', '', '', '', 37.84739000, 113.60075000),('140226', 3, '', '', NULL, '140226', '', '左云县', '', '', '', 40.01349000, 112.70273000),('140224', 3, '', '', NULL, '140224', '', '灵丘县', '', '', '', 39.44243000, 114.23420000),('140225', 3, '', '', NULL, '140225', '', '浑源县', '', '', '', 39.69873000, 113.69080000),('140223', 3, '', '', NULL, '140223', '', '广灵县', '', '', '', 39.76020000, 114.28257000),('140222', 3, '', '', NULL, '140222', '', '天镇县', '', '', '', 40.42031000, 114.09070000),('140221', 3, '', '', NULL, '140221', '', '阳高县', '', '', '', 40.36627000, 113.75412000),('140215', 3, '', '', NULL, '140215', '', '云州区', '', '', '', 40.04016000, 113.61217000),('140214', 3, '', '', NULL, '140214', '', '云冈区', '', '', '', 40.00543000, 113.14952000),('140213', 3, '', '', NULL, '140213', '', '平城区', '', '', '', 40.07583000, 113.29798000),('140212', 3, '', '', NULL, '140212', '', '新荣区', '', '', '', 40.25585000, 113.14013000),('140181', 3, '', '', NULL, '140181', '', '古交市', '', '', '', 37.90714000, 112.17588000),('140123', 3, '', '', NULL, '140123', '', '娄烦县', '', '', '', 38.06720000, 111.79745000),('140122', 3, '', '', NULL, '140122', '', '阳曲县', '', '', '', 38.05828000, 112.67292000),('140121', 3, '', '', NULL, '140121', '', '清徐县', '', '', '', 37.60856000, 112.35925000),('140110', 3, '', '', NULL, '140110', '', '晋源区', '', '', '', 37.71525000, 112.47770000),('140109', 3, '', '', NULL, '140109', '', '万柏林区', '', '', '', 37.85929000, 112.51562000),('140108', 3, '', '', NULL, '140108', '', '尖草坪区', '', '', '', 37.94036000, 112.48699000),('140107', 3, '', '', NULL, '140107', '', '杏花岭区', '', '', '', 37.89403000, 112.57053000),('140106', 3, '', '', NULL, '140106', '', '迎泽区', '', '', '', 37.86320000, 112.56346000),('140105', 3, '', '', NULL, '140105', '', '小店区', '', '', '', 37.73605000, 112.56566000),('131182', 3, '', '', NULL, '131182', '', '深州市', '', '', '', 38.00022000, 115.56001000),('131128', 3, '', '', NULL, '131128', '', '阜城县', '', '', '', 37.86885000, 116.14437000),('131127', 3, '', '', NULL, '131127', '', '景县', '', '', '', 37.69234000, 116.27060000),('131126', 3, '', '', NULL, '131126', '', '故城县', '', '', '', 37.34748000, 115.96581000),('131125', 3, '', '', NULL, '131125', '', '安平县', '', '', '', 38.23447000, 115.51912000),('131124', 3, '', '', NULL, '131124', '', '饶阳县', '', '', '', 38.23530000, 115.72560000),('131123', 3, '', '', NULL, '131123', '', '武强县', '', '', '', 38.04120000, 115.98253000),('131122', 3, '', '', NULL, '131122', '', '武邑县', '', '', '', 37.80186000, 115.88751000),('131121', 3, '', '', NULL, '131121', '', '枣强县', '', '', '', 37.51337000, 115.72418000),('131103', 3, '', '', NULL, '131103', '', '冀州区', '', '', '', 37.55085000, 115.57938000),('131102', 3, '', '', NULL, '131102', '', '桃城区', '', '', '', 37.73516000, 115.67466000),('131082', 3, '', '', NULL, '131082', '', '三河市', '', '', '', 39.98246000, 117.07822000),('131081', 3, '', '', NULL, '131081', '', '霸州市', '', '', '', 39.12581000, 116.39170000),('131028', 3, '', '', NULL, '131028', '', '大厂回族自治县', '', '', '', 39.88665000, 116.98951000),('131026', 3, '', '', NULL, '131026', '', '文安县', '', '', '', 38.87328000, 116.45848000),('131025', 3, '', '', NULL, '131025', '', '大城县', '', '', '', 38.70469000, 116.65423000),('131024', 3, '', '', NULL, '131024', '', '香河县', '', '', '', 39.76142000, 117.00645000),('131023', 3, '', '', NULL, '131023', '', '永清县', '', '', '', 39.32178000, 116.49904000),('131022', 3, '', '', NULL, '131022', '', '固安县', '', '', '', 39.43825000, 116.29852000),('131003', 3, '', '', NULL, '131003', '', '广阳区', '', '', '', 39.52280000, 116.71051000),('131002', 3, '', '', NULL, '131002', '', '安次区', '', '', '', 39.50311000, 116.68572000),('130984', 3, '', '', NULL, '130984', '', '河间市', '', '', '', 38.44548000, 116.09900000),('130983', 3, '', '', NULL, '130983', '', '黄骅市', '', '', '', 38.37139000, 117.33012000),('130982', 3, '', '', NULL, '130982', '', '任丘市', '', '', '', 38.71164000, 116.09954000),('130981', 3, '', '', NULL, '130981', '', '泊头市', '', '', '', 38.08364000, 116.57828000),('130930', 3, '', '', NULL, '130930', '', '孟村回族自治县', '', '', '', 38.05341000, 117.10418000),('130929', 3, '', '', NULL, '130929', '', '献县', '', '', '', 38.19018000, 116.12279000),('130928', 3, '', '', NULL, '130928', '', '吴桥县', '', '', '', 37.62770000, 116.39154000),('130927', 3, '', '', NULL, '130927', '', '南皮县', '', '', '', 38.03780000, 116.70774000),('130926', 3, '', '', NULL, '130926', '', '肃宁县', '', '', '', 38.42277000, 115.82997000),('130925', 3, '', '', NULL, '130925', '', '盐山县', '', '', '', 38.05830000, 117.23025000),('130924', 3, '', '', NULL, '130924', '', '海兴县', '', '', '', 38.14325000, 117.49785000),('130923', 3, '', '', NULL, '130923', '', '东光县', '', '', '', 37.88828000, 116.53710000),('130922', 3, '', '', NULL, '130922', '', '青县', '', '', '', 38.58348000, 116.80318000),('130921', 3, '', '', NULL, '130921', '', '沧县', '', '', '', 38.32474000, 116.60718000),('130903', 3, '', '', NULL, '130903', '', '运河区', '', '', '', 38.31077000, 116.83191000),('130902', 3, '', '', NULL, '130902', '', '新华区', '', '', '', 38.31404000, 116.86638000),('130881', 3, '', '', NULL, '130881', '', '平泉市', '', '', '', 41.01797000, 118.70065000),('130828', 3, '', '', NULL, '130828', '', '围场满族蒙古族自治县', '', '', '', 41.93846000, 117.76016000),('130827', 3, '', '', NULL, '130827', '', '宽城满族自治县', '', '', '', 40.61139000, 118.48535000),('130826', 3, '', '', NULL, '130826', '', '丰宁满族自治县', '', '', '', 41.20894000, 116.64591000),('130825', 3, '', '', NULL, '130825', '', '隆化县', '', '', '', 41.31381000, 117.73897000),('130824', 3, '', '', NULL, '130824', '', '滦平县', '', '', '', 40.94145000, 117.33286000),('130804', 3, '', '', NULL, '130804', '', '鹰手营子矿区', '', '', '', 40.54640000, 117.65955000),('130821', 3, '', '', NULL, '130821', '', '承德县', '', '', '', 40.76853000, 118.17382000),('130822', 3, '', '', NULL, '130822', '', '兴隆县', '', '', '', 40.41727000, 117.50076000),('130803', 3, '', '', NULL, '130803', '', '双滦区', '', '', '', 40.95913000, 117.80024000),('130802', 3, '', '', NULL, '130802', '', '双桥区', '', '', '', 40.97469000, 117.94348000),('130732', 3, '', '', NULL, '130732', '', '赤城县', '', '', '', 40.91295000, 115.83166000),('130731', 3, '', '', NULL, '130731', '', '涿鹿县', '', '', '', 40.38003000, 115.21962000),('130730', 3, '', '', NULL, '130730', '', '怀来县', '', '', '', 40.41538000, 115.51778000),('130728', 3, '', '', NULL, '130728', '', '怀安县', '', '', '', 40.67430000, 114.38564000),('130727', 3, '', '', NULL, '130727', '', '阳原县', '', '', '', 40.10366000, 114.15057000),('130726', 3, '', '', NULL, '130726', '', '蔚县', '', '', '', 39.84072000, 114.58897000),('130725', 3, '', '', NULL, '130725', '', '尚义县', '', '', '', 41.07599000, 113.96919000),('130724', 3, '', '', NULL, '130724', '', '沽源县', '', '', '', 41.66964000, 115.68865000),('130723', 3, '', '', NULL, '130723', '', '康保县', '', '', '', 41.85228000, 114.60035000),('130722', 3, '', '', NULL, '130722', '', '张北县', '', '', '', 41.15862000, 114.71987000),('130709', 3, '', '', NULL, '130709', '', '崇礼区', '', '', '', 40.97475800, 115.28234900),('130708', 3, '', '', NULL, '130708', '', '万全区', '', '', '', 40.76699000, 114.74055000),('130706', 3, '', '', NULL, '130706', '', '下花园区', '', '', '', 40.50240000, 115.28751000),('130705', 3, '', '', NULL, '130705', '', '宣化区', '', '', '', 40.60845000, 115.09923000),('130703', 3, '', '', NULL, '130703', '', '桥西区', '', '', '', 40.81956000, 114.86937000),('130702', 3, '', '', NULL, '130702', '', '桥东区', '', '', '', 40.78847000, 114.89436000),('130684', 3, '', '', NULL, '130684', '', '高碑店市', '', '', '', 39.32658000, 115.87373000),('130683', 3, '', '', NULL, '130683', '', '安国市', '', '', '', 38.41845000, 115.32664000),('130682', 3, '', '', NULL, '130682', '', '定州市', '', '', '', 38.51626000, 114.99025000),('130681', 3, '', '', NULL, '130681', '', '涿州市', '', '', '', 39.48529000, 115.97439000),('130638', 3, '', '', NULL, '130638', '', '雄县', '', '', '', 38.99445800, 116.10878900),('130637', 3, '', '', NULL, '130637', '', '博野县', '', '', '', 38.45766000, 115.46439000),('130636', 3, '', '', NULL, '130636', '', '顺平县', '', '', '', 38.83759000, 115.13543000),('130635', 3, '', '', NULL, '130635', '', '蠡县', '', '', '', 38.48806000, 115.58360000),('130634', 3, '', '', NULL, '130634', '', '曲阳县', '', '', '', 38.62231000, 114.74501000),('130633', 3, '', '', NULL, '130633', '', '易县', '', '', '', 39.34926000, 115.49846000),('130632', 3, '', '', NULL, '130632', '', '安新县', '', '', '', 38.93535000, 115.93564000),('130631', 3, '', '', NULL, '130631', '', '望都县', '', '', '', 38.70900000, 115.15564000),('130630', 3, '', '', NULL, '130630', '', '涞源县', '', '', '', 39.36018000, 114.69424000),('130629', 3, '', '', NULL, '130629', '', '容城县', '', '', '', 39.04286200, 115.86163300),('130628', 3, '', '', NULL, '130628', '', '高阳县', '', '', '', 38.70007000, 115.77884000),('130627', 3, '', '', NULL, '130627', '', '唐县', '', '', '', 38.74790000, 114.98295000),('130626', 3, '', '', NULL, '130626', '', '定兴县', '', '', '', 39.26315000, 115.80790000),('130624', 3, '', '', NULL, '130624', '', '阜平县', '', '', '', 38.84915000, 114.19531000),('130623', 3, '', '', NULL, '130623', '', '涞水县', '', '', '', 39.39428000, 115.71378000),('130609', 3, '', '', NULL, '130609', '', '徐水区', '', '', '', 39.01865000, 115.65586000),('130608', 3, '', '', NULL, '130608', '', '清苑区', '', '', '', 38.76526000, 115.48989000),('130607', 3, '', '', NULL, '130607', '', '满城区', '', '', '', 38.94892000, 115.32217000),('130606', 3, '', '', NULL, '130606', '', '莲池区', '', '', '', 38.88353000, 115.49715000),('130602', 3, '', '', NULL, '130602', '', '竞秀区', '', '', '', 38.87757000, 115.45875000),('130582', 3, '', '', NULL, '130582', '', '沙河市', '', '', '', 36.85516000, 114.50332000),('130581', 3, '', '', NULL, '130581', '', '南宫市', '', '', '', 37.35795000, 115.40866000),('130535', 3, '', '', NULL, '130535', '', '临西县', '', '', '', 36.87082000, 115.50104000),('130534', 3, '', '', NULL, '130534', '', '清河县', '', '', '', 37.03993000, 115.66718000),('130533', 3, '', '', NULL, '130533', '', '威县', '', '', '', 36.97542000, 115.26669000),('130532', 3, '', '', NULL, '130532', '', '平乡县', '', '', '', 37.06319000, 115.03007000),('130531', 3, '', '', NULL, '130531', '', '广宗县', '', '', '', 37.07463000, 115.14261000),('130530', 3, '', '', NULL, '130530', '', '新河县', '', '', '', 37.52867000, 115.24214000),('130529', 3, '', '', NULL, '130529', '', '巨鹿县', '', '', '', 37.22107000, 115.03781000),('130528', 3, '', '', NULL, '130528', '', '宁晋县', '', '', '', 37.61980000, 114.91932000),('130527', 3, '', '', NULL, '130527', '', '南和县', '', '', '', 37.00490000, 114.68376000),('130526', 3, '', '', NULL, '130526', '', '任县', '', '', '', 37.12092000, 114.67132000),('130525', 3, '', '', NULL, '130525', '', '隆尧县', '', '', '', 37.35025000, 114.77031000),('130524', 3, '', '', NULL, '130524', '', '柏乡县', '', '', '', 37.48244000, 114.69363000),('130523', 3, '', '', NULL, '130523', '', '内丘县', '', '', '', 37.28678000, 114.51207000),('130522', 3, '', '', NULL, '130522', '', '临城县', '', '', '', 37.44430000, 114.49898000),('130521', 3, '', '', NULL, '130521', '', '邢台县', '', '', '', 37.08627000, 114.54489000),('130503', 3, '', '', NULL, '130503', '', '桥西区', '', '', '', 37.05983000, 114.46816000),('130502', 3, '', '', NULL, '130502', '', '桥东区', '', '', '', 37.06787000, 114.50713200),('130481', 3, '', '', NULL, '130481', '', '武安市', '', '', '', 36.69671000, 114.20376000),('130435', 3, '', '', NULL, '130435', '', '曲周县', '', '', '', 36.77918000, 114.94485000),('130434', 3, '', '', NULL, '130434', '', '魏县', '', '', '', 36.35991000, 114.93882000),('130432', 3, '', '', NULL, '130432', '', '广平县', '', '', '', 36.48345000, 114.94850000),('130433', 3, '', '', NULL, '130433', '', '馆陶县', '', '', '', 36.53529000, 115.30629000),('130431', 3, '', '', NULL, '130431', '', '鸡泽县', '', '', '', 36.92031000, 114.87820000),('130430', 3, '', '', NULL, '130430', '', '邱县', '', '', '', 36.81987000, 115.17641000),('130427', 3, '', '', NULL, '130427', '', '磁县', '', '', '', 36.37396000, 114.37392000),('130426', 3, '', '', NULL, '130426', '', '涉县', '', '', '', 36.58544000, 113.69065000),('130425', 3, '', '', NULL, '130425', '', '大名县', '', '', '', 36.28558000, 115.14788000),('130424', 3, '', '', NULL, '130424', '', '成安县', '', '', '', 36.44414000, 114.66999000),('130423', 3, '', '', NULL, '130423', '', '临漳县', '', '', '', 36.33480000, 114.61968000),('130407', 3, '', '', NULL, '130407', '', '肥乡区', '', '', '', 36.54811000, 114.80002000),('130408', 3, '', '', NULL, '130408', '', '永年区', '', '', '', 36.77771000, 114.49095000),('130406', 3, '', '', NULL, '130406', '', '峰峰矿区', '', '', '', 36.41968000, 114.21302000),('130404', 3, '', '', NULL, '130404', '', '复兴区', '', '', '', 36.61693000, 114.47309000),('130403', 3, '', '', NULL, '130403', '', '丛台区', '', '', '', 36.61853000, 114.49339000),('130402', 3, '', '', NULL, '130402', '', '邯山区', '', '', '', 36.60000000, 114.48376000),('130324', 3, '', '', NULL, '130324', '', '卢龙县', '', '', '', 39.89180000, 118.89294000),('130322', 3, '', '', NULL, '130322', '', '昌黎县', '', '', '', 39.71284000, 119.16288000),('130321', 3, '', '', NULL, '130321', '', '青龙满族自治县', '', '', '', 40.40692000, 118.95012000),('130306', 3, '', '', NULL, '130306', '', '抚宁区', '', '', '', 39.87634000, 119.24444000),('130304', 3, '', '', NULL, '130304', '', '北戴河区', '', '', '', 39.83507000, 119.48458000),('130303', 3, '', '', NULL, '130303', '', '山海关区', '', '', '', 39.97892000, 119.77606000),('130302', 3, '', '', NULL, '130302', '', '海港区', '', '', '', 39.93450000, 119.61063000),('130284', 3, '', '', NULL, '130284', '', '滦州市', '', '', '', 39.74058000, 118.70351000),('130283', 3, '', '', NULL, '130283', '', '迁安市', '', '', '', 39.99836000, 118.70073000),('130281', 3, '', '', NULL, '130281', '', '遵化市', '', '', '', 40.18924000, 117.96567000),('130230', 3, '', '', NULL, '130230', '', '芦台区', '', '', '', 39.38091000, 117.74757000),('130229', 3, '', '', NULL, '130229', '', '玉田县', '', '', '', 39.90050000, 117.73881000),('130227', 3, '', '', NULL, '130227', '', '迁西县', '', '', '', 40.14153000, 118.31460000),('130225', 3, '', '', NULL, '130225', '', '乐亭县', '', '', '', 39.42564000, 118.91252000),('130224', 3, '', '', NULL, '130224', '', '滦南县', '', '', '', 39.50394000, 118.67414000),('130209', 3, '', '', NULL, '130209', '', '曹妃甸区', '', '', '', 39.27313000, 118.46023000),('130208', 3, '', '', NULL, '130208', '', '丰润区', '', '', '', 39.83249000, 118.16217000),('130207', 3, '', '', NULL, '130207', '', '丰南区', '', '', '', 39.57487000, 118.08505000),('130205', 3, '', '', NULL, '130205', '', '开平区', '', '', '', 39.67098000, 118.26198000),('130204', 3, '', '', NULL, '130204', '', '古冶区', '', '', '', 39.71612000, 118.45885000),('130203', 3, '', '', NULL, '130203', '', '路北区', '', '', '', 39.62434000, 118.20074000),('130202', 3, '', '', NULL, '130202', '', '路南区', '', '', '', 39.62509000, 118.15437000),('130184', 3, '', '', '华北', '130184', '新乐', '新乐市', '河北省,石家庄市,新乐市', '', '', 38.34338000, 114.68384000),('130183', 3, '', '', '华北', '130183', '晋州', '晋州市', '河北省,石家庄市,晋州市', '', '', 38.03356000, 115.04410000),('130181', 3, '', '', '华北', '130181', '辛集', '辛集市', '河北省,石家庄市,辛集市', '', '', 37.94316000, 115.21792000),('130133', 3, '', '', '华北', '130133', '赵县', '赵县', '河北省,石家庄市,赵县', '', '', 37.75631000, 114.77616000),('130132', 3, '', '', '华北', '130132', '元氏', '元氏县', '河北省,石家庄市,元氏县', '', '', 37.76646000, 114.52547000),('130131', 3, '', '', '华北', '130131', '平山', '平山县', '河北省,石家庄市,平山县', '', '', 38.25998000, 114.18605000),('130130', 3, '', '', '华北', '130130', '', '无极县', '河北省,石家庄市,无极县', '', '', 38.17915000, 114.97638000),('130129', 3, '', '', '华北', '130129', '', '赞皇县', '河北省,石家庄市,赞皇县', '', '', 37.66579000, 114.38592000),('130128', 3, '', '', '华北', '130128', '', '深泽县', '河北省,石家庄市,深泽县', '', '', 38.18417000, 115.20094000),('130127', 3, '', '', '华北', '130127', '', '高邑县', '河北省,石家庄市,高邑县', '', '', 37.61493000, 114.61148000),('130126', 3, '', '', '华北', '130126', '', '灵寿县', '河北省,石家庄市,灵寿县', '', '', 38.30864000, 114.38265000),('130125', 3, '', '', '华北', '130125', '', '行唐县', '河北省,石家庄市,行唐县', '', '', 38.43848000, 114.55294000),('130123', 3, '', '', '华北', '130123', '', '正定县', '河北省,石家庄市,正定县', '', '', 38.14619000, 114.57109000),('130121', 3, '', '', '华北', '130121', '', '井陉县', '河北省,石家庄市,井陉县', '', '', 38.03225000, 114.14532000),('130111', 3, '', '', '华北', '130111', '', '栾城区', '河北省,石家庄市,栾城区', '', '', 37.90025000, 114.64839000),('130110', 3, '', '', '华北', '130110', '', '鹿泉区', '河北省,石家庄市,鹿泉区', '', '', 38.08587000, 114.31344000),('130109', 3, '', '', '华北', '130109', '', '藁城区', '河北省,石家庄市,藁城区', '', '', 38.02166000, 114.84676000),('130108', 3, '', '', '华北', '130108', '', '裕华区', '河北省,石家庄市,裕华区', '', '', 38.00610000, 114.53122000),('130107', 3, '', '', '华北', '130107', '', '井陉矿区', '河北省,石家庄市,井陉矿区', '', '', 38.06499000, 114.06230000),('130105', 3, '', '', '华北', '130105', '', '新华区', '河北省,石家庄市,新华区', '', '', 38.05090000, 114.46312000),('130104', 3, '', '', '华北', '130104', '', '桥西区', '河北省,石家庄市,桥西区', '', '', 38.00407000, 114.46104000),('130102', 3, '', '', '华北', '130102', '', '长安区', '河北省,石家庄市,长安区', '', '', 38.03647000, 114.53952000),('120100', 2, '', '', '华北', '120100', '天津', '天津市', '天津,天津市', 'T', 'Tian jin', 39.08510000, 117.19937000),('110100', 2, '', '', '华北', '110100', '北京', '北京市', '北京,北京市', 'B', 'Bei jing', 0.00000000, 0.00000000),('310100', 2, '', '', '华东', '310100', '上海', '上海市', '', 'S', 'Shang hai', 31.23037000, 121.47370000),('500100', 2, '', '', '西南', '500100', '重庆', '重庆市', '', 'C', 'Chong qing', 29.56471000, 106.55073000);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_depart` WRITE;
DELETE FROM `nunumao`.`system_depart`;
INSERT INTO `nunumao`.`system_depart` (`id`,`parent_id`,`type`,`name`,`telephone`,`province`,`province_code`,`city`,`city_code`,`region`,`region_code`,`address`,`create_time`,`status`) VALUES ('1442483553253584898', '0', 0, '南宁总公司', '', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1),('1442507093654671361', '1442483553253584898', 1, '研发部', '', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1),('1442535747965165570', '0', 0, '深圳分公司', '', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1),('1442554107620761601', '1442483553253584898', 1, '财务部', '', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1),('1445514334076706818', '1442535747965165570', 1, '市场部', '', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1),('1445514393023455234', '1442535747965165570', 1, '财务部', '', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_depart_rule` WRITE;
DELETE FROM `nunumao`.`system_depart_rule`;
INSERT INTO `nunumao`.`system_depart_rule` (`id`,`depart_id`,`rule_id`) VALUES ('1452462264451575810', '1442507093654671361', '1441846243914678273'),('1452462264459964417', '1442507093654671361', '1441847313260871681'),('1452462264464158722', '1442507093654671361', '1441847763108364289'),('1452462264464158723', '1442507093654671361', '1437100346605641729'),('1452462264468353025', '1442507093654671361', '1437100451643596801'),('1452462264472547330', '1442507093654671361', '1439655885642465282'),('1452462264472547331', '1442507093654671361', '1439655121285087233'),('1452462264476741634', '1442507093654671361', '1439655447409000450'),('1452462264476741635', '1442507093654671361', '1439657316017569793'),('1452462264476741636', '1442507093654671361', '1439658305630044162'),('1452462264480935937', '1442507093654671361', '1439658668517031938'),('1452462264480935938', '1442507093654671361', '1439659277127319554'),('1452462264480935939', '1442507093654671361', '1439659487991758849'),('1452462264485130241', '1442507093654671361', '1439659726240808962'),('1452462264485130242', '1442507093654671361', '1439660574039670786'),('1452462264485130243', '1442507093654671361', '1439661051452129282'),('1452462264485130244', '1442507093654671361', '1439661271376265218'),('1452462264485130245', '1442507093654671361', '1439662022483836930'),('1452462264489324546', '1442507093654671361', '1441842213440192514'),('1452462264489324547', '1442507093654671361', '1450914144412004354'),('1452462264489324548', '1442507093654671361', '1450914772278341634'),('1452462264489324549', '1442507093654671361', '1450917567425441794'),('1452462264489324550', '1442507093654671361', '1450918361222639617'),('1452462264489324551', '1442507093654671361', '1450919016263872514'),('1452462264493518849', '1442507093654671361', '1450920388786941953'),('1452462264493518850', '1442507093654671361', '1450920708556484610'),('1452462264493518851', '1442507093654671361', '1450921043811397634'),('1452462264497713154', '1442507093654671361', '1450917931650412545'),('1452462264497713155', '1442507093654671361', '1450922336286175233'),('1452462264497713156', '1442507093654671361', '1450922492532387842'),('1452462264497713157', '1442507093654671361', '1450922832539447298'),('1452462264497713158', '1442507093654671361', '1450923256365477890'),('1452462264501907457', '1442507093654671361', '1450923526273134594'),('1452462264501907458', '1442507093654671361', '1450923685245644802'),('1452462264501907459', '1442507093654671361', '1450928383365246977'),('1452462264501907460', '1442507093654671361', '1441842810377732098'),('1452462264506101761', '1442507093654671361', '1441843159402545154'),('1452462264506101762', '1442507093654671361', '1441837851049459714'),('1452462264506101763', '1442507093654671361', '1441838088786804738'),('1452462264506101764', '1442507093654671361', '1441838660403331073'),('1452462264506101765', '1442507093654671361', '1441838957376831489'),('1452462264506101766', '1442507093654671361', '1441840060394897410'),('1452462264506101767', '1442507093654671361', '1441840799041191937'),('1452462264506101768', '1442507093654671361', '1441840978024726530'),('1452462264506101769', '1442507093654671361', '1435888084180017666'),('1452462264506101770', '1442507093654671361', '1435888084180017154'),('1452462264506101771', '1442507093654671361', '1435888272542015490'),('1452462264518684674', '1442507093654671361', '1435888084180017888'),('1452462264518684675', '1442507093654671361', '1435889208442232833'),('1452462264522878977', '1442507093654671361', '1435889628594053122'),('1452462264527073282', '1442507093654671361', '1443047248912232450'),('1458896022815203330', '1442483553253584898', '1441846243914678273'),('1458896022823591937', '1442483553253584898', '1441847313260871681'),('1458896022823591938', '1442483553253584898', '1441847763108364289'),('1458896022823591939', '1442483553253584898', '1437100346605641729'),('1458896022823591940', '1442483553253584898', '1437100451643596801'),('1458896022823591941', '1442483553253584898', '1439655885642465282'),('1458896022823591942', '1442483553253584898', '1439655121285087233'),('1458896022823591943', '1442483553253584898', '1439655447409000450'),('1458896022823591944', '1442483553253584898', '1439657316017569793'),('1458896022823591945', '1442483553253584898', '1439658305630044162'),('1458896022823591946', '1442483553253584898', '1439658668517031938'),('1458896022823591947', '1442483553253584898', '1439659277127319554'),('1458896022823591948', '1442483553253584898', '1439659487991758849'),('1458896022823591949', '1442483553253584898', '1439659726240808962'),('1458896022823591950', '1442483553253584898', '1439660574039670786'),('1458896022831980545', '1442483553253584898', '1439661051452129282'),('1458896022831980546', '1442483553253584898', '1439661271376265218'),('1458896022831980547', '1442483553253584898', '1439662022483836930'),('1458896022831980548', '1442483553253584898', '1441842213440192514'),('1458896022831980549', '1442483553253584898', '1450914144412004354'),('1458896022831980550', '1442483553253584898', '1450914772278341634'),('1458896022831980551', '1442483553253584898', '1450917567425441794'),('1458896022831980552', '1442483553253584898', '1450918361222639617'),('1458896022831980553', '1442483553253584898', '1450919016263872514'),('1458896022831980554', '1442483553253584898', '1450920388786941953'),('1458896022831980555', '1442483553253584898', '1450920708556484610'),('1458896022831980556', '1442483553253584898', '1450921043811397634'),('1458896022831980557', '1442483553253584898', '1450917931650412545'),('1458896022831980558', '1442483553253584898', '1450922336286175233'),('1458896022831980559', '1442483553253584898', '1450922492532387842'),('1458896022831980560', '1442483553253584898', '1450922832539447298'),('1458896022831980561', '1442483553253584898', '1450923256365477890'),('1458896022831980562', '1442483553253584898', '1450923526273134594'),('1458896022831980563', '1442483553253584898', '1450923685245644802'),('1458896022840369154', '1442483553253584898', '1450928383365246977'),('1458896022840369155', '1442483553253584898', '1441842810377732098'),('1458896022840369156', '1442483553253584898', '1441843159402545154'),('1458896022840369157', '1442483553253584898', '1441837851049459714'),('1458896022840369158', '1442483553253584898', '1441838088786804738'),('1458896022840369159', '1442483553253584898', '1441838660403331073'),('1458896022840369160', '1442483553253584898', '1441838957376831489'),('1458896022840369161', '1442483553253584898', '1441840060394897410'),('1458896022840369162', '1442483553253584898', '1441840799041191937'),('1458896022844563458', '1442483553253584898', '1441840978024726530'),('1458896022844563459', '1442483553253584898', '1435888084180017666'),('1458896022844563460', '1442483553253584898', '1435888084180017154'),('1458896022844563461', '1442483553253584898', '1435888272542015490'),('1458896022844563462', '1442483553253584898', '1435888084180017888'),('1458896022844563463', '1442483553253584898', '1435889208442232833'),('1458896022844563464', '1442483553253584898', '1435889628594053122'),('1458896022844563465', '1442483553253584898', '1443047248912232450');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_depart_rule_data` WRITE;
DELETE FROM `nunumao`.`system_depart_rule_data`;
INSERT INTO `nunumao`.`system_depart_rule_data` (`id`,`depart_id`,`rule_data_id`) VALUES ('1458896027437326338', '1442483553253584898', '1457766397015797762');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_depart_user` WRITE;
DELETE FROM `nunumao`.`system_depart_user`;
INSERT INTO `nunumao`.`system_depart_user` (`id`,`user_id`,`depart_id`) VALUES ('1455405838744219650', '1455405837959884802', '1442507093654671361');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_groups` WRITE;
DELETE FROM `nunumao`.`system_groups`;
INSERT INTO `nunumao`.`system_groups` (`id`,`name`,`status`) VALUES ('1434192334574092289', '系统管理员', 1),('1434192366970896385', '运维工程师', 1);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_groups_rule` WRITE;
DELETE FROM `nunumao`.`system_groups_rule`;
INSERT INTO `nunumao`.`system_groups_rule` (`id`,`groups_id`,`rule_id`) VALUES ('1467432940481830914', '1434192334574092289', '1441846243914678273'),('1467432940481830915', '1434192334574092289', '1441847313260871681'),('1467432940481830916', '1434192334574092289', '1441847763108364289'),('1467432940481830917', '1434192334574092289', '1437100346605641729'),('1467432940481830918', '1434192334574092289', '1437100451643596801'),('1467432940481830919', '1434192334574092289', '1439655885642465282'),('1467432940481830920', '1434192334574092289', '1439655121285087233'),('1467432940481830921', '1434192334574092289', '1439655447409000450'),('1467432940481830922', '1434192334574092289', '1439657316017569793'),('1467432940481830923', '1434192334574092289', '1439658305630044162'),('1467432940481830924', '1434192334574092289', '1439658668517031938'),('1467432940481830925', '1434192334574092289', '1439659277127319554'),('1467432940481830926', '1434192334574092289', '1439659487991758849'),('1467432940481830927', '1434192334574092289', '1439659726240808962'),('1467432940481830928', '1434192334574092289', '1439660574039670786'),('1467432940481830929', '1434192334574092289', '1439661051452129282'),('1467432940481830930', '1434192334574092289', '1439661271376265218'),('1467432940481830931', '1434192334574092289', '1439662022483836930'),('1467432940481830932', '1434192334574092289', '1435888084180017666'),('1467432940481830933', '1434192334574092289', '1435888084180017154'),('1467432940481830934', '1434192334574092289', '1435888272542015490'),('1467432940481830935', '1434192334574092289', '1435888084180017888'),('1467432940481830936', '1434192334574092289', '1435889208442232833'),('1467432940481830937', '1434192334574092289', '1435889628594053122'),('1467432940481830938', '1434192334574092289', '1443047248912232450'),('1467432940481830939', '1434192334574092289', '1453131599475417089'),('1467432940481830940', '1434192334574092289', '1453720847303872513'),('1467432940481830941', '1434192334574092289', '1454252114629947393'),('1467432940481830942', '1434192334574092289', '1454252487738454017');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_groups_rule_data` WRITE;
DELETE FROM `nunumao`.`system_groups_rule_data`;
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_groups_user` WRITE;
DELETE FROM `nunumao`.`system_groups_user`;
INSERT INTO `nunumao`.`system_groups_user` (`id`,`groups_id`,`user_id`) VALUES ('1455405838366732289', '1434192366970896385', '1455405837959884802'),('1455422622415253506', '1434192334574092289', '1452458091833524226');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_message` WRITE;
DELETE FROM `nunumao`.`system_message`;
INSERT INTO `nunumao`.`system_message` (`id`,`type`,`user_id`,`depart_id`,`name`,`intro`,`content`,`link`,`is_read`,`sended`,`create_time`,`status`) VALUES ('1467259859985575938', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:29:46', NULL),('1467259922908524545', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:30:01', NULL),('1467260168556326914', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:30:59', NULL),('1467260191381729282', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:05', NULL),('1467260200433037314', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:07', NULL),('1467260224168603649', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:12', NULL),('1467260237921726466', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:16', NULL),('1467260241457524738', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:17', NULL),('1467260248038387714', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:18', NULL),('1467260256666071041', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:20', NULL),('1467260263913828353', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:22', NULL),('1467260270696017921', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:24', NULL),('1467260277813751810', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:25', NULL),('1467260284814045185', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:27', NULL),('1467260291940167682', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:29', NULL),('1467260299213090818', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:31:30', NULL),('1467262088687726594', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:38:37', NULL),('1467262143427588098', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:38:50', NULL),('1467262169553907713', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:38:56', NULL),('1467262500933283842', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 0, NULL, '2021-12-05 06:40:15', NULL),('1467262564376326146', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 0, NULL, '2021-12-05 06:40:30', NULL),('1467262569124278273', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:40:32', NULL),('1467262574044196865', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:40:33', NULL),('1467262582369890305', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:40:35', NULL),('1467262987699040257', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:42:11', NULL),('1467263020100038657', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:42:19', NULL),('1467264639856304129', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:48:45', NULL),('1467264717421568002', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:49:04', NULL),('1467264839941382145', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:49:33', NULL),('1467265115188387842', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:50:39', NULL),('1467265132989014017', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:50:43', NULL),('1467265436371410945', 0, NULL, NULL, '测试消息', '您有一条新的消息', '消息内容好长好长的...', NULL, 1, NULL, '2021-12-05 06:51:55', NULL);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_position` WRITE;
DELETE FROM `nunumao`.`system_position`;
INSERT INTO `nunumao`.`system_position` (`id`,`code`,`name`,`post_rank`,`create_time`,`status`) VALUES ('1452994384648769538', 'ZW0001', '总经理', 0, NULL, 1),('1452994493876834305', 'ZW0002', '副总经理', 0, NULL, 1),('1452994925684625409', 'ZW0003', '总监', 0, NULL, 1);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_rule` WRITE;
DELETE FROM `nunumao`.`system_rule`;
INSERT INTO `nunumao`.`system_rule` (`id`,`parent_id`,`type`,`name`,`page`,`menu`,`icon`,`url`,`path`,`sort`) VALUES ('1435888084180017154', '1435888084180017666', 1, '用户管理', 0, 0, '', '', 'system/user', 1),('1435888084180017666', '0', 0, '系统设置', 0, 0, 'el-icon-setting', '', 'system', 98),('1435888084180017888', '1435888084180017666', 1, '菜单管理', 0, 0, '', 'system/rule', 'system/rule', 3),('1435888272542015490', '1435888084180017666', 1, '角色管理', 0, 0, '', '', 'system/groups', 2),('1435889208442232833', '1435888084180017666', 1, '部门管理', 0, 0, '', '', 'system/depart', 4),('1435889628594053122', '1435888084180017666', 1, '职务管理', 0, 0, '', '', 'system/position', 5),('1437100346605641729', '0', 0, 'CRM', 0, 0, 'el-icon-data-analysis', '', 'crm', 2),('1437100451643596801', '1437100346605641729', 1, '数据简报', 0, 0, '', '', 'crm/analysis', 1),('1438582764860661761', '1435888084180017154', 2, '新增', 0, 0, '', '', 'system/user/add', 1),('1439655121285087233', '1439655885642465282', 1, '线索管理', 0, 0, '', '', 'crm/sell/lead', 1),('1439655447409000450', '1439655885642465282', 1, '客户管理', 0, 0, '', '', 'crm/sell/customer', 2),('1439655885642465282', '1437100346605641729', 1, '销售管理', 0, 0, '', '', 'crm/sell', 2),('1439657316017569793', '1439655885642465282', 1, '联系人管理', 0, 0, '', '', 'crm/sell/contact', 3),('1439658305630044162', '1439655885642465282', 1, '商机管理', 0, 0, '', '', 'crm/sell/chance', 4),('1439658668517031938', '1439655885642465282', 1, '跟进事件', 0, 0, '', '', 'crm/sell/event', 5),('1439659277127319554', '1437100346605641729', 1, '合同收款', 0, 0, '', '', 'crm/finance', 3),('1439659487991758849', '1439659277127319554', 1, '合同管理', 0, 0, '', '', 'crm/finance/contract', 1),('1439659726240808962', '1439659277127319554', 1, '收款管理', 0, 0, '', '', 'crm/finance/receipt', 2),('1439660574039670786', '1437100346605641729', 1, '高级设置', 0, 0, '', '', 'crm/setting', 4),('1439661051452129282', '1439660574039670786', 1, '公海管理', 0, 0, '', '', 'crm/setting/sea', 1),('1439661271376265218', '1439660574039670786', 1, '方案管理', 0, 0, '', '', 'crm/setting/case', 2),('1439662022483836930', '1437100346605641729', 1, '产品管理', 0, 0, '', '', 'crm/product', 5),('1441837851049459714', '0', 0, '配置管理', 0, 0, 'el-icon-s-operation', '', 'configuration', 97),('1441838088786804738', '1441837851049459714', 1, '微信公众号', 0, 0, '', '', 'configuration/wxmp', 1),('1441838660403331073', '1441838088786804738', 1, '关注回复', 0, 0, '', '', 'configuration/wxmp/subscribe', 1),('1441838957376831489', '1441838088786804738', 1, '关键词回复', 0, 0, '', '', 'configuration/wxmp/keyword', 2),('1441840060394897410', '1441838088786804738', 1, '自定义菜单', 0, 0, '', '', 'configuration/wxmp/menu', 3),('1441840799041191937', '1441837851049459714', 1, '微信小程序', 0, 0, '', '', 'configuration/wxma', 2),('1441840978024726530', '1441837851049459714', 1, '微信支付', 0, 0, '', '', 'configuration/wxpay', 3),('1441842213440192514', '0', 0, 'OA办公', 0, 0, 'el-icon-data-board', '', 'oa', 3),('1441842810377732098', '0', 0, '线上商城', 0, 0, 'el-icon-shopping-cart-1', '', 'shop', 4),('1441843159402545154', '0', 0, '企业门户', 0, 0, 'el-icon-monitor', '', 'portal', 5),('1441846243914678273', '0', 0, '个人中心', 0, 0, 'el-icon-user', '', 'profile', 1),('1441847313260871681', '1441846243914678273', 1, '个人资料', 0, 0, '', '', 'profile/info', 1),('1441847763108364289', '1441846243914678273', 1, '我的消息', 0, 0, '', '', 'profile/message', 2),('1443047248912232450', '0', 0, '系统监控', 0, 0, 'el-icon-pie-chart', '', 'analysis', 99),('1450914144412004354', '1441842213440192514', 1, '邮件', 0, 0, '', '', 'oa/email', 1),('1450914772278341634', '1441842213440192514', 1, '日程', 0, 0, '', '', 'oa/schedule', 2),('1450917567425441794', '1441842213440192514', 1, '个人办公', 0, 0, '', '', 'oa/personal', 3),('1450917931650412545', '1441842213440192514', 1, '综合办公', 0, 0, '', '', 'oa/general', 4),('1450918361222639617', '1450917567425441794', 1, '任务指派', 0, 0, '', '', 'oa/personal/job', 1),('1450919016263872514', '1450917567425441794', 1, '工作日志', 0, 0, '', '', 'oa/personal/diary', 2),('1450920388786941953', '1450917567425441794', 1, '工作汇报', 0, 0, '', '', 'oa/personal/summary', 3),('1450920708556484610', '1450917567425441794', 1, '文件柜', 0, 0, '', '', 'oa/personal/file', 4),('1450921043811397634', '1450917567425441794', 1, '通讯录', 0, 0, '', '', 'oa/personal/contacts', 5),('1450922336286175233', '1450917931650412545', 1, '信息公告', 0, 0, '', '', 'oa/general/article', 1),('1450922492532387842', '1450917931650412545', 1, '通知公告', 0, 0, '', '', 'oa/general/notice', 2),('1450922832539447298', '1450917931650412545', 1, '会议管理', 0, 0, '', '', 'oa/general/meeting', 3),('1450923256365477890', '1450917931650412545', 1, '招聘管理', 0, 0, '', '', 'oa/general/recruit', 4),('1450923526273134594', '1450917931650412545', 1, '活动中心', 0, 0, '', '', 'oa/general/activity', 5),('1450923685245644802', '1450917931650412545', 1, '调查投票', 0, 0, '', '', 'oa/general/vote', 6),('1450928383365246977', '1441842213440192514', 1, '工作流', 0, 0, '', '', 'oa/workflow', 5),('1452701266720411650', '1435888084180017888', 2, '新增', 0, 0, '', '', 'system/rule/add', 1),('1452721813176979457', '1435888084180017888', 2, '编辑', 0, 0, '', '', 'system/rule/edit', 9999),('1452721925722738689', '1435888084180017888', 2, '删除', 0, 0, '', '', 'system/rule/delete', 3),('1452795234284011521', '1435888272542015490', 2, '新增', 0, 0, '', '', 'system/groups/add', 1),('1452798823970713601', '1435888272542015490', 2, '编辑', 0, 0, '', '', 'system/groups/edit', 2),('1452991141386465281', '1435888272542015490', 2, '删除', 0, 0, '', '', 'system/groups/delete', 3),('1452993929017331713', '1435889628594053122', 2, '新增', 0, 0, '', '', 'system/position/add', 1),('1452994066204626946', '1435889628594053122', 2, '编辑', 0, 0, '', '', 'system/position/edit', 2),('1452994175176839170', '1435889628594053122', 2, '删除', 0, 0, '', '', 'system/position/delete', 3),('1453131599475417089', '1443047248912232450', 1, '服务器', 0, 0, '', '', 'analysis/server', 1),('1453720847303872513', '1443047248912232450', 1, '操作日志', 0, 0, '', '', 'analysis/logs', 2),('1454252114629947393', '1443047248912232450', 1, '请求追踪', 0, 0, '', '', 'analysis/request', 3),('1454252487738454017', '1443047248912232450', 1, 'SQL监控', 0, 0, '', '', 'analysis/sql', 4),('1455105147446300673', '1441847313260871681', 2, '编辑资料', 0, 0, '', '', 'profile/info/edit', 1),('1455399988952690690', '1435888084180017154', 2, '编辑', 0, 0, '', '', 'system/user/edit', 2),('1455400318436241410', '1435888084180017154', 2, '删除', 0, 0, '', '', 'system/user/delete', 3),('1455400682539577345', '1435888084180017154', 2, '详情', 0, 0, '', '', 'system/user/detail', 4),('1455442537478107137', '1435889208442232833', 2, '新增', 0, 0, '', '', 'system/depart/add', 1),('1459120580948131842', '1439655121285087233', 2, '新增', 0, 0, '', '', 'crm/sell/lead/add', 1),('1460078498608857090', '1439658305630044162', 2, '新增商机', 0, 0, '', '', 'crm/sell/chance/add', 1),('1460320812401012738', '1439657316017569793', 2, '新增', 0, 0, '', '', 'crm/sell/contact/add', 1),('1460485839091150850', '1439657316017569793', 2, '编辑', 0, 0, '', '', 'crm/sell/contact/edit', 2),('1460558126951694337', '1439657316017569793', 2, '删除', 0, 0, '', '', 'crm/sell/contact/delete', 3),('1460731858529927169', '1439658305630044162', 2, '编辑', 0, 0, '', '', 'crm/sell/chance/edit', 2),('1460738666493399041', '1439658305630044162', 2, '删除', 0, 0, '', '', 'crm/sell/chance/delete', 3),('1461917646428880897', '1439658668517031938', 2, '新增', 0, 0, '', '', 'crm/sell/event/add', 1),('1463339011314565122', '1439662022483836930', 2, '新增', 0, 0, '', '', 'crm/product/add', 1),('1463562237968187393', '1439662022483836930', 2, '编辑', 0, 0, '', '', 'crm/product/edit', 2),('1463562320570810370', '1439662022483836930', 2, '删除', 0, 0, '', '', 'crm/product/delete', 3),('1464002253886324738', '1439659487991758849', 2, '新增', 0, 0, '', '', 'crm/finance/contract/add', 1),('1464231436747034625', '1439659487991758849', 2, '编辑', 0, 0, '', '', 'crm/finance/contract/edit', 2),('1464231591600738305', '1439659487991758849', 2, '删除', 0, 0, '', '', 'crm/finance/contract/delete', 3),('1465351656074952706', '1435888272542015490', 2, '权限', 0, 0, '', '', 'system/groups/permission', 4),('1465353891882254338', '1435888272542015490', 2, '人员', 0, 0, '', '', 'system/groups/user', 5),('1467426333647724546', '1439655121285087233', 2, '编辑', 0, 0, '', '', 'crm/sell/lead/edit', 2),('1467426907009081346', '1439655447409000450', 2, '新增', 0, 0, '', '', 'crm/sell/customer/add', 1),('1467426965226020866', '1439655447409000450', 2, '编辑', 0, 0, '', '', 'crm/sell/customer/edit', 2),('1467427044196376577', '1439655447409000450', 2, '删除', 0, 0, '', '', 'crm/sell/customer/delete', 3),('1468965388218822658', '1439661271376265218', 2, '新增', 0, 0, '', '', 'crm/setting/case/add', 1),('1468974280826986498', '1439661271376265218', 2, '编辑', 0, 0, '', '', 'crm/setting/case/edit', 2),('1468974402017206273', '1439661271376265218', 2, '删除', 0, 0, '', '', 'crm/setting/case/delete', 3);
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_rule_api` WRITE;
DELETE FROM `nunumao`.`system_rule_api`;
INSERT INTO `nunumao`.`system_rule_api` (`id`,`rule_id`,`type`,`url`) VALUES ('1457069077436182529', '1441846243914678273', 0, '/manager/system/profile/info'),('1457568283017437185', '1435888084180017154', 0, '/manager/system/user/list'),('1465347116122554370', '1453131599475417089', 0, '/manager/system/server/info'),('1465347554720923649', '1453720847303872513', 0, '/manager/system/actionLog/list'),('1465349340542320642', '1455400682539577345', 0, '/manager/system/user/detail'),('1465349687071522817', '1455400682539577345', 0, '/manager/system/user/cityAtIp'),('1465349687071522818', '1455400682539577345', 0, '/manager/system/user/log'),('1465350370667577346', '1435888272542015490', 0, '/manager/system/groups/list'),('1465351745585594370', '1435888272542015490', 0, '/manager/system/groupsRule/list'),('1465351924858535938', '1435888272542015490', 0, '/manager/system/groupsRule/rule'),('1465353055022137345', '1435888272542015490', 0, '/manager/system/groupsRule/action'),('1465353055030525954', '1435888272542015490', 0, '/manager/system/groupsRule/dataRule'),('1465353536800866305', '1435888272542015490', 0, '/manager/system/groups/groupsUser'),('1465354480255025153', '1435888084180017888', 0, '/manager/system/rule/list'),('1465359928639143937', '1435889208442232833', 0, '/manager/system/depart/list'),('1465361393977966593', '1435889208442232833', 0, '/manager/system/departUser/list'),('1465361393977966594', '1435889208442232833', 0, '/manager/system/departRule/list'),('1465361845050208258', '1435889208442232833', 0, '/manager/system/departRule/rule'),('1465363176381018113', '1435889628594053122', 0, '/manager/system/position/list'),('1465364372915286018', '1439655121285087233', 0, '/manager/crm/lead/list'),('1465364629241786369', '1439655447409000450', 0, '/manager/crm/customer/list'),('1465364869768343553', '1439657316017569793', 0, '/manager/crm/contact/list'),('1465365187923079169', '1439658305630044162', 0, '/manager/crm/chance/list'),('1467424672267132929', '1441847763108364289', 0, '/manager/system/message/noRead'),('1467425050777903106', '1441847313260871681', 0, '/manager/system/profile/detail'),('1467425050777903107', '1441847313260871681', 0, '/manager/system/profile/log'),('1467425050777903108', '1441847313260871681', 0, '/manager/system/profile/permission'),('1467425253148876801', '1441847763108364289', 0, '/manager/system/message/list'),('1467425395667132417', '1441847763108364289', 0, '/manager/system/message/detail'),('1467429577505660930', '1439659487991758849', 0, '/manager/crm/contract/list'),('1467429777473298433', '1439659487991758849', 0, '/manager/crm/contract/detail'),('1467430162292301825', '1439658305630044162', 0, '/manager/crm/chance/detail'),('1467430322833481729', '1439658305630044162', 0, '/manager/crm/chance/signList'),('1467430533471428610', '1439658305630044162', 0, '/manager/crm/chance/eventList'),('1467430921968836609', '1439662022483836930', 0, '/manager/crm/product/categoryList'),('1467430921968836610', '1439662022483836930', 0, '/manager/crm/product/list'),('1467432087578501121', '1435889208442232833', 0, '/manager/system/departRule/action'),('1467432087578501122', '1435889208442232833', 0, '/manager/system/departRule/dataRule');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_rule_data_permission` WRITE;
DELETE FROM `nunumao`.`system_rule_data_permission`;
INSERT INTO `nunumao`.`system_rule_data_permission` (`id`,`rule_id`,`api_id`,`name`,`field`,`type`,`value`) VALUES ('1457569030924754946', '1435888084180017154', '1457568283017437185', '隐藏名称', 'name', 0, ''),('1457766397015797762', '1435888084180017154', '1457568283017437185', '手机号', 'phone', 1, '18978810172');
UNLOCK TABLES;
COMMIT;
BEGIN;
LOCK TABLES `nunumao`.`system_user` WRITE;
DELETE FROM `nunumao`.`system_user`;
INSERT INTO `nunumao`.`system_user` (`id`,`account`,`password`,`name`,`role`,`phone`,`gender`,`nick_name`,`avatar`,`email`,`id_card`,`work_no`,`position`,`birthday`,`chief`,`login_count`,`last_login_ip`,`last_login_time`,`origin`,`is_admin`,`create_time`,`update_time`,`status`) VALUES ('1', 'admin', '$2a$10$.Xs5V3XSETwCgFJ/ms.IrOBkjH2Rgoi/3UMVNYKZhYbHvvr2IHzJ2', '超级管理员', 7, '18978810172', 1, '超管', '1eec23020bb740c18e6572355b7805b9.jpg', '1837239261@qq.com', NULL, 'A8888', '', NULL, NULL, 4012, '192.168.56.1', '2021-12-10 19:40:34', NULL, 1, '2021-10-02 19:00:29', '2021-11-02 15:16:41', 1),('1452458091833524226', 'nunu', '$2a$10$/Ghy.0LOBshHbBJUfVy/TeUSfAjeQ.yf0X2/v4lhuRSfoEDGX4e3W', '努努', 7, '18866668888', 0, NULL, '1eec23020bb740c18e6572355b7805b9.jpg', '66666@qq.com', NULL, 'N9527', '1441508650605883394', '1991-04-04', NULL, 17, '192.168.56.1', '2021-12-09 15:34:28', NULL, 1, '2021-11-02 14:32:48', NULL, 1),('1455405837959884802', 'maomao', '$2a$10$s8Gbu7HPdhrsBYp2djUxUOz9Kkx9.OKUsHWDM.O4v5zczo5K9fNzm', '猫猫', 7, '18966668888', 0, NULL, '1eec23020bb740c18e6572355b7805b9.jpg', '9999@163.com', NULL, 'A9999', '1452994925684625409', '2021-11-26', NULL, 2, '192.168.56.1', '2021-11-02 15:18:21', NULL, 1, '2021-11-02 13:26:07', NULL, 1);
UNLOCK TABLES;
COMMIT;
